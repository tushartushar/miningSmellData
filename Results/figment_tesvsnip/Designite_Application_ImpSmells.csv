Implementation smell,Namespace,Class,File,Method,Description
Long Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The method has 149 lines of code.
Long Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The method has 211 lines of code.
Long Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,htmlContent_OnLinkClicked,The method has 108 lines of code.
Long Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The method has 1182 lines of code.
Long Method,TESVSnip.UI.Forms,CompressSettings,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\CompressSettings.cs,InitializeComponent,The method has 134 lines of code.
Long Method,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The method has 107 lines of code.
Long Method,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The method has 106 lines of code.
Long Method,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The method has 211 lines of code.
Long Method,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The method has 305 lines of code.
Long Method,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,bSave_Click,The method has 161 lines of code.
Long Method,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor,The method has 124 lines of code.
Long Method,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,bSave_Click,The method has 163 lines of code.
Long Method,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The method has 210 lines of code.
Long Method,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,InitializeComponent,The method has 182 lines of code.
Long Method,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,InitializeComponent,The method has 156 lines of code.
Long Method,TESVSnip.UI.Forms,HeaderEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,InitializeComponent,The method has 388 lines of code.
Long Method,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The method has 202 lines of code.
Long Method,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The method has 455 lines of code.
Long Method,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The method has 211 lines of code.
Long Method,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The method has 166 lines of code.
Long Method,TESVSnip.UI.RecordControls,RepeatingElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The method has 142 lines of code.
Long Method,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,SaveText,The method has 143 lines of code.
Long Method,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The method has 119 lines of code.
Long Method,TESVSnip.Windows.Controls,VirtualListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,WndProc,The method has 129 lines of code.
Long Method,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The method has 147 lines of code.
Long Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The method has 161 lines of code.
Long Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The method has 107 lines of code.
Long Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The method has 128 lines of code.
Long Method,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The method has 147 lines of code.
Long Method,TESVSnip.UI.ObjectControls,RecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The method has 179 lines of code.
Long Method,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,contextMenuRecord_Opening,The method has 103 lines of code.
Long Method,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The method has 292 lines of code.
Long Method,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,BackgroundIncrementalSearch,The method has 114 lines of code.
Long Method,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The method has 205 lines of code.
Long Method,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,UpdateSearchList,The method has 112 lines of code.
Long Method,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The method has 269 lines of code.
Long Method,TESVSnip.UI.ObjectControls,SubrecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The method has 149 lines of code.
Long Method,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeComponent,The method has 177 lines of code.
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,Cyclomatic complexity of the method is 13
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanEspToolStripMenuItem_Click,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanRecurse2,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,compileAllToolStripMenuItem_Click,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,compileScriptToolStripMenuItem_Click,Cyclomatic complexity of the method is 11
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,Cyclomatic complexity of the method is 37
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,importStringsToFileToolStripMenuItem_Click,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,martigensToolStripMenuItem_Click,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,PreFilterMessage,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,GetRecordFilter,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,htmlContent_OnLinkClicked,Cyclomatic complexity of the method is 14
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,searchToolStripMenuItem_Click,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,openListToolStripMenuItem_Click,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,editScriptsToolStripMenuItem_DropDownItemClicked,Cyclomatic complexity of the method is 11
Complex Method,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,EditRecords,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,GetAssignmentType,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,Cyclomatic complexity of the method is 36
Complex Method,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,CheckBox_CheckedChanged,Cyclomatic complexity of the method is 11
Complex Method,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,bSave_Click,Cyclomatic complexity of the method is 26
Complex Method,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor,Cyclomatic complexity of the method is 14
Complex Method,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,bSave_Click,Cyclomatic complexity of the method is 34
Complex Method,TESVSnip.UI.Forms,RecursiveRecordIterator,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MainView.Search.cs,MoveNext,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.UI.Forms,HeaderEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,HexValidCheck,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,Cyclomatic complexity of the method is 12
Complex Method,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,Cyclomatic complexity of the method is 19
Complex Method,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,AddFile,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,Process,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,Cyclomatic complexity of the method is 35
Complex Method,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,CreateSubrecords,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,MergeRecord,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI.RecordControls,OptionsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,UpdateAllControls,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.RecordControls,OptionsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,cboOptions_SelectedIndexChanged,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,SaveText,Cyclomatic complexity of the method is 22
Complex Method,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,Cyclomatic complexity of the method is 21
Complex Method,TESVSnip.Windows.Controls,BindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_CustomSort,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.Windows.Controls,ColumnPropertyDescriptor<T;TResult>,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,GetValue,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.Windows.Controls,ColumnPropertyDescriptor<T;TResult>,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,GetValue,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FitRectOnDesktop,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.Windows.Controls,VirtualListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,OnDispInfoNotice,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.Windows.Controls,VirtualListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,WndProc,Cyclomatic complexity of the method is 20
Complex Method,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,_vScrollBar_Scroll,Cyclomatic complexity of the method is 12
Complex Method,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,Cyclomatic complexity of the method is 18
Complex Method,Be.Windows.Forms,KeyInterpreter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PreProcessWmKeyDown,Cyclomatic complexity of the method is 21
Complex Method,Be.Windows.Forms,KeyInterpreter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PreProcessWmChar,Cyclomatic complexity of the method is 12
Complex Method,Be.Windows.Forms,StringKeyInterpreter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PreProcessWmChar,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,CellEditKeyEngine,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleKey,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,CellEditKeyEngine,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleColumnChange,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CalculateDropTarget,Cyclomatic complexity of the method is 10
Complex Method,BrightIdeasSoftware,FilterMenuBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Filtering\FilterMenuBuilder.cs,HandleSelectAllItem,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeGroups,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,BuildList,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,GetNextItem,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,GetPreviousItem,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InsertObjects,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,WndProc,Cyclomatic complexity of the method is 31
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleChar,Cyclomatic complexity of the method is 14
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,Cyclomatic complexity of the method is 22
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ProcessLButtonDown,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,Cyclomatic complexity of the method is 16
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,Cyclomatic complexity of the method is 21
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeColumnCommandMenu,Cyclomatic complexity of the method is 13
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ResizeFreeSpaceFillingColumns,Cyclomatic complexity of the method is 10
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,DoSort,Cyclomatic complexity of the method is 13
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,FillInValues,Cyclomatic complexity of the method is 10
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,UpdateHotItem,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ApplyRowStyle,Cyclomatic complexity of the method is 13
Complex Method,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,DrawAllDecorations,Cyclomatic complexity of the method is 15
Complex Method,BrightIdeasSoftware,TreeListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,OnKeyDown,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,OLVGroup,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Groups.cs,AsNativeGroup,Cyclomatic complexity of the method is 11
Complex Method,BrightIdeasSoftware,SimpleMunger,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Munger.cs,ResolveName,Cyclomatic complexity of the method is 10
Complex Method,BrightIdeasSoftware,FastListGroupingStrategy,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\VirtualGroups.cs,GetGroups,Cyclomatic complexity of the method is 10
Complex Method,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawImage,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,CheckStateRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetCheckBoxState,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ImageRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetImageFromAspect,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ImageRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,OnTimerInThread,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,GlassPanelForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,Bind,Cyclomatic complexity of the method is 11
Complex Method,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,WndProc,Cyclomatic complexity of the method is 10
Complex Method,BrightIdeasSoftware,ToolTipControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,ApplyEventFormatting,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ToolTipControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,HandleReflectNotify,Cyclomatic complexity of the method is 8
Complex Method,RichTextBoxLinks,RichTextBoxEx,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PasteFromClipboard,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_KeyDown,Cyclomatic complexity of the method is 16
Complex Method,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_ModelCanDrop,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_ModelDropped,Cyclomatic complexity of the method is 15
Complex Method,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,contextMenuRecord_Opening,Cyclomatic complexity of the method is 17
Complex Method,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,BackgroundIncrementalSearch,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,Cyclomatic complexity of the method is 14
Complex Method,TESVSnip.UI.ObjectControls,SubrecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,Save,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI.ObjectControls,SubrecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,Cyclomatic complexity of the method is 17
Complex Method,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,EditSelectedSubrecord,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,toolStripInsertRecord_DropDownOpening,Cyclomatic complexity of the method is 10
Long Parameter List,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,IncrementalSearch,The method has 5 parameters. Parameters: tn' first' forward' wrapAround' searchFunc
Long Parameter List,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,MediumLevelRecordEditor,The method has 5 parameters. Parameters: sr' ss' formIDLookup' formIDScan' strIDLookup
Long Parameter List,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The method has 5 parameters. Parameters: es' offset' data' groupOffset' CurrentGroup
Long Parameter List,TESVSnip.UI.Forms,lTag,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,lTag,The method has 5 parameters. Parameters: id' disp' data' offset' isString
Long Parameter List,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,MruStripMenu,The method has 5 parameters. Parameters: recentFileMenuItem' clickedHandler' registryKeyName' loadFromRegistry' maxEntries
Long Parameter List,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,Init,The method has 5 parameters. Parameters: recentFileMenuItem' clickedHandler' registryKeyName' loadFromRegistry' maxEntries
Long Parameter List,JWC,MruStripMenuInline,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,MruStripMenuInline,The method has 5 parameters. Parameters: owningMenu' recentFileMenuItem' clickedHandler' registryKeyName' maxEntries
Long Parameter List,JWC,MruStripMenuInline,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,MruStripMenuInline,The method has 5 parameters. Parameters: owningMenu' recentFileMenuItem' clickedHandler' registryKeyName' loadFromRegistry
Long Parameter List,JWC,MruStripMenuInline,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,MruStripMenuInline,The method has 6 parameters. Parameters: owningMenu' recentFileMenuItem' clickedHandler' registryKeyName' loadFromRegistry' maxEntries
Long Parameter List,TESVSnip.Windows.Controls,BindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,AddBindingColumn,The method has 5 parameters. Parameters: PropertyName' DisplayName' width' textAlign' transform
Long Parameter List,TESVSnip.Windows.Controls,BindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,AddBindingColumn,The method has 5 parameters. Parameters: PropertyName' DisplayName' width' textAlign' transform
Long Parameter List,TESVSnip.Windows.Controls,ObjectBindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\objectbindinglistview.cs,AddBindingColumn,The method has 5 parameters. Parameters: PropertyName' DisplayName' width' textAlign' transform
Long Parameter List,TESVSnip.Windows.Controls,ObjectBindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\objectbindinglistview.cs,AddBindingColumn,The method has 5 parameters. Parameters: PropertyName' DisplayName' width' textAlign' transform
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' flags
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,BitBlt,The method has 9 parameters. Parameters: hDC' x' y' nWidth' nHeight' hSrcDC' xSrc' ySrc' dwRop
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,DrawText,The method has 5 parameters. Parameters: hDC' lpszString' nCount' lpRect' nFormat
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,Rectangle,The method has 5 parameters. Parameters: hdc' left' top' right' bottom
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,RoundRect,The method has 7 parameters. Parameters: hDC' left' top' right' bottom' width' height
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' flags
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndNext' X' Y' cx' cy' uFlags
Long Parameter List,TESVSnip.Windows.Controls,PopupControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,Show,The method has 6 parameters. Parameters: control' x' y' width' height' resizeMode
Long Parameter List,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintHexStringSelected,The method has 5 parameters. Parameters: g' b' brush' brushBack' gridPoint
Long Parameter List,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The method has 5 parameters. Parameters: g' x1' y1' x2' y2
Long Parameter List,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,BuildGroups,The method has 6 parameters. Parameters: groupByColumn' groupByOrder' column' order' secondaryColumn' secondaryOrder
Long Parameter List,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CollectGroupingParameters,The method has 6 parameters. Parameters: groupByColumn' groupByOrder' column' order' secondaryColumn' secondaryOrder
Long Parameter List,BrightIdeasSoftware,CellEditEventArgs,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,CellEditEventArgs,The method has 5 parameters. Parameters: column' control' r' item' subItemIndex
Long Parameter List,BrightIdeasSoftware,BeforeSortingEventArgs,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,BeforeSortingEventArgs,The method has 6 parameters. Parameters: groupColumn' groupOrder' column' order' column2' order2
Long Parameter List,BrightIdeasSoftware,AfterSortingEventArgs,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,AfterSortingEventArgs,The method has 6 parameters. Parameters: groupColumn' groupOrder' column' order' column2' order2
Long Parameter List,BrightIdeasSoftware,SubItemCheckingEventArgs,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,SubItemCheckingEventArgs,The method has 5 parameters. Parameters: column' item' subItemIndex' currentValue' newValue
Long Parameter List,BrightIdeasSoftware,GroupingParameters,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\GroupingParameters.cs,GroupingParameters,The method has 10 parameters. Parameters: olv' groupByColumn' groupByOrder' column' order' secondaryColumn' secondaryOrder' titleFormat' titleSingularFormat' sortItemsByPrimaryColumn
Long Parameter List,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,ImageList_Draw,The method has 6 parameters. Parameters: himl' i' hdcDst' x' y' fStyle
Long Parameter List,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' X' Y' cx' cy' uFlags
Long Parameter List,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SetBackgroundImage,The method has 6 parameters. Parameters: lv' image' isWatermark' isTiled' xOffset' yOffset
Long Parameter List,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,DrawImageList,The method has 6 parameters. Parameters: g' il' index' x' y' isSelected
Long Parameter List,BrightIdeasSoftware,AbstractVirtualListDataSource,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\VirtualListDataSource.cs,DefaultSearchText,The method has 5 parameters. Parameters: value' first' last' column' source
Long Parameter List,BrightIdeasSoftware,OLVColumn,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\OLVColumn.cs,MakeGroupies,The method has 5 parameters. Parameters: values' descriptions' images' subtitles' tasks
Long Parameter List,BrightIdeasSoftware,OLVColumn,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\OLVColumn.cs,MakeEqualGroupies,The method has 5 parameters. Parameters: values' descriptions' images' subtitles' tasks
Long Parameter List,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CreateAlignedRectangle,The method has 5 parameters. Parameters: r' sz' corner' referenceCorner' offset
Long Parameter List,BrightIdeasSoftware,ImageAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawImage,The method has 5 parameters. Parameters: g' r' image' sz' transparency
Long Parameter List,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,StandardHitTest,The method has 5 parameters. Parameters: g' hti' bounds' x' y
Long Parameter List,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawSubstringFrame,The method has 5 parameters. Parameters: g' x' y' width' height
Long Parameter List,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The method has 5 parameters. Parameters: x' y' width' height' diameter
Long Parameter List,BrightIdeasSoftware,BarRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,BarRenderer,The method has 5 parameters. Parameters: minimum' maximum' pen' start' end
Long Parameter List,BrightIdeasSoftware,DescribedTaskRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawDescribedTask,The method has 5 parameters. Parameters: g' r' title' description' image
Long Parameter List,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The method has 5 parameters. Parameters: g' column' flags' isHot' i
Long Parameter List,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedBackground,The method has 5 parameters. Parameters: g' r' columnIndex' isSelected' stateStyle
Long Parameter List,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawText,The method has 6 parameters. Parameters: g' r' column' flags' f' color
Long Parameter List,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawImageAndText,The method has 7 parameters. Parameters: g' r' column' flags' f' color' imageTextGap
Long Parameter List,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawVerticalText,The method has 5 parameters. Parameters: g' r' column' f' color
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the parameter dockPaneStripToolWindowGradient1 is 32.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter openNewPluginToolStripMenuItem is 30.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter insertSubrecordToolStripMenuItem is 32.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter findDuplicatedFormIDToolStripMenuItem is 37.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter useNewSubrecordEditorToolStripMenuItem is 38.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter lookupFormidsToolStripMenuItem is 30.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter findNonconformingRecordToolStripMenuItem is 40.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter generateLLXmlToolStripMenuItem is 30.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter reorderSubrecordsToolStripMenuItem is 34.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter createRecordStructureXmlToolStripMenuItem is 41.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter mergeRecordsXMLToolStripMenuItem is 32.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter eSMFilterSettingsToolStripMenuItem is 34.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter toolStripIncrInvalidRecRestart is 30.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter toolStripIncrInvalidRecWrapAround is 33.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter useWindowsClipboardToolStripMenuItem is 36.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter noWindowsSoundsToolStripMenuItem is 32.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter reloadStringsToolStripMenuItem is 30.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter saveStringsFilesToolStripMenuItem is 33.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter expandCollapseToolStripMenuItem is 31.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter collapseBranchToolStripMenuItem is 31.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter resetDockingWindowsToolStripMenuItem is 36.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter compressionSettingsToolStripMenuItem is 36.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter findInRecordsToolStripMenuItem is 30.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter searchAdvancedToolStripMenuItem is 31.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter extractInternalStringsToTableToolStripMenuItem is 46.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter copyReferencedStringsFromMastersToolStripMenuItem is 49.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter cleanUnusedStringsToolStripMenuItem is 35.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter createStubsForMissingStringsToolStripMenuItem is 45.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter exportStringsToFileToolStripMenuItem is 36.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter importStringsToFileToolStripMenuItem is 36.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter internalizeStringReferencesToolStripMenuItem is 44.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter newFormIDNoReferenceUpdateToolStripMenuItem is 43.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter resetSettingsToDefaultsToolStripMenuItem is 40.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter reduceFormVersionsTo40ToolStripMenuItem is 39.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter globalScriptsToolStripMenuItem is 30.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter selectionScriptsToolStripMenuItem is 33.
Long Identifier,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,,The length of the parameter defaultGameSettingsToolStripMenuItem is 36.
Long Identifier,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,,The length of the parameter dockAsTabbedDocumentToolStripMenuItem is 37.
Long Identifier,TESVSnip.UI.RecordControls,RepeatingElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,,The length of the parameter bindingNavigatorMovePreviousItem is 32.
Long Identifier,BrightIdeasSoftware,ClusteringStrategy,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Filtering\ClusteringStrategy.cs,,The length of the parameter defaultDisplayLabelFormatSingular is 33.
Long Identifier,BrightIdeasSoftware,ClusteringStrategy,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Filtering\ClusteringStrategy.cs,,The length of the parameter defaultDisplayLabelFormatPural is 30.
Long Identifier,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleChar,The length of the parameter MILLISECONDS_BETWEEN_KEYPRESSES is 31.
Long Identifier,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,,The length of the parameter copySelectionOnControlCUsesDragSource is 37.
Long Identifier,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,,The length of the parameter selectColumnsOnRightClickBehaviour is 34.
Long Identifier,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,,The length of the parameter updateSpaceFillingColumnsWhenDraggingColumnDivider is 50.
Long Identifier,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,,The length of the parameter unfocusedHighlightBackgroundColor is 33.
Long Identifier,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,,The length of the parameter unfocusedHighlightForegroundColor is 33.
Long Identifier,BrightIdeasSoftware,OLVColumn,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\OLVColumn.cs,,The length of the parameter cachedGroupWithItemCountFormat is 30.
Long Identifier,BrightIdeasSoftware,OLVColumn,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\OLVColumn.cs,,The length of the parameter groupWithItemCountSingularFormat is 32.
Long Identifier,BrightIdeasSoftware,OLVColumn,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\OLVColumn.cs,,The length of the parameter cachedGroupWithItemCountSingularFormat is 38.
Long Identifier,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,,The length of the parameter referenceSearchToolStripMenuItem is 32.
Long Statement,TESVSnip.UI.Services,Options,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Services\Options.cs,SetupGameDirectory,The length of the statement  "                string msg = "Options.SetupGameDirectory" + Environment.NewLine + "Message: " + ex.Message + Environment.NewLine + "StackTrace: " + ex.StackTrace; " is 146.
Long Statement,TESVSnip.UI.Services,Settings,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Services\Settings.cs,GetWindowPosition,The length of the statement  "                f.Location = new Point(int.Parse(xe.Attributes.GetNamedItem("left").Value)' int.Parse(xe.Attributes.GetNamedItem("top").Value)); " is 128.
Long Statement,TESVSnip.UI.Services,Settings,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Services\Settings.cs,GetWindowPosition,The length of the statement  "                f.ClientSize = new Size(int.Parse(xe.Attributes.GetNamedItem("width").Value)' int.Parse(xe.Attributes.GetNamedItem("height").Value)); " is 133.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeToolStripFind,The length of the statement  "                    new ComboHelper<SearchType' string>(SearchType.EditorID' "Editor ID")' new ComboHelper<SearchType' string>(SearchType.FormID' "Form ID")'  " is 137.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeToolStripFind,The length of the statement  "                    new ComboHelper<SearchType' string>(SearchType.FullSearch' "Full Search")' new ComboHelper<SearchType' string>(SearchType.TypeEditorIdSearch' "Name w/Type")'  " is 157.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeToolStripFind,The length of the statement  "                    new ComboHelper<SearchType' string>(SearchType.TypeFullSearch' "Full w/Type")' new ComboHelper<SearchType' string>(SearchType.FormIDRef' "Form ID Ref.")'  " is 153.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The length of the statement  "                            (from sr in rec.SubRecords from elem in rec.EnumerateElements(sr) let es = elem.Structure where es != null && es.type == ElementValueType.FormID select elem).Any( " is 162.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,giveSelectionNewFormID,The length of the statement  "                this.SendStatusText(string.Format("Changed {0} FormID's and updated {1} references"' formCount' refCount)' SystemColors.ControlText); " is 133.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanEspToolStripMenuItem_Click,The length of the statement  "            if (MessageBox.Show(@"This may delete records from the esp. Are you sure you wish to continue?"' @"Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes) " is 154.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanRecurse2,The length of the statement  "                    if (r2.Name == r3.Name && r2.Size == r3.Size && r2.SubRecords.Count == r3.SubRecords.Count && r2.Flags1 == r3.Flags1 && r2.Flags2 == r3.Flags2 && r2.Flags3 == r3.Flags3) " is 169.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,compileAllToolStripMenuItem_Click,The length of the statement  "                                        thingy += r.DescriptiveName + Environment.NewLine + "Size changed from " + size + " to " + sr.Size + Environment.NewLine + Environment.NewLine; " is 143.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,compileScriptToolStripMenuItem_Click,The length of the statement  "                        while (i < srs.Count && (srs[i].Name == "SCTX" || srs[i].Name == "SLSD" || srs[i].Name == "SCVR" || srs[i].Name == "SCRO" || srs[i].Name == "SCRV")) " is 148.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,copyReferencedStringsFromMastersToolStripMenuItem_Click,The length of the statement  "                MessageBox.Show("Plugin does not have any Masters. Use 'Add Masters...' to add references before running."' Resources.ErrorText); " is 129.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,exportStringsToFileToolStripMenuItem_Click,The length of the statement  "                                           plugin.DLStrings.Select(x => new LocalizedString {ID = x.Key' Type = LocalizedStringFormat.DL' Value = x.Value})).Union( " is 120.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,exportStringsToFileToolStripMenuItem_Click,The length of the statement  "                                               plugin.ILStrings.Select(x => new LocalizedString {ID = x.Key' Type = LocalizedStringFormat.IL' Value = x.Value})).ToArray() " is 123.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,exportStringsToFileToolStripMenuItem_Click,The length of the statement  "                dlg.FileName = string.Format("{0}_{1}.xml"' Path.GetFileNameWithoutExtension(plugin.Name)' TESVSnip.Domain.Properties.Settings.Default.LocalizationName); " is 153.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,findDuplicatedFormIDToolStripMenuItem_Click,The length of the statement  "                    this.SendStatusText(string.Format("Record FormID duplicates {0}"' ids[record.FormID].DescriptiveName)' Color.OrangeRed); " is 120.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The length of the statement  "                                        "      <LVLO level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" + (formid & 0xffffff).ToString("X6") + "\" count=\"" " is 131.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The length of the statement  "                                        "      <LVLO level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" + (formid & 0xffffff).ToString("X6") + "\" count=\"" " is 131.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The length of the statement  "                                        "      <LVLO level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" + (formid & 0xffffff).ToString("X6") + "\" count=\"" " is 131.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,importStringsToFileToolStripMenuItem_Click,The length of the statement  "                    dlg.FileName = string.Format("{0}_{1}.xml"' Path.GetFileNameWithoutExtension(plugin.Name)' TESVSnip.Domain.Properties.Settings.Default.LocalizationName); " is 153.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,internalizeStringReferencesToolStripMenuItem_Click,The length of the statement  "                MessageBox.Show("Plugin does not have any Masters. Use 'Add Masters...' to add references before running."' Resources.ErrorText); " is 129.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,reorderSubrecordsToolStripMenuItem_Click,The length of the statement  "            var records = this.PluginTree.SelectedRecords.SelectMany(rec => rec.Enumerate(x => true).OfType<Record>().Distinct()).ToList(); " is 127.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,saveStringsToolStripMenuItem_Click,The length of the statement  "                dlg.FileName = string.Format("{0}_{1}.STRINGS"' Path.GetFileNameWithoutExtension(plugin.Name)' Domain.Properties.Settings.Default.LocalizationName); " is 148.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,stripEDIDsToolStripMenuItem_Click,The length of the statement  "            if (MessageBox.Show(Resources.GeneralSpellWarningInquiry' Resources.WarningText' MessageBoxButtons.YesNo) != DialogResult.Yes) " is 126.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,reduceFormVersionTo40ToolStripMenuItem_Click,The length of the statement  "                this.SendStatusText(TranslateUI.TranslateUiGlobalization.ResManager.GetString("TESSNIP_Spell_ReduceFormVersionTo40Aborted")' Color.Red); " is 136.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,reduceFormVersionTo40ToolStripMenuItem_Click,The length of the statement  "                this.SendStatusText(string.Format(TranslateUI.TranslateUiGlobalization.ResManager.GetString("TESSNIP_Spell_ReduceFormVersionTo40Cleaned")' count)' Color.DarkGreen); " is 164.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,reduceFormVersionTo40ToolStripMenuItem_Click,The length of the statement  "                this.SendStatusText(TranslateUI.TranslateUiGlobalization.ResManager.GetString("TESSNIP_Spell_NoFormVersionGreater40")' Color.OrangeRed); " is 136.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainView)); " is 128.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            WeifenLuo.WinFormsUI.Docking.AutoHideStripSkin autoHideStripSkin1 = new WeifenLuo.WinFormsUI.Docking.AutoHideStripSkin(); " is 121.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            WeifenLuo.WinFormsUI.Docking.DockPanelGradient dockPanelGradient1 = new WeifenLuo.WinFormsUI.Docking.DockPanelGradient(); " is 121.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            WeifenLuo.WinFormsUI.Docking.DockPaneStripSkin dockPaneStripSkin1 = new WeifenLuo.WinFormsUI.Docking.DockPaneStripSkin(); " is 121.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            WeifenLuo.WinFormsUI.Docking.DockPaneStripGradient dockPaneStripGradient1 = new WeifenLuo.WinFormsUI.Docking.DockPaneStripGradient(); " is 133.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            WeifenLuo.WinFormsUI.Docking.DockPanelGradient dockPanelGradient2 = new WeifenLuo.WinFormsUI.Docking.DockPanelGradient(); " is 121.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            WeifenLuo.WinFormsUI.Docking.DockPaneStripToolWindowGradient dockPaneStripToolWindowGradient1 = new WeifenLuo.WinFormsUI.Docking.DockPaneStripToolWindowGradient(); " is 163.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            WeifenLuo.WinFormsUI.Docking.DockPanelGradient dockPanelGradient3 = new WeifenLuo.WinFormsUI.Docking.DockPanelGradient(); " is 121.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.useNewSubrecordEditorToolStripMenuItem.Click += new System.EventHandler(this.useNewSubrecordEditorToolStripMenuItem_Click); " is 128.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.useWindowsClipboardToolStripMenuItem.Click += new System.EventHandler(this.useWindowsClipboardToolStripMenuItem_Click); " is 124.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.resetDockingWindowsToolStripMenuItem.Click += new System.EventHandler(this.resetDockingWindowsToolStripMenuItem_Click); " is 124.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.eSMFilterSettingsToolStripMenuItem.Click += new System.EventHandler(this.eSMFilterSettingsToolStripMenuItem_Click); " is 120.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.compressionSettingsToolStripMenuItem.Click += new System.EventHandler(this.compressionSettingsToolStripMenuItem_Click); " is 124.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.resetSettingsToDefaultsToolStripMenuItem.Click += new System.EventHandler(this.resetSettingsToDefaultsToolStripMenuItem_Click); " is 132.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.languageToolStripMenuItem.DropDownOpening += new System.EventHandler(this.languageToolStripMenuItem_DropDownOpening); " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.languageToolStripMenuItem.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(this.languageToolStripMenuItem_DropDownItemClicked); " is 164.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            resources.ApplyResources(this.internalizeStringReferencesToolStripMenuItem' "internalizeStringReferencesToolStripMenuItem"); " is 124.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.internalizeStringReferencesToolStripMenuItem.Click += new System.EventHandler(this.internalizeStringReferencesToolStripMenuItem_Click); " is 140.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            resources.ApplyResources(this.extractInternalStringsToTableToolStripMenuItem' "extractInternalStringsToTableToolStripMenuItem"); " is 128.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.extractInternalStringsToTableToolStripMenuItem.Click += new System.EventHandler(this.extractInternalStringsToTableToolStripMenuItem_Click); " is 144.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            resources.ApplyResources(this.copyReferencedStringsFromMastersToolStripMenuItem' "copyReferencedStringsFromMastersToolStripMenuItem"); " is 134.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.copyReferencedStringsFromMastersToolStripMenuItem.Click += new System.EventHandler(this.copyReferencedStringsFromMastersToolStripMenuItem_Click); " is 150.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.cleanUnusedStringsToolStripMenuItem.Click += new System.EventHandler(this.cleanUnusedStringsToolStripMenuItem_Click); " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            resources.ApplyResources(this.createStubsForMissingStringsToolStripMenuItem' "createStubsForMissingStringsToolStripMenuItem"); " is 126.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.createStubsForMissingStringsToolStripMenuItem.Click += new System.EventHandler(this.createStubsForMissingStringsToolStripMenuItem_Click); " is 142.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.exportStringsToFileToolStripMenuItem.Click += new System.EventHandler(this.exportStringsToFileToolStripMenuItem_Click); " is 124.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.importStringsToFileToolStripMenuItem.Click += new System.EventHandler(this.importStringsToFileToolStripMenuItem_Click); " is 124.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.findDuplicatedFormIDToolStripMenuItem.Click += new System.EventHandler(this.findDuplicatedFormIDToolStripMenuItem_Click); " is 126.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.findNonconformingRecordToolStripMenuItem.Click += new System.EventHandler(this.findNonconformingRecordToolStripMenuItem_Click); " is 132.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.createRecordStructureXmlToolStripMenuItem.Click += new System.EventHandler(this.createRecordStructureXmlToolStripMenuItem_Click); " is 134.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.reorderSubrecordsToolStripMenuItem.Click += new System.EventHandler(this.reorderSubrecordsToolStripMenuItem_Click); " is 120.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            resources.ApplyResources(this.newFormIDNoReferenceUpdateToolStripMenuItem' "newFormIDNoReferenceUpdateToolStripMenuItem"); " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.newFormIDNoReferenceUpdateToolStripMenuItem.Click += new System.EventHandler(this.newFormIDNoReferenceUpdateToolStripMenuItem_Click); " is 138.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.reduceFormVersionsTo40ToolStripMenuItem.Click += new System.EventHandler(this.reduceFormVersionTo40ToolStripMenuItem_Click); " is 129.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.scriptsToolStripMenuItem.DropDownOpening += new System.EventHandler(this.scriptsToolStripMenuItem_DropDownOpening); " is 120.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.globalScriptsToolStripMenuItem.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(this.globalScriptsToolStripMenuItem_DropDownItemClicked); " is 174.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.selectionScriptsToolStripMenuItem.DropDownOpening += new System.EventHandler(this.selectionScriptsToolStripMenuItem_DropDownOpening); " is 138.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.selectionScriptsToolStripMenuItem.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(this.selectionScriptsToolStripMenuItem_DropDownItemClicked); " is 180.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.editScriptsToolStripMenuItem.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(this.editScriptsToolStripMenuItem_DropDownItemClicked); " is 170.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.backgroundWorker1.ProgressChanged += new System.ComponentModel.ProgressChangedEventHandler(this.backgroundWorker1_ProgressChanged); " is 136.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.backgroundWorker1.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.backgroundWorker1_RunWorkerCompleted); " is 145.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.toolStripIncrFindTypeFilter.SelectedIndexChanged += new System.EventHandler(this.toolStripIncrFindTypeFilter_SelectedIndexChanged); " is 136.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.toolStripIncrFindTypeFilter.VisibleChanged += new System.EventHandler(this.toolStripIncrFindTypeFilter_VisibleChanged); " is 124.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.toolStripIncrFindType.SelectedIndexChanged += new System.EventHandler(this.toolStripIncrFindType_SelectedIndexChanged); " is 124.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.toolStripIncrInvalidRec.ItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(this.toolStripIncrInvalidRec_ItemClicked); " is 144.
Long Statement,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "            this.toolStripIncrInvalidRecWrapAround.CheckStateChanged += new System.EventHandler(this.toolStripCheck_CheckStateChanged); " is 123.
Long Statement,TESVSnip.UI.Forms,AddMasterForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\AddMasterForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AddMasterForm)); " is 133.
Long Statement,TESVSnip.UI.Forms,CompressSettings,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\CompressSettings.cs,LoadSettings_Load,The length of the statement  "            this.txtCompressLimit.Text = Domain.Properties.Settings.Default.CompressionLimit.ToString(CultureInfo.InvariantCulture); " is 120.
Long Statement,TESVSnip.UI.Forms,CompressSettings,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\CompressSettings.cs,btnOk_Click,The length of the statement  "            Domain.Properties.Settings.Default.AutoCompressRecords = string.Join(";"' this.listRecordFilter.CheckedItems.Cast<string>().ToArray()); " is 135.
Long Statement,TESVSnip.UI.Forms,CompressSettings,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\CompressSettings.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CompressSettings)); " is 136.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,ConfigureRecords,The length of the statement  "                           let children = sr.elements.Select(se => new BatchElement() { Name = se.name' Parent = null' Record = se' Type = BatchCondElementType.Set' Checked = false }).ToList() " is 165.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,ConfigureRecords,The length of the statement  "                           select new BatchSubrecord() { Name = string.Format("{0}: {1}"' sr.name' sr.desc)' Record = sr' Children = children' Checked = false' }).ToList(); " is 145.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,ApplySettings,The length of the statement  "                MessageBox.Show(this' "No record was selected."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 139.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,ApplySettings,The length of the statement  "                    MessageBox.Show(this' "No Batch criteria was selected."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 147.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeTreeList,The length of the statement  "                    AspectGetter = x => (x is BatchSubrecord) ? (object)((BatchSubrecord)x).Type : (x is BatchElement) ? (object)((BatchElement)x).Type : null'  " is 139.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,filterTree_SizeChanged,The length of the statement  "                    col.Width = this.filterTree.Width - width + col.Width - SystemInformation.VerticalScrollBarWidth - SystemInformation.FrameBorderSize.Width; " is 139.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The length of the statement  "            this.bCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The length of the statement  "            this.filterTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 146.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The length of the statement  "            this.filterTree.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 166.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The length of the statement  "            this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))); " is 162.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The length of the statement  "            this.bApply.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,TESVSnip.UI.Forms,InputBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\InputBox.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(InputBox)); " is 128.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,ConfigureRecord,The length of the statement  "                           let children = sr.elements.Select(se => new ColumnElement() { Checked = false' Name = se.name' Parent = null' Record = se }).ToList() " is 133.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,ConfigureRecord,The length of the statement  "                           select new ColumnSubrecord() { Name = string.Format("{0}: {1}"' sr.name' sr.desc)' Checked = false' Record = sr' Children = children }).ToList(); " is 145.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,ApplySettings,The length of the statement  "                MessageBox.Show(this' "No record was selected."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 139.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,ApplySettings,The length of the statement  "                    MessageBox.Show(this' "No Column criteria was selected."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 148.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,filterTree_SizeChanged,The length of the statement  "                    col.Width = this.filterTree.Width - width + col.Width - SystemInformation.VerticalScrollBarWidth - SystemInformation.FrameBorderSize.Width; " is 139.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The length of the statement  "            this.bCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The length of the statement  "            this.filterTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 146.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The length of the statement  "            this.filterTree.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 166.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The length of the statement  "            this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))); " is 162.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The length of the statement  "            this.bApply.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,ConfigureRecord,The length of the statement  "                           let children = sr.elements.Select(se => new SearchElement() { Name = se.name' Parent = null' Record = se' Type = SearchCondElementType.Exists' Checked = false }).ToList() " is 170.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,ConfigureRecord,The length of the statement  "                           select new SearchSubrecord() { Name = string.Format("{0}: {1}"' sr.name' sr.desc)' Checked = false' Record = sr' Children = children }).ToList(); " is 145.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,ApplySettings,The length of the statement  "                MessageBox.Show(this' "No record was selected."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 139.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,ApplySettings,The length of the statement  "                    MessageBox.Show(this' "No search criteria was selected."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 148.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComboBox,The length of the statement  "                domain.Records.Values.Select(x => new ComboBoxItem<RecordStructure> { Name = string.Format("{0}: {1}"' x.name' x.description)' Value = x }) " is 139.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeTreeList,The length of the statement  "                    AspectGetter = x => (x is SearchSubrecord) ? (object)((SearchSubrecord)x).Type : (x is SearchElement) ? (object)((SearchElement)x).Type : null'  " is 143.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,LoadSearches,The length of the statement  "                var configFile = Path.Combine(Path.GetDirectoryName(Application.ExecutablePath)' Path.Combine("conf"' "SearchSettings.xml")); " is 125.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,SaveSearches,The length of the statement  "                var configFile = Path.Combine(Path.GetDirectoryName(Application.ExecutablePath)' Path.Combine("conf"' "SearchSettings.xml")); " is 125.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,filterTree_SizeChanged,The length of the statement  "                    col.Width = this.filterTree.Width - width + col.Width - SystemInformation.VerticalScrollBarWidth - SystemInformation.FrameBorderSize.Width; " is 139.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "            this.bSave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "            this.bCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "            this.cboRecordType.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 146.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "            this.cboRecordType.Font = new System.Drawing.Font("Lucida Console"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 157.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "            this.bApply.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "            this.cboSavedSearches.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 149.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "            this.btnRemoveSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "            this.btnAddSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "            this.filterTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 146.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "            this.filterTree.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 166.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "            this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))); " is 162.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "            this.filterTree.ItemsChanging += new System.EventHandler<BrightIdeasSoftware.ItemsChangingEventArgs>(this.filterTree_ItemsChanging); " is 132.
Long Statement,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The length of the statement  "                if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) " is 156.
Long Statement,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MediumLevelRecordEditor)); " is 143.
Long Statement,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(NewMediumLevelRecordEditor)); " is 146.
Long Statement,TESVSnip.UI.Forms,LoadSettings,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\LoadSettings.cs,LoadSettings_Load,The length of the statement  "            var records = Settings.Default.FilteredESMRecords != null ? Settings.Default.FilteredESMRecords.Trim().Split(new[] { ';'' ''' }' StringSplitOptions.RemoveEmptyEntries) : new string[0]; " is 184.
Long Statement,TESVSnip.UI.Forms,LoadSettings,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\LoadSettings.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LoadSettings)); " is 132.
Long Statement,TESVSnip.UI.Forms,MultilineStringEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MultilineStringEditor.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MultilineStringEditor)); " is 141.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,ConfigureRecord,The length of the statement  "                       let children = sr.elements.Select(se => new SearchElement() { Checked = false' Name = se.name' Parent = null' Record = se }).ToList() " is 133.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeTreeList,The length of the statement  "                    AspectGetter = x => (x is SearchSubrecord) ? (object)((SearchSubrecord)x).Type : (x is SearchElement) ? (object)((SearchElement)x).Type : null'  " is 143.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,filterTree_SizeChanged,The length of the statement  "                    col.Width = this.filterTree.Width - width + col.Width - SystemInformation.VerticalScrollBarWidth - SystemInformation.FrameBorderSize.Width; " is 139.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "            this.bSave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "            this.bCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "            this.filterTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 146.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "            this.filterTree.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 166.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "            this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))); " is 162.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 77F)); " is 123.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "            this.treeListView1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 149.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "            this.treeListView1.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 169.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "            this.treeListView1.SelectColumnsOnRightClickBehaviour = BrightIdeasSoftware.ObjectListView.ColumnSelectBehaviour.Submenu; " is 121.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "            this.treeListView1.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))); " is 165.
Long Statement,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,PopulateStrings,The length of the statement  "                    this.strings.Add(new StringHolder { ID = kvp.Key' Plugin = plugin' Value = kvp.Value' Format = LocalizedStringFormat.Base }); " is 125.
Long Statement,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,PopulateStrings,The length of the statement  "                    this.strings.Add(new StringHolder { ID = kvp.Key' Plugin = plugin' Value = kvp.Value' Format = LocalizedStringFormat.IL }); " is 123.
Long Statement,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,PopulateStrings,The length of the statement  "                    this.strings.Add(new StringHolder { ID = kvp.Key' Plugin = plugin' Value = kvp.Value' Format = LocalizedStringFormat.DL }); " is 123.
Long Statement,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,btnAddString_Click,The length of the statement  "            StringHolder addStr = this.addStrings.FirstOrDefault(a => (a.ID == uiID && a.Plugin.Equals(plugin) && a.Format == format)); " is 123.
Long Statement,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,btnDeleteString_Click,The length of the statement  "            StringHolder remStr = this.remStrings.FirstOrDefault(a => (a.ID == uiID && a.Plugin.Equals(plugin) && a.Format == format)); " is 123.
Long Statement,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,btnLookup_Click,The length of the statement  "                MessageBox.Show(this' "ID Field is empty.  Please specify a string ID to find."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 134.
Long Statement,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(StringsEditor)); " is 133.
Long Statement,TESVSnip.UI.Forms,DataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\DataEdit.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DataEdit)); " is 128.
Long Statement,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GroupEditor)); " is 131.
Long Statement,TESVSnip.UI.Forms,HeaderEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(HeaderEditor)); " is 132.
Long Statement,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The length of the statement  "                this.tbFloat.Text = TypeConverter.h2f(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString(); " is 129.
Long Statement,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The length of the statement  "                this.tbInt.Text = TypeConverter.h2si(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString(); " is 128.
Long Statement,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The length of the statement  "                this.tbFormID.Text = TypeConverter.h2i(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString("X8"); " is 134.
Long Statement,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(HexDataEdit)); " is 131.
Long Statement,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The length of the statement  "            this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255))))); " is 161.
Long Statement,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The length of the statement  "            this.webBrowser1.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler(this.webBrowser1_PreviewKeyDown); " is 120.
Long Statement,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The length of the statement  "            this.copyToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.C))); " is 139.
Long Statement,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,dockingMenuStrip_Opening,The length of the statement  "            this.dockAsTabbedDocumentToolStripMenuItem.Enabled = DockState == DockState.Float && IsDockStateValid(DockState.Document); " is 122.
Long Statement,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(BaseDockContent)); " is 135.
Long Statement,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The length of the statement  "            this.closeToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F4))); " is 141.
Long Statement,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The length of the statement  "            this.dockAsTabbedDocumentToolStripMenuItem.Click += new System.EventHandler(this.dockAsTabbedDocumentToolStripMenuItem_Click); " is 126.
Long Statement,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The length of the statement  "            this.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 149.
Long Statement,TESVSnip.UI.Docking,SubrecordListContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\SubrecordListContent.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SubrecordListContent)); " is 140.
Long Statement,TESVSnip.UI.Docking,SubrecordListContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\SubrecordListContent.cs,InitializeComponent,The length of the statement  "            this.DockAreas = ((WeifenLuo.WinFormsUI.Docking.DockAreas)(((((WeifenLuo.WinFormsUI.Docking.DockAreas.Float | WeifenLuo.WinFormsUI.Docking.DockAreas.DockLeft)  " is 158.
Long Statement,TESVSnip.UI.Docking,FullRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,UpdateTitle,The length of the statement  "                    Text = string.Format("{0} - [{1:X8}] {2}"' Resources.FullRecordEditorTitle' this.panelRecordEditor.Record.FormID' this.panelRecordEditor.Record.DescriptiveName); " is 161.
Long Statement,TESVSnip.UI.Docking,FullRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,UpdateTitle,The length of the statement  "                    Text = string.Format("[{0:X8}] {1}"' this.panelRecordEditor.Record.FormID' this.panelRecordEditor.Record.DescriptiveName); " is 122.
Long Statement,TESVSnip.UI.Docking,PluginTreeContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\PluginTreeContent.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PluginTreeContent)); " is 137.
Long Statement,TESVSnip.UI.Docking,PluginTreeContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\PluginTreeContent.cs,InitializeComponent,The length of the statement  "            this.DockAreas = ((WeifenLuo.WinFormsUI.Docking.DockAreas)(((((WeifenLuo.WinFormsUI.Docking.DockAreas.Float | WeifenLuo.WinFormsUI.Docking.DockAreas.DockLeft)  " is 158.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The length of the statement  "                end = "Warning: An error occurred while processing the record. It may not conform to the structure defined in RecordStructure.xml"; " is 131.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetBaseDesc,The length of the statement  "            return "Type: " + rec.Name + Environment.NewLine + "FormID: " + rec.FormID.ToString("x8") + Environment.NewLine + "Flags 1: " + rec.Flags1.ToString("x8") " is 153.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetBaseDesc,The length of the statement  "                   + (rec.Flags1 == 0 ? string.Empty : " (" + FlagDefs.GetRecFlags1Desc(rec.Flags1) + ")") + Environment.NewLine + "Flags 2: " + rec.Flags2.ToString("x8") + Environment.NewLine + "Flags 3: " " is 187.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetBaseDesc,The length of the statement  "                   + rec.Flags3.ToString("x8") + Environment.NewLine + "Subrecords: " + rec.SubRecords.Count.ToString() + Environment.NewLine + "Size: " + rec.Size.ToString() " is 155.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The length of the statement  "                                        string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString(); " is 124.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The length of the statement  "                                                s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8")); " is 123.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The length of the statement  "                                        string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString(); " is 123.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The length of the statement  "                                                s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8")); " is 123.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The length of the statement  "                    return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")"; " is 132.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The length of the statement  "                    return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")"; " is 146.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The length of the statement  "            return desc + Environment.NewLine + "Records: " + rec.Records.Count.ToString() + Environment.NewLine + "Size: " + rec.Size.ToString() + " bytes (including header)"; " is 164.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The length of the statement  "            return "[Subrecord]" + Environment.NewLine + "Name: " + rec.Name + Environment.NewLine + "Size: " + rec.Size.ToString() + " bytes (Excluding header)"; " is 150.
Long Statement,TESVSnip.UI.Hosting,IronPythonConsole,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Hosting\IronPythonConsole.xaml.cs,openFileClick,The length of the statement  "                textEditor.SyntaxHighlighting = HighlightingManager.Instance.GetDefinitionByExtension(System.IO.Path.GetExtension(currentFileName)); " is 132.
Long Statement,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The length of the statement  "                this.tbFloat.Text = TypeConverter.h2f(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString(); " is 129.
Long Statement,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The length of the statement  "                this.tbInt.Text = TypeConverter.h2si(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString(); " is 128.
Long Statement,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The length of the statement  "                this.tbFormID.Text = TypeConverter.h2i(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString("X8"); " is 134.
Long Statement,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(HexElement)); " is 130.
Long Statement,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The length of the statement  "            this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255))))); " is 161.
Long Statement,TESVSnip.UI.RecordControls,BaseElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\BaseElement.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(BaseElement)); " is 131.
Long Statement,TESVSnip.UI.RecordControls,RepeatingElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,UpdateElement,The length of the statement  "                this.groupBox1.Text = string.Format("{0}: {1}"' Element.type' Element.name) + (!string.IsNullOrEmpty(Element.desc) ? (" (" + Element.desc + ")") : string.Empty); " is 161.
Long Statement,TESVSnip.UI.RecordControls,RepeatingElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RepeatingElement)); " is 136.
Long Statement,TESVSnip.UI.RecordControls,RepeatingElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The length of the statement  "            this.bindingNavigatorPositionItem.KeyDown += new System.Windows.Forms.KeyEventHandler(this.bindingNavigatorPositionItem_KeyDown); " is 129.
Long Statement,TESVSnip.UI.RecordControls,OptionsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(OptionsElement)); " is 134.
Long Statement,TESVSnip.UI.RecordControls,OptionsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,InitializeComponent,The length of the statement  "            this.Error.SetIconAlignment(this.cboOptions' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject("cboOptions.IconAlignment")))); " is 139.
Long Statement,TESVSnip.UI.RecordControls,OptionsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,InitializeComponent,The length of the statement  "            this.Error.SetIconAlignment(this' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject("$this.IconAlignment")))); " is 123.
Long Statement,TESVSnip.UI.RecordControls,FlagsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FlagsElement)); " is 132.
Long Statement,TESVSnip.UI.RecordControls,LStringElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LStringElement)); " is 134.
Long Statement,TESVSnip.UI.RecordControls,FormIDElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FormIDElement)); " is 133.
Long Statement,TESVSnip.UI.RecordControls,FormIDElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,InitializeComponent,The length of the statement  "            this.Error.SetIconAlignment(this.cboFormID' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject("cboFormID.IconAlignment")))); " is 137.
Long Statement,TESVSnip.UI.RecordControls,FormIDElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,InitializeComponent,The length of the statement  "            this.Error.SetIconAlignment(this.cboRecType' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject("cboRecType.IconAlignment")))); " is 139.
Long Statement,TESVSnip.UI.RecordControls,FormIDElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,InitializeComponent,The length of the statement  "            this.Error.SetIconAlignment(this' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject("$this.IconAlignment")))); " is 123.
Long Statement,TESVSnip.UI.RecordControls,OptionalElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionalElement.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(OptionalElement)); " is 135.
Long Statement,TESVSnip.UI.RecordControls,OptionalElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionalElement.cs,InitializeComponent,The length of the statement  "            this.Error.SetIconAlignment(this.chkUseValue' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject("chkUseValue.IconAlignment")))); " is 141.
Long Statement,TESVSnip.UI.RecordControls,OptionalElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionalElement.cs,InitializeComponent,The length of the statement  "            this.Error.SetIconAlignment(this.controlPanel' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject("controlPanel.IconAlignment")))); " is 143.
Long Statement,TESVSnip.UI.RecordControls,OptionalElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionalElement.cs,InitializeComponent,The length of the statement  "            this.Error.SetIconAlignment(this' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject("$this.IconAlignment")))); " is 123.
Long Statement,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The length of the statement  "                            this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString("X8") : value.ToString(CultureInfo.InvariantCulture);  " is 120.
Long Statement,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The length of the statement  "                            this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString("X8") : value.ToString(CultureInfo.InvariantCulture);  " is 120.
Long Statement,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The length of the statement  "                            this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString("X4") : value.ToString(CultureInfo.InvariantCulture);  " is 120.
Long Statement,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The length of the statement  "                            this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString("X4") : value.ToString(CultureInfo.InvariantCulture);  " is 120.
Long Statement,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TextElement)); " is 131.
Long Statement,BrightIdeasSoftware,DataSourceAdapter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\DataSourceAdapter.cs,currencyManager_ListChanged,The length of the statement  "            //System.Diagnostics.Debug.WriteLine(String.Format("Processing {0} event on {1} rows took {2}ms"' e.ListChangedType' this.ListView.GetItemCount()' sw.ElapsedMilliseconds)); " is 172.
Long Statement,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The length of the statement  "            //System.Diagnostics.Debug.WriteLine(String.Format("cd: {0:x}' {1}' {2}"' nmcustomdraw.nmcd.dwDrawStage' nmcustomdraw.dwItemType' nmcustomdraw.nmcd.dwItemSpec)); " is 161.
Long Statement,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The length of the statement  "                    //System.Diagnostics.Debug.WriteLine(String.Format("CDDS_SUBITEMPREPAINT ({0}'{1})"' (int)nmcustomdraw.nmcd.dwItemSpec' nmcustomdraw.iSubItem)); " is 144.
Long Statement,BrightIdeasSoftware,OwnerDataCallbackImpl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\VirtualGroups.cs,OnCacheHint,The length of the statement  "            //System.Diagnostics.Debug.WriteLine(String.Format("OnCacheHint({0}' {1}' {2}' {3})"' from.iGroup' from.iItem' to.iGroup' to.iItem)); " is 133.
Long Statement,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawImage,The length of the statement  "                        // If we are not printing' it's probable that the given Graphics object is double buffered using a BufferedGraphics object. " is 123.
Long Statement,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,The length of the statement  "            //System.Diagnostics.Debug.WriteLine(String.Format("header cd: {0:x}' {1}' {2:x}"' nmcustomdraw.dwDrawStage' nmcustomdraw.dwItemSpec' nmcustomdraw.uItemState)); " is 160.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.buttonMoveUp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.buttonMoveDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.buttonShow.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.buttonHide.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 139.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.buttonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.buttonCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.objectListView1.AlternateRowBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192))))); " is 147.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.objectListView1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 151.
Long Statement,TESVSnip.UI.ObjectControls,RecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RecordEditor)); " is 132.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,DeleteSelection,The length of the statement  "            if (DialogResult.Yes != MessageBox.Show(Resources.AreYouSureInquiry' Resources.DeleteNode' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1)) " is 174.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeToolStripRecords,The length of the statement  "            this._historyHandler = new History<BaseRecord>(this.toolStripRecordBack' this.toolStripRecordNext' Settings.Default.MaxHistoryItem); " is 132.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_OnContextMenuKey,The length of the statement  "            this.contextMenuRecord.Show(this.PluginTree.PointToScreen(new Point(this.PluginTree.Width / 4' this.PluginTree.Height / 4))); " is 125.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_SelectedIndexChanged,The length of the statement  "                if (this._historyHandler.CurrentItem == null && !this.PluginTree.SelectedRecord.Equals(this._historyHandler.CurrentItem)) " is 121.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,contextMenuRecord_Closing,The length of the statement  "            foreach (var item in this.contextMenuRecordAddMaster.DropDownItems.OfType<ToolStripButton>().Where(x => !x.Equals(this.browseToolStripMenuItem)).ToArray()) " is 155.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,contextMenuRecord_Opening,The length of the statement  "                    this.contextMenuRecordAddMaster.DropDownItems.OfType<ToolStripButton>().Where(x => !x.Equals(this.browseToolStripMenuItem)).ToArray()) " is 134.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PluginTreeView)); " is 134.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "            this.contextMenuRecord.Closing += new System.Windows.Forms.ToolStripDropDownClosingEventHandler(this.contextMenuRecord_Closing); " is 128.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "            this.contextMenuRecordAddMaster.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(this.contextMenuRecordAddMaster_DropDownItemClicked); " is 166.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "            this.contextMenuRecordCopyTo.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(this.contextMenuRecordCopyTo_DropDownItemClicked); " is 160.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "            this.scriptsToolStripMenuItem.DropDownOpening += new System.EventHandler(this.scriptsToolStripMenuItem_DropDownOpening); " is 120.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "            this.scriptsToolStripMenuItem.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(this.scriptsToolStripMenuItem_DropDownItemClicked); " is 162.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "            this.PluginTree.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 166.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "            this.PluginTree.ModelCanDrop += new System.EventHandler<BrightIdeasSoftware.ModelDropEventArgs>(this.PluginTree_ModelCanDrop); " is 126.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "            this.PluginTree.ModelDropped += new System.EventHandler<BrightIdeasSoftware.ModelDropEventArgs>(this.PluginTree_ModelDropped); " is 126.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,ReferenceSearch,The length of the statement  "            var cboItem = this.toolStripIncrFindType.Items.OfType<MRUComboHelper<SearchType' string>>().FirstOrDefault(x => x.Key == SearchType.FormIDRef); " is 143.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,SetSearchCriteria,The length of the statement  "            var cboItem = this.toolStripIncrFindType.Items.OfType<MRUComboHelper<SearchType' string>>().FirstOrDefault(x => x.Key == SearchType.BasicCriteriaRef); " is 150.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeToolStripFind,The length of the statement  "                    new MRUComboHelper<SearchType' string>(SearchType.TypeEditorIdSearch' "Name w/Type"' Settings.Default.SearchMRUNameList)'  " is 121.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The length of the statement  "                                    (from sr in rec.SubRecords from elem in rec.EnumerateElements(sr) let es = elem.Structure where es != null && es.type == ElementValueType.FormID select elem).Any( " is 162.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,UpdateSearchList,The length of the statement  "                                   Text = "Plugin"' Name = "Plugin"' AspectName = "Plugin"' Width = 5' IsVisible = true' Groupable = true' AspectGetter = x => this.GetPluginFromNode(x as Record)  " is 159.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,contextMenuStripList_Opening,The length of the statement  "                this.batchEditToolStripMenuItem.ToolTipText = string.Format("Batch Edit not allowed when multiple record types are selected"); " is 126.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RecordSearch)); " is 132.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "            this.toolStripIncrFindTypeFilter.SelectedIndexChanged += new System.EventHandler(this.toolStripIncrFindTypeFilter_SelectedIndexChanged); " is 136.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "            this.toolStripIncrFindType.SelectedIndexChanged += new System.EventHandler(this.toolStripIncrFindType_SelectedIndexChanged); " is 124.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "            this.contextMenuStripList.Closing += new System.Windows.Forms.ToolStripDropDownClosingEventHandler(this.contextMenuStripList_Closing); " is 134.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "            this.copyToToolStripMenuItem.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler(this.copyToToolStripMenuItem_DropDownItemClicked); " is 160.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "            this.listSearchView.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 15.75F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "            this.listSearchView.BeforeSorting += new System.EventHandler<BrightIdeasSoftware.BeforeSortingEventArgs>(this.listSearchView_BeforeSorting); " is 140.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "            this.listSearchView.BeforeCreatingGroups += new System.EventHandler<BrightIdeasSoftware.CreateGroupsEventArgs>(this.listSearchView_BeforeCreatingGroups); " is 153.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "            this.listSearchView.CellClick += new System.EventHandler<BrightIdeasSoftware.CellClickEventArgs>(this.listSearchView_CellClick); " is 128.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The length of the statement  "                this.strWarnOnSave = "The subrecord doesn't appear to conform to the expected structure.\nThe formatted information may be incorrect."; " is 135.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SubrecordEditor)); " is 135.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,EditSelectedSubrecord,The length of the statement  "            else if (!Settings.Default.UseHexSubRecordEditor && sr.Structure != null && sr.Structure.elements != null && sr.Structure.elements.Length > 0 " is 141.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeSubrecordForm,The length of the statement  "            this.listSubrecord.AddBindingColumn("IsValid"' "*"' 20' new Func<SubRecord' string>(a => a.IsValid ? "*" : string.Empty)); " is 122.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,SubrecordListEditor_SizeChanged,The length of the statement  "                descColumn.Width = Width - totalWidth - SystemInformation.VerticalScrollBarWidth - SystemInformation.FrameBorderSize.Width; " is 123.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SubrecordListEditor)); " is 139.
Complex Conditional,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanRecurse,The conditional expression  "r2.Name != "REFR" && r2.Name != "ACHR" && r2.Name != "NAVM" && r2.Name != "INFO""  is complex.
Complex Conditional,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanRecurse2,The conditional expression  "r2.Name == r3.Name && r2.Size == r3.Size && r2.SubRecords.Count == r3.SubRecords.Count && r2.Flags1 == r3.Flags1 && r2.Flags2 == r3.Flags2 && r2.Flags3 == r3.Flags3"  is complex.
Complex Conditional,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,compileScriptToolStripMenuItem_Click,The conditional expression  "i < srs.Count && (srs[i].Name == "SCTX" || srs[i].Name == "SLSD" || srs[i].Name == "SCVR" || srs[i].Name == "SCRO" || srs[i].Name == "SCRV")"  is complex.
Complex Conditional,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,LayoutDockingWindows,The conditional expression  "!force && IsVisible(pluginTreeContent) && IsVisible(subrecordListContent) &&                      IsVisible(htmlContent)"  is complex.
Complex Conditional,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The conditional expression  "(CurrentGroup == 0 && es.group != 0) || (CurrentGroup != 0 && es.group != 0 && CurrentGroup != es.group)"  is complex.
Complex Conditional,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The conditional expression  "es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString"  is complex.
Complex Conditional,TESVSnip.UI.Forms,DataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\DataEdit.cs,tbName_KeyPress,The conditional expression  "!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && !char.IsLetter(e.KeyChar) && e.KeyChar != '_'"  is complex.
Complex Conditional,TESVSnip.UI.Forms,HeaderEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,HexOnlyKeyPress,The conditional expression  "c != 'a' && c != 'b' && c != 'c' && c != 'd' && c != 'e' && c != 'f'"  is complex.
Complex Conditional,TESVSnip.UI.Forms,HeaderEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,tbName_KeyPress,The conditional expression  "!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && !char.IsLetter(e.KeyChar) && e.KeyChar != '_'"  is complex.
Complex Conditional,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,tbName_KeyPress,The conditional expression  "!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && !char.IsLetter(e.KeyChar) && e.KeyChar != '_'"  is complex.
Complex Conditional,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,webBrowser1_PreviewKeyDown,The conditional expression  "e.Control && !e.Alt && !e.Shift && e.KeyCode == Keys.C"  is complex.
Complex Conditional,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The conditional expression  "lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255"  is complex.
Complex Conditional,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,tbName_KeyPress,The conditional expression  "!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && !char.IsLetter(e.KeyChar) && e.KeyChar != '_'"  is complex.
Complex Conditional,TESVSnip.Windows.Controls,BindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_KeyDown,The conditional expression  "e.Control && !e.Shift && !e.Alt && e.KeyValue == 'C'"  is complex.
Complex Conditional,TESVSnip.Windows.Controls,BindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_KeyDown,The conditional expression  "e.Control && !e.Shift && !e.Alt && e.KeyValue == 'A'"  is complex.
Complex Conditional,TESVSnip.Windows.Controls,ObjectBindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\objectbindinglistview.cs,BindingListView_KeyDown,The conditional expression  "e.Control && !e.Shift && !e.Alt && e.KeyValue == 'C'"  is complex.
Complex Conditional,TESVSnip.Windows.Controls,ObjectBindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\objectbindinglistview.cs,BindingListView_KeyDown,The conditional expression  "e.Control && !e.Shift && !e.Alt && e.KeyValue == 'A'"  is complex.
Complex Conditional,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The conditional expression  "names == null || names.Length == 0 || values == null || values.Length == 0 ||                  names.Length != values.Length"  is complex.
Complex Conditional,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateScrollSize,The conditional expression  "VScrollBarVisible && _byteProvider != null && _byteProvider.Length > 0 && _iHexMaxHBytes != 0"  is complex.
Complex Conditional,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,CreateCaret,The conditional expression  "_byteProvider == null || _keyInterpreter == null || _caretVisible || !Focused"  is complex.
Complex Conditional,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The conditional expression  "_keyInterpreter != null && Focused && _bytePos != -1 && Enabled"  is complex.
Complex Conditional,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentByteSign,The conditional expression  "rec.Top < 0 || rec.Left < 0 || rec.Width <= 0 || rec.Height <= 0"  is complex.
Complex Conditional,Be.Windows.Forms,KeyInterpreter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PreProcessWmChar,The conditional expression  "(!sw && pos != _hexBox._byteProvider.Length) ||                      (!si && pos == _hexBox._byteProvider.Length)"  is complex.
Complex Conditional,Be.Windows.Forms,KeyInterpreter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PreProcessWmChar,The conditional expression  "!isInsertMode && si && _hexBox._insertActive && cp == 0"  is complex.
Complex Conditional,Be.Windows.Forms,StringKeyInterpreter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PreProcessWmChar,The conditional expression  "(!sw && pos != _hexBox._byteProvider.Length) ||                      (!si && pos == _hexBox._byteProvider.Length)"  is complex.
Complex Conditional,BrightIdeasSoftware,CellEditKeyEngine,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleColumnChange,The conditional expression  "(isGoingLeft && displayIndex == 0) ||                  (!isGoingLeft && displayIndex == editableColumns.Count - 1)"  is complex.
Complex Conditional,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,HandleTimerTick,The conditional expression  "(IsLeftMouseButtonDown && (Control.MouseButtons & MouseButtons.Left) != MouseButtons.Left) ||                  (IsMiddleMouseButtonDown && (Control.MouseButtons & MouseButtons.Middle) != MouseButtons.Middle) ||                  (IsRightMouseButtonDown && (Control.MouseButtons & MouseButtons.Right) != MouseButtons.Right)"  is complex.
Complex Conditional,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The conditional expression  "View != View.Details || hti.ColumnIndex == 0 ||                  hti.SubItem == null || hti.Column == null"  is complex.
Complex Conditional,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,GetCellToolTip,The conditional expression  "subItem != null && !String.IsNullOrEmpty(subItem.Url) && subItem.Url != subItem.Text &&                      HotCellHitLocation == HitTestLocation.Text"  is complex.
Complex Conditional,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,SetupBaseImageList,The conditional expression  "rowHeight == -1 ||                  View != View.Details ||                  (shadowedImageList != null && shadowedImageList.ImageSize.Height == rowHeight)"  is complex.
Complex Conditional,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OnMouseUp,The conditional expression  "UseHyperlinks &&                  args.HitTest.HitTestLocation == HitTestLocation.Text &&                  args.SubItem != null &&                  !String.IsNullOrEmpty(args.SubItem.Url)"  is complex.
Complex Conditional,BrightIdeasSoftware,MessageForwarder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\ObjectListView.cs,PreFilterMessage,The conditional expression  "_Messages.Contains(m.Msg) && _Control.CanFocus && !_Control.Focused                      && _IsMouseOverControl"  is complex.
Complex Conditional,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetForegroundColor,The conditional expression  "IsItemSelected && !ListView.UseTranslucentSelection &&                  (Column.Index == 0 || ListView.FullRowSelect)"  is complex.
Complex Conditional,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetTextBackgroundColor,The conditional expression  "IsItemSelected && !ListView.UseTranslucentSelection                  && (Column.Index == 0 || ListView.FullRowSelect)"  is complex.
Complex Conditional,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawTextGdi,The conditional expression  "IsDrawBackground && IsItemSelected && Column.Index == 0 && !ListView.FullRowSelect"  is complex.
Complex Conditional,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawTextGdiPlus,The conditional expression  "IsDrawBackground && IsItemSelected && Column.Index == 0 && !ListView.FullRowSelect"  is complex.
Complex Conditional,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,NeedsCustomDraw,The conditional expression  "column.HasHeaderImage ||                      !column.ShowTextInHeader ||                      column.IsHeaderVertical ||                      HasFilterIndicator(column) ||                      column.TextAlign != column.HeaderTextAlign ||                      NeedsCustomDraw(column.HeaderFormatStyle)"  is complex.
Complex Conditional,BrightIdeasSoftware,ToolTipControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,ApplyEventFormatting,The conditional expression  "!args.IsBalloon.HasValue &&                  !args.BackColor.HasValue &&                  !args.ForeColor.HasValue &&                  args.Title == null &&                  !args.StandardIcon.HasValue &&                  !args.AutoPopDelay.HasValue &&                  args.Font == null"  is complex.
Complex Conditional,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,listSearchView_KeyDown,The conditional expression  "e.KeyCode == Keys.Enter && e.Control && !e.Alt && !e.Shift"  is complex.
Complex Conditional,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,EditSelectedSubrecord,The conditional expression  "!Settings.Default.UseHexSubRecordEditor && sr.Structure != null && sr.Structure.elements != null && sr.Structure.elements.Length > 0                       && sr.Structure.elements[0].type != ElementValueType.Blob && !sr.Structure.UseHexEditor"  is complex.
Complex Conditional,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,listSubrecord_KeyDown,The conditional expression  "e.KeyCode == Keys.C && e.Control && !e.Alt && !e.Shift"  is complex.
Complex Conditional,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,listSubrecord_KeyDown,The conditional expression  "e.KeyCode == Keys.V && e.Control && !e.Alt && !e.Shift"  is complex.
Complex Conditional,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,listSubrecord_KeyDown,The conditional expression  "e.KeyCode == Keys.Delete && !e.Control && !e.Alt && !e.Shift"  is complex.
Virtual Method Call from Constructor,BrightIdeasSoftware,AutoCompleteCellEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,AutoCompleteCellEditor,The constructor "AutoCompleteCellEditor" calls a virtual method "GetItemCount".
Virtual Method Call from Constructor,BrightIdeasSoftware,AutoCompleteCellEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,AutoCompleteCellEditor,The constructor "AutoCompleteCellEditor" calls a virtual method "GetModelObject".
Virtual Method Call from Constructor,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ObjectListView,The constructor "ObjectListView" calls a virtual method "InitializeStandardOverlays".
Virtual Method Call from Constructor,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ObjectListView,The constructor "ObjectListView" calls a virtual method "InitializeEmptyListMsgOverlay".
Empty Catch Block,TESVSnip.UI.Services,PluginStore,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Services\PluginStore.cs,Cleanup,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Services,Scripting,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Services\Scripting.cs,Initialize,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,MainView,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,SendStatusText,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,CloseStringEditor,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,LayoutDockingWindows,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,LoadDockingWindows,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,MainView_Shown,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,RegisterMessageFilter,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,SaveDockingWindows,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,htmlContent_OnLinkClicked,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,consoleToolStripMenuItem_Click,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,EditRecords,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,filterTree_SizeChanged,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,filterTree_SizeChanged,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,LoadSearches,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,SaveSearches,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,filterTree_SizeChanged,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,filterTree_SizeChanged,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainViewMessageFilter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MainView.cs,PreFilterMessage,The method has an empty catch block.
Empty Catch Block,TESVSnip.Windows.Controls,BindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_QueryItemText,The method has an empty catch block.
Empty Catch Block,TESVSnip.Windows.Controls,ColumnPropertyDescriptor<T;TResult>,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,GetValue,The method has an empty catch block.
Empty Catch Block,TESVSnip.Windows.Controls,ColumnPropertyDescriptor<T;TResult>,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,GetValue,The method has an empty catch block.
Empty Catch Block,TESVSnip.Windows.Controls,Dropdown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\CheckedComboBox.cs,cclb_ItemCheck,The method has an empty catch block.
Empty Catch Block,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FindTopWindowByProcessId,The method has an empty catch block.
Empty Catch Block,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FitRectOnDesktop,The method has an empty catch block.
Empty Catch Block,TESVSnip.Windows.Controls,VirtualListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,WndProc,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleChar,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,EnsureModelVisible,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,SetControlValue,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,Munger,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Munger.cs,PutProperty,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,ImageRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetImageFromAspect,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,VirtualObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,SetVirtualListSize,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,VirtualObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,SetVirtualListSize,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,VirtualObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,SetVirtualListSize,The method has an empty catch block.
Empty Catch Block,RichTextBoxLinks,RichTextBoxEx,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The method has an empty catch block.
Empty Catch Block,RichTextBoxLinks,RichTextBoxEx,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_SizeChanged,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,contextMenuRecordAddMaster_DropDownItemClicked,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,contextMenuRecordCopyTo_DropDownItemClicked,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,listSearchView_BeforeCreatingGroups,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,EditSelectedSubrecordHex,The method has an empty catch block.
Magic Number,TESVSnip.UI.Services,Options,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: switch (char.ToLower(arg[1]))                      {                          case 'c':                              this.SettingsDirectory = (arg.Length > 2 && arg[2] == ':') ? arg.Substring(3) : args[++i];                              break;                      }
Magic Number,TESVSnip.UI.Services,Options,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: switch (char.ToLower(arg[1]))                      {                          case 'c':                              this.SettingsDirectory = (arg.Length > 2 && arg[2] == ':') ? arg.Substring(3) : args[++i];                              break;                      }
Magic Number,TESVSnip.UI.Services,Options,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: switch (char.ToLower(arg[1]))                      {                          case 'c':                              this.SettingsDirectory = (arg.Length > 2 && arg[2] == ':') ? arg.Substring(3) : args[++i];                              break;                      }
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,AddLanguageUIOption,The following statement contains a magic number: ToolStripMenuItem[] items = new ToolStripMenuItem[2];
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,BackgroundIncrementalSearch,The following statement contains a magic number: Predicate<BaseRecord> updateFunc = n => {                  if (this.IsBackroundProcessCanceled())                  {                      // returning true will stop it                      return true;                  }                    var counter = (int)(++currentCount / totalNodes * 100.0f);                  if (counter != prevCount)                  {                      prevCount = counter;                      if (counter % 10 == 0)                      {                          this.UpdateBackgroundProgress(counter);                      }                  }                    return false;              };
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,BackgroundIncrementalSearch,The following statement contains a magic number: Predicate<BaseRecord> updateFunc = n => {                  if (this.IsBackroundProcessCanceled())                  {                      // returning true will stop it                      return true;                  }                    var counter = (int)(++currentCount / totalNodes * 100.0f);                  if (counter != prevCount)                  {                      prevCount = counter;                      if (counter % 10 == 0)                      {                          this.UpdateBackgroundProgress(counter);                      }                  }                    return false;              };
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,BackgroundNonConformingRecordIncrementalSearch,The following statement contains a magic number: Predicate<BaseRecord> searchFunc = (BaseRecord n) => {                  if (this.IsNonConformingRecord(n))                  {                      return true;                  }                    if (this.IsBackroundProcessCanceled())                  {                      // returning true will stop it                      return true;                  }                    var counter = (int)(++currentCount / totalNodes * 100.0f);                  if (counter != prevCount)                  {                      prevCount = counter;                      if (counter % 10 == 0)                      {                          this.UpdateBackgroundProgress(counter);                      }                  }                    return false;              };
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,BackgroundNonConformingRecordIncrementalSearch,The following statement contains a magic number: Predicate<BaseRecord> searchFunc = (BaseRecord n) => {                  if (this.IsNonConformingRecord(n))                  {                      return true;                  }                    if (this.IsBackroundProcessCanceled())                  {                      // returning true will stop it                      return true;                  }                    var counter = (int)(++currentCount / totalNodes * 100.0f);                  if (counter != prevCount)                  {                      prevCount = counter;                      if (counter % 10 == 0)                      {                          this.UpdateBackgroundProgress(counter);                      }                  }                    return false;              };
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanEspToolStripMenuItem_Click,The following statement contains a magic number: plugin.Masters[i].Records.Count < 2 || tes4 == null
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanEspToolStripMenuItem_Click,The following statement contains a magic number: match <<= 24;
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanEspToolStripMenuItem_Click,The following statement contains a magic number: uint mask = (uint) i << 24;
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: uint mask = (uint) (plugin.Masters.Length - 1) << 24;
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,MainView,The following statement contains a magic number: mruMenu = new MruStripMenu(recentFilelToolStripMenuItem' OnMruFile'                                         mruRegKey + "\\MRU"' true' 16);
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,LayoutDockingWindows,The following statement contains a magic number: subrecordListContent.Show(pluginTreeContent.Pane' DockAlignment.Bottom' 0.5);
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The following statement contains a magic number: this.dockPanel.DockBottomPortion = 150D;
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The following statement contains a magic number: this.dockPanel.DockLeftPortion = 200D;
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The following statement contains a magic number: this.dockPanel.DockRightPortion = 200D;
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The following statement contains a magic number: this.dockPanel.DockTopPortion = 150D;
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The following statement contains a magic number: autoHideStripSkin1.TextFont = new System.Drawing.Font("Segoe UI"' 9F);
Magic Number,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The following statement contains a magic number: dockPaneStripSkin1.TextFont = new System.Drawing.Font("Segoe UI"' 9F);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnName = new OLVColumn                  {                      Name = "Name"'                       Text = "Name"'                       AspectName = "Name"'                       Width = 175'                       IsVisible = true'                       IsEditable = false'                       AspectGetter = x => {                          var r = x as BatchCriteria;                          return (r != null) ? r.Name : x;                      }                  };
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnCond = new OLVColumn                  {                      Name = "Cond"'                       Text = "Cond"'                       AspectName = "Cond"'                       Width = 100'                       IsVisible = true'                       IsEditable = true'                       AspectGetter = x => (x is BatchSubrecord) ? (object)((BatchSubrecord)x).Type : (x is BatchElement) ? (object)((BatchElement)x).Type : null'                       AspectPutter = (x' v) => {                          if (x is BatchSubrecord)                          {                              ((BatchSubrecord)x).Type = (BatchCondRecordType)v;                          }                            if (x is BatchElement)                          {                              ((BatchElement)x).Type = (BatchCondElementType)v;                          }                      }'                   };
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnValue = new OLVColumn                  {                      Name = "Value"'                       Text = "Value"'                       AspectName = "Value"'                       Width = 100'                       IsVisible = true'                       IsEditable = true'                       AspectGetter = x => {                          var r = x as BatchElement;                          return (r != null) ? r.Value : null;                      }                  };
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(303' 343);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(303' 343);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 2;
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point(12' 12);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point(12' 12);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size(366' 319);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size(366' 319);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point(222' 343);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point(222' 343);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(389' 378);
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(389' 378);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnName = new OLVColumn                  {                      Name = "Name"'                       Text = "Name"'                       AspectName = "Name"'                       Width = 175'                       IsVisible = true'                       IsEditable = false'                       AspectGetter = x => {                          var r = x as ColumnCriteria;                          return (r != null) ? r.Name : x;                      }                  };
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(303' 343);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(303' 343);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 17;
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point(12' 12);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point(12' 12);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size(366' 319);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size(366' 319);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.TabIndex = 19;
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point(222' 343);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point(222' 343);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bApply.TabIndex = 18;
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(389' 378);
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(389' 378);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnName = new OLVColumn                  {                      Name = "Name"'                       Text = "Name"'                       AspectName = "Name"'                       Width = 175'                       IsVisible = true'                       IsEditable = false'                       AspectGetter = x => {                          var r = x as SearchCriteria;                          return (r != null) ? r.Name : x;                      }                  };
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnCond = new OLVColumn                  {                      Name = "Cond"'                       Text = "Cond"'                       AspectName = "Cond"'                       Width = 100'                       IsVisible = true'                       IsEditable = true'                       AspectGetter = x => (x is SearchSubrecord) ? (object)((SearchSubrecord)x).Type : (x is SearchElement) ? (object)((SearchElement)x).Type : null'                       AspectPutter = (x' v) => {                          if (x is SearchSubrecord)                          {                              ((SearchSubrecord)x).Type = (SearchCondRecordType)v;                          }                            if (x is SearchElement)                          {                              ((SearchElement)x).Type = (SearchCondElementType)v;                          }                      }'                   };
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnValue = new OLVColumn                  {                      Name = "Value"'                       Text = "Value"'                       AspectName = "Value"'                       Width = 100'                       IsVisible = true'                       IsEditable = true'                       AspectGetter = x => {                          var r = x as SearchElement;                          return (r != null) ? r.Value : null;                      }                  };
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(124' 329);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(124' 329);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bSave.TabIndex = 18;
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(286' 329);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(286' 329);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 17;
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboRecordType.Font = new System.Drawing.Font("Lucida Console"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboRecordType.Location = new System.Drawing.Point(86' 44);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboRecordType.Location = new System.Drawing.Point(86' 44);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboRecordType.Size = new System.Drawing.Size(275' 19);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboRecordType.Size = new System.Drawing.Size(275' 19);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboRecordType.TabIndex = 20;
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(8' 47);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(8' 47);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(72' 13);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(72' 13);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 21;
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point(205' 329);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point(205' 329);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bApply.TabIndex = 18;
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboSavedSearches.Location = new System.Drawing.Point(86' 12);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboSavedSearches.Location = new System.Drawing.Point(86' 12);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboSavedSearches.Size = new System.Drawing.Size(230' 21);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboSavedSearches.Size = new System.Drawing.Size(230' 21);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboSavedSearches.TabIndex = 22;
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(8' 15);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(8' 15);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(53' 13);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(53' 13);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 23;
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnRemoveSearch.Location = new System.Drawing.Point(340' 11);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnRemoveSearch.Location = new System.Drawing.Point(340' 11);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnRemoveSearch.Size = new System.Drawing.Size(21' 21);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnRemoveSearch.Size = new System.Drawing.Size(21' 21);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnRemoveSearch.TabIndex = 24;
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnAddSearch.Location = new System.Drawing.Point(320' 11);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnAddSearch.Location = new System.Drawing.Point(320' 11);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnAddSearch.Size = new System.Drawing.Size(21' 21);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnAddSearch.Size = new System.Drawing.Size(21' 21);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnAddSearch.TabIndex = 26;
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point(5' 68);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point(5' 68);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size(358' 258);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size(358' 258);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.TabIndex = 19;
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(372' 364);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(372' 364);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(373' 250);
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(373' 250);
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: panel1.Width = this.fpanel1.Width - 10;
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: byte flagSize = 4;
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: cb.Location = new Point(10' ypos);
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ypos += 24;
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: cb.Location = new Point(10' ypos);
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ypos += 24;
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type)                  {                      case ElementValueType.UInt:                          {                              var v = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.Int:                          {                              var v = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              flagValue = (uint)v;                              flagSize = 4;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();                              offset += 4;                          }                            break;                      case ElementValueType.FormID:                          tb.Text = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString("X8");                          offset += 4;                          break;                      case ElementValueType.Float:                          tb.Text = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]).ToString();                          offset += 4;                          break;                      case ElementValueType.UShort:                          {                              var v = TypeConverter.h2s(data[offset]' data[offset + 1]);                              flagValue = v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Short:                          {                              var v = TypeConverter.h2ss(data[offset]' data[offset + 1]);                              flagValue = (uint)v;                              flagSize = 2;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();                              offset += 2;                          }                            break;                      case ElementValueType.Byte:                          {                              var v = data[offset];                              flagValue = v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.SByte:                          {                              var v = (sbyte)data[offset];                              flagValue = (uint)v;                              flagSize = 1;                              tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X2") : v.ToString();                              offset++;                          }                            break;                      case ElementValueType.String:                          {                              string s = string.Empty;                              while (data[offset] != 0)                              {                                  s += (char)data[offset++];                              }                                offset++;                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.BString:                          {                              int len = TypeConverter.h2s(data[offset]' data[offset + 1]);                              string s = Encoding.Instance.GetString(data' offset + 2' len);                              offset = offset + (2 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.IString:                          {                              int len = TypeConverter.h2si(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              string s = Encoding.Instance.GetString(data' offset + 4' len);                              offset = offset + (4 + len);                              tb.Text = s;                              tb.Width += 200;                          }                            break;                      case ElementValueType.LString:                          {                              int left = data.Length - offset;                              uint id = (left < 4) ? 0 : TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);                              bool isString = TypeConverter.IsLikelyString(new ArraySegment<byte>(data' offset' left));                              int strOffset = offset;                              string s = null;                              if (isString)                              {                                  s = TypeConverter.GetString(new ArraySegment<byte>(data' offset' data.Length - offset));                                  tb.Text = 0.ToString("X8");                                  offset += s.Length;                              }                              else                              {                                  offset += 4;                                  tb.Text = id.ToString("X8");                                  if (this.strIDLookup != null)                                  {                                      s = this.strIDLookup(id);                                  }                              }                                tb.Tag = new lTag(tb' s' data' strOffset' isString);                          }                            break;                      case ElementValueType.Str4:                          {                              string s = Encoding.Instance.GetString(data' offset' 4);                              offset += 4;                              tb.MaxLength = 4;                              tb.Text = s;                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Location = new Point(10' ypos);
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ypos += tb.Height * 5;
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Height *= 6;
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: l.Location = new Point(tb.Right + 10' ypos + 3);
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: l.Location = new Point(tb.Right + 10' ypos + 3);
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ypos += 28;
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: b.Location = new Point(20' ypos);
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb2.Width += 200;
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb2.Location = new Point(b.Right + 10' ypos);
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ypos += 28;
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: cmb.Width += 200;
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: cmb.Location = new Point(20' ypos);
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ccb.Location = new Point(l.Location.X + l.Width + 10' tb.Top);
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ccb.Width = Math.Max(ccb.Width' Width - 50 - ccb.Location.X);
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,bSave_Click,The following statement contains a magic number: tbText = tbText.Substring(2);
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,bSave_Click,The following statement contains a magic number: switch (vt)                  {                      case ElementValueType.Byte:                          {                              byte b;                              if (!byte.TryParse(tbText' numStyle' null' out b))                              {                                  MessageBox.Show("Invalid byte: " + tbText' "Error");                                  return;                              }                                bytes.Add(b);                              break;                          }                        case ElementValueType.Short:                          {                              short s;                              if (!short.TryParse(tbText' numStyle' null' out s))                              {                                  MessageBox.Show("Invalid short: " + tbText' "Error");                                  return;                              }                                byte[] conv = TypeConverter.ss2h(s);                              bytes.Add(conv[0]);                              bytes.Add(conv[1]);                              break;                          }                        case ElementValueType.UShort:                          {                              ushort s;                              if (!ushort.TryParse(tbText' numStyle' null' out s))                              {                                  MessageBox.Show("Invalid ushort: " + tbText' "Error");                                  return;                              }                                byte[] conv = TypeConverter.s2h(s);                              bytes.Add(conv[0]);                              bytes.Add(conv[1]);                              break;                          }                        case ElementValueType.Int:                          {                              int i;                              if (!int.TryParse(tbText' numStyle' null' out i))                              {                                  MessageBox.Show("Invalid int: " + tbText' "Error");                                  return;                              }                                byte[] conv = TypeConverter.si2h(i);                              bytes.AddRange(conv);                              break;                          }                        case ElementValueType.UInt:                          {                              uint i;                              if (!uint.TryParse(tbText' numStyle' null' out i))                              {                                  MessageBox.Show("Invalid uint: " + tbText' "Error");                                  return;                              }                                byte[] conv = TypeConverter.i2h(i);                              bytes.AddRange(conv);                              break;                          }                        case ElementValueType.Float:                          {                              float f;                              if (!float.TryParse(tbText' numStyle' null' out f))                              {                                  MessageBox.Show("Invalid float: " + tbText' "Error");                                  return;                              }                                byte[] conv = TypeConverter.f2h(f);                              bytes.AddRange(conv);                              break;                          }                        case ElementValueType.FormID:                          {                              uint i;                              if (!uint.TryParse(tbText' NumberStyles.AllowHexSpecifier' null' out i))                              {                                  MessageBox.Show("Invalid formID: " + tbText' "Error");                                  return;                              }                                byte[] conv = TypeConverter.i2h(i);                              bytes.AddRange(conv);                              break;                          }                        case ElementValueType.String:                          {                              byte[] conv = System.Text.Encoding.Default.GetBytes(tbText);                              bytes.AddRange(conv);                              bytes.Add(0);                              break;                          }                        case ElementValueType.BString:                          {                              bytes.AddRange(TypeConverter.s2h((ushort)tbText.Length));                              bytes.AddRange(System.Text.Encoding.Default.GetBytes(tbText));                              break;                          }                        case ElementValueType.IString:                          {                              bytes.AddRange(TypeConverter.si2h(tbText.Length));                              bytes.AddRange(System.Text.Encoding.Default.GetBytes(tbText));                              break;                          }                        case ElementValueType.LString:                          {                              uint i;                              var ltag = this.boxes[j].Tag as lTag;                              if (ltag != null)                              {                                  if (!ltag.cb.Checked)                                  {                                      if (!uint.TryParse(ltag.id.Text' NumberStyles.AllowHexSpecifier' null' out i))                                      {                                          MessageBox.Show("Invalid string id: " + ltag.id.Text' "Error");                                          return;                                      }                                        byte[] conv = TypeConverter.i2h(i);                                      bytes.AddRange(conv);                                  }                                  else                                  {                                      byte[] conv = System.Text.Encoding.Default.GetBytes(ltag.str.Text);                                      bytes.AddRange(conv);                                      bytes.Add(0);                                  }                              }                                break;                          }                        case ElementValueType.Str4:                          {                              var txtbytes = new byte[] { 0x32' 0x32' 0x32' 0x32 };                              System.Text.Encoding.Default.GetBytes(tbText' 0' Math.Min(4' tbText.Length)' txtbytes' 0);                              bytes.AddRange(txtbytes);                          }                            break;                      default:                          throw new ApplicationException();                  }
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor,The following statement contains a magic number: this.fpanel1.ColumnStyles[0] = new ColumnStyle(SizeType.Percent' 100.0f);
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor,The following statement contains a magic number: int maxWidth = this.fpanel1.Width - SystemInformation.VerticalScrollBarWidth - 8;
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor,The following statement contains a magic number: var info = new RowStyle(SizeType.Absolute' c.Size.Height+2);
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor_Load,The following statement contains a magic number: int workingSize = Math.Min(maxHeight' screen.WorkingArea.Height*3/4);
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor_Load,The following statement contains a magic number: int workingSize = Math.Min(maxHeight' screen.WorkingArea.Height*3/4);
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor_Load,The following statement contains a magic number: int offset = this.fpanel1.PreferredSize.Height - this.fpanel1.Height + 40;
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor_Load,The following statement contains a magic number: int yOff = (Owner.Height - Height)/2;
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnName = new OLVColumn                  {                      Name = "Name"'                       Text = "Name"'                       AspectName = "Name"'                       Width = 175'                       IsVisible = true'                       IsEditable = false'                       AspectGetter = x => {                          var r = x as SearchCriteria;                          return (r != null) ? r.Name : x;                      }                  };
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnCond = new OLVColumn                  {                      Name = "Cond"'                       Text = "Cond"'                       AspectName = "Cond"'                       Width = 100'                       IsVisible = true'                       IsEditable = true'                       AspectGetter = x => (x is SearchSubrecord) ? (object)((SearchSubrecord)x).Type : (x is SearchElement) ? (object)((SearchElement)x).Type : null'                       AspectPutter = (x' v) => {                          if (x is SearchSubrecord)                          {                              ((SearchSubrecord)x).Type = (SearchCondRecordType)v;                          }                            if (x is SearchElement)                          {                              ((SearchElement)x).Type = (SearchCondElementType)v;                          }                      }'                   };
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnValue = new OLVColumn                  {                      Name = "Value"'                       Text = "Value"'                       AspectName = "Value"'                       Width = 100'                       IsVisible = true'                       IsEditable = true'                       AspectGetter = x => {                          var r = x as SearchElement;                          return (r != null) ? r.Value : null;                      }                  };
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(483' 417);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point(483' 417);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bSave.TabIndex = 18;
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(564' 417);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point(564' 417);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 17;
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point(3' 3);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point(3' 3);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.SetRowSpan(this.filterTree' 3);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size(268' 393);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size(268' 393);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.TabIndex = 19;
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size(16' 16);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 3;
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 77F));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.treeListView1' 2' 0);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(12' 12);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(12' 12);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 3;
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 50F));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute' 77F));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 50F));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(626' 399);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(626' 399);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.TabIndex = 20;
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(277' 164);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point(277' 164);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(71' 69);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size(71' 69);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 20;
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.btnMoveRight.Location = new System.Drawing.Point(15' 10);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.btnMoveRight.Location = new System.Drawing.Point(15' 10);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.btnMoveRight.Size = new System.Drawing.Size(41' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.btnMoveRight.Size = new System.Drawing.Size(41' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(15' 39);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(15' 39);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(41' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(41' 23);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.Location = new System.Drawing.Point(354' 3);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.Location = new System.Drawing.Point(354' 3);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.SetRowSpan(this.treeListView1' 3);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.Size = new System.Drawing.Size(269' 393);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.Size = new System.Drawing.Size(269' 393);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.TabIndex = 19;
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(650' 452);
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(650' 452);
Magic Number,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,StringsEditor,The following statement contains a magic number: this.listStrings.AddBindingColumn("ID"' "ID"' 80' new Func<StringHolder' string>(a => a.ID.ToString("X8")));
Magic Number,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,StringsEditor,The following statement contains a magic number: this.listStrings.AddBindingColumn("Plugin"' "Source"' 80' new Func<StringHolder' string>(a => a.Plugin.Name));
Magic Number,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,StringsEditor,The following statement contains a magic number: this.listStrings.AddBindingColumn("Format"' "Format"' 50' HorizontalAlignment.Center);
Magic Number,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,StringsEditor,The following statement contains a magic number: this.listStrings.AddBindingColumn("Value"' "Value"' 500);
Magic Number,TESVSnip.UI.Forms,DataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\DataEdit.cs,tbName_Leave,The following statement contains a magic number: this.tbName.Text = this.tbName.Text.PadRight(4' '_');
Magic Number,TESVSnip.UI.Forms,DataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\DataEdit.cs,tbName_Leave,The following statement contains a magic number: this.tbName.Text.Length < 4
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,GroupEditor,The following statement contains a magic number: this.tbX.Text = TypeConverter.h2ss(data[2]' data[3]).ToString();
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,GroupEditor,The following statement contains a magic number: this.tbX.Text = TypeConverter.h2ss(data[2]' data[3]).ToString();
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,GroupEditor,The following statement contains a magic number: this.tbBlock.Text = TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]).ToString();
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,GroupEditor,The following statement contains a magic number: this.tbBlock.Text = TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]).ToString();
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,GroupEditor,The following statement contains a magic number: this.tbParent.Text = TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]).ToString("X8");
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,GroupEditor,The following statement contains a magic number: this.tbParent.Text = TypeConverter.h2i(data[0]' data[1]' data[2]' data[3]).ToString("X8");
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      if (this.tbRecType.TextLength != 4)                      {                          this.tbRecType.Focus();                          MessageBox.Show("Invalid parent record type. Needs to be 4 characters!");                          return;                      }                        data = new byte[4];                      Encoding.Instance.GetBytes(this.tbRecType.Text' 0' 4' data' 0);                      break;                  case 2:                  case 3:                      uint block;                      if (!uint.TryParse(this.tbBlock.Text' out block))                      {                          this.tbBlock.Focus();                          MessageBox.Show("Invalid value specified for block id");                          return;                      }                        data = TypeConverter.i2h(block);                      break;                  case 4:                  case 5:                      short x' y;                      if (!short.TryParse(this.tbX.Text' out x))                      {                          this.tbX.Focus();                          MessageBox.Show("Invalid value specified for x coord");                          return;                      }                        if (!short.TryParse(this.tbY.Text' out y))                      {                          this.tbY.Focus();                          MessageBox.Show("Invalid value specified for y coord");                          return;                      }                        data = new byte[4];                      TypeConverter.ss2h(x' data' 2);                      TypeConverter.ss2h(y' data' 0);                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      uint parent;                      if (!uint.TryParse(this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent))                      {                          this.tbParent.Focus();                          MessageBox.Show("Invalid value specified for parent");                          return;                      }                        data = TypeConverter.i2h(parent);                      break;                  default:                      this.cmbGroupType.Focus();                      MessageBox.Show("Sanity check failed; invalid group type");                      return;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      this.tbRecType.Enabled = true;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 2:                  case 3:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = true;                      break;                  case 4:                  case 5:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = true;                      this.tbY.Enabled = true;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = true;                      this.tbBlock.Enabled = false;                      break;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      this.tbRecType.Enabled = true;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 2:                  case 3:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = true;                      break;                  case 4:                  case 5:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = true;                      this.tbY.Enabled = true;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = true;                      this.tbBlock.Enabled = false;                      break;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      this.tbRecType.Enabled = true;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 2:                  case 3:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = true;                      break;                  case 4:                  case 5:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = true;                      this.tbY.Enabled = true;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = true;                      this.tbBlock.Enabled = false;                      break;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      this.tbRecType.Enabled = true;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 2:                  case 3:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = true;                      break;                  case 4:                  case 5:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = true;                      this.tbY.Enabled = true;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = true;                      this.tbBlock.Enabled = false;                      break;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      this.tbRecType.Enabled = true;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 2:                  case 3:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = true;                      break;                  case 4:                  case 5:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = true;                      this.tbY.Enabled = true;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = true;                      this.tbBlock.Enabled = false;                      break;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      this.tbRecType.Enabled = true;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 2:                  case 3:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = true;                      break;                  case 4:                  case 5:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = true;                      this.tbY.Enabled = true;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = true;                      this.tbBlock.Enabled = false;                      break;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      this.tbRecType.Enabled = true;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 2:                  case 3:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = true;                      break;                  case 4:                  case 5:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = true;                      this.tbY.Enabled = true;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = true;                      this.tbBlock.Enabled = false;                      break;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      this.tbRecType.Enabled = true;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 2:                  case 3:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = true;                      break;                  case 4:                  case 5:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = true;                      this.tbY.Enabled = true;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = true;                      this.tbBlock.Enabled = false;                      break;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      this.tbRecType.Enabled = true;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 2:                  case 3:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = true;                      break;                  case 4:                  case 5:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = true;                      this.tbY.Enabled = true;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = true;                      this.tbBlock.Enabled = false;                      break;              }
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,tbRecType_Leave,The following statement contains a magic number: this.tbRecType.Text = this.tbRecType.Text.PadRight(4' '_');
Magic Number,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,tbRecType_Leave,The following statement contains a magic number: this.tbRecType.Text.Length < 4
Magic Number,TESVSnip.UI.Forms,HeaderEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,HexValidCheck,The following statement contains a magic number: tb.Text = tb.Text.PadLeft(8' '0');
Magic Number,TESVSnip.UI.Forms,HeaderEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,HexValidCheck,The following statement contains a magic number: tb.Text.Length < 8
Magic Number,TESVSnip.UI.Forms,HeaderEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,bSave_Click,The following statement contains a magic number: this.tbName.Text = this.tbName.Text.PadRight(4' '_');
Magic Number,TESVSnip.UI.Forms,HeaderEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,bSave_Click,The following statement contains a magic number: this.tbName.Text.Length < 4
Magic Number,TESVSnip.UI.Forms,HeaderEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,tbName_Leave,The following statement contains a magic number: this.tbName.Text = this.tbName.Text.PadRight(4' '_');
Magic Number,TESVSnip.UI.Forms,HeaderEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,tbName_Leave,The following statement contains a magic number: this.tbName.Text.Length < 4
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFloat_Click,The following statement contains a magic number: this.bytes[pos + 2] = b[2];
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFloat_Click,The following statement contains a magic number: this.bytes[pos + 2] = b[2];
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFloat_Click,The following statement contains a magic number: this.bytes[pos + 3] = b[3];
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFloat_Click,The following statement contains a magic number: this.bytes[pos + 3] = b[3];
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFormID_Click,The following statement contains a magic number: this.bytes[pos + 2] = b[2];
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFormID_Click,The following statement contains a magic number: this.bytes[pos + 2] = b[2];
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFormID_Click,The following statement contains a magic number: this.bytes[pos + 3] = b[3];
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFormID_Click,The following statement contains a magic number: this.bytes[pos + 3] = b[3];
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCInt_Click,The following statement contains a magic number: this.bytes[pos + 2] = b[2];
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCInt_Click,The following statement contains a magic number: this.bytes[pos + 2] = b[2];
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCInt_Click,The following statement contains a magic number: this.bytes[pos + 3] = b[3];
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCInt_Click,The following statement contains a magic number: this.bytes[pos + 3] = b[3];
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFloat.Text = TypeConverter.h2f(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString();
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFloat.Text = TypeConverter.h2f(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString();
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbInt.Text = TypeConverter.h2si(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString();
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbInt.Text = TypeConverter.h2si(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString();
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFormID.Text = TypeConverter.h2i(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString("X8");
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFormID.Text = TypeConverter.h2i(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString("X8");
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.bytes.Count >= pos + 4
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.bytes.Count >= pos + 2
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,tbName_Leave,The following statement contains a magic number: this.tbName.Text = this.tbName.Text.PadRight(4' '_');
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,tbName_Leave,The following statement contains a magic number: this.tbName.Text.Length < 4
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));
Magic Number,TESVSnip.UI.Forms,HexDataEdit,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser1.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser1.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser1.Size = new System.Drawing.Size(376' 504);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser1.Size = new System.Drawing.Size(376' 504);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.selectionMenuStrip.Size = new System.Drawing.Size(145' 48);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.selectionMenuStrip.Size = new System.Drawing.Size(145' 48);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.copyToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.copyToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.asHTMLToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.asHTMLToolStripMenuItem.Size = new System.Drawing.Size(144' 22);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(376' 504);
Magic Number,TESVSnip.UI.Docking,HtmlContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(376' 504);
Magic Number,TESVSnip.UI.Docking,OutputTextContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.textBox.MaxLength = 2147483647;
Magic Number,TESVSnip.UI.Docking,OutputTextContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.textBox.Size = new System.Drawing.Size(376' 504);
Magic Number,TESVSnip.UI.Docking,OutputTextContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.textBox.Size = new System.Drawing.Size(376' 504);
Magic Number,TESVSnip.UI.Docking,OutputTextContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.textBox.TabIndex = 4;
Magic Number,TESVSnip.UI.Docking,OutputTextContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Docking,OutputTextContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Docking,OutputTextContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(376' 504);
Magic Number,TESVSnip.UI.Docking,OutputTextContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(376' 504);
Magic Number,TESVSnip.UI.Docking,InterpreterConsole,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\InterpreterConsole.cs,InitializeComponent,The following statement contains a magic number: this.elementHost1.Size = new System.Drawing.Size(722' 447);
Magic Number,TESVSnip.UI.Docking,InterpreterConsole,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\InterpreterConsole.cs,InitializeComponent,The following statement contains a magic number: this.elementHost1.Size = new System.Drawing.Size(722' 447);
Magic Number,TESVSnip.UI.Docking,InterpreterConsole,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\InterpreterConsole.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Docking,InterpreterConsole,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\InterpreterConsole.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Docking,InterpreterConsole,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\InterpreterConsole.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(722' 447);
Magic Number,TESVSnip.UI.Docking,InterpreterConsole,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\InterpreterConsole.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(722' 447);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.dockingMenuStrip.Size = new System.Drawing.Size(218' 98);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.dockingMenuStrip.Size = new System.Drawing.Size(218' 98);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.closeToolStripMenuItem.Size = new System.Drawing.Size(217' 22);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.closeToolStripMenuItem.Size = new System.Drawing.Size(217' 22);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.floatToolStripMenuItem.Size = new System.Drawing.Size(217' 22);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.floatToolStripMenuItem.Size = new System.Drawing.Size(217' 22);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.dockAsTabbedDocumentToolStripMenuItem.Size = new System.Drawing.Size(217' 22);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.dockAsTabbedDocumentToolStripMenuItem.Size = new System.Drawing.Size(217' 22);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem1.Size = new System.Drawing.Size(214' 6);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem1.Size = new System.Drawing.Size(214' 6);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(337' 242);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(337' 242);
Magic Number,TESVSnip.UI.Docking,BaseDockContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,TESVSnip.UI.Docking,SubrecordListContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\SubrecordListContent.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.MinimumSize = new System.Drawing.Size(192' 120);
Magic Number,TESVSnip.UI.Docking,SubrecordListContent,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\SubrecordListContent.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.MinimumSize = new System.Drawing.Size(192' 120);
Magic Number,TESVSnip.UI.Docking,FullRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.panelRecordEditor.Size = new System.Drawing.Size(692' 384);
Magic Number,TESVSnip.UI.Docking,FullRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.panelRecordEditor.Size = new System.Drawing.Size(692' 384);
Magic Number,TESVSnip.UI.Docking,FullRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Docking,FullRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Docking,FullRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(692' 384);
Magic Number,TESVSnip.UI.Docking,FullRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(692' 384);
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.MinimumSize = new System.Drawing.Size(200' 120);
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.MinimumSize = new System.Drawing.Size(200' 120);
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.Size = new System.Drawing.Size(633' 282);
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.Size = new System.Drawing.Size(633' 282);
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.TabIndex = 107;
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(633' 282);
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(633' 282);
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type)                              {                                  case ElementValueType.Int:                                      {                                          string tmps = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.UInt:                                      {                                          string tmps = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]).ToString("X8"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Short:                                      {                                          string tmps = TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2ss(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.UShort:                                      {                                          string tmps = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(TypeConverter.h2s(recdata[offset]' recdata[offset + 1]).ToString("X4"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.Append(" (").Append(sselem.options[k]).Append(")");                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  uint val = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset += 2;                                      }                                        break;                                  case ElementValueType.Byte:                                      {                                          string tmps = recdata[offset].ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.SByte:                                      {                                          string tmps = ((sbyte)recdata[offset]).ToString();                                          if (!sselem.notininfo)                                          {                                              if (sselem.hexview)                                              {                                                  s.Append(recdata[offset].ToString("X2"));                                              }                                              else                                              {                                                  s.Append(tmps);                                              }                                                if (sselem.options != null && sselem.options.Length > 0)                                              {                                                  for (int k = 0; k < sselem.options.Length; k += 2)                                                  {                                                      if (tmps == sselem.options[k + 1])                                                      {                                                          s.AppendFormat(" ({0})"' sselem.options[k]);                                                      }                                                  }                                              }                                              else if (sselem.flags != null && sselem.flags.Length > 0)                                              {                                                  int val = recdata[offset];                                                  var tmp2 = new StringBuilder();                                                  for (int k = 0; k < sselem.flags.Length; k++)                                                  {                                                      if ((val & (1 << k)) != 0)                                                      {                                                          if (tmp2.Length > 0)                                                          {                                                              tmp2.Append("' ");                                                          }                                                            tmp2.Append(sselem.flags[k]);                                                      }                                                  }                                                    if (tmp2.Length > 0)                                                  {                                                      s.AppendFormat(" ({0})"' tmp2);                                                  }                                              }                                          }                                            offset++;                                      }                                        break;                                  case ElementValueType.FormID:                                      {                                          uint id = TypeConverter.h2i(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(id.ToString("X8"));                                          }                                            if (id != 0 && formIDLookup != null)                                          {                                              s.Append(": ").Append(formIDLookup(id));                                          }                                            offset += 4;                                      }                                        break;                                  case ElementValueType.Float:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.h2f(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]));                                      }                                        offset += 4;                                      break;                                  case ElementValueType.String:                                      if (!sselem.notininfo)                                      {                                          while (recdata[offset] != 0)                                          {                                              s.Append((char)recdata[offset++]);                                          }                                      }                                      else                                      {                                          while (recdata[offset] != 0)                                          {                                              offset++;                                          }                                      }                                        offset++;                                      break;                                  case ElementValueType.Blob:                                      if (!sselem.notininfo)                                      {                                          s.Append(TypeConverter.GetHexData(recdata' offset' recdata.Length - offset));                                      }                                        offset += recdata.Length - offset;                                      break;                                  case ElementValueType.BString:                                      {                                          int len = TypeConverter.h2s(recdata[offset]' recdata[offset + 1]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 2' len));                                          }                                            offset += 2 + len;                                      }                                        break;                                  case ElementValueType.IString:                                      {                                          int len = TypeConverter.h2si(recdata[offset]' recdata[offset + 1]' recdata[offset + 2]' recdata[offset + 3]);                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset + 4' len));                                          }                                            offset += 4 + len;                                      }                                        break;                                  case ElementValueType.LString:                                      {                                          // Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code                                          int left = recdata.Length - offset;                                          var data = new ArraySegment<byte>(recdata' offset' left);                                          bool isString = TypeConverter.IsLikelyString(data);                                          uint id = TypeConverter.h2i(data);                                          string lvalue = strLookup(id);                                          if (!string.IsNullOrEmpty(lvalue) || !isString)                                          {                                              if (!sselem.notininfo)                                              {                                                  s.Append(id.ToString("X8"));                                              }                                                if (strLookup != null)                                              {                                                  s.Append(": ").Append(lvalue);                                              }                                                offset += 4;                                          }                                          else                                          {                                              if (!sselem.notininfo)                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      s.Append((char)recdata[offset++]);                                                  }                                              }                                              else                                              {                                                  while (recdata[offset] != 0)                                                  {                                                      offset++;                                                  }                                              }                                                offset++;                                          }                                      }                                        break;                                  case ElementValueType.Str4:                                      {                                          if (!sselem.notininfo)                                          {                                              s.Append(TESVSnip.Framework.Services.Encoding.Instance.GetString(recdata' offset' 4));                                          }                                            offset += 4;                                      }                                        break;                                  default:                                      throw new ApplicationException();                              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      desc += "Top " + rec.GetSubDesc();                      break;                  case 1:                      desc += "World children " + rec.GetSubDesc();                      break;                  case 2:                      desc += "Interior Cell Block " + rec.GetSubDesc();                      break;                  case 3:                      desc += "Interior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 4:                      desc += "Exterior Cell Block " + rec.GetSubDesc();                      break;                  case 5:                      desc += "Exterior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 6:                      desc += "Cell Children " + rec.GetSubDesc();                      break;                  case 7:                      desc += "Topic Children " + rec.GetSubDesc();                      break;                  case 8:                      desc += "Cell Persistent Children " + rec.GetSubDesc();                      break;                  case 9:                      desc += "Cell Temporary Children " + rec.GetSubDesc();                      break;                  case 10:                      desc += "Cell Visible Distant Children " + rec.GetSubDesc();                      break;                  default:                      desc += "Unknown";                      break;              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      desc += "Top " + rec.GetSubDesc();                      break;                  case 1:                      desc += "World children " + rec.GetSubDesc();                      break;                  case 2:                      desc += "Interior Cell Block " + rec.GetSubDesc();                      break;                  case 3:                      desc += "Interior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 4:                      desc += "Exterior Cell Block " + rec.GetSubDesc();                      break;                  case 5:                      desc += "Exterior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 6:                      desc += "Cell Children " + rec.GetSubDesc();                      break;                  case 7:                      desc += "Topic Children " + rec.GetSubDesc();                      break;                  case 8:                      desc += "Cell Persistent Children " + rec.GetSubDesc();                      break;                  case 9:                      desc += "Cell Temporary Children " + rec.GetSubDesc();                      break;                  case 10:                      desc += "Cell Visible Distant Children " + rec.GetSubDesc();                      break;                  default:                      desc += "Unknown";                      break;              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      desc += "Top " + rec.GetSubDesc();                      break;                  case 1:                      desc += "World children " + rec.GetSubDesc();                      break;                  case 2:                      desc += "Interior Cell Block " + rec.GetSubDesc();                      break;                  case 3:                      desc += "Interior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 4:                      desc += "Exterior Cell Block " + rec.GetSubDesc();                      break;                  case 5:                      desc += "Exterior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 6:                      desc += "Cell Children " + rec.GetSubDesc();                      break;                  case 7:                      desc += "Topic Children " + rec.GetSubDesc();                      break;                  case 8:                      desc += "Cell Persistent Children " + rec.GetSubDesc();                      break;                  case 9:                      desc += "Cell Temporary Children " + rec.GetSubDesc();                      break;                  case 10:                      desc += "Cell Visible Distant Children " + rec.GetSubDesc();                      break;                  default:                      desc += "Unknown";                      break;              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      desc += "Top " + rec.GetSubDesc();                      break;                  case 1:                      desc += "World children " + rec.GetSubDesc();                      break;                  case 2:                      desc += "Interior Cell Block " + rec.GetSubDesc();                      break;                  case 3:                      desc += "Interior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 4:                      desc += "Exterior Cell Block " + rec.GetSubDesc();                      break;                  case 5:                      desc += "Exterior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 6:                      desc += "Cell Children " + rec.GetSubDesc();                      break;                  case 7:                      desc += "Topic Children " + rec.GetSubDesc();                      break;                  case 8:                      desc += "Cell Persistent Children " + rec.GetSubDesc();                      break;                  case 9:                      desc += "Cell Temporary Children " + rec.GetSubDesc();                      break;                  case 10:                      desc += "Cell Visible Distant Children " + rec.GetSubDesc();                      break;                  default:                      desc += "Unknown";                      break;              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      desc += "Top " + rec.GetSubDesc();                      break;                  case 1:                      desc += "World children " + rec.GetSubDesc();                      break;                  case 2:                      desc += "Interior Cell Block " + rec.GetSubDesc();                      break;                  case 3:                      desc += "Interior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 4:                      desc += "Exterior Cell Block " + rec.GetSubDesc();                      break;                  case 5:                      desc += "Exterior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 6:                      desc += "Cell Children " + rec.GetSubDesc();                      break;                  case 7:                      desc += "Topic Children " + rec.GetSubDesc();                      break;                  case 8:                      desc += "Cell Persistent Children " + rec.GetSubDesc();                      break;                  case 9:                      desc += "Cell Temporary Children " + rec.GetSubDesc();                      break;                  case 10:                      desc += "Cell Visible Distant Children " + rec.GetSubDesc();                      break;                  default:                      desc += "Unknown";                      break;              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      desc += "Top " + rec.GetSubDesc();                      break;                  case 1:                      desc += "World children " + rec.GetSubDesc();                      break;                  case 2:                      desc += "Interior Cell Block " + rec.GetSubDesc();                      break;                  case 3:                      desc += "Interior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 4:                      desc += "Exterior Cell Block " + rec.GetSubDesc();                      break;                  case 5:                      desc += "Exterior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 6:                      desc += "Cell Children " + rec.GetSubDesc();                      break;                  case 7:                      desc += "Topic Children " + rec.GetSubDesc();                      break;                  case 8:                      desc += "Cell Persistent Children " + rec.GetSubDesc();                      break;                  case 9:                      desc += "Cell Temporary Children " + rec.GetSubDesc();                      break;                  case 10:                      desc += "Cell Visible Distant Children " + rec.GetSubDesc();                      break;                  default:                      desc += "Unknown";                      break;              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      desc += "Top " + rec.GetSubDesc();                      break;                  case 1:                      desc += "World children " + rec.GetSubDesc();                      break;                  case 2:                      desc += "Interior Cell Block " + rec.GetSubDesc();                      break;                  case 3:                      desc += "Interior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 4:                      desc += "Exterior Cell Block " + rec.GetSubDesc();                      break;                  case 5:                      desc += "Exterior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 6:                      desc += "Cell Children " + rec.GetSubDesc();                      break;                  case 7:                      desc += "Topic Children " + rec.GetSubDesc();                      break;                  case 8:                      desc += "Cell Persistent Children " + rec.GetSubDesc();                      break;                  case 9:                      desc += "Cell Temporary Children " + rec.GetSubDesc();                      break;                  case 10:                      desc += "Cell Visible Distant Children " + rec.GetSubDesc();                      break;                  default:                      desc += "Unknown";                      break;              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      desc += "Top " + rec.GetSubDesc();                      break;                  case 1:                      desc += "World children " + rec.GetSubDesc();                      break;                  case 2:                      desc += "Interior Cell Block " + rec.GetSubDesc();                      break;                  case 3:                      desc += "Interior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 4:                      desc += "Exterior Cell Block " + rec.GetSubDesc();                      break;                  case 5:                      desc += "Exterior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 6:                      desc += "Cell Children " + rec.GetSubDesc();                      break;                  case 7:                      desc += "Topic Children " + rec.GetSubDesc();                      break;                  case 8:                      desc += "Cell Persistent Children " + rec.GetSubDesc();                      break;                  case 9:                      desc += "Cell Temporary Children " + rec.GetSubDesc();                      break;                  case 10:                      desc += "Cell Visible Distant Children " + rec.GetSubDesc();                      break;                  default:                      desc += "Unknown";                      break;              }
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType)              {                  case 0:                      desc += "Top " + rec.GetSubDesc();                      break;                  case 1:                      desc += "World children " + rec.GetSubDesc();                      break;                  case 2:                      desc += "Interior Cell Block " + rec.GetSubDesc();                      break;                  case 3:                      desc += "Interior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 4:                      desc += "Exterior Cell Block " + rec.GetSubDesc();                      break;                  case 5:                      desc += "Exterior Cell Sub-Block " + rec.GetSubDesc();                      break;                  case 6:                      desc += "Cell Children " + rec.GetSubDesc();                      break;                  case 7:                      desc += "Topic Children " + rec.GetSubDesc();                      break;                  case 8:                      desc += "Cell Persistent Children " + rec.GetSubDesc();                      break;                  case 9:                      desc += "Cell Temporary Children " + rec.GetSubDesc();                      break;                  case 10:                      desc += "Cell Visible Distant Children " + rec.GetSubDesc();                      break;                  default:                      desc += "Unknown";                      break;              }
Magic Number,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupEntryname,The following statement contains a magic number: number < 9
Magic Number,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupPrefixes,The following statement contains a magic number: int offset = MenuItems[i].Text.Substring(0' 3) == "1&0" ? 5 : 4;
Magic Number,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupPrefixes,The following statement contains a magic number: int offset = MenuItems[i].Text.Substring(0' 3) == "1&0" ? 5 : 4;
Magic Number,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupPrefixes,The following statement contains a magic number: int offset = MenuItems[i].Text.Substring(0' 3) == "1&0" ? 5 : 4;
Magic Number,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: root.Length > 3
Magic Number,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: return root + elements[0].Substring(0' 3) + "...";
Magic Number,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: root.Length + 6 >= maxLength
Magic Number,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: elements[0].Length > 5
Magic Number,JWC,MruStripMenu,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,SaveToRegistry,The following statement contains a magic number: number <= 16
Magic Number,JWC,MruStripMenuInline,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\MruStripMenu.cs,MruStripMenuInline,The following statement contains a magic number: maxShortenPathLength = 48;
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,IsLikelyFloat,The following statement contains a magic number: return value != 0.0f && value >= 0.001f && value < 100000.0f;
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,IsLikelyFloat,The following statement contains a magic number: return value != 0.0f && value >= 0.001f && value < 100000.0f;
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,GetUInt32,The following statement contains a magic number: offset < 0 || offset + 4 > data.Length
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,GetUInt32,The following statement contains a magic number: return TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,GetUInt32,The following statement contains a magic number: return TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: ++szCount > 10
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: elem.size = 2;
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: elemSize = 2;
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: maxSize >= 2
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: maxSize - offset < 4
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: uint ui4 = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: uint ui4 = TypeConverter.h2i(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: ushort uhs = TypeConverter.h2s(data[offset + 2]' data[offset + 3]);
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: ushort uhs = TypeConverter.h2s(data[offset + 2]' data[offset + 3]);
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: float flt = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: float flt = TypeConverter.h2f(data[offset]' data[offset + 1]' data[offset + 2]' data[offset + 3]);
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: ui4 > 100
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: elem.size = 4;
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: numFloat > 0 && floatPct > 0.5f
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: minSize == maxSize && maxSize < 256
Magic Number,TESVSnip.UI,RecordBuilder,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordBuilder.cs,UpdateProgress,The following statement contains a magic number: var counter = (int) (++currentRecordIndex/(float) totalRecordCount*100.0f);
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFloat_Click,The following statement contains a magic number: this.bytes[pos + 2] = b[2];
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFloat_Click,The following statement contains a magic number: this.bytes[pos + 2] = b[2];
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFloat_Click,The following statement contains a magic number: this.bytes[pos + 3] = b[3];
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFloat_Click,The following statement contains a magic number: this.bytes[pos + 3] = b[3];
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFormID_Click,The following statement contains a magic number: this.bytes[pos + 2] = b[2];
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFormID_Click,The following statement contains a magic number: this.bytes[pos + 2] = b[2];
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFormID_Click,The following statement contains a magic number: this.bytes[pos + 3] = b[3];
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFormID_Click,The following statement contains a magic number: this.bytes[pos + 3] = b[3];
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCInt_Click,The following statement contains a magic number: this.bytes[pos + 2] = b[2];
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCInt_Click,The following statement contains a magic number: this.bytes[pos + 2] = b[2];
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCInt_Click,The following statement contains a magic number: this.bytes[pos + 3] = b[3];
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCInt_Click,The following statement contains a magic number: this.bytes[pos + 3] = b[3];
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFloat.Text = TypeConverter.h2f(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString();
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFloat.Text = TypeConverter.h2f(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString();
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbInt.Text = TypeConverter.h2si(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString();
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbInt.Text = TypeConverter.h2si(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString();
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFormID.Text = TypeConverter.h2i(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString("X8");
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFormID.Text = TypeConverter.h2i(this.bytes[pos]' this.bytes[pos + 1]' this.bytes[pos + 2]' this.bytes[pos + 3]).ToString("X8");
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.bytes.Count >= pos + 4
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.bytes.Count >= pos + 2
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.BytesPerLine = 12;
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(530' 240);
Magic Number,TESVSnip.UI.RecordControls,HexElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(530' 240);
Magic Number,TESVSnip.UI.RecordControls,BaseElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\BaseElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(204' 20);
Magic Number,TESVSnip.UI.RecordControls,BaseElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\BaseElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(204' 20);
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,bindingNavigatorAddNewItem2_Click,The following statement contains a magic number: switch (Element.type)                  {                      case ElementValueType.SByte:                      case ElementValueType.Byte:                      case ElementValueType.String:                      case ElementValueType.LString:                          bytes = new byte[1];                          break;                      case ElementValueType.Float:                      case ElementValueType.Str4:                      case ElementValueType.FormID:                      case ElementValueType.UInt:                      case ElementValueType.Int:                      case ElementValueType.IString:                          bytes = new byte[4];                          break;                      case ElementValueType.Short:                      case ElementValueType.UShort:                      case ElementValueType.BString:                          bytes = new byte[2];                          break;                  }
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,bindingNavigatorAddNewItem2_Click,The following statement contains a magic number: switch (Element.type)                  {                      case ElementValueType.SByte:                      case ElementValueType.Byte:                      case ElementValueType.String:                      case ElementValueType.LString:                          bytes = new byte[1];                          break;                      case ElementValueType.Float:                      case ElementValueType.Str4:                      case ElementValueType.FormID:                      case ElementValueType.UInt:                      case ElementValueType.Int:                      case ElementValueType.IString:                          bytes = new byte[4];                          break;                      case ElementValueType.Short:                      case ElementValueType.UShort:                      case ElementValueType.BString:                          bytes = new byte[2];                          break;                  }
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The following statement contains a magic number: this.controlPanel.MinimumSize = new System.Drawing.Size(80' 43);
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The following statement contains a magic number: this.controlPanel.MinimumSize = new System.Drawing.Size(80' 43);
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(250' 80);
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(250' 80);
Magic Number,TESVSnip.UI.RecordControls,OptionsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 48);
Magic Number,TESVSnip.UI.RecordControls,OptionsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 48);
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,UpdateAllControls,The following statement contains a magic number: switch (element.type)                  {                      case ElementValueType.SByte:                      case ElementValueType.Byte:                          value = (uint)TypeConverter.h2b(Data);                          flagSize = 4;                          break;                      case ElementValueType.Short:                      case ElementValueType.UShort:                          value = (uint)TypeConverter.h2s(Data);                          flagSize = 2;                          break;                      case ElementValueType.Int:                      case ElementValueType.UInt:                          value = TypeConverter.h2i(Data);                          flagSize = 1;                          break;                      default:                          value = 0;                          break;                  }
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,UpdateAllControls,The following statement contains a magic number: switch (element.type)                  {                      case ElementValueType.SByte:                      case ElementValueType.Byte:                          value = (uint)TypeConverter.h2b(Data);                          flagSize = 4;                          break;                      case ElementValueType.Short:                      case ElementValueType.UShort:                          value = (uint)TypeConverter.h2s(Data);                          flagSize = 2;                          break;                      case ElementValueType.Int:                      case ElementValueType.UInt:                          value = TypeConverter.h2i(Data);                          flagSize = 1;                          break;                      default:                          value = 0;                          break;                  }
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The following statement contains a magic number: this.cboFlags.ControlSize = new System.Drawing.Size(47' 16);
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The following statement contains a magic number: this.cboFlags.ControlSize = new System.Drawing.Size(47' 16);
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The following statement contains a magic number: this.cboFlags.DropSize = new System.Drawing.Size(121' 106);
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The following statement contains a magic number: this.cboFlags.DropSize = new System.Drawing.Size(121' 106);
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 48);
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 48);
Magic Number,TESVSnip.UI.RecordControls,LStringElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,UpdateLabel,The following statement contains a magic number: this.txtString.Height = 120;
Magic Number,TESVSnip.UI.RecordControls,LStringElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,UpdateLabel,The following statement contains a magic number: Height = 148;
Magic Number,TESVSnip.UI.RecordControls,LStringElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 48);
Magic Number,TESVSnip.UI.RecordControls,LStringElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 48);
Magic Number,TESVSnip.UI.RecordControls,FormIDElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,FormIDElement_SizeChanged,The following statement contains a magic number: this.cboFormID.Width = Width - this.cboFormID.Left - 8;
Magic Number,TESVSnip.UI.RecordControls,FormIDElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 48);
Magic Number,TESVSnip.UI.RecordControls,FormIDElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(200' 48);
Magic Number,TESVSnip.UI.RecordControls,OptionalElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionalElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(250' 46);
Magic Number,TESVSnip.UI.RecordControls,OptionalElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionalElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(250' 46);
Magic Number,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,SaveText,The following statement contains a magic number: tbText = tbText.Substring(2);
Magic Number,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,SaveText,The following statement contains a magic number: switch (element.type)              {                  case ElementValueType.UInt:                  case ElementValueType.FormID:                      {                          uint i;                          if (element.type == ElementValueType.FormID)                          {                              numStyle = NumberStyles.HexNumber;                          }                            if (!uint.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.i2h(i)));                          }                      }                        break;                  case ElementValueType.Int:                      {                          int i;                          if (!int.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.si2h(i)));                          }                      }                        break;                    case ElementValueType.Float:                      {                          float i;                          if (!float.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.f2h(i)));                          }                      }                        break;                  case ElementValueType.UShort:                      {                          ushort i;                          if (!ushort.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.s2h(i)));                          }                      }                        break;                  case ElementValueType.Short:                      {                          short i;                          if (!short.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.ss2h(i)));                          }                      }                        break;                  case ElementValueType.Byte:                      {                          byte i;                          if (!byte.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.b2h(i)));                          }                      }                        break;                  case ElementValueType.SByte:                      {                          sbyte i;                          if (!sbyte.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.sb2h(i)));                          }                      }                        break;                  case ElementValueType.String:                      SetCurrentData(new ArraySegment<byte>(TypeConverter.str2h(this.textBox.Text)));                      break;                  case ElementValueType.BString:                      SetCurrentData(new ArraySegment<byte>(TypeConverter.bstr2h(this.textBox.Text)));                      break;                  case ElementValueType.IString:                      SetCurrentData(new ArraySegment<byte>(TypeConverter.istr2h(this.textBox.Text)));                      break;                  case ElementValueType.LString:                      {                          // not handled                      }                        break;                  case ElementValueType.Str4:                      {                          var txtbytes = new byte[] { 0x32' 0x32' 0x32' 0x32 };                          System.Text.Encoding.Default.GetBytes(tbText' 0' Math.Min(4' tbText.Length)' txtbytes' 0);                          SetCurrentData(new ArraySegment<byte>(txtbytes));                      }                        break;              }
Magic Number,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateLabel,The following statement contains a magic number: this.textBox.Height = 120;
Magic Number,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateLabel,The following statement contains a magic number: Height = 120;
Magic Number,TESVSnip.Windows.Controls,BallonToolTip,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\ballontooltip.cs,CreateHandle,The following statement contains a magic number: initcommoncontrolsex1.dwICC = 8;
Magic Number,TESVSnip.Windows.Controls,GWinfoMultilineEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\ballontooltip.cs,EditValue,The following statement contains a magic number: textBox.Size = new Size(150' 80);
Magic Number,TESVSnip.Windows.Controls,GWinfoMultilineEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\ballontooltip.cs,EditValue,The following statement contains a magic number: textBox.Size = new Size(150' 80);
Magic Number,TESVSnip.Windows.Controls,BindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_CustomSort,The following statement contains a magic number: list.Count > 3
Magic Number,TESVSnip.Windows.Controls,Dropdown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\CheckedComboBox.cs,InitializeComponent,The following statement contains a magic number: cclb.Size = new Size(47' 15);
Magic Number,TESVSnip.Windows.Controls,Dropdown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\CheckedComboBox.cs,InitializeComponent,The following statement contains a magic number: cclb.Size = new Size(47' 15);
Magic Number,TESVSnip.Windows.Controls,Dropdown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\CheckedComboBox.cs,InitializeComponent,The following statement contains a magic number: AutoScaleDimensions = new SizeF(6F' 13F);
Magic Number,TESVSnip.Windows.Controls,Dropdown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\CheckedComboBox.cs,InitializeComponent,The following statement contains a magic number: AutoScaleDimensions = new SizeF(6F' 13F);
Magic Number,TESVSnip.Windows.Controls,Dropdown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\CheckedComboBox.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(47' 16);
Magic Number,TESVSnip.Windows.Controls,Dropdown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\CheckedComboBox.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(47' 16);
Magic Number,TESVSnip.Windows.Controls,CustomComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,ShowDropDown,The following statement contains a magic number: m_timerAutoFocus.Interval = 10;
Magic Number,TESVSnip.Windows.Controls,CustomComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,HIWORD,The following statement contains a magic number: return (uint) (n >> 16) & 0xffff;
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItemsFromType,The following statement contains a magic number: SetItems(names' 4' (uint[]) values);
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following statement contains a magic number: int numBits = 32;
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following statement contains a magic number: switch (flagSize)              {                  case 1:                      format = "X2";                      numBits = 8;                      break;                  case 2:                      format = "X4";                      numBits = 16;                      break;              }
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following statement contains a magic number: switch (flagSize)              {                  case 1:                      format = "X2";                      numBits = 8;                      break;                  case 2:                      format = "X4";                      numBits = 16;                      break;              }
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following statement contains a magic number: switch (flagSize)              {                  case 1:                      format = "X2";                      numBits = 8;                      break;                  case 2:                      format = "X4";                      numBits = 16;                      break;              }
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following statement contains a magic number: MaxDropDownItems = Math.Min(values.Length' 16);
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: int bits = (int)Math.Ceiling(Math.Log(raw) / Math.Log(2.0f));
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: int bytes = (bits / 4) + (((bits % 4) != 0) ? 1 : 0);
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: int bytes = (bits / 4) + (((bits % 4) != 0) ? 1 : 0);
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: bytes = ((bytes / 2) + ((bytes % 2 != 0) ? 1 : 0)) * 2;
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: bytes = ((bytes / 2) + ((bytes % 2 != 0) ? 1 : 0)) * 2;
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: bytes = ((bytes / 2) + ((bytes % 2 != 0) ? 1 : 0)) * 2;
Magic Number,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FindTopWindowByProcessId,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FindTopWindowByProcessId,The following statement contains a magic number: GetClassName(hwnd' sb' 64);
Magic Number,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,ToRGB,The following statement contains a magic number: return ((((color.R) | ((uint) (color.G) << 8)) | (((uint) (color.B)) << 16)));
Magic Number,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,ToRGB,The following statement contains a magic number: return ((((color.R) | ((uint) (color.G) << 8)) | (((uint) (color.B)) << 16)));
Magic Number,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FromRGB,The following statement contains a magic number: return Color.FromArgb(color & 0xFF' (color & 0xFF00) >> 8' (color & 0xFF0000) >> 16);
Magic Number,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FromRGB,The following statement contains a magic number: return Color.FromArgb(color & 0xFF' (color & 0xFF00) >> 8' (color & 0xFF0000) >> 16);
Magic Number,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,HRESULT_FACILITY,The following statement contains a magic number: return (((hr) >> 16) & 0x1fff);
Magic Number,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,HRESULT_SEVERITY,The following statement contains a magic number: return (((hr) >> 31) & 0x1);
Magic Number,TESVSnip.Windows.Controls,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,HRESULT_CUSTOMER,The following statement contains a magic number: return (((hr) >> 30) & 0x1);
Magic Number,TESVSnip.Windows.Controls,INITCOMMONCONTROLSEX,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,INITCOMMONCONTROLSEX,The following statement contains a magic number: dwSize = 8;
Magic Number,TESVSnip.Windows.Controls,GripRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,Render,The following statement contains a magic number: Render(g' location' new Size(16' 16)' mode);
Magic Number,TESVSnip.Windows.Controls,GripRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,Render,The following statement contains a magic number: Render(g' location' new Size(16' 16)' mode);
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle(SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle(SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle(SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle(1' Height - 16' 16' 16);
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle(1' Height - 16' 16' 16);
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle(1' Height - 16' 16' 16);
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,ResizeFromContent,The following statement contains a magic number: bounds.X -= bounds.Width - 2 - width;
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,ResizeFromContent,The following statement contains a magic number: width > 0 && bounds.Width - 2 > width
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: bounds.Location = new Point(1' 16);
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: bounds.Width = ClientRectangle.Width - 2;
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: bounds.Height = ClientRectangle.Height - 2;
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: bounds.Height -= 16;
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,SizeFromContent,The following statement contains a magic number: hostedControl.Location = new Point(1' 16);
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,SizeFromContent,The following statement contains a magic number: contentSize.Height += 16;
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,SizeFromContent,The following statement contains a magic number: contentSize.Width += 2;
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,SizeFromContent,The following statement contains a magic number: contentSize.Height += 2;
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,HIWORD,The following statement contains a magic number: return (n >> 16) & 0xffff;
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnGetMinMaxInfo,The following statement contains a magic number: minmax.minTrackSize = new Size(32' 32);
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnGetMinMaxInfo,The following statement contains a magic number: minmax.minTrackSize = new Size(32' 32);
Magic Number,TESVSnip.Windows.Controls,VirtualListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,WndProc,The following statement contains a magic number: switch (m.Msg)              {                  case 7: // WM_SETFOCUS                      //try { base.WndProc(ref m); } // skip immediate parent to avoid focus problems                      //catch{}                      m.Result = IntPtr.Zero;                      messageProcessed = true;                      break;                        // case (int)WindowsMessage.WM_REFLECT + (int)WindowsMessage.WM_NOTIFY:                  case (0x0400 + 0x1c00 + WM_NOTIFY):                      m.Result = IntPtr.Zero;                      nm1 = (NMHDR) m.GetLParam(typeof (NMHDR));                      switch (nm1.code)                      {                          case (int) ListViewNotificationCodes.LVN_ITEMCHANGED:                              messageProcessed = true;                              break;                            case (int) ListViewNotificationCodes.LVN_GETDISPINFOW:                              OnDispInfoNotice(ref m' false);                              messageProcessed = true;                              break;                                // ignore dragging as we are virtual and ListView doesnt like it.                          case (int) ListViewNotificationCodes.LVN_BEGINDRAG:                              OnBeginDrag(ref m);                              messageProcessed = true;                              break;                            case (int) ListViewNotificationCodes.LVN_BEGINRDRAG:                              OnBeginDrag(ref m);                              messageProcessed = true;                              break;                            case (int) NotificationCodes.NM_CUSTOMDRAW:                              m.Result = new IntPtr((int) OnCustomDraw(ref m));                              messageProcessed = true;                              break;                            case (int) ListViewNotificationCodes.LVN_ODSTATECHANGED:                              {                                  messageProcessed = true;                                  var lvod = (NMLVODSTATECHANGE) m.GetLParam(typeof (NMLVODSTATECHANGE));                                  int num1 = lvod.uOldState & (int) ListViewItemStates.LVIS_SELECTED;                                  int num2 = lvod.uNewState & (int) ListViewItemStates.LVIS_SELECTED;                                  if (num2 == num1)                                      return;                                  OnSelectedIndexChanged(EventArgs.Empty);                                  break;                              }                            default:                              break;                      }                      break;                    case WM_NOTIFY:                      nm1 = (NMHDR) m.GetLParam(typeof (NMHDR));                      if (nm1.code == (int) NotificationCodes.NM_RCLICK)                      {                          IntPtr header = SendMessage(Handle' (int) ListViewMessages.LVM_GETHEADER' IntPtr.Zero'                                                      IntPtr.Zero);                          uint curpos = GetMessagePos();                          Point ptheader = PointToClient(new Point((short) curpos' (int) curpos >> 16));                          var hdhti = new HDHITTESTINFO();                          hdhti.pt = ptheader;                          SendMessage(header' HeaderMessageCodes.HDM_HITTEST' IntPtr.Zero' ref hdhti);                          OnColumnRightClick(new ColumnClickEventArgs(hdhti.iItem));                      }                      else if (nm1.code == (int) HeaderNotificationCodes.HDN_ITEMCLICKW)                      {                          if (OnCustomSort(ref m))                          {                              m.Result = IntPtr.Zero;                              messageProcessed = true;                          }                      }                      break;                    case WM_ERASEBKGND:                      //removes flicker                      return;                    case WM_MOUSEHOVER:                      messageProcessed = true;                      break;                    case WM_PAINT:                      // The designer host does not call OnResize()                                          if (internalGraphics == null)                          OnResize(EventArgs.Empty);                        //Set up                       var updateRect = new RECT();                      if (GetUpdateRect(m.HWnd' ref updateRect' false) == 0)                          break;                        var paintStruct = new PAINTSTRUCT();                      IntPtr screenHdc = BeginPaint(m.HWnd' ref paintStruct);                      using (Graphics screenGraphics = Graphics.FromHdc(screenHdc))                      {                          //Draw Internal Graphics                          internalGraphics.Clear(BackColor);                          IntPtr hdc = internalGraphics.GetHdc();                          Message printClientMessage = Message.Create(Handle' WM_PRINTCLIENT' hdc' IntPtr.Zero);                          DefWndProc(ref printClientMessage);                          internalGraphics.ReleaseHdc(hdc);                            //Add the missing OnPaint() call                          OnPaint(new PaintEventArgs(internalGraphics' Rectangle.FromLTRB(                              updateRect.left'                              updateRect.top'                              updateRect.right'                              updateRect.bottom)));                            //Draw Screen Graphics                          screenGraphics.DrawImage(internalBitmap' 0' 0);                      }                        //Tear down                      EndPaint(m.HWnd' ref paintStruct);                      return;                    default:                      break;              }
Magic Number,TESVSnip.Windows.Controls,VirtualListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,WndProc,The following statement contains a magic number: switch (m.Msg)              {                  case 7: // WM_SETFOCUS                      //try { base.WndProc(ref m); } // skip immediate parent to avoid focus problems                      //catch{}                      m.Result = IntPtr.Zero;                      messageProcessed = true;                      break;                        // case (int)WindowsMessage.WM_REFLECT + (int)WindowsMessage.WM_NOTIFY:                  case (0x0400 + 0x1c00 + WM_NOTIFY):                      m.Result = IntPtr.Zero;                      nm1 = (NMHDR) m.GetLParam(typeof (NMHDR));                      switch (nm1.code)                      {                          case (int) ListViewNotificationCodes.LVN_ITEMCHANGED:                              messageProcessed = true;                              break;                            case (int) ListViewNotificationCodes.LVN_GETDISPINFOW:                              OnDispInfoNotice(ref m' false);                              messageProcessed = true;                              break;                                // ignore dragging as we are virtual and ListView doesnt like it.                          case (int) ListViewNotificationCodes.LVN_BEGINDRAG:                              OnBeginDrag(ref m);                              messageProcessed = true;                              break;                            case (int) ListViewNotificationCodes.LVN_BEGINRDRAG:                              OnBeginDrag(ref m);                              messageProcessed = true;                              break;                            case (int) NotificationCodes.NM_CUSTOMDRAW:                              m.Result = new IntPtr((int) OnCustomDraw(ref m));                              messageProcessed = true;                              break;                            case (int) ListViewNotificationCodes.LVN_ODSTATECHANGED:                              {                                  messageProcessed = true;                                  var lvod = (NMLVODSTATECHANGE) m.GetLParam(typeof (NMLVODSTATECHANGE));                                  int num1 = lvod.uOldState & (int) ListViewItemStates.LVIS_SELECTED;                                  int num2 = lvod.uNewState & (int) ListViewItemStates.LVIS_SELECTED;                                  if (num2 == num1)                                      return;                                  OnSelectedIndexChanged(EventArgs.Empty);                                  break;                              }                            default:                              break;                      }                      break;                    case WM_NOTIFY:                      nm1 = (NMHDR) m.GetLParam(typeof (NMHDR));                      if (nm1.code == (int) NotificationCodes.NM_RCLICK)                      {                          IntPtr header = SendMessage(Handle' (int) ListViewMessages.LVM_GETHEADER' IntPtr.Zero'                                                      IntPtr.Zero);                          uint curpos = GetMessagePos();                          Point ptheader = PointToClient(new Point((short) curpos' (int) curpos >> 16));                          var hdhti = new HDHITTESTINFO();                          hdhti.pt = ptheader;                          SendMessage(header' HeaderMessageCodes.HDM_HITTEST' IntPtr.Zero' ref hdhti);                          OnColumnRightClick(new ColumnClickEventArgs(hdhti.iItem));                      }                      else if (nm1.code == (int) HeaderNotificationCodes.HDN_ITEMCLICKW)                      {                          if (OnCustomSort(ref m))                          {                              m.Result = IntPtr.Zero;                              messageProcessed = true;                          }                      }                      break;                    case WM_ERASEBKGND:                      //removes flicker                      return;                    case WM_MOUSEHOVER:                      messageProcessed = true;                      break;                    case WM_PAINT:                      // The designer host does not call OnResize()                                          if (internalGraphics == null)                          OnResize(EventArgs.Empty);                        //Set up                       var updateRect = new RECT();                      if (GetUpdateRect(m.HWnd' ref updateRect' false) == 0)                          break;                        var paintStruct = new PAINTSTRUCT();                      IntPtr screenHdc = BeginPaint(m.HWnd' ref paintStruct);                      using (Graphics screenGraphics = Graphics.FromHdc(screenHdc))                      {                          //Draw Internal Graphics                          internalGraphics.Clear(BackColor);                          IntPtr hdc = internalGraphics.GetHdc();                          Message printClientMessage = Message.Create(Handle' WM_PRINTCLIENT' hdc' IntPtr.Zero);                          DefWndProc(ref printClientMessage);                          internalGraphics.ReleaseHdc(hdc);                            //Add the missing OnPaint() call                          OnPaint(new PaintEventArgs(internalGraphics' Rectangle.FromLTRB(                              updateRect.left'                              updateRect.top'                              updateRect.right'                              updateRect.bottom)));                            //Draw Screen Graphics                          screenGraphics.DrawImage(internalBitmap' 0' 0);                      }                        //Tear down                      EndPaint(m.HWnd' ref paintStruct);                      return;                    default:                      break;              }
Magic Number,TESVSnip.Windows.Controls,VirtualListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,GetItemText,The following statement contains a magic number: _ms_lvi.cchTextMax = 512;
Magic Number,TESVSnip.Windows.Controls,VirtualListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,GetItemText,The following statement contains a magic number: _ms_lvi.pszText = Marshal.AllocCoTaskMem((_ms_lvi.cchTextMax)*2 /*Marshal.SizeOf(typeof(char))*/);
Magic Number,TESVSnip.Windows.Controls,VirtualListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,AutoFitColumnHeaders,The following statement contains a magic number: heading.Width = -2;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,HexBox,The following statement contains a magic number: Font = new Font("Courier New"' 9F' FontStyle.Regular' GraphicsUnit.Point' ((0)));
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,HexBox,The following statement contains a magic number: _thumbTrackTimer.Interval = 50;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,ToScrollPos,The following statement contains a magic number: int max = 65535;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,FromScrollPos,The following statement contains a magic number: int max = 65535;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,ToScrollMax,The following statement contains a magic number: long max = 65535;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PerformScrollThumpPosition,The following statement contains a magic number: int difference = (_scrollVmax > 65535) ? 10 : 9;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PerformScrollThumpPosition,The following statement contains a magic number: int difference = (_scrollVmax > 65535) ? 10 : 9;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PerformScrollThumpPosition,The following statement contains a magic number: int difference = (_scrollVmax > 65535) ? 10 : 9;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,GetHexBytePositionInfo,The following statement contains a magic number: int hPos = (iX/3 + 1);
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,GetHexBytePositionInfo,The following statement contains a magic number: byteCharaterPos = (iX%3);
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,Find,The following statement contains a magic number: return -2;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,Find,The following statement contains a magic number: pos%1000 == 0
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: int nulls = 8 - info.Length;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: formattedInfo = new string('0'' 8 - info.Length) + info;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintHexStringSelected,The following statement contains a magic number: float bcWidth = (isLastLineChar) ? _charSize.Width*2 : _charSize.Width*3;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintHexStringSelected,The following statement contains a magic number: float bcWidth = (isLastLineChar) ? _charSize.Width*2 : _charSize.Width*3;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: SizeF charSize = CreateGraphics().MeasureString("A"' Font' 100' _stringFormat);
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: int marginLeft = 4;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: _recLineInfo = new Rectangle(_recContent.X + marginLeft'                                               _recContent.Y'                                               (int) (_charSize.Width*10)'                                               _recContent.Height);
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: _recHex.Width = (int) Math.Floor(((double) _iHexMaxHBytes)*_charSize.Width*3 + (2*_charSize.Width));
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: _recHex.Width = (int) Math.Floor(((double) _iHexMaxHBytes)*_charSize.Width*3 + (2*_charSize.Width));
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,GetBytePointF,The following statement contains a magic number: float x = (3*_charSize.Width)*gp.X + _recHex.X;
Magic Number,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,OnMouseWheel,The following statement contains a magic number: int linesToScroll = -(e.Delta*SystemInformation.MouseWheelScrollLines/120);
Magic Number,BrightIdeasSoftware,AutoCompleteCellEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,AutoCompleteCellEditor,The following statement contains a magic number: i < Math.Min(lv.GetItemCount()' 1000)
Magic Number,BrightIdeasSoftware,IntUpDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,IntUpDown,The following statement contains a magic number: Minimum = -9999999;
Magic Number,BrightIdeasSoftware,IntUpDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,IntUpDown,The following statement contains a magic number: Maximum = 9999999;
Magic Number,BrightIdeasSoftware,UintUpDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,UintUpDown,The following statement contains a magic number: Maximum = 9999999;
Magic Number,BrightIdeasSoftware,FloatCellEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,FloatCellEditor,The following statement contains a magic number: DecimalPlaces = 2;
Magic Number,BrightIdeasSoftware,FloatCellEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,FloatCellEditor,The following statement contains a magic number: Minimum = -9999999;
Magic Number,BrightIdeasSoftware,FloatCellEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,FloatCellEditor,The following statement contains a magic number: Maximum = 9999999;
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,SimpleDropSink,The following statement contains a magic number: timer.Interval = 250;
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,SimpleDropSink,The following statement contains a magic number: FeedbackColor = Color.FromArgb(180' Color.MediumBlue);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,HandleTimerTick,The following statement contains a magic number: const int GRACE_PERIMETER = 30;
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CalculateDropTarget,The following statement contains a magic number: const int SMALL_VALUE = 3;
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: close /= 2;
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: timer.Interval = ((pt.Y <= (r.Top + close/2)) ? 100 : 350);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: timer.Interval = ((pt.Y <= (r.Top + close/2)) ? 100 : 350);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: timer.Interval = ((pt.Y <= (r.Top + close/2)) ? 100 : 350);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,UpdateAfterCanDropEvent,The following statement contains a magic number: pt.Offset(5' 5);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,UpdateAfterCanDropEvent,The following statement contains a magic number: pt.Offset(5' 5);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackBackgroundTarget,The following statement contains a magic number: float penWidth = 12.0f;
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackBackgroundTarget,The following statement contains a magic number: r.Inflate((int) -penWidth/2' (int) -penWidth/2);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackBackgroundTarget,The following statement contains a magic number: r.Inflate((int) -penWidth/2' (int) -penWidth/2);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackItemTarget,The following statement contains a magic number: float diameter = r.Height/3;
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 180' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 180' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 270' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 270' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 0' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 90' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 90' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddLine(                          x' y + 5'                          x' y - 5);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddLine(                          x' y + 5'                          x' y - 5);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddLine(                          x' y + 6'                          x' y - 6);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddLine(                          x' y + 6'                          x' y - 6);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);
Magic Number,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);
Magic Number,BrightIdeasSoftware,DataSourceAdapter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\DataSourceAdapter.cs,ConfigureColumn,The following statement contains a magic number: column.Width = 32;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OnCellEditorValidating,The following statement contains a magic number: (Environment.TickCount - lastValidatingEvent) < 100
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,AutoResizeColumns,The following statement contains a magic number: c.Width = -2;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateReasonableTileSize,The following statement contains a magic number: int imageHeight = (LargeImageList == null ? 16 : LargeImageList.ImageSize.Height);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateReasonableTileSize,The following statement contains a magic number: int tileWidth = (TileSize.Width == 0 ? 200 : TileSize.Width);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: hitTestInfo = HitTest(sides.Y + 4' y);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: hitTestInfo = HitTest(sides.X - 4' y);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: hitTestInfo = HitTest(4' y);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The following statement contains a magic number: textBounds.X += 4;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The following statement contains a magic number: switch (hti.Column.TextAlign)              {                  case HorizontalAlignment.Center:                      textBounds.X += (cellBounds.Right - cellBounds.Left - textSize.Width)/2;                      break;                  case HorizontalAlignment.Right:                      textBounds.X = cellBounds.Right - textSize.Width;                      break;              }
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,WndProc,The following statement contains a magic number: switch (m.Msg)              {                  case 2: // WM_DESTROY                      if (!HandleDestroy(ref m))                          base.WndProc(ref m);                      break;                      //case 0x14: // WM_ERASEBKGND                      //    Can't do anything here since' when the control is double buffered' anything                      //    done here is immediately over-drawn                      //    break;                  case 0x0F: // WM_PAINT                      if (!HandlePaint(ref m))                          base.WndProc(ref m);                      break;                  case 0x46: // WM_WINDOWPOSCHANGING                      if (!HandleWindowPosChanging(ref m))                          base.WndProc(ref m);                      break;                  case 0x4E: // WM_NOTIFY                      if (!HandleNotify(ref m))                          base.WndProc(ref m);                      break;                  case 0x0100: // WM_KEY_DOWN                      if (!HandleKeyDown(ref m))                          base.WndProc(ref m);                      break;                  case 0x0102: // WM_CHAR                      if (!HandleChar(ref m))                          base.WndProc(ref m);                      break;                  case 0x0201: // WM_LBUTTONDOWN                      if (PossibleFinishCellEditing() && !HandleLButtonDown(ref m))                          base.WndProc(ref m);                      break;                  case 0x202: // WM_LBUTTONUP                      if (IsVistaOrLater && HasCollapsibleGroups)                          base.DefWndProc(ref m);                      base.WndProc(ref m);                      break;                  case 0x0203: // WM_LBUTTONDBLCLK                      if (PossibleFinishCellEditing() && !HandleLButtonDoubleClick(ref m))                          base.WndProc(ref m);                      break;                  case 0x0204: // WM_RBUTTONDOWN                      if (PossibleFinishCellEditing() && !HandleRButtonDown(ref m))                          base.WndProc(ref m);                      break;                  case 0x0206: // WM_RBUTTONDBLCLK                      if (PossibleFinishCellEditing() && !HandleRButtonDoubleClick(ref m))                          base.WndProc(ref m);                      break;                  case 0x204E: // WM_REFLECT_NOTIFY                      if (!HandleReflectNotify(ref m))                          base.WndProc(ref m);                      break;                  case 0x114: // WM_HSCROLL:                  case 0x115: // WM_VSCROLL:                      if (PossibleFinishCellEditing())                          base.WndProc(ref m);                      break;                  case 0x20A: // WM_MOUSEWHEEL:                  case 0x20E: // WM_MOUSEHWHEEL:                      if (PossibleFinishCellEditing())                          base.WndProc(ref m);                      break;                  case 0x7B: // WM_CONTEXTMENU                      if (!HandleContextMenu(ref m))                          base.WndProc(ref m);                      break;                  default:                      base.WndProc(ref m);                      break;              }
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleChar,The following statement contains a magic number: const int MILLISECONDS_BETWEEN_KEYPRESSES = 1000;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following statement contains a magic number: const int CDDS_POSTPAINT = 2;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following statement contains a magic number: const int CDDS_PREERASE = 3;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following statement contains a magic number: const int CDDS_POSTERASE = 4;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following statement contains a magic number: switch (nmcustomdraw.nmcd.dwDrawStage)              {                  case CDDS_PREPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_PREPAINT");                      // Remember which items were drawn during this paint cycle                      if (prePaintLevel == 0)                          drawnItems = new List<OLVListItem>();                        // If there are any items' we have to wait until at least one has been painted                      // before we draw the overlays. If there aren't any items' there will never be any                      // item paint events' so we can draw the overlays whenever                      isAfterItemPaint = (GetItemCount() == 0);                      prePaintLevel++;                      base.WndProc(ref m);                        // Make sure that we get postpaint notifications                      m.Result = (IntPtr) ((int) m.Result | CDRF_NOTIFYPOSTPAINT | CDRF_NOTIFYPOSTERASE);                      return true;                    case CDDS_POSTPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_POSTPAINT");                      prePaintLevel--;                        // When in group view' we have two problems. On XP' the control sends                      // a whole heap of PREPAINT/POSTPAINT messages before drawing any items.                      // We have to wait until after the first item paint before we draw overlays.                      // On Vista' we have a different problem. On Vista' the control nests calls                      // to PREPAINT and POSTPAINT. We only want to draw overlays on the outermost                      // POSTPAINT.                      if (prePaintLevel == 0 && (isMarqueSelecting || isAfterItemPaint))                      {                          shouldDoCustomDrawing = false;                            // Draw our overlays after everything has been drawn                          using (Graphics g = Graphics.FromHdc(nmcustomdraw.nmcd.hdc))                          {                              DrawAllDecorations(g' drawnItems);                          }                      }                      break;                    case CDDS_ITEMPREPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPREPAINT");                        // When in group view on XP' the control send a whole heap of PREPAINT/POSTPAINT                      // messages before drawing any items.                      // We have to wait until after the first item paint before we draw overlays                      isAfterItemPaint = true;                        // This scheme of catching custom draw msgs works fine' except                      // for Tile view. Something in .NET's handling of Tile view causes lots                      // of invalidates and erases. So' we just ignore completely                      // .NET's handling of Tile view and let the underlying control                      // do its stuff. Strangely' if the Tile view is                      // completely owner drawn' those erasures don't happen.                      if (View == View.Tile)                      {                          if (OwnerDraw && ItemRenderer != null)                              base.WndProc(ref m);                      }                      else                      {                          base.WndProc(ref m);                      }                        m.Result = (IntPtr) ((int) m.Result | CDRF_NOTIFYPOSTPAINT | CDRF_NOTIFYPOSTERASE);                      return true;                    case CDDS_ITEMPOSTPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPOSTPAINT");                      if (Columns.Count > 0)                      {                          OLVListItem olvi = GetItem((int) nmcustomdraw.nmcd.dwItemSpec);                          if (olvi != null)                              drawnItems.Add(olvi);                      }                      break;                    case CDDS_SUBITEMPREPAINT:                      //System.Diagnostics.Debug.WriteLine(String.Format("CDDS_SUBITEMPREPAINT ({0}'{1})"' (int)nmcustomdraw.nmcd.dwItemSpec' nmcustomdraw.iSubItem));                        // There is a bug in the .NET framework which appears when column 0 of an owner drawn listview                      // is dragged to another column position.                      // The bounds calculation always returns the left edge of column 0 as being 0.                      // The effects of this bug become apparent                      // when the listview is scrolled horizontally: the control can think that column 0                      // is no longer visible (the horizontal scroll position is subtracted from the bounds' giving a                      // rectangle that is offscreen). In those circumstances' column 0 is not redraw because                      // the control thinks it is not visible and so does not trigger a DrawSubItem event.                        // To fix this problem' we have to detected the situation -- owner drawing column 0 in any column except 0 --                      // trigger our own DrawSubItem' and then prevent the default processing from occuring.                        // Are we owner drawing column 0 when it's in any column except 0?                      if (!OwnerDraw)                          return false;                        int columnIndex = nmcustomdraw.iSubItem;                      if (columnIndex != 0)                          return false;                        int displayIndex = Columns[0].DisplayIndex;                      if (displayIndex == 0)                          return false;                        var rowIndex = (int) nmcustomdraw.nmcd.dwItemSpec;                      OLVListItem item = GetItem(rowIndex);                      if (item == null)                          return false;                        // OK. We have the error condition' so lets do what the .NET framework should do.                      // Trigger an event to draw column 0 when it is not at display index 0                      using (Graphics g = Graphics.FromHdc(nmcustomdraw.nmcd.hdc))                      {                          // Correctly calculate the bounds of cell 0                          Rectangle r = item.GetSubItemBounds(0);                            // We can hardcode "0" here since we know we are only doing this for column 0                          var args = new DrawListViewSubItemEventArgs(g' r' item' item.SubItems[0]' rowIndex' 0'                                                                      Columns[0]'                                                                      (ListViewItemStates) nmcustomdraw.nmcd.uItemState);                          OnDrawSubItem(args);                            // If the event handler wants to do the default processing (i.e. DrawDefault = true)' we are stuck.                          // There is no way we can force the default drawing because of the bug in .NET we are trying to get around.                          Trace.Assert(!args.DrawDefault' "Default drawing is impossible in this situation");                      }                      m.Result = (IntPtr) 4;                        return true;                    case CDDS_SUBITEMPOSTPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_SUBITEMPOSTPAINT");                      break;                        // I have included these stages' but it doesn't seem that they are sent for ListViews.                      // http://www.tech-archive.net/Archive/VC/microsoft.public.vc.mfc/2006-08/msg00220.html                    case CDDS_PREERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_PREERASE");                      break;                    case CDDS_POSTERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_POSTERASE");                      break;                    case CDDS_ITEMPREERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPREERASE");                      break;                    case CDDS_ITEMPOSTERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPOSTERASE");                      break;              }
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleLButtonDown,The following statement contains a magic number: int y = (m.LParam.ToInt32() >> 16) & 0xFFFF;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleRButtonDown,The following statement contains a magic number: int y = (m.LParam.ToInt32() >> 16) & 0xFFFF;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleLButtonDoubleClick,The following statement contains a magic number: int y = (m.LParam.ToInt32() >> 16) & 0xFFFF;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleRButtonDoubleClick,The following statement contains a magic number: int y = (m.LParam.ToInt32() >> 16) & 0xFFFF;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int NM_CLICK = -2;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int NM_DBLCLK = -3;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int NM_RDBLCLK = -6;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int NM_CUSTOMDRAW = -12;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int NM_RELEASEDCAPTURE = -16;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_ITEMCHANGED = -101;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_ITEMCHANGING = -100;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_MARQUEEBEGIN = -156;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_GETINFOTIP = -158;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_BEGINSCROLL = -180;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_ENDSCROLL = -181;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_LINKCLICK = -184;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVIF_STATE = 8;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCheckState,The following statement contains a magic number: switch ((state & 0xf000) >> 12)              {                  case 1:                      return CheckState.Unchecked;                  case 2:                      return CheckState.Checked;                  case 3:                      return CheckState.Indeterminate;                  default:                      return CheckState.Checked;              }
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCheckState,The following statement contains a magic number: switch ((state & 0xf000) >> 12)              {                  case 1:                      return CheckState.Unchecked;                  case 2:                      return CheckState.Checked;                  case 3:                      return CheckState.Indeterminate;                  default:                      return CheckState.Checked;              }
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCheckState,The following statement contains a magic number: switch ((state & 0xf000) >> 12)              {                  case 1:                      return CheckState.Unchecked;                  case 2:                      return CheckState.Checked;                  case 3:                      return CheckState.Indeterminate;                  default:                      return CheckState.Checked;              }
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int NM_CUSTOMDRAW = -12;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_FIRST = (0 - 300);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_ITEMCHANGINGW = (HDN_FIRST - 20);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_ITEMCLICKA = (HDN_FIRST - 2);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_ITEMCLICKW = (HDN_FIRST - 22);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_DIVIDERDBLCLICKA = (HDN_FIRST - 5);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_DIVIDERDBLCLICKW = (HDN_FIRST - 25);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_BEGINTRACKA = (HDN_FIRST - 6);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_BEGINTRACKW = (HDN_FIRST - 26);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_ENDTRACKA = (HDN_FIRST - 7);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_ENDTRACKW = (HDN_FIRST - 27);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_TRACKA = (HDN_FIRST - 8);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_TRACKW = (HDN_FIRST - 28);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: il.ImageSize = new Size(16' 16);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: il.ImageSize = new Size(16' 16);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: int midX = il.ImageSize.Width/2;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: int midY = (il.ImageSize.Height/2) - 1;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: int deltaX = midX - 2;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: int deltaY = deltaX/2;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,PostProcessOneRow,The following statement contains a magic number: displayIndex%2 == 1
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeResizedImage,The following statement contains a magic number: int x = Math.Max(0' (bm.Size.Width - image.Size.Width)/2);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeResizedImage,The following statement contains a magic number: int y = Math.Max(0' (bm.Size.Height - image.Size.Height)/2);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: StateImageList.ImageSize = new Size(16' 16);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: StateImageList.ImageSize = new Size(16' 16);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: StateImageList.ImageSize = new Size(16' RowHeight);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: TriStateCheckBoxes && StateImageList.Images.Count <= 2
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeCheckBoxImages,The following statement contains a magic number: il.ImageSize = new Size(16' 16);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeCheckBoxImages,The following statement contains a magic number: il.ImageSize = new Size(16' 16);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,AddCheckStateBitmap,The following statement contains a magic number: var location = new Point(b.Width/2 - 5' b.Height/2 - 6);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,AddCheckStateBitmap,The following statement contains a magic number: var location = new Point(b.Width/2 - 5' b.Height/2 - 6);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,AddCheckStateBitmap,The following statement contains a magic number: var location = new Point(b.Width/2 - 5' b.Height/2 - 6);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,AddCheckStateBitmap,The following statement contains a magic number: var location = new Point(b.Width/2 - 5' b.Height/2 - 6);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ShouldStartCellEdit,The following statement contains a magic number: return (lastMouseDownClickCount == 2 && CellEditActivation == CellEditActivateMode.DoubleClick);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,StartCellEdit,The following statement contains a magic number: cellEditor.Top += (r.Height - cellEditor.Height)/2;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellEditorBoundsStandard,The following statement contains a magic number: offset += SmallImageSize.Width + 2;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellEditorBoundsStandard,The following statement contains a magic number: offset += StateImageList.ImageSize.Width + 2;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellBounds,The following statement contains a magic number: r.Y < -10000000 || r.Y > 10000000
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellBounds,The following statement contains a magic number: r.Y < -10000000 || r.Y > 10000000
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellBounds,The following statement contains a magic number: r.X = sides.X + 4;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellBounds,The following statement contains a magic number: r.Width = sides.Y - sides.X - 5;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,GetFirstNonNullValue,The following statement contains a magic number: i < Math.Min(GetItemCount()' 1000)
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ConfigureAutoComplete,The following statement contains a magic number: ConfigureAutoComplete(tb' column' 1000);
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeEmptyListMsgOverlay,The following statement contains a magic number: textOverlay.BorderWidth = 2.0f;
Magic Number,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ShouldShowOverlays,The following statement contains a magic number: Screen.PrimaryScreen.BitsPerPixel < 32
Magic Number,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SelectAllItems,The following statement contains a magic number: SetItemState(list' -1' 2' 2);
Magic Number,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SelectAllItems,The following statement contains a magic number: SetItemState(list' -1' 2' 2);
Magic Number,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,DeselectAllItems,The following statement contains a magic number: SetItemState(list' -1' 2' 0);
Magic Number,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,GetColumnUnderPoint,The following statement contains a magic number: const int HHT_ONHEADER = 2;
Magic Number,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,GetColumnUnderPoint,The following statement contains a magic number: const int HHT_ONDIVIDER = 4;
Magic Number,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,GetDividerUnderPoint,The following statement contains a magic number: const int HHT_ONDIVIDER = 4;
Magic Number,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,ShowWithoutActivate,The following statement contains a magic number: const int SW_SHOWNA = 8;
Magic Number,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,HasHorizontalScrollBar,The following statement contains a magic number: const int GWL_STYLE = -16;
Magic Number,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,GetWindowLong,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SetWindowLong,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,BrightIdeasSoftware,NativeMethods,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SetGroupImageList,The following statement contains a magic number: const int LVSIL_GROUPHEADER = 3;
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,ApplyRotation,The following statement contains a magic number: m.RotateAt(Rotation' new Point(r.Left + r.Width/2' r.Top + r.Height/2));
Magic Number,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,ApplyRotation,The following statement contains a magic number: m.RotateAt(Rotation' new Point(r.Left + r.Width/2' r.Top + r.Height/2));
Magic Number,BrightIdeasSoftware,ImageAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawTransparentBitmap,The following statement contains a magic number: float a = transparency/255.0f;
Magic Number,BrightIdeasSoftware,ImageAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawTransparentBitmap,The following statement contains a magic number: transparency != 255
Magic Number,BrightIdeasSoftware,TextAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawBorderedText,The following statement contains a magic number: borderRect.Inflate((int) BorderWidth/2' (int) BorderWidth/2);
Magic Number,BrightIdeasSoftware,TextAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawBorderedText,The following statement contains a magic number: borderRect.Inflate((int) BorderWidth/2' (int) BorderWidth/2);
Magic Number,BrightIdeasSoftware,TextAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 180' 90);
Magic Number,BrightIdeasSoftware,TextAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 180' 90);
Magic Number,BrightIdeasSoftware,TextAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 270' 90);
Magic Number,BrightIdeasSoftware,TextAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 270' 90);
Magic Number,BrightIdeasSoftware,TextAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 0' 90);
Magic Number,BrightIdeasSoftware,TextAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 90' 90);
Magic Number,BrightIdeasSoftware,TextAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 90' 90);
Magic Number,BrightIdeasSoftware,TintedColumnDecoration,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,TintedColumnDecoration,The following statement contains a magic number: Tint = Color.FromArgb(15' Color.Blue);
Magic Number,BrightIdeasSoftware,EditingCellBorderDecoration,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,EditingCellBorderDecoration,The following statement contains a magic number: BorderPen = new Pen(Color.DarkBlue' 2);
Magic Number,BrightIdeasSoftware,EditingCellBorderDecoration,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,EditingCellBorderDecoration,The following statement contains a magic number: CornerRounding = 8;
Magic Number,BrightIdeasSoftware,EditingCellBorderDecoration,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,EditingCellBorderDecoration,The following statement contains a magic number: BoundsPadding = new Size(10' 8);
Magic Number,BrightIdeasSoftware,EditingCellBorderDecoration,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,EditingCellBorderDecoration,The following statement contains a magic number: BoundsPadding = new Size(10' 8);
Magic Number,BrightIdeasSoftware,LightBoxDecoration,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,LightBoxDecoration,The following statement contains a magic number: BoundsPadding = new Size(-1' 4);
Magic Number,BrightIdeasSoftware,LightBoxDecoration,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,LightBoxDecoration,The following statement contains a magic number: CornerRounding = 8.0f;
Magic Number,BrightIdeasSoftware,LightBoxDecoration,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,LightBoxDecoration,The following statement contains a magic number: FillBrush = new SolidBrush(Color.FromArgb(72' Color.Black));
Magic Number,BrightIdeasSoftware,ImageOverlay,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,Draw,The following statement contains a magic number: DrawImage(g' insetRect' Image' 255);
Magic Number,BrightIdeasSoftware,TextOverlay,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,Draw,The following statement contains a magic number: DrawText(g' insetRect' Text' 255);
Magic Number,BrightIdeasSoftware,BillboardOverlay,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,BillboardOverlay,The following statement contains a magic number: Transparency = 255;
Magic Number,BrightIdeasSoftware,BillboardOverlay,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,BillboardOverlay,The following statement contains a magic number: Font = new Font("Tahoma"' 10);
Magic Number,BrightIdeasSoftware,BillboardOverlay,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,Draw,The following statement contains a magic number: DrawBorderedText(g' textRect' Text' 255);
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,The following statement contains a magic number: switch (Column.TextAlign)                  {                      case HorizontalAlignment.Left:                          r.X = outer.Left;                          break;                      case HorizontalAlignment.Center:                          r.X = outer.Left + ((outer.Width - inner.Width)/2);                          break;                      case HorizontalAlignment.Right:                          r.X = outer.Right - inner.Width - 1;                          break;                  }
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,The following statement contains a magic number: r.Y = outer.Top + ((outer.Height - inner.Height)/2);
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,CalculateCheckBoxWidth,The following statement contains a magic number: return CheckBoxRenderer.GetGlyphSize(g' CheckBoxState.UncheckedNormal).Width + 6;
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,StandardRender,The following statement contains a magic number: r.X += 3;
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,StandardGetEditRectangle,The following statement contains a magic number: r.Width = Math.Max(r.Width - width' 40);
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawBackground,The following statement contains a magic number: g.FillRectangle(brush' r.X - 1' r.Y - 1' r.Width + 2' r.Height + 2);
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawBackground,The following statement contains a magic number: g.FillRectangle(brush' r.X - 1' r.Y - 1' r.Width + 2' r.Height + 2);
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: int switchValue = (imageIndex << 4);
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: CheckBoxRenderer.DrawCheckBox(g' new Point(r.X + 3' r.Y + (r.Height/2) - 6)' boxState);
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: CheckBoxRenderer.DrawCheckBox(g' new Point(r.X + 3' r.Y + (r.Height/2) - 6)' boxState);
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: CheckBoxRenderer.DrawCheckBox(g' new Point(r.X + 3' r.Y + (r.Height/2) - 6)' boxState);
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: return CheckBoxRenderer.GetGlyphSize(g' boxState).Width + 6;
Magic Number,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawImage,The following statement contains a magic number: top += ((r.Height - image.Size.Height)/2);
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawGdiTextHighlighting,The following statement contains a magic number: int paddingAdjustment = 6;
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawGdiTextHighlighting,The following statement contains a magic number: DrawSubstringFrame(g' r.X + precedingTextSize.Width + 1' r.Top'                                     textToHighlightSize.Width' r.Height - 2);
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawSubstringFrame,The following statement contains a magic number: GraphicsPath path = GetRoundedRect(x' y' width' height' 3.0f);
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawGdiPlusTextHighlighting,The following statement contains a magic number: DrawSubstringFrame(g' bounds.X - 1' bounds.Y - 1' bounds.Width + 2' bounds.Height);
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 180' 90);
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 180' 90);
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 270' 90);
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 270' 90);
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 0' 90);
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 90' 90);
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 90' 90);
Magic Number,BrightIdeasSoftware,MappedImageRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,MappedImageRenderer,The following statement contains a magic number: (keysAndImages.GetLength(0)%2) != 0
Magic Number,BrightIdeasSoftware,ImageRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,OnTimer,The following statement contains a magic number: tickler.Change(1000' Timeout.Infinite);
Magic Number,BrightIdeasSoftware,ImageRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,OnTimerInThread,The following statement contains a magic number: tickler.Change(1000' Timeout.Infinite);
Magic Number,BrightIdeasSoftware,ImageRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,OnTimerInThread,The following statement contains a magic number: long nextCheckAt = elapsedMilliseconds + 1000;
Magic Number,BrightIdeasSoftware,AnimationState,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: int delay = (pi.Value[i + 3] << 24) + (pi.Value[i + 2] << 16) + (pi.Value[i + 1] << 8) +                                          pi.Value[i];
Magic Number,BrightIdeasSoftware,AnimationState,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: int delay = (pi.Value[i + 3] << 24) + (pi.Value[i + 2] << 16) + (pi.Value[i + 1] << 8) +                                          pi.Value[i];
Magic Number,BrightIdeasSoftware,AnimationState,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: int delay = (pi.Value[i + 3] << 24) + (pi.Value[i + 2] << 16) + (pi.Value[i + 1] << 8) +                                          pi.Value[i];
Magic Number,BrightIdeasSoftware,AnimationState,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: int delay = (pi.Value[i + 3] << 24) + (pi.Value[i + 2] << 16) + (pi.Value[i + 1] << 8) +                                          pi.Value[i];
Magic Number,BrightIdeasSoftware,AnimationState,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: int delay = (pi.Value[i + 3] << 24) + (pi.Value[i + 2] << 16) + (pi.Value[i + 1] << 8) +                                          pi.Value[i];
Magic Number,BrightIdeasSoftware,AnimationState,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: imageDuration.Add(delay*10);
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: int h = 8;
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: int w = 8;
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: int x = r.X + 4;
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: int y = r.Y + (r.Height/2) - 4;
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: int y = r.Y + (r.Height/2) - 4;
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: g.DrawLine(Pens.Black' x + 2' y + 4' x + w - 2' y + 4);
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: g.DrawLine(Pens.Black' x + 2' y + 4' x + w - 2' y + 4);
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: g.DrawLine(Pens.Black' x + 2' y + 4' x + w - 2' y + 4);
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: g.DrawLine(Pens.Black' x + 2' y + 4' x + w - 2' y + 4);
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: g.DrawLine(Pens.Black' x + 4' y + 2' x + 4' y + h - 2);
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: g.DrawLine(Pens.Black' x + 4' y + 2' x + 4' y + h - 2);
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: g.DrawLine(Pens.Black' x + 4' y + 2' x + 4' y + h - 2);
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: g.DrawLine(Pens.Black' x + 4' y + 2' x + 4' y + h - 2);
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawLines,The following statement contains a magic number: midX = r2.Left + r2.Width/2;
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawLines,The following statement contains a magic number: midX = r2.Left + r2.Width/2;
Magic Number,BrightIdeasSoftware,TreeRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawLines,The following statement contains a magic number: int midY = r2.Top + r2.Height/2;
Magic Number,BrightIdeasSoftware,GlassPanelForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: Opacity = 0.5f;
Magic Number,BrightIdeasSoftware,GlassPanelForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: BackColor = Color.FromArgb(255' 254' 254' 254);
Magic Number,BrightIdeasSoftware,GlassPanelForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: BackColor = Color.FromArgb(255' 254' 254' 254);
Magic Number,BrightIdeasSoftware,GlassPanelForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: BackColor = Color.FromArgb(255' 254' 254' 254);
Magic Number,BrightIdeasSoftware,GlassPanelForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: BackColor = Color.FromArgb(255' 254' 254' 254);
Magic Number,BrightIdeasSoftware,GlassPanelForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,HideGlass,The following statement contains a magic number: Bounds = new Rectangle(-10000' -10000' 1' 1);
Magic Number,BrightIdeasSoftware,GlassPanelForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,HideGlass,The following statement contains a magic number: Bounds = new Rectangle(-10000' -10000' 1' 1);
Magic Number,BrightIdeasSoftware,GlassPanelForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,UpdateTransparency,The following statement contains a magic number: Opacity = objectListView.OverlayTransparency/255.0f;
Magic Number,BrightIdeasSoftware,GlassPanelForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,WndProc,The following statement contains a magic number: const int WM_NCHITTEST = 132;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: return TextRenderer.MeasureText(g' column.Text' f' new Size(10000' 10000)' flags).Width;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: return TextRenderer.MeasureText(g' column.Text' f' new Size(10000' 10000)' flags).Width;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: const int fudge = 9;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: r.Width -= 6;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: r.Width -= 16;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: r.Width -= column.ImageList.ImageSize.Width + 3;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: SizeF size = TextRenderer.MeasureText(g' column.Text' f' new Size(r.Width' 100)' flags);
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,GetItemRect,The following statement contains a magic number: const int HDM_GETITEMRECT = HDM_FIRST + 7;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,WndProc,The following statement contains a magic number: const int WM_DESTROY = 2;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,WndProc,The following statement contains a magic number: const int HDM_LAYOUT = (HDM_FIRST + 5);
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,The following statement contains a magic number: const int CDRF_NEWFONT = 2;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,The following statement contains a magic number: const int CDRF_SKIPDEFAULT = 4;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,The following statement contains a magic number: const int CDDS_POSTPAINT = 2;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: part = 2;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: part = 3;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: state = 3;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedSortIndicator,The following statement contains a magic number: pt = new Point(r.X + (r.Width/2) - (sz.Width/2)' r.Y);
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedSortIndicator,The following statement contains a magic number: pt = new Point(r.X + (r.Width/2) - (sz.Width/2)' r.Y);
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: const int triangleHeight = 16;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: const int triangleWidth = 16;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: const int midX = triangleWidth/2;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: const int midY = (triangleHeight/2) - 1;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: const int deltaX = midX - 2;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: const int deltaY = deltaX/2;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: var triangleLocation = new Point(r.Right - triangleWidth - 2' r.Top + (r.Height - triangleHeight)/2);
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: var triangleLocation = new Point(r.Right - triangleWidth - 2' r.Top + (r.Height - triangleHeight)/2);
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: pts[2].Offset(midX + deltaX' midY + deltaY);
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawFilterIndicator,The following statement contains a magic number: int y = r.Top + (r.Height - indicator.Height)/2;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateFilterIndicatorWidth,The following statement contains a magic number: Resources.ColumnFilterIndicator == null || r.Width < 48
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawHeaderImageAndText,The following statement contains a magic number: r.Inflate(-3' 0);
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawHeaderImageAndText,The following statement contains a magic number: r.Y -= 2;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawHeaderImageAndText,The following statement contains a magic number: const int imageTextGap = 3;
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawImageAndText,The following statement contains a magic number: int imageY = r.Top + ((r.Height - column.ImageList.ImageSize.Height)/2);
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawImageAndText,The following statement contains a magic number: imageX = textRect.Left + ((textRect.Width - textSize.Width)/2);
Magic Number,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawVerticalText,The following statement contains a magic number: m.RotateAt(-90' new Point(r.X' r.Bottom));
Magic Number,BrightIdeasSoftware,ToolStripCheckedListBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolStripCheckedListBox.cs,ToolStripCheckedListBox,The following statement contains a magic number: CheckedListBoxControl.MaximumSize = new Size(400' 700);
Magic Number,BrightIdeasSoftware,ToolStripCheckedListBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolStripCheckedListBox.cs,ToolStripCheckedListBox,The following statement contains a magic number: CheckedListBoxControl.MaximumSize = new Size(400' 700);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Location = new System.Drawing.Point(295' 31);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Location = new System.Drawing.Point(295' 31);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Location = new System.Drawing.Point(295' 60);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Location = new System.Drawing.Point(295' 60);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.TabIndex = 2;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.Location = new System.Drawing.Point(295' 89);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.Location = new System.Drawing.Point(295' 89);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.TabIndex = 3;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.Location = new System.Drawing.Point(295' 118);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.Location = new System.Drawing.Point(295' 118);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.TabIndex = 4;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 9);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 9);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(366' 19);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(366' 19);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 5;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(198' 304);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(198' 304);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.TabIndex = 6;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(295' 304);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(295' 304);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.TabIndex = 7;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.AlternateRowBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.AlternateRowBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.AlternateRowBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.Location = new System.Drawing.Point(12' 31);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.Location = new System.Drawing.Point(12' 31);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.Size = new System.Drawing.Size(273' 259);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.Size = new System.Drawing.Size(273' 259);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.olvColumn1.Width = 267;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(391' 339);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(391' 339);
Magic Number,BrightIdeasSoftware,VirtualObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,DisableVirtualGroups,The following statement contains a magic number: const int LVM_ENABLEGROUPVIEW = 0x1000 + 157;
Magic Number,BrightIdeasSoftware,VirtualObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,EnableVirtualGroups,The following statement contains a magic number: const int LVM_ENABLEGROUPVIEW = 0x1000 + 157;
Magic Number,RichTextBoxLinks,RichTextBoxEx,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,GetSelectionStyle,The following statement contains a magic number: cf.szFaceName = new char[32];
Magic Number,RichTextBoxLinks,RichTextBoxEx,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: int end = base.Find("@:#"' start + 3' RichTextBoxFinds.NoHighlight);
Magic Number,RichTextBoxLinks,RichTextBoxEx,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: base.Select(start' end - start + 3);
Magic Number,RichTextBoxLinks,RichTextBoxEx,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: int link = int.Parse(text.Substring(3' text.Length - 6));
Magic Number,RichTextBoxLinks,RichTextBoxEx,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: int link = int.Parse(text.Substring(3' text.Length - 6));
Magic Number,RichTextBoxLinks,RichTextBoxEx,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,ConvertFromENLINK64,The following statement contains a magic number: enlink.nmhdr.idFrom = Marshal.ReadIntPtr((IntPtr) (numRef + 8));
Magic Number,RichTextBoxLinks,RichTextBoxEx,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,EnLinkMsgHandler,The following statement contains a magic number: IntPtr.Size == 8
Magic Number,RichTextBoxLinks,UnicodeCharBuffer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,AllocCoTaskMem,The following statement contains a magic number: IntPtr destination = Marshal.AllocCoTaskMem(buffer.Length*2);
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,RecordEditor,The following statement contains a magic number: this.comboBox1.SetItems(FlagDefs.RecFlags1' 4);
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.ControlSize = new System.Drawing.Size(47' 16);
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.ControlSize = new System.Drawing.Size(47' 16);
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.DropSize = new System.Drawing.Size(121' 106);
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.DropSize = new System.Drawing.Size(121' 106);
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.subrecordListEditor.MinimumSize = new System.Drawing.Size(200' 120);
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.subrecordListEditor.MinimumSize = new System.Drawing.Size(200' 120);
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.elementEditor.MinimumSize = new System.Drawing.Size(300' 200);
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.elementEditor.MinimumSize = new System.Drawing.Size(300' 200);
Magic Number,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_OnContextMenuKey,The following statement contains a magic number: this.contextMenuRecord.Show(this.PluginTree.PointToScreen(new Point(this.PluginTree.Width / 4' this.PluginTree.Height / 4)));
Magic Number,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_OnContextMenuKey,The following statement contains a magic number: this.contextMenuRecord.Show(this.PluginTree.PointToScreen(new Point(this.PluginTree.Width / 4' this.PluginTree.Height / 4)));
Magic Number,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The following statement contains a magic number: this.PluginTree.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,ApplyColumnSettings,The following statement contains a magic number: var column = new OLVColumn                          {                              Text = dispName'                               Name = colName'                               AspectName = setting.Name'                               Width = 80'                               IsVisible = true'                               Groupable = true'                               Tag = setting'                               AspectGetter = x => {                                  var rec = x as Record;                                  var sr = rec != null ? rec.SubRecords.FirstOrDefault(r => r.Name == type) : null;                                  var se = sr != null ? sr.EnumerateElements().FirstOrDefault(e => e.Structure.name == name) : null;                                  return se != null ? sr.GetDisplayValue(se) : null;                              }                          };
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,BackgroundIncrementalSearch,The following statement contains a magic number: Predicate<BaseRecord> updateFunc = n => {                  if (this.IsBackroundProcessCanceled())                  {                      // returning true will stop it                      return false;                  }                    var counter = (int)(++currentCount / totalNodes * 100.0f);                  if (counter != prevCount)                  {                      prevCount = counter;                      if (counter % 10 == 0)                      {                          this.UpdateBackgroundProgress(counter);                      }                  }                    return true;              };
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,BackgroundIncrementalSearch,The following statement contains a magic number: Predicate<BaseRecord> updateFunc = n => {                  if (this.IsBackroundProcessCanceled())                  {                      // returning true will stop it                      return false;                  }                    var counter = (int)(++currentCount / totalNodes * 100.0f);                  if (counter != prevCount)                  {                      prevCount = counter;                      if (counter % 10 == 0)                      {                          this.UpdateBackgroundProgress(counter);                      }                  }                    return true;              };
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following statement contains a magic number: switch (ctx.Type)              {                  case SearchType.FormID:                      {                          if (string.IsNullOrEmpty(ctx.Text))                          {                              return null;                          }                            uint searchID;                          if (!uint.TryParse(ctx.Text' NumberStyles.AllowHexSpecifier' null' out searchID))                          {                              MainView.PostStatusWarning("Invalid FormID");                              return null;                          }                            searchFunction = node => {                              var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                return rec.FormID == searchID;                          };                      }                        break;                  case SearchType.TypeEditorIdSearch:                  case SearchType.EditorID:                      {                          if (ctx.Type == SearchType.TypeEditorIdSearch && string.IsNullOrEmpty(ctx.Rectype))                          {                              return null;                          }                            if (ctx.Type == SearchType.EditorID && string.IsNullOrEmpty(ctx.Text))                          {                              return null;                          }                            string searchString = string.IsNullOrEmpty(ctx.Text) ? null : ctx.Text.ToLowerInvariant();                          searchFunction = node => {                              if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                bool typeOk = true;                              if (ctx.Type == SearchType.TypeEditorIdSearch)                              {                                  typeOk = !string.IsNullOrEmpty(rec.Name) && string.Compare(rec.Name' ctx.Rectype' true) == 0;                              }                                if (typeOk)                              {                                  if (string.IsNullOrEmpty(searchString))                                  {                                      return true;                                  }                                  else if (ctx.Partial)                                  {                                      var val = rec.DescriptiveName.ToLowerInvariant();                                      if (val.Contains(searchString))                                      {                                          return true;                                      }                                  }                                  else                                  {                                      var val = rec.DescriptiveName.ToLowerInvariant().Substring(2' rec.DescriptiveName.Length - 3);                                        if (val == searchString)                                      {                                          return true;                                      }                                  }                              }                                return false;                          };                      }                        break;                  case SearchType.TypeFullSearch:                  case SearchType.FullSearch:                      {                          if (ctx.Type == SearchType.TypeFullSearch && string.IsNullOrEmpty(ctx.Rectype))                          {                              return null;                          }                            if (ctx.Type == SearchType.FullSearch && string.IsNullOrEmpty(ctx.Text))                          {                              return null;                          }                            string searchString = ctx.Text.ToLowerInvariant();                          searchFunction = node => {                              if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                bool typeOk = true;                              if (ctx.Type == SearchType.TypeFullSearch)                              {                                  typeOk = !string.IsNullOrEmpty(rec.Name) && string.Compare(rec.Name' ctx.Rectype' true) == 0;                              }                                if (typeOk)                              {                                  foreach (SubRecord sr in rec.SubRecords)                                  {                                      var val = sr.GetStrData();                                      if (!string.IsNullOrEmpty(val))                                      {                                          val = val.ToLowerInvariant();                                          if ((ctx.Partial && val.Contains(searchString)) || (val == searchString))                                          {                                              return true;                                          }                                      }                                  }                              }                                return false;                          };                      }                        break;                  case SearchType.FormIDRef:                      {                          if (string.IsNullOrEmpty(ctx.Text))                          {                              return null;                          }                            uint searchID;                          if (!uint.TryParse(ctx.Text' NumberStyles.AllowHexSpecifier' null' out searchID))                          {                              MainView.PostStatusWarning("Invalid FormID");                              return null;                          }                            searchFunction = node => {                              if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                if (rec != null)                              {                                  rec.MatchRecordStructureToRecord();                                  if (                                      (from sr in rec.SubRecords from elem in rec.EnumerateElements(sr) let es = elem.Structure where es != null && es.type == ElementValueType.FormID select elem).Any(                                          elem => searchID == TypeConverter.h2i(elem.Data)))                                  {                                      return true;                                  }                              }                                return false;                          };                      }                        break;                    case SearchType.BasicCriteriaRef:                      {                          if (ctx.Criteria == null || !ctx.Criteria.Items.Any())                          {                              MainView.PostStatusWarning("No search criteria selected!");                              return null;                          }                            searchFunction = node => {                              if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                if (ctx.Criteria.Type != rec.Name)                              {                                  return false;                              }                                rec.MatchRecordStructureToRecord();                              bool all = false;                              foreach (var m in ctx.Criteria.Items)                              {                                  bool ok = m.Match(rec);                                  if (!ok)                                  {                                      return false;                                  }                                    all = true;                              }                                return all;                          };                      }                        break;              }
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following statement contains a magic number: switch (ctx.Type)              {                  case SearchType.FormID:                      {                          if (string.IsNullOrEmpty(ctx.Text))                          {                              return null;                          }                            uint searchID;                          if (!uint.TryParse(ctx.Text' NumberStyles.AllowHexSpecifier' null' out searchID))                          {                              MainView.PostStatusWarning("Invalid FormID");                              return null;                          }                            searchFunction = node => {                              var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                return rec.FormID == searchID;                          };                      }                        break;                  case SearchType.TypeEditorIdSearch:                  case SearchType.EditorID:                      {                          if (ctx.Type == SearchType.TypeEditorIdSearch && string.IsNullOrEmpty(ctx.Rectype))                          {                              return null;                          }                            if (ctx.Type == SearchType.EditorID && string.IsNullOrEmpty(ctx.Text))                          {                              return null;                          }                            string searchString = string.IsNullOrEmpty(ctx.Text) ? null : ctx.Text.ToLowerInvariant();                          searchFunction = node => {                              if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                bool typeOk = true;                              if (ctx.Type == SearchType.TypeEditorIdSearch)                              {                                  typeOk = !string.IsNullOrEmpty(rec.Name) && string.Compare(rec.Name' ctx.Rectype' true) == 0;                              }                                if (typeOk)                              {                                  if (string.IsNullOrEmpty(searchString))                                  {                                      return true;                                  }                                  else if (ctx.Partial)                                  {                                      var val = rec.DescriptiveName.ToLowerInvariant();                                      if (val.Contains(searchString))                                      {                                          return true;                                      }                                  }                                  else                                  {                                      var val = rec.DescriptiveName.ToLowerInvariant().Substring(2' rec.DescriptiveName.Length - 3);                                        if (val == searchString)                                      {                                          return true;                                      }                                  }                              }                                return false;                          };                      }                        break;                  case SearchType.TypeFullSearch:                  case SearchType.FullSearch:                      {                          if (ctx.Type == SearchType.TypeFullSearch && string.IsNullOrEmpty(ctx.Rectype))                          {                              return null;                          }                            if (ctx.Type == SearchType.FullSearch && string.IsNullOrEmpty(ctx.Text))                          {                              return null;                          }                            string searchString = ctx.Text.ToLowerInvariant();                          searchFunction = node => {                              if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                bool typeOk = true;                              if (ctx.Type == SearchType.TypeFullSearch)                              {                                  typeOk = !string.IsNullOrEmpty(rec.Name) && string.Compare(rec.Name' ctx.Rectype' true) == 0;                              }                                if (typeOk)                              {                                  foreach (SubRecord sr in rec.SubRecords)                                  {                                      var val = sr.GetStrData();                                      if (!string.IsNullOrEmpty(val))                                      {                                          val = val.ToLowerInvariant();                                          if ((ctx.Partial && val.Contains(searchString)) || (val == searchString))                                          {                                              return true;                                          }                                      }                                  }                              }                                return false;                          };                      }                        break;                  case SearchType.FormIDRef:                      {                          if (string.IsNullOrEmpty(ctx.Text))                          {                              return null;                          }                            uint searchID;                          if (!uint.TryParse(ctx.Text' NumberStyles.AllowHexSpecifier' null' out searchID))                          {                              MainView.PostStatusWarning("Invalid FormID");                              return null;                          }                            searchFunction = node => {                              if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                if (rec != null)                              {                                  rec.MatchRecordStructureToRecord();                                  if (                                      (from sr in rec.SubRecords from elem in rec.EnumerateElements(sr) let es = elem.Structure where es != null && es.type == ElementValueType.FormID select elem).Any(                                          elem => searchID == TypeConverter.h2i(elem.Data)))                                  {                                      return true;                                  }                              }                                return false;                          };                      }                        break;                    case SearchType.BasicCriteriaRef:                      {                          if (ctx.Criteria == null || !ctx.Criteria.Items.Any())                          {                              MainView.PostStatusWarning("No search criteria selected!");                              return null;                          }                            searchFunction = node => {                              if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                if (ctx.Criteria.Type != rec.Name)                              {                                  return false;                              }                                rec.MatchRecordStructureToRecord();                              bool all = false;                              foreach (var m in ctx.Criteria.Items)                              {                                  bool ok = m.Match(rec);                                  if (!ok)                                  {                                      return false;                                  }                                    all = true;                              }                                return all;                          };                      }                        break;              }
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,UpdateSearchList,The following statement contains a magic number: var fixedColumns =                  new List<OLVColumn>(                      new[]                          {                              new OLVColumn                                  {                                     Text = "Plugin"' Name = "Plugin"' AspectName = "Plugin"' Width = 5' IsVisible = true' Groupable = true' AspectGetter = x => this.GetPluginFromNode(x as Record)                                   }'                               new OLVColumn                                  {                                      Text = "Type"'                                       Name = "Type"'                                       AspectName = "Type"'                                       Width = 100'                                       IsVisible = true'                                       AspectGetter = x => {                                          var rec = x as Record;                                          return rec != null ? rec.Name : string.Empty;                                      }                                  }' new OLVColumn                                      {                                          Text = "Name"'                                           Name = "Name"'                                           AspectName = "Name"'                                           Width = 200'                                           IsVisible = true'                                           Groupable = true'                                           AspectGetter = x => {                                              var rec = x as Record;                                              var sr = rec != null ? rec.SubRecords.FirstOrDefault(r => r.Name == "EDID") : null;                                              var elem = sr != null ? sr.GetStrData() : null;                                              return elem ?? string.Empty;                                          }                                      }'                               new OLVColumn                                  {                                      Text = "FormID"'                                       Name = "FormID"'                                       AspectName = "FormID"'                                       Width = 80'                                       IsVisible = true'                                       Groupable = true'                                       AspectGetter = x => {                                          var rec = x as Record;                                          return rec != null ? rec.FormID.ToString("X8") : string.Empty;                                      }                                  }' new OLVColumn                                      {                                          Text = "Full Name"'                                           Name = "FullName"'                                           AspectName = "FullName"'                                           Width = 200'                                           IsVisible = true'                                           Groupable = true'                                           AspectGetter = x => {                                              var rec = x as Record;                                              var sr = rec != null ? rec.SubRecords.FirstOrDefault(r => r.Name == "FULL") : null;                                              var elem = sr != null ? sr.GetLString() : null;                                              return elem ?? string.Empty;                                          }                                      }'                           });
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,UpdateSearchList,The following statement contains a magic number: var fixedColumns =                  new List<OLVColumn>(                      new[]                          {                              new OLVColumn                                  {                                     Text = "Plugin"' Name = "Plugin"' AspectName = "Plugin"' Width = 5' IsVisible = true' Groupable = true' AspectGetter = x => this.GetPluginFromNode(x as Record)                                   }'                               new OLVColumn                                  {                                      Text = "Type"'                                       Name = "Type"'                                       AspectName = "Type"'                                       Width = 100'                                       IsVisible = true'                                       AspectGetter = x => {                                          var rec = x as Record;                                          return rec != null ? rec.Name : string.Empty;                                      }                                  }' new OLVColumn                                      {                                          Text = "Name"'                                           Name = "Name"'                                           AspectName = "Name"'                                           Width = 200'                                           IsVisible = true'                                           Groupable = true'                                           AspectGetter = x => {                                              var rec = x as Record;                                              var sr = rec != null ? rec.SubRecords.FirstOrDefault(r => r.Name == "EDID") : null;                                              var elem = sr != null ? sr.GetStrData() : null;                                              return elem ?? string.Empty;                                          }                                      }'                               new OLVColumn                                  {                                      Text = "FormID"'                                       Name = "FormID"'                                       AspectName = "FormID"'                                       Width = 80'                                       IsVisible = true'                                       Groupable = true'                                       AspectGetter = x => {                                          var rec = x as Record;                                          return rec != null ? rec.FormID.ToString("X8") : string.Empty;                                      }                                  }' new OLVColumn                                      {                                          Text = "Full Name"'                                           Name = "FullName"'                                           AspectName = "FullName"'                                           Width = 200'                                           IsVisible = true'                                           Groupable = true'                                           AspectGetter = x => {                                              var rec = x as Record;                                              var sr = rec != null ? rec.SubRecords.FirstOrDefault(r => r.Name == "FULL") : null;                                              var elem = sr != null ? sr.GetLString() : null;                                              return elem ?? string.Empty;                                          }                                      }'                           });
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,UpdateSearchList,The following statement contains a magic number: var fixedColumns =                  new List<OLVColumn>(                      new[]                          {                              new OLVColumn                                  {                                     Text = "Plugin"' Name = "Plugin"' AspectName = "Plugin"' Width = 5' IsVisible = true' Groupable = true' AspectGetter = x => this.GetPluginFromNode(x as Record)                                   }'                               new OLVColumn                                  {                                      Text = "Type"'                                       Name = "Type"'                                       AspectName = "Type"'                                       Width = 100'                                       IsVisible = true'                                       AspectGetter = x => {                                          var rec = x as Record;                                          return rec != null ? rec.Name : string.Empty;                                      }                                  }' new OLVColumn                                      {                                          Text = "Name"'                                           Name = "Name"'                                           AspectName = "Name"'                                           Width = 200'                                           IsVisible = true'                                           Groupable = true'                                           AspectGetter = x => {                                              var rec = x as Record;                                              var sr = rec != null ? rec.SubRecords.FirstOrDefault(r => r.Name == "EDID") : null;                                              var elem = sr != null ? sr.GetStrData() : null;                                              return elem ?? string.Empty;                                          }                                      }'                               new OLVColumn                                  {                                      Text = "FormID"'                                       Name = "FormID"'                                       AspectName = "FormID"'                                       Width = 80'                                       IsVisible = true'                                       Groupable = true'                                       AspectGetter = x => {                                          var rec = x as Record;                                          return rec != null ? rec.FormID.ToString("X8") : string.Empty;                                      }                                  }' new OLVColumn                                      {                                          Text = "Full Name"'                                           Name = "FullName"'                                           AspectName = "FullName"'                                           Width = 200'                                           IsVisible = true'                                           Groupable = true'                                           AspectGetter = x => {                                              var rec = x as Record;                                              var sr = rec != null ? rec.SubRecords.FirstOrDefault(r => r.Name == "FULL") : null;                                              var elem = sr != null ? sr.GetLString() : null;                                              return elem ?? string.Empty;                                          }                                      }'                           });
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,UpdateSearchList,The following statement contains a magic number: var fixedColumns =                  new List<OLVColumn>(                      new[]                          {                              new OLVColumn                                  {                                     Text = "Plugin"' Name = "Plugin"' AspectName = "Plugin"' Width = 5' IsVisible = true' Groupable = true' AspectGetter = x => this.GetPluginFromNode(x as Record)                                   }'                               new OLVColumn                                  {                                      Text = "Type"'                                       Name = "Type"'                                       AspectName = "Type"'                                       Width = 100'                                       IsVisible = true'                                       AspectGetter = x => {                                          var rec = x as Record;                                          return rec != null ? rec.Name : string.Empty;                                      }                                  }' new OLVColumn                                      {                                          Text = "Name"'                                           Name = "Name"'                                           AspectName = "Name"'                                           Width = 200'                                           IsVisible = true'                                           Groupable = true'                                           AspectGetter = x => {                                              var rec = x as Record;                                              var sr = rec != null ? rec.SubRecords.FirstOrDefault(r => r.Name == "EDID") : null;                                              var elem = sr != null ? sr.GetStrData() : null;                                              return elem ?? string.Empty;                                          }                                      }'                               new OLVColumn                                  {                                      Text = "FormID"'                                       Name = "FormID"'                                       AspectName = "FormID"'                                       Width = 80'                                       IsVisible = true'                                       Groupable = true'                                       AspectGetter = x => {                                          var rec = x as Record;                                          return rec != null ? rec.FormID.ToString("X8") : string.Empty;                                      }                                  }' new OLVColumn                                      {                                          Text = "Full Name"'                                           Name = "FullName"'                                           AspectName = "FullName"'                                           Width = 200'                                           IsVisible = true'                                           Groupable = true'                                           AspectGetter = x => {                                              var rec = x as Record;                                              var sr = rec != null ? rec.SubRecords.FirstOrDefault(r => r.Name == "FULL") : null;                                              var elem = sr != null ? sr.GetLString() : null;                                              return elem ?? string.Empty;                                          }                                      }'                           });
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,UpdateSearchList,The following statement contains a magic number: var fixedColumns =                  new List<OLVColumn>(                      new[]                          {                              new OLVColumn                                  {                                     Text = "Plugin"' Name = "Plugin"' AspectName = "Plugin"' Width = 5' IsVisible = true' Groupable = true' AspectGetter = x => this.GetPluginFromNode(x as Record)                                   }'                               new OLVColumn                                  {                                      Text = "Type"'                                       Name = "Type"'                                       AspectName = "Type"'                                       Width = 100'                                       IsVisible = true'                                       AspectGetter = x => {                                          var rec = x as Record;                                          return rec != null ? rec.Name : string.Empty;                                      }                                  }' new OLVColumn                                      {                                          Text = "Name"'                                           Name = "Name"'                                           AspectName = "Name"'                                           Width = 200'                                           IsVisible = true'                                           Groupable = true'                                           AspectGetter = x => {                                              var rec = x as Record;                                              var sr = rec != null ? rec.SubRecords.FirstOrDefault(r => r.Name == "EDID") : null;                                              var elem = sr != null ? sr.GetStrData() : null;                                              return elem ?? string.Empty;                                          }                                      }'                               new OLVColumn                                  {                                      Text = "FormID"'                                       Name = "FormID"'                                       AspectName = "FormID"'                                       Width = 80'                                       IsVisible = true'                                       Groupable = true'                                       AspectGetter = x => {                                          var rec = x as Record;                                          return rec != null ? rec.FormID.ToString("X8") : string.Empty;                                      }                                  }' new OLVColumn                                      {                                          Text = "Full Name"'                                           Name = "FullName"'                                           AspectName = "FullName"'                                           Width = 200'                                           IsVisible = true'                                           Groupable = true'                                           AspectGetter = x => {                                              var rec = x as Record;                                              var sr = rec != null ? rec.SubRecords.FirstOrDefault(r => r.Name == "FULL") : null;                                              var elem = sr != null ? sr.GetLString() : null;                                              return elem ?? string.Empty;                                          }                                      }'                           });
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,UpdateSearchList,The following statement contains a magic number: fixedColumns.AddRange(                          from item in results.Criteria.Items.OfType<SearchElement>()                          let type = item.Parent.Record.name                          let name = item.Name                          let colName = type + "." + name                          let dispName = type + ": " + name                          select new OLVColumn                              {                                  Text = dispName'                                   Name = colName'                                   AspectName = name'                                   Width = 80'                                   IsVisible = true'                                   Groupable = true'                                   AspectGetter = x => {                                      var rec = x as Record;                                      var sr = rec != null ? rec.SubRecords.FirstOrDefault(r => r.Name == type) : null;                                      var se = sr != null ? sr.EnumerateElements().FirstOrDefault(e => e.Structure.name == name) : null;                                      return se != null ? sr.GetDisplayValue(se) : null;                                  }                              });
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,copyToToolStripMenuItem_DropDownItemClicked,The following statement contains a magic number: array != null && array.Length == 2
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The following statement contains a magic number: this.listSearchView.EmptyListMsgFont = new System.Drawing.Font("Comic Sans MS"' 15.75F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: c.Left = 8;
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: c.Width = this.fpanel1.Width - 16;
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,fpanel1_Resize,The following statement contains a magic number: c.MinimumSize = new Size(Width - c.Left - 30' c.MinimumSize.Height);
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(300' 200);
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(300' 200);
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeSubrecordForm,The following statement contains a magic number: this.listSubrecord.AddBindingColumn("Name"' "Name"' 50);
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeSubrecordForm,The following statement contains a magic number: this.listSubrecord.AddBindingColumn("Size"' "Size"' 40);
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeSubrecordForm,The following statement contains a magic number: this.listSubrecord.AddBindingColumn("IsValid"' "*"' 20' new Func<SubRecord' string>(a => a.IsValid ? "*" : string.Empty));
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeSubrecordForm,The following statement contains a magic number: this.listSubrecord.AddBindingColumn("Description"' "Description"' 100);
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStripEditSubrecord.Padding = new System.Windows.Forms.Padding(2' 0' 0' 0);
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(192' 120);
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(192' 120);
Duplicate Code,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The method contains a code clone-set at the following line numbers (starting from the method definition): ((78' 112)' (123' 157)' (168' 202))
Duplicate Code,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The method contains a code clone-set at the following line numbers (starting from the method definition): ((45' 93)' (97' 145))
Duplicate Code,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The method contains a code clone-set at the following line numbers (starting from the method definition): ((69' 89)' (173' 193)' (225' 245)' (277' 297)' (329' 349)' (121' 141))
Duplicate Code,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The method contains a code clone-set at the following line numbers (starting from the method definition): ((173' 197)' (225' 249)' (277' 301)' (329' 353))
Duplicate Code,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The method contains a code clone-set at the following line numbers (starting from the method definition): ((167' 191)' (219' 243))
Duplicate Code,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The method contains a code clone-set at the following line numbers (starting from the method definition): ((253' 295)' (305' 347))
Missing Default,TESVSnip.UI.Services,Options,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following switch statement is missing a default case: switch (char.ToLower(arg[1]))                      {                          case 'c':                              this.SettingsDirectory = (arg.Length > 2 && arg[2] == ':') ? arg.Substring(3) : args[++i];                              break;                      }
Missing Default,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following switch statement is missing a default case: switch (r.Name)                      {                          case "LVLI":                              for (int i = 0; i < r.SubRecords.Count; i++)                              {                                  if (r.SubRecords[i].Name == "EDID")                                  {                                      edid = r.SubRecords[i].GetStrData();                                  }                                  else if (r.SubRecords[i].Name == "LVLD")                                  {                                      byte[] data = r.SubRecords[i].GetReadonlyData();                                      chance = data[0];                                  }                                  else if (r.SubRecords[i].Name == "LVLF")                                  {                                      byte[] data = r.SubRecords[i].GetReadonlyData();                                      flags = data[0];                                  }                                  else if (r.SubRecords[i].Name == "LVLO")                                  {                                      if (r.SubRecords[i].Size != 12)                                      {                                          continue;                                      }                                        byte[] data = r.SubRecords[i].GetReadonlyData();                                      uint formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                                        // if ((formid & 0xff000000) != mask) continue;                                      sb3.AppendLine(                                          "      <LVLO level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" + (formid & 0xffffff).ToString("X6") + "\" count=\""                                          + TypeConverter.h2ss(data[8]' data[9]) + "\" />");                                  }                              }                                if (sb3.Length > 0)                              {                                  sb2.AppendLine("    <LVLI formid=\"" + r.FormID.ToString("X6") + "\" edid=\"" + edid + "\">");                                  sb2.AppendLine("      <LVLF flags=\"" + flags + "\"/>");                                  sb2.AppendLine("      <LVLD chance=\"" + chance + "\"/>");                                  sb2.Append(sb3.ToString());                                  sb2.AppendLine("    </LVLI>");                              }                                sb3.Length = 0;                              break;                          case "LVLN":                              for (int i = 0; i < r.SubRecords.Count; i++)                              {                                  if (r.SubRecords[i].Name == "EDID")                                  {                                      edid = r.SubRecords[i].GetStrData();                                  }                                  else if (r.SubRecords[i].Name == "LVLD")                                  {                                      byte[] data = r.SubRecords[i].GetReadonlyData();                                      chance = data[0];                                  }                                  else if (r.SubRecords[i].Name == "LVLF")                                  {                                      byte[] data = r.SubRecords[i].GetReadonlyData();                                      flags = data[0];                                  }                                  else if (r.SubRecords[i].Name == "LVLO")                                  {                                      if (r.SubRecords[i].Size != 12)                                      {                                          continue;                                      }                                        byte[] data = r.SubRecords[i].GetReadonlyData();                                      uint formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                                        // if ((formid & 0xff000000) != mask) continue;                                      sb3.AppendLine(                                          "      <LVLO level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" + (formid & 0xffffff).ToString("X6") + "\" count=\""                                          + TypeConverter.h2ss(data[8]' data[9]) + "\" />");                                  }                              }                                if (sb3.Length > 0)                              {                                  sb2.AppendLine("    <LVLN formid=\"" + r.FormID.ToString("X6") + "\" edid=\"" + edid + "\">");                                  sb2.AppendLine("      <LVLF flags=\"" + flags + "\"/>");                                  sb2.AppendLine("      <LVLD chance=\"" + chance + "\"/>");                                  sb2.Append(sb3.ToString());                                  sb2.AppendLine("    </LVLN>");                              }                                sb3.Length = 0;                              break;                          case "LVSP":                              for (int i = 0; i < r.SubRecords.Count; i++)                              {                                  if (r.SubRecords[i].Name == "EDID")                                  {                                      edid = r.SubRecords[i].GetStrData();                                  }                                  else if (r.SubRecords[i].Name == "LVLD")                                  {                                      byte[] data = r.SubRecords[i].GetReadonlyData();                                      chance = data[0];                                  }                                  else if (r.SubRecords[i].Name == "LVLF")                                  {                                      byte[] data = r.SubRecords[i].GetReadonlyData();                                      flags = data[0];                                  }                                  else if (r.SubRecords[i].Name == "LVLO")                                  {                                      if (r.SubRecords[i].Size != 12)                                      {                                          continue;                                      }                                        byte[] data = r.SubRecords[i].GetReadonlyData();                                      uint formid = TypeConverter.h2i(data[4]' data[5]' data[6]' data[7]);                                        // if ((formid & 0xff000000) != mask) continue;                                      sb3.AppendLine(                                          "      <LVLO level=\"" + TypeConverter.h2ss(data[0]' data[1]) + "\" formid=\"" + (formid & 0xffffff).ToString("X6") + "\" count=\""                                          + TypeConverter.h2ss(data[8]' data[9]) + "\" />");                                  }                              }                                if (sb3.Length > 0)                              {                                  sb2.AppendLine("    <LVSP formid=\"" + r.FormID.ToString("X6") + "\" edid=\"" + edid + "\">");                                  sb2.AppendLine("      <LVLF flags=\"" + flags + "\"/>");                                  sb2.AppendLine("      <LVLD chance=\"" + chance + "\"/>");                                  sb2.Append(sb3.ToString());                                  sb2.AppendLine("    </LVLC>");                              }                                sb3.Length = 0;                              break;                      }
Missing Default,TESVSnip.UI.Forms,MainView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\TranslateUI\Localization.cs,importStringsToFileToolStripMenuItem_Click,The following switch statement is missing a default case: switch (lstring.Type)                                      {                                          case LocalizedStringFormat.Base:                                              plugin.Strings[lstring.ID] = lstring.Value;                                              break;                                          case LocalizedStringFormat.DL:                                              plugin.DLStrings[lstring.ID] = lstring.Value;                                              break;                                          case LocalizedStringFormat.IL:                                              plugin.ILStrings[lstring.ID] = lstring.Value;                                              break;                                      }
Missing Default,TESVSnip.UI.Forms,BatchEditRecords,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,GetAssignmentType,The following switch statement is missing a default case: switch (type)              {                  case BatchCondElementType.Set:                      return ElementAssignmentType.Set;                  case BatchCondElementType.Add:                      return ElementAssignmentType.Add;                  case BatchCondElementType.Subtract:                      return ElementAssignmentType.Subtract;                  case BatchCondElementType.Multiply:                      return ElementAssignmentType.Multiply;                  case BatchCondElementType.Divide:                      return ElementAssignmentType.Divide;                  case BatchCondElementType.BitAnd:                      return ElementAssignmentType.BitAnd;                  case BatchCondElementType.BitOr:                      return ElementAssignmentType.BitOr;                  case BatchCondElementType.Clear:                      return ElementAssignmentType.Clear;              }
Missing Default,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,bSave_Click,The following switch statement is missing a default case: switch (kvp.Key.type)                              {                                  case ElementValueType.UInt:                                      {                                          var sf = new ArraySegment<byte>(elem.Array' elem.Offset' elem.Count);                                          var value = TypeConverter.h2i(sf);                                          if (!string.IsNullOrWhiteSpace(kvp.Key.funcw))                                          {                                              bool valueIsChanged = (kvp.Value).Changed;                                              if (kvp.Value is OptionalElement)                                                  valueIsChanged = (((OptionalElement) (kvp.Value)).InnerControl).Changed;                                              if (valueIsChanged)                                              {                                                  value = PyInterpreter.ExecuteFunction<uint>(kvp.Key' value' FunctionOperation.ForWriting);                                                  var b = TypeConverter.i2h(value);                                                  Buffer.BlockCopy(b' 0' elem.Array' elem.Offset' elem.Count);                                              }                                          }                                      }                                      break;                                  case ElementValueType.FormID:                                      {                                      }                                      break;                                    case ElementValueType.Int:                                      {                                          var sf = new ArraySegment<byte>(elem.Array' elem.Offset' elem.Count);                                          var value = TypeConverter.h2si(sf);                                          if (!string.IsNullOrWhiteSpace(kvp.Key.funcw))                                          {                                              bool valueIsChanged = (kvp.Value).Changed;                                              if (kvp.Value is OptionalElement)                                                  valueIsChanged = (((OptionalElement)(kvp.Value)).InnerControl).Changed;                                              if (valueIsChanged)                                              {                                                  value = PyInterpreter.ExecuteFunction<int>(kvp.Key' value' FunctionOperation.ForWriting);                                                  var b = TypeConverter.si2h(value);                                                  Buffer.BlockCopy(b' 0' elem.Array' elem.Offset' elem.Count);                                              }                                          }                                      }                                      break;                                    case ElementValueType.Float:                                      {                                          var sf = new ArraySegment<byte>(elem.Array' elem.Offset' elem.Count);                                          var value = TypeConverter.h2f(sf);                                          if(!string.IsNullOrWhiteSpace(kvp.Key.funcw))                                          {                                              bool valueIsChanged = (kvp.Value).Changed;                                              if (kvp.Value is OptionalElement)                                                  valueIsChanged = (((OptionalElement) (kvp.Value)).InnerControl).Changed;                                                         if (valueIsChanged)                                              {                                                  value = PyInterpreter.ExecuteFunction<float>(kvp.Key' value' FunctionOperation.ForWriting);                                                  var b = TypeConverter.f2h(value);                                                  Buffer.BlockCopy(b' 0' elem.Array' elem.Offset' elem.Count);                                              }                                          }                                      }                                      break;                                    case ElementValueType.UShort:                                      {                                          var sf = new ArraySegment<byte>(elem.Array' elem.Offset' elem.Count);                                          var value = TypeConverter.h2s(sf);                                          if (!string.IsNullOrWhiteSpace(kvp.Key.funcw))                                          {                                              bool valueIsChanged = (kvp.Value).Changed;                                              if (kvp.Value is OptionalElement)                                                  valueIsChanged = (((OptionalElement)(kvp.Value)).InnerControl).Changed;                                              if (valueIsChanged)                                              {                                                  value = PyInterpreter.ExecuteFunction<ushort>(kvp.Key' value' FunctionOperation.ForWriting);                                                  var b = TypeConverter.s2h(value);                                                  Buffer.BlockCopy(b' 0' elem.Array' elem.Offset' elem.Count);                                              }                                          }                                      }                                      break;                                    case ElementValueType.Short:                                      {                                          var sf = new ArraySegment<byte>(elem.Array' elem.Offset' elem.Count);                                          var value = TypeConverter.h2ss(sf);                                          if (!string.IsNullOrWhiteSpace(kvp.Key.funcw))                                          {                                              bool valueIsChanged = (kvp.Value).Changed;                                              if (kvp.Value is OptionalElement)                                                  valueIsChanged = (((OptionalElement)(kvp.Value)).InnerControl).Changed;                                              if (valueIsChanged)                                              {                                                  value = PyInterpreter.ExecuteFunction<short>(kvp.Key' value' FunctionOperation.ForWriting);                                                  var b = TypeConverter.ss2h(value);                                                  Buffer.BlockCopy(b' 0' elem.Array' elem.Offset' elem.Count);                                              }                                          }                                      }                                      break;                                    case ElementValueType.Byte:                                      {                                      }                                      break;                                  case ElementValueType.SByte:                                      {                                      }                                      break;                                    case ElementValueType.String:                                      break;                                    case ElementValueType.BString:                                      break;                                    case ElementValueType.IString:                                      break;                                    case ElementValueType.LString:                                      {                                          // not handled                                      }                                      break;                                    case ElementValueType.Str4:                                      {                                      }                                      break;                              }
Missing Default,TESVSnip.UI.Forms,StringsEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,GetStringDict,The following switch statement is missing a default case: switch (format)              {                  case LocalizedStringFormat.Base:                      strings = plugin.Strings;                      break;                  case LocalizedStringFormat.DL:                      strings = plugin.DLStrings;                      break;                  case LocalizedStringFormat.IL:                      strings = plugin.ILStrings;                      break;              }
Missing Default,TESVSnip.UI.Forms,GroupEditor,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following switch statement is missing a default case: switch (this.cmbGroupType.SelectedIndex)              {                  case 0:                      this.tbRecType.Enabled = true;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 2:                  case 3:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = true;                      break;                  case 4:                  case 5:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = true;                      this.tbY.Enabled = true;                      this.tbParent.Enabled = false;                      this.tbBlock.Enabled = false;                      break;                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      this.tbRecType.Enabled = false;                      this.tbX.Enabled = false;                      this.tbY.Enabled = false;                      this.tbParent.Enabled = true;                      this.tbBlock.Enabled = false;                      break;              }
Missing Default,TESVSnip.UI.Controls,CustomTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Controls\CustomTreeView.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)              {                  case 0x210: //WM_PARENTNOTIFY                      this._contextMenuSet = 1;                      break;                  case 0x21: //WM_MOUSEACTIVATE                      this._contextMenuSet++;                      break;                  case 0x7b: //WM_CONTEXTMENU                      if (this._contextMenuSet == 1) // ignore mouse activate                          if (this.OnContextMenuKey != null)                              this.OnContextMenuKey(this' EventArgs.Empty);                      break;              }
Missing Default,TESVSnip.UI.Rendering.Extensions,StringRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following switch statement is missing a default case: switch (rec.groupType)              {                  case 0:                      return "(Contains: " + (char)recdata[0] + (char)recdata[1] + (char)recdata[2] + (char)recdata[3] + ")";                  case 2:                  case 3:                      return "(Block number: " + (recdata[0] + recdata[1] * 256 + recdata[2] * 256 * 256 + recdata[3] * 256 * 256 * 256).ToString() + ")";                  case 4:                  case 5:                      return "(Coordinates: [" + (recdata[0] + recdata[1] * 256) + "' " + recdata[2] + recdata[3] * 256 + "])";                  case 1:                  case 6:                  case 7:                  case 8:                  case 9:                  case 10:                      return "(Parent FormID: 0x" + recdata[3].ToString("x2") + recdata[2].ToString("x2") + recdata[1].ToString("x2") + recdata[0].ToString("x2") + ")";              }
Missing Default,TESVSnip.UI.RecordControls,RepeatingElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,bindingNavigatorAddNewItem2_Click,The following switch statement is missing a default case: switch (Element.type)                  {                      case ElementValueType.SByte:                      case ElementValueType.Byte:                      case ElementValueType.String:                      case ElementValueType.LString:                          bytes = new byte[1];                          break;                      case ElementValueType.Float:                      case ElementValueType.Str4:                      case ElementValueType.FormID:                      case ElementValueType.UInt:                      case ElementValueType.Int:                      case ElementValueType.IString:                          bytes = new byte[4];                          break;                      case ElementValueType.Short:                      case ElementValueType.UShort:                      case ElementValueType.BString:                          bytes = new byte[2];                          break;                  }
Missing Default,TESVSnip.UI.RecordControls,OptionsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,cboOptions_SelectedIndexChanged,The following switch statement is missing a default case: switch (element.type)                      {                          case ElementValueType.SByte:                          case ElementValueType.Byte:                              SetCurrentData(new ArraySegment<byte>(TypeConverter.sb2h((sbyte)newIndex)));                              break;                            case ElementValueType.Short:                          case ElementValueType.UShort:                              SetCurrentData(new ArraySegment<byte>(TypeConverter.ss2h((short)newIndex)));                              break;                            case ElementValueType.Int:                          case ElementValueType.UInt:                              SetCurrentData(new ArraySegment<byte>(TypeConverter.si2h(newIndex)));                              break;                      }
Missing Default,TESVSnip.UI.RecordControls,FlagsElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,cboFlags_ItemCheck,The following switch statement is missing a default case: switch (element.type)                  {                      case ElementValueType.SByte:                      case ElementValueType.Byte:                          SetCurrentData(new ArraySegment<byte>(TypeConverter.b2h((byte)value)));                          break;                        case ElementValueType.Short:                      case ElementValueType.UShort:                          SetCurrentData(new ArraySegment<byte>(TypeConverter.s2h((ushort)value)));                          break;                        case ElementValueType.Int:                      case ElementValueType.UInt:                          SetCurrentData(new ArraySegment<byte>(TypeConverter.i2h(value)));                          break;                  }
Missing Default,TESVSnip.UI.RecordControls,LStringElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,UpdateAllControls,The following switch statement is missing a default case: switch (Element.type)                  {                      case ElementValueType.UInt:                          this.SetTextByID();                          break;                        case ElementValueType.String:                          this.SetTextAsString();                          break;                        case ElementValueType.LString: // can be either                          bool isString = TypeConverter.IsLikelyString(data);                          if (isString)                          {                              this.SetTextAsString();                          }                          else                          {                              this.SetTextByID();                          }                            break;                  }
Missing Default,TESVSnip.UI.RecordControls,TextElement,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,SaveText,The following switch statement is missing a default case: switch (element.type)              {                  case ElementValueType.UInt:                  case ElementValueType.FormID:                      {                          uint i;                          if (element.type == ElementValueType.FormID)                          {                              numStyle = NumberStyles.HexNumber;                          }                            if (!uint.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.i2h(i)));                          }                      }                        break;                  case ElementValueType.Int:                      {                          int i;                          if (!int.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.si2h(i)));                          }                      }                        break;                    case ElementValueType.Float:                      {                          float i;                          if (!float.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.f2h(i)));                          }                      }                        break;                  case ElementValueType.UShort:                      {                          ushort i;                          if (!ushort.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.s2h(i)));                          }                      }                        break;                  case ElementValueType.Short:                      {                          short i;                          if (!short.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.ss2h(i)));                          }                      }                        break;                  case ElementValueType.Byte:                      {                          byte i;                          if (!byte.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.b2h(i)));                          }                      }                        break;                  case ElementValueType.SByte:                      {                          sbyte i;                          if (!sbyte.TryParse(tbText' numStyle' null' out i))                          {                              Error.SetError(this.TextBox' string.Format("Invalid {0} Format"' element.type));                          }                          else                          {                              Error.SetError(this.TextBox' null);                              SetCurrentData(new ArraySegment<byte>(TypeConverter.sb2h(i)));                          }                      }                        break;                  case ElementValueType.String:                      SetCurrentData(new ArraySegment<byte>(TypeConverter.str2h(this.textBox.Text)));                      break;                  case ElementValueType.BString:                      SetCurrentData(new ArraySegment<byte>(TypeConverter.bstr2h(this.textBox.Text)));                      break;                  case ElementValueType.IString:                      SetCurrentData(new ArraySegment<byte>(TypeConverter.istr2h(this.textBox.Text)));                      break;                  case ElementValueType.LString:                      {                          // not handled                      }                        break;                  case ElementValueType.Str4:                      {                          var txtbytes = new byte[] { 0x32' 0x32' 0x32' 0x32 };                          System.Text.Encoding.Default.GetBytes(tbText' 0' Math.Min(4' tbText.Length)' txtbytes' 0);                          SetCurrentData(new ArraySegment<byte>(txtbytes));                      }                        break;              }
Missing Default,TESVSnip.Windows.Controls,BindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,DataSource_ListChanged,The following switch statement is missing a default case: switch (e.ListChangedType)              {                  case ListChangedType.ItemAdded:                      goto case ListChangedType.Reset;                  case ListChangedType.ItemChanged:                      goto case ListChangedType.Reset;                  case ListChangedType.ItemDeleted:                      goto case ListChangedType.Reset;                  case ListChangedType.ItemMoved:                      goto case ListChangedType.Reset;                  case ListChangedType.Reset:                      ItemCount = (_data == null) ? 0 : _data.Count;                      Invalidate();                      break;              }
Missing Default,TESVSnip.Windows.Controls,ObjectBindingListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\objectbindinglistview.cs,DataSource_ListChanged,The following switch statement is missing a default case: switch (e.ListChangedType)              {                  case ListChangedType.ItemAdded:                      goto case ListChangedType.Reset;                  case ListChangedType.ItemChanged:                      goto case ListChangedType.Reset;                  case ListChangedType.ItemDeleted:                      goto case ListChangedType.Reset;                  case ListChangedType.ItemMoved:                      goto case ListChangedType.Reset;                  case ListChangedType.Reset:                      ItemCount = (_data == null) ? 0 : _data.Count;                      Invalidate();                      break;              }
Missing Default,TESVSnip.Windows.Controls,CustomComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,AutoSizeDropDown,The following switch statement is missing a default case: switch (DropDownSizeMode)                  {                      case SizeMode.UseComboSize:                          DropDownControl.Size = new Size(Width' m_sizeCombo.Height);                          break;                        case SizeMode.UseControlSize:                          DropDownControl.Size = new Size(m_sizeOriginal.Width' m_sizeOriginal.Height);                          break;                        case SizeMode.UseDropDownSize:                          DropDownControl.Size = m_sizeCombo;                          break;                  }
Missing Default,TESVSnip.Windows.Controls,CustomComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,WndProc,The following switch statement is missing a default case: switch (HIWORD((int) m.WParam))                  {                      case CBN_DROPDOWN:                          AutoDropDown();                          return;                        case CBN_CLOSEUP:                          if ((DateTime.Now - m_sShowTime).Seconds > 1)                              HideDropDown();                          return;                  }
Missing Default,TESVSnip.Windows.Controls,FlagComboBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following switch statement is missing a default case: switch (flagSize)              {                  case 1:                      format = "X2";                      numBits = 8;                      break;                  case 2:                      format = "X4";                      numBits = 16;                      break;              }
Missing Default,TESVSnip.Windows.Controls,GripRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,Render,The following switch statement is missing a default case: switch (mode)              {                  case GripAlignMode.TopLeft:                      size.Height = -size.Height;                      size.Width = -size.Width;                      break;                    case GripAlignMode.TopRight:                      size.Height = -size.Height;                      break;                    case GripAlignMode.BottomLeft:                      size.Width = -size.Height;                      break;              }
Missing Default,TESVSnip.Windows.Controls,PopupDropDown,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,ProcessGrip,The following switch statement is missing a default case: switch (m.Msg)                  {                      case WM_NCHITTEST:                          return OnNcHitTest(ref m' contentControl);                        case WM_GETMINMAXINFO:                          return OnGetMinMaxInfo(ref m);                  }
Missing Default,Be.Windows.Forms,HexBox,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,OnPaintBackground,The following switch statement is missing a default case: switch (_borderStyle)              {                  case BorderStyle.Fixed3D:                      {                          if (TextBoxRenderer.IsSupported)                          {                              VisualStyleElement state = VisualStyleElement.TextBox.TextEdit.Normal;                              Color backColor = BackColor;                                if (Enabled)                              {                                  if (ReadOnly)                                      state = VisualStyleElement.TextBox.TextEdit.ReadOnly;                                  else if (Focused)                                      state = VisualStyleElement.TextBox.TextEdit.Focused;                              }                              else                              {                                  state = VisualStyleElement.TextBox.TextEdit.Disabled;                                  backColor = BackColorDisabled;                              }                                var vsr = new VisualStyleRenderer(state);                              vsr.DrawBackground(pevent.Graphics' ClientRectangle);                                Rectangle rectContent = vsr.GetBackgroundContentRectangle(pevent.Graphics' ClientRectangle);                              pevent.Graphics.FillRectangle(new SolidBrush(backColor)' rectContent);                          }                          else                          {                              // draw background                              pevent.Graphics.FillRectangle(new SolidBrush(BackColor)' ClientRectangle);                                // draw default border                              ControlPaint.DrawBorder3D(pevent.Graphics' ClientRectangle' Border3DStyle.Sunken);                          }                            break;                      }                  case BorderStyle.FixedSingle:                      {                          // draw background                          pevent.Graphics.FillRectangle(new SolidBrush(BackColor)' ClientRectangle);                            // draw fixed single border                          ControlPaint.DrawBorder(pevent.Graphics' ClientRectangle' Color.Black' ButtonBorderStyle.Solid);                          break;                      }              }
Missing Default,Be.Windows.Forms,KeyInterpreter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PreProcessWmKeyDown,The following switch statement is missing a default case: switch (keyData)                  {                      case Keys.Left:                      case Keys.Up:                      case Keys.Right:                      case Keys.Down:                      case Keys.PageUp:                      case Keys.PageDown:                      case Keys.Left | Keys.Shift:                      case Keys.Up | Keys.Shift:                      case Keys.Right | Keys.Shift:                      case Keys.Down | Keys.Shift:                      case Keys.Tab:                      case Keys.Back:                      case Keys.Delete:                      case Keys.Home:                      case Keys.End:                      case Keys.ShiftKey | Keys.Shift:                      case Keys.C | Keys.Control:                      case Keys.X | Keys.Control:                      case Keys.V | Keys.Control:                          if (RaiseKeyDown(keyData))                              return true;                          break;                  }
Missing Default,Be.Windows.Forms,KeyInterpreter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PreProcessWmKeyUp,The following switch statement is missing a default case: switch (keyData)                  {                      case Keys.ShiftKey:                      case Keys.Insert:                          if (RaiseKeyUp(keyData))                              return true;                          break;                  }
Missing Default,Be.Windows.Forms,StringKeyInterpreter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PreProcessWmKeyDown,The following switch statement is missing a default case: switch (keyData)                  {                      case Keys.Tab | Keys.Shift:                      case Keys.Tab:                          if (RaiseKeyDown(keyData))                              return true;                          break;                  }
Missing Default,BrightIdeasSoftware,CellEditKeyEngine,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleRowChange,The following switch statement is missing a default case: switch (atEdgeBehaviour)              {                  case CellEditAtEdgeBehaviour.Ignore:                      break;                  case CellEditAtEdgeBehaviour.EndEdit:                      ListView.PossibleFinishCellEditing();                      break;                  case CellEditAtEdgeBehaviour.Wrap:                      adjacentOlvi = GetAdjacentItemOrNull(null' isGoingUp);                      StartCellEditIfDifferent(adjacentOlvi' subItemIndex);                      break;                  case CellEditAtEdgeBehaviour.ChangeColumn:                      // Figure out the next editable column                      List<OLVColumn> editableColumnsInDisplayOrder = EditableColumnsInDisplayOrder;                      int displayIndex = Math.Max(0'                                                  editableColumnsInDisplayOrder.IndexOf(ListView.GetColumn(subItemIndex)));                      if (isGoingUp)                          displayIndex = (editableColumnsInDisplayOrder.Count + displayIndex - 1)%                                         editableColumnsInDisplayOrder.Count;                      else                          displayIndex = (displayIndex + 1)%editableColumnsInDisplayOrder.Count;                      subItemIndex = editableColumnsInDisplayOrder[displayIndex].Index;                        // Wrap to the next row and start the cell edit                      adjacentOlvi = GetAdjacentItemOrNull(null' isGoingUp);                      StartCellEditIfDifferent(adjacentOlvi' subItemIndex);                      break;              }
Missing Default,BrightIdeasSoftware,CellEditKeyEngine,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleColumnChange,The following switch statement is missing a default case: switch (atEdgeBehaviour)                  {                      case CellEditAtEdgeBehaviour.Ignore:                          return;                      case CellEditAtEdgeBehaviour.EndEdit:                          HandleEndEdit();                          return;                      case CellEditAtEdgeBehaviour.ChangeRow:                      case CellEditAtEdgeBehaviour.Wrap:                          if (atEdgeBehaviour == CellEditAtEdgeBehaviour.ChangeRow)                              olvi = GetAdjacentItem(olvi' displayIndex == 0);                          if (isGoingLeft)                              displayIndex = editableColumns.Count - 1;                          else                              displayIndex = 0;                          break;                  }
Missing Default,BrightIdeasSoftware,SimpleDropSink,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedback,The following switch statement is missing a default case: switch (DropTargetLocation)              {                  case DropTargetLocation.Background:                      DrawFeedbackBackgroundTarget(g' bounds);                      break;                  case DropTargetLocation.Item:                      DrawFeedbackItemTarget(g' bounds);                      break;                  case DropTargetLocation.AboveItem:                      DrawFeedbackAboveItemTarget(g' bounds);                      break;                  case DropTargetLocation.BelowItem:                      DrawFeedbackBelowItemTarget(g' bounds);                      break;              }
Missing Default,BrightIdeasSoftware,DataSourceAdapter,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\DataSourceAdapter.cs,currencyManager_ListChanged,The following switch statement is missing a default case: switch (e.ListChangedType)              {                  case ListChangedType.Reset:                      HandleListChanged_Reset(e);                      break;                    case ListChangedType.ItemChanged:                      HandleListChanged_ItemChanged(e);                      break;                    case ListChangedType.ItemAdded:                      HandleListChanged_ItemAdded(e);                      break;                        // An item has gone away.                  case ListChangedType.ItemDeleted:                      HandleListChanged_ItemDeleted(e);                      break;                        // An item has changed its index.                  case ListChangedType.ItemMoved:                      HandleListChanged_ItemMoved(e);                      break;                        // Something has changed in the metadata.                      // CHECK: When are these events actually fired?                  case ListChangedType.PropertyDescriptorAdded:                  case ListChangedType.PropertyDescriptorChanged:                  case ListChangedType.PropertyDescriptorDeleted:                      HandleListChanged_MetadataChanged(e);                      break;              }
Missing Default,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The following switch statement is missing a default case: switch (hti.Column.TextAlign)              {                  case HorizontalAlignment.Center:                      textBounds.X += (cellBounds.Right - cellBounds.Left - textSize.Width)/2;                      break;                  case HorizontalAlignment.Right:                      textBounds.X = cellBounds.Right - textSize.Width;                      break;              }
Missing Default,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following switch statement is missing a default case: switch (nmcustomdraw.nmcd.dwDrawStage)              {                  case CDDS_PREPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_PREPAINT");                      // Remember which items were drawn during this paint cycle                      if (prePaintLevel == 0)                          drawnItems = new List<OLVListItem>();                        // If there are any items' we have to wait until at least one has been painted                      // before we draw the overlays. If there aren't any items' there will never be any                      // item paint events' so we can draw the overlays whenever                      isAfterItemPaint = (GetItemCount() == 0);                      prePaintLevel++;                      base.WndProc(ref m);                        // Make sure that we get postpaint notifications                      m.Result = (IntPtr) ((int) m.Result | CDRF_NOTIFYPOSTPAINT | CDRF_NOTIFYPOSTERASE);                      return true;                    case CDDS_POSTPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_POSTPAINT");                      prePaintLevel--;                        // When in group view' we have two problems. On XP' the control sends                      // a whole heap of PREPAINT/POSTPAINT messages before drawing any items.                      // We have to wait until after the first item paint before we draw overlays.                      // On Vista' we have a different problem. On Vista' the control nests calls                      // to PREPAINT and POSTPAINT. We only want to draw overlays on the outermost                      // POSTPAINT.                      if (prePaintLevel == 0 && (isMarqueSelecting || isAfterItemPaint))                      {                          shouldDoCustomDrawing = false;                            // Draw our overlays after everything has been drawn                          using (Graphics g = Graphics.FromHdc(nmcustomdraw.nmcd.hdc))                          {                              DrawAllDecorations(g' drawnItems);                          }                      }                      break;                    case CDDS_ITEMPREPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPREPAINT");                        // When in group view on XP' the control send a whole heap of PREPAINT/POSTPAINT                      // messages before drawing any items.                      // We have to wait until after the first item paint before we draw overlays                      isAfterItemPaint = true;                        // This scheme of catching custom draw msgs works fine' except                      // for Tile view. Something in .NET's handling of Tile view causes lots                      // of invalidates and erases. So' we just ignore completely                      // .NET's handling of Tile view and let the underlying control                      // do its stuff. Strangely' if the Tile view is                      // completely owner drawn' those erasures don't happen.                      if (View == View.Tile)                      {                          if (OwnerDraw && ItemRenderer != null)                              base.WndProc(ref m);                      }                      else                      {                          base.WndProc(ref m);                      }                        m.Result = (IntPtr) ((int) m.Result | CDRF_NOTIFYPOSTPAINT | CDRF_NOTIFYPOSTERASE);                      return true;                    case CDDS_ITEMPOSTPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPOSTPAINT");                      if (Columns.Count > 0)                      {                          OLVListItem olvi = GetItem((int) nmcustomdraw.nmcd.dwItemSpec);                          if (olvi != null)                              drawnItems.Add(olvi);                      }                      break;                    case CDDS_SUBITEMPREPAINT:                      //System.Diagnostics.Debug.WriteLine(String.Format("CDDS_SUBITEMPREPAINT ({0}'{1})"' (int)nmcustomdraw.nmcd.dwItemSpec' nmcustomdraw.iSubItem));                        // There is a bug in the .NET framework which appears when column 0 of an owner drawn listview                      // is dragged to another column position.                      // The bounds calculation always returns the left edge of column 0 as being 0.                      // The effects of this bug become apparent                      // when the listview is scrolled horizontally: the control can think that column 0                      // is no longer visible (the horizontal scroll position is subtracted from the bounds' giving a                      // rectangle that is offscreen). In those circumstances' column 0 is not redraw because                      // the control thinks it is not visible and so does not trigger a DrawSubItem event.                        // To fix this problem' we have to detected the situation -- owner drawing column 0 in any column except 0 --                      // trigger our own DrawSubItem' and then prevent the default processing from occuring.                        // Are we owner drawing column 0 when it's in any column except 0?                      if (!OwnerDraw)                          return false;                        int columnIndex = nmcustomdraw.iSubItem;                      if (columnIndex != 0)                          return false;                        int displayIndex = Columns[0].DisplayIndex;                      if (displayIndex == 0)                          return false;                        var rowIndex = (int) nmcustomdraw.nmcd.dwItemSpec;                      OLVListItem item = GetItem(rowIndex);                      if (item == null)                          return false;                        // OK. We have the error condition' so lets do what the .NET framework should do.                      // Trigger an event to draw column 0 when it is not at display index 0                      using (Graphics g = Graphics.FromHdc(nmcustomdraw.nmcd.hdc))                      {                          // Correctly calculate the bounds of cell 0                          Rectangle r = item.GetSubItemBounds(0);                            // We can hardcode "0" here since we know we are only doing this for column 0                          var args = new DrawListViewSubItemEventArgs(g' r' item' item.SubItems[0]' rowIndex' 0'                                                                      Columns[0]'                                                                      (ListViewItemStates) nmcustomdraw.nmcd.uItemState);                          OnDrawSubItem(args);                            // If the event handler wants to do the default processing (i.e. DrawDefault = true)' we are stuck.                          // There is no way we can force the default drawing because of the bug in .NET we are trying to get around.                          Trace.Assert(!args.DrawDefault' "Default drawing is impossible in this situation");                      }                      m.Result = (IntPtr) 4;                        return true;                    case CDDS_SUBITEMPOSTPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_SUBITEMPOSTPAINT");                      break;                        // I have included these stages' but it doesn't seem that they are sent for ListViews.                      // http://www.tech-archive.net/Archive/VC/microsoft.public.vc.mfc/2006-08/msg00220.html                    case CDDS_PREERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_PREERASE");                      break;                    case CDDS_POSTERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_POSTERASE");                      break;                    case CDDS_ITEMPREERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPREERASE");                      break;                    case CDDS_ITEMPOSTERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPOSTERASE");                      break;              }
Missing Default,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following switch statement is missing a default case: switch (nmhdr.code)              {                  case NM_CLICK:                      // The standard ListView does some strange stuff here when the list has checkboxes.                      // If you shift click on non-primary columns when FullRowSelect is true' the                       // checkedness of the selected rows changes.                       // We avoid all that by just saying we've handled this message.                      //System.Diagnostics.Debug.WriteLine("NM_CLICK");                      isMsgHandled = true;                      OnClick(EventArgs.Empty);                      break;                    case LVN_BEGINSCROLL:                      isMsgHandled = HandleBeginScroll(ref m);                      break;                    case LVN_ENDSCROLL:                      isMsgHandled = HandleEndScroll(ref m);                      break;                    case LVN_LINKCLICK:                      isMsgHandled = HandleLinkClick(ref m);                      break;                    case LVN_MARQUEEBEGIN:                      //System.Diagnostics.Debug.WriteLine("LVN_MARQUEEBEGIN");                      isMarqueSelecting = true;                      break;                    case LVN_GETINFOTIP:                      //System.Diagnostics.Debug.WriteLine("LVN_GETINFOTIP");                      // When virtual lists are in SmallIcon view' they generates tooltip message with invalid item indicies.                      var nmGetInfoTip = (NativeMethods.NMLVGETINFOTIP) m.GetLParam(typeof (NativeMethods.NMLVGETINFOTIP));                      isMsgHandled = nmGetInfoTip.iItem >= GetItemCount();                      break;                    case NM_RELEASEDCAPTURE:                      //System.Diagnostics.Debug.WriteLine("NM_RELEASEDCAPTURE");                      isMarqueSelecting = false;                      Invalidate();                      break;                    case NM_CUSTOMDRAW:                      //System.Diagnostics.Debug.WriteLine("NM_CUSTOMDRAW");                      isMsgHandled = HandleCustomDraw(ref m);                      break;                    case NM_DBLCLK:                      // The default behavior of a .NET ListView with checkboxes is to toggle the checkbox on                      // double-click. That's just silly' if you ask me :)                      if (CheckBoxes)                      {                          // How do we make ListView not do that silliness? We could just ignore the message                          // but the last part of the base code sets up state information' and without that                          // state' the ListView doesn't trigger MouseDoubleClick events. So we fake a                          // right button double click event' which sets up the same state' but without                          // toggling the checkbox.                          nmhdr.code = NM_RDBLCLK;                          Marshal.StructureToPtr(nmhdr' m.LParam' false);                      }                      break;                    case LVN_ITEMCHANGED:                      //System.Diagnostics.Debug.WriteLine("LVN_ITEMCHANGED");                      var nmlistviewPtr2 = (NativeMethods.NMLISTVIEW) m.GetLParam(typeof (NativeMethods.NMLISTVIEW));                      if ((nmlistviewPtr2.uChanged & LVIF_STATE) != 0)                      {                          CheckState currentValue = CalculateCheckState(nmlistviewPtr2.uOldState);                          CheckState newCheckValue = CalculateCheckState(nmlistviewPtr2.uNewState);                          if (currentValue != newCheckValue)                          {                              // Remove the state indicies so that we don't trigger the OnItemChecked method                              // when we call our base method after exiting this method                              nmlistviewPtr2.uOldState = (nmlistviewPtr2.uOldState & 0x0FFF);                              nmlistviewPtr2.uNewState = (nmlistviewPtr2.uNewState & 0x0FFF);                              Marshal.StructureToPtr(nmlistviewPtr2' m.LParam' false);                          }                      }                      break;                    case LVN_ITEMCHANGING:                      //System.Diagnostics.Debug.WriteLine("LVN_ITEMCHANGING");                      var nmlistviewPtr = (NativeMethods.NMLISTVIEW) m.GetLParam(typeof (NativeMethods.NMLISTVIEW));                      if ((nmlistviewPtr.uChanged & LVIF_STATE) != 0)                      {                          CheckState currentValue = CalculateCheckState(nmlistviewPtr.uOldState);                          CheckState newCheckValue = CalculateCheckState(nmlistviewPtr.uNewState);                            if (currentValue != newCheckValue)                          {                              // Prevent the base method from seeing the state change'                              // since we handled it elsewhere                              nmlistviewPtr.uChanged &= ~LVIF_STATE;                              Marshal.StructureToPtr(nmlistviewPtr' m.LParam' false);                          }                      }                      break;              }
Missing Default,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following switch statement is missing a default case: switch (nmheader.nhdr.code)              {                  case NM_CUSTOMDRAW:                      if (!OwnerDrawnHeader)                          isMsgHandled = HeaderControl.HandleHeaderCustomDraw(ref m);                      break;                    case HDN_ITEMCLICKA:                  case HDN_ITEMCLICKW:                      if (!PossibleFinishCellEditing())                      {                          m.Result = (IntPtr) 1; // prevent the change from happening                          isMsgHandled = true;                      }                      break;                    case HDN_DIVIDERDBLCLICKA:                  case HDN_DIVIDERDBLCLICKW:                  case HDN_BEGINTRACKA:                  case HDN_BEGINTRACKW:                      if (!PossibleFinishCellEditing())                      {                          m.Result = (IntPtr) 1; // prevent the change from happening                          isMsgHandled = true;                          break;                      }                      if (nmheader.iItem >= 0 && nmheader.iItem < Columns.Count)                      {                          OLVColumn column = GetColumn(nmheader.iItem);                          // Space filling columns can't be dragged or double-click resized                          if (column.FillsFreeSpace)                          {                              m.Result = (IntPtr) 1; // prevent the change from happening                              isMsgHandled = true;                          }                      }                      break;                  case HDN_ENDTRACKA:                  case HDN_ENDTRACKW:                      if (ShowGroups)                          ResizeLastGroup();                      break;                  case HDN_TRACKA:                  case HDN_TRACKW:                      if (nmheader.iItem >= 0 && nmheader.iItem < Columns.Count)                      {                          var hditem =                              (NativeMethods.HDITEM)                              Marshal.PtrToStructure(nmheader.pHDITEM' typeof (NativeMethods.HDITEM));                          OLVColumn column = GetColumn(nmheader.iItem);                          if (hditem.cxy < column.MinimumWidth)                              hditem.cxy = column.MinimumWidth;                          else if (column.MaximumWidth != -1 && hditem.cxy > column.MaximumWidth)                              hditem.cxy = column.MaximumWidth;                          Marshal.StructureToPtr(hditem' nmheader.pHDITEM' false);                      }                      break;                    case HDN_ITEMCHANGINGA:                  case HDN_ITEMCHANGINGW:                      nmheader = (NativeMethods.NMHEADER) m.GetLParam(typeof (NativeMethods.NMHEADER));                      if (nmheader.iItem >= 0 && nmheader.iItem < Columns.Count)                      {                          var hditem =                              (NativeMethods.HDITEM)                              Marshal.PtrToStructure(nmheader.pHDITEM' typeof (NativeMethods.HDITEM));                          OLVColumn column = GetColumn(nmheader.iItem);                          // Check the mask to see if the width field is valid' and if it is' make sure it's within range                          if ((hditem.mask & 1) == 1)                          {                              if (hditem.cxy < column.MinimumWidth ||                                  (column.MaximumWidth != -1 && hditem.cxy > column.MaximumWidth))                              {                                  m.Result = (IntPtr) 1; // prevent the change from happening                                  isMsgHandled = true;                              }                          }                      }                      break;                    case ToolTipControl.TTN_SHOW:                      //System.Diagnostics.Debug.WriteLine("olv TTN_SHOW");                      Trace.Assert(CellToolTip.Handle == nmheader.nhdr.hwndFrom);                      isMsgHandled = CellToolTip.HandleShow(ref m);                      break;                    case ToolTipControl.TTN_POP:                      //System.Diagnostics.Debug.WriteLine("olv TTN_POP");                      Trace.Assert(CellToolTip.Handle == nmheader.nhdr.hwndFrom);                      isMsgHandled = CellToolTip.HandlePop(ref m);                      break;                    case ToolTipControl.TTN_GETDISPINFO:                      //System.Diagnostics.Debug.WriteLine("olv TTN_GETDISPINFO");                      Trace.Assert(CellToolTip.Handle == nmheader.nhdr.hwndFrom);                      isMsgHandled = CellToolTip.HandleGetDispInfo(ref m);                      break;              }
Missing Default,BrightIdeasSoftware,ObjectListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ToggleSubItemCheckBox,The following switch statement is missing a default case: switch (args.NewValue)              {                  case CheckState.Checked:                      CheckSubItem(rowObject' column);                      break;                  case CheckState.Indeterminate:                      CheckIndeterminateSubItem(rowObject' column);                      break;                  case CheckState.Unchecked:                      UncheckSubItem(rowObject' column);                      break;              }
Missing Default,BrightIdeasSoftware,TreeListView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.KeyCode)              {                  case Keys.Left:                      // If the branch is expanded' collapse it. If it's collapsed'                      // select the parent of the branch.                      if (br.IsExpanded)                          Collapse(modelObject);                      else                      {                          if (br.ParentBranch != null && br.ParentBranch.Model != null)                              SelectObject(br.ParentBranch.Model' true);                      }                      e.Handled = true;                      break;                    case Keys.Right:                      // If the branch is expanded' select the first child.                      // If it isn't expanded and can be' expand it.                      if (br.IsExpanded)                      {                          List<Branch> filtered = br.FilteredChildBranches;                          if (filtered.Count > 0)                              SelectObject(filtered[0].Model' true);                      }                      else                      {                          if (br.CanExpand)                              Expand(modelObject);                      }                      e.Handled = true;                      break;              }
Missing Default,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following switch statement is missing a default case: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Missing Default,BrightIdeasSoftware,GraphicAdornment,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following switch statement is missing a default case: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Missing Default,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,The following switch statement is missing a default case: switch (Column.TextAlign)                  {                      case HorizontalAlignment.Left:                          r.X = outer.Left;                          break;                      case HorizontalAlignment.Center:                          r.X = outer.Left + ((outer.Width - inner.Width)/2);                          break;                      case HorizontalAlignment.Right:                          r.X = outer.Right - inner.Width - 1;                          break;                  }
Missing Default,BrightIdeasSoftware,BaseRenderer,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following switch statement is missing a default case: switch (switchValue)              {                  case 0x00:                      boxState = CheckBoxState.UncheckedNormal;                      break;                  case 0x01:                      boxState = CheckBoxState.UncheckedHot;                      break;                  case 0x10:                      boxState = CheckBoxState.CheckedNormal;                      break;                  case 0x11:                      boxState = CheckBoxState.CheckedHot;                      break;                  case 0x20:                      boxState = CheckBoxState.MixedNormal;                      break;                  case 0x21:                      boxState = CheckBoxState.MixedHot;                      break;              }
Missing Default,BrightIdeasSoftware,GlassPanelForm,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)              {                      // Ignore all mouse interactions                  case WM_NCHITTEST:                      m.Result = (IntPtr) HTTRANSPARENT;                      break;              }
Missing Default,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)              {                  case WM_SETCURSOR:                      if (!HandleSetCursor(ref m))                          return;                      break;                    case WM_NOTIFY:                      if (!HandleNotify(ref m))                          return;                      break;                    case WM_MOUSEMOVE:                      if (!HandleMouseMove(ref m))                          return;                      break;                    case HDM_LAYOUT:                      if (!HandleLayout(ref m))                          return;                      break;                    case WM_DESTROY:                      if (!HandleDestroy(ref m))                          return;                      break;              }
Missing Default,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleNotify,The following switch statement is missing a default case: switch (nmhdr.code)              {                  case ToolTipControl.TTN_SHOW:                      //System.Diagnostics.Debug.WriteLine("hdr TTN_SHOW");                      //System.Diagnostics.Trace.Assert(this.ToolTip.Handle == nmhdr.hwndFrom);                      return ToolTip.HandleShow(ref m);                    case ToolTipControl.TTN_POP:                      //System.Diagnostics.Debug.WriteLine("hdr TTN_POP");                      //System.Diagnostics.Trace.Assert(this.ToolTip.Handle == nmhdr.hwndFrom);                      return ToolTip.HandlePop(ref m);                    case ToolTipControl.TTN_GETDISPINFO:                      //System.Diagnostics.Debug.WriteLine("hdr TTN_GETDISPINFO");                      //System.Diagnostics.Trace.Assert(this.ToolTip.Handle == nmhdr.hwndFrom);                      return ToolTip.HandleGetDispInfo(ref m);              }
Missing Default,BrightIdeasSoftware,HeaderControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,The following switch statement is missing a default case: switch (nmcustomdraw.dwDrawStage)              {                  case CDDS_PREPAINT:                      cachedNeedsCustomDraw = NeedsCustomDraw();                      m.Result = (IntPtr) CDRF_NOTIFYITEMDRAW;                      return true;                    case CDDS_ITEMPREPAINT:                      int columnIndex = nmcustomdraw.dwItemSpec.ToInt32();                      OLVColumn column = ListView.GetColumn(columnIndex);                        // These don't work when visual styles are enabled                      //NativeMethods.SetBkColor(nmcustomdraw.hdc' ColorTranslator.ToWin32(Color.Red));                      //NativeMethods.SetTextColor(nmcustomdraw.hdc' ColorTranslator.ToWin32(Color.Blue));                      //m.Result = IntPtr.Zero;                        if (cachedNeedsCustomDraw)                      {                          using (Graphics g = Graphics.FromHdc(nmcustomdraw.hdc))                          {                              g.TextRenderingHint = ObjectListView.TextRenderingHint;                              CustomDrawHeaderCell(g' columnIndex' nmcustomdraw.uItemState);                          }                          m.Result = (IntPtr) CDRF_SKIPDEFAULT;                      }                      else                      {                          const int CDIS_SELECTED = 1;                          bool isPressed = ((nmcustomdraw.uItemState & CDIS_SELECTED) == CDIS_SELECTED);                            Font f = CalculateFont(column' columnIndex == ColumnIndexUnderCursor' isPressed);                            fontHandle = f.ToHfont();                          NativeMethods.SelectObject(nmcustomdraw.hdc' fontHandle);                            m.Result = (IntPtr) (CDRF_NEWFONT | CDRF_NOTIFYPOSTPAINT);                      }                        return true;                    case CDDS_ITEMPOSTPAINT:                      if (fontHandle != IntPtr.Zero)                      {                          NativeMethods.DeleteObject(fontHandle);                          fontHandle = IntPtr.Zero;                      }                      break;              }
Missing Default,BrightIdeasSoftware,ToolTipControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,HandleReflectNotify,The following switch statement is missing a default case: switch (nmheader.nhdr.code)              {                  case TTN_SHOW:                      //System.Diagnostics.Trace.WriteLine("reflect TTN_SHOW");                      if (HandleShow(ref msg))                          return true;                      break;                  case TTN_POP:                      //System.Diagnostics.Trace.WriteLine("reflect TTN_POP");                      if (HandlePop(ref msg))                          return true;                      break;                  case TTN_LINKCLICK:                      //System.Diagnostics.Trace.WriteLine("reflect TTN_LINKCLICK");                      if (HandleLinkClick(ref msg))                          return true;                      break;                  case TTN_GETDISPINFO:                      //System.Diagnostics.Trace.WriteLine("reflect TTN_GETDISPINFO");                      if (HandleGetDispInfo(ref msg))                          return true;                      break;              }
Missing Default,BrightIdeasSoftware,ToolTipControl,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,WndProc,The following switch statement is missing a default case: switch (msg.Msg)              {                  case 0x4E: // WM_NOTIFY                      if (!HandleNotify(ref msg))                          return;                      break;                    case 0x204E: // WM_REFLECT_NOTIFY                      if (!HandleReflectNotify(ref msg))                          return;                      break;              }
Missing Default,BrightIdeasSoftware,TypedColumn<T>,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\TypedObjectListView.cs,GeneratePart,The following switch statement is missing a default case: switch (info.MemberType)              {                  case MemberTypes.Method:                      var mi = (MethodInfo) info;                      if (mi.IsVirtual)                          il.Emit(OpCodes.Callvirt' mi);                      else                          il.Emit(OpCodes.Call' mi);                      resultType = mi.ReturnType;                      break;                  case MemberTypes.Property:                      var pi = (PropertyInfo) info;                      il.Emit(OpCodes.Call' pi.GetGetMethod());                      resultType = pi.PropertyType;                      break;                  case MemberTypes.Field:                      var fi = (FieldInfo) info;                      il.Emit(OpCodes.Ldfld' fi);                      resultType = fi.FieldType;                      break;              }
Missing Default,RichTextBoxLinks,RichTextBoxEx,D:\research\architectureSmells\repos\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,EnLinkMsgHandler,The following switch statement is missing a default case: switch (lParam.msg)              {                  case 0x20:                      //this.LinkCursor = true;                      m.Result = (IntPtr) 1;                      return false;                    case 0x201:                      {                          string str = CharRangeToString(lParam.charrange);                          if (!string.IsNullOrEmpty(str))                          {                              OnLinkClicked(new LinkClickedEventArgs(str));                          }                          m.Result = (IntPtr) 1;                          return true;                      }              }
Missing Default,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode)                  {                      case Keys.Delete:                          this.DeleteSelection();                          break;                      case Keys.Divide:                          this.CollapseAll();                          break;                      case Keys.Multiply:                          this.ExpandAll();                          break;                      case Keys.Add:                          foreach (var item in this.PluginTree.SelectedRecords)                          {                              this.PluginTree.Expand(item);                          }                            break;                      case Keys.Subtract:                          foreach (var item in this.PluginTree.SelectedRecords)                          {                              this.PluginTree.Collapse(item);                          }                            break;                  }
Missing Default,TESVSnip.UI.ObjectControls,PluginTreeView,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode)                  {                      case Keys.Divide:                          foreach (var item in this.PluginTree.SelectedRecords)                          {                              this.CollapseAll(item);                          }                            break;                      case Keys.Multiply:                          foreach (var item in this.PluginTree.SelectedRecords)                          {                              this.ExpandAll(item);                          }                            break;                      case Keys.Add:                          foreach (var item in this.PluginTree.SelectedRecords)                          {                              this.PluginTree.Expand(item);                          }                            break;                      case Keys.Subtract:                          foreach (var item in this.PluginTree.SelectedRecords)                          {                              this.PluginTree.Collapse(item);                          }                            break;                  }
Missing Default,TESVSnip.UI.ObjectControls,RecordSearch,D:\research\architectureSmells\repos\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following switch statement is missing a default case: switch (ctx.Type)              {                  case SearchType.FormID:                      {                          if (string.IsNullOrEmpty(ctx.Text))                          {                              return null;                          }                            uint searchID;                          if (!uint.TryParse(ctx.Text' NumberStyles.AllowHexSpecifier' null' out searchID))                          {                              MainView.PostStatusWarning("Invalid FormID");                              return null;                          }                            searchFunction = node => {                              var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                return rec.FormID == searchID;                          };                      }                        break;                  case SearchType.TypeEditorIdSearch:                  case SearchType.EditorID:                      {                          if (ctx.Type == SearchType.TypeEditorIdSearch && string.IsNullOrEmpty(ctx.Rectype))                          {                              return null;                          }                            if (ctx.Type == SearchType.EditorID && string.IsNullOrEmpty(ctx.Text))                          {                              return null;                          }                            string searchString = string.IsNullOrEmpty(ctx.Text) ? null : ctx.Text.ToLowerInvariant();                          searchFunction = node => {                              if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                bool typeOk = true;                              if (ctx.Type == SearchType.TypeEditorIdSearch)                              {                                  typeOk = !string.IsNullOrEmpty(rec.Name) && string.Compare(rec.Name' ctx.Rectype' true) == 0;                              }                                if (typeOk)                              {                                  if (string.IsNullOrEmpty(searchString))                                  {                                      return true;                                  }                                  else if (ctx.Partial)                                  {                                      var val = rec.DescriptiveName.ToLowerInvariant();                                      if (val.Contains(searchString))                                      {                                          return true;                                      }                                  }                                  else                                  {                                      var val = rec.DescriptiveName.ToLowerInvariant().Substring(2' rec.DescriptiveName.Length - 3);                                        if (val == searchString)                                      {                                          return true;                                      }                                  }                              }                                return false;                          };                      }                        break;                  case SearchType.TypeFullSearch:                  case SearchType.FullSearch:                      {                          if (ctx.Type == SearchType.TypeFullSearch && string.IsNullOrEmpty(ctx.Rectype))                          {                              return null;                          }                            if (ctx.Type == SearchType.FullSearch && string.IsNullOrEmpty(ctx.Text))                          {                              return null;                          }                            string searchString = ctx.Text.ToLowerInvariant();                          searchFunction = node => {                              if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                bool typeOk = true;                              if (ctx.Type == SearchType.TypeFullSearch)                              {                                  typeOk = !string.IsNullOrEmpty(rec.Name) && string.Compare(rec.Name' ctx.Rectype' true) == 0;                              }                                if (typeOk)                              {                                  foreach (SubRecord sr in rec.SubRecords)                                  {                                      var val = sr.GetStrData();                                      if (!string.IsNullOrEmpty(val))                                      {                                          val = val.ToLowerInvariant();                                          if ((ctx.Partial && val.Contains(searchString)) || (val == searchString))                                          {                                              return true;                                          }                                      }                                  }                              }                                return false;                          };                      }                        break;                  case SearchType.FormIDRef:                      {                          if (string.IsNullOrEmpty(ctx.Text))                          {                              return null;                          }                            uint searchID;                          if (!uint.TryParse(ctx.Text' NumberStyles.AllowHexSpecifier' null' out searchID))                          {                              MainView.PostStatusWarning("Invalid FormID");                              return null;                          }                            searchFunction = node => {                              if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                if (rec != null)                              {                                  rec.MatchRecordStructureToRecord();                                  if (                                      (from sr in rec.SubRecords from elem in rec.EnumerateElements(sr) let es = elem.Structure where es != null && es.type == ElementValueType.FormID select elem).Any(                                          elem => searchID == TypeConverter.h2i(elem.Data)))                                  {                                      return true;                                  }                              }                                return false;                          };                      }                        break;                    case SearchType.BasicCriteriaRef:                      {                          if (ctx.Criteria == null || !ctx.Criteria.Items.Any())                          {                              MainView.PostStatusWarning("No search criteria selected!");                              return null;                          }                            searchFunction = node => {                              if (ctx.UpdateFunc != null && !ctx.UpdateFunc(node))                              {                                  return false;                              }                                var rec = node as Record;                              if (rec == null)                              {                                  return node is IGroupRecord;                              }                                if (ctx.Criteria.Type != rec.Name)                              {                                  return false;                              }                                rec.MatchRecordStructureToRecord();                              bool all = false;                              foreach (var m in ctx.Criteria.Items)                              {                                  bool ok = m.Match(rec);                                  if (!ok)                                  {                                      return false;                                  }                                    all = true;                              }                                return all;                          };                      }                        break;              }
