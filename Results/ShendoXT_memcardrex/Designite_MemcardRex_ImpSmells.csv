Implementation smell,Namespace,Class,File,Method,Description
Long Method,MemcardRex,charConverter,C:\repos\ShendoXT_memcardrex\MemcardRex\sjisConverter.cs,convertSJIStoASCII,The method has 319 lines of code.
Complex Method,MemcardRex,headerWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\headerWindow.cs,initializeDialog,Cyclomatic complexity of the method is 14
Complex Method,MemcardRex,headerWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\headerWindow.cs,okButton_Click,Cyclomatic complexity of the method is 13
Complex Method,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,initializeDialog,Cyclomatic complexity of the method is 13
Complex Method,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,Cyclomatic complexity of the method is 13
Complex Method,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,exportIcon,Cyclomatic complexity of the method is 13
Complex Method,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,iconRender_MouseDownMove,Cyclomatic complexity of the method is 8
Complex Method,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,initializeDialog,Cyclomatic complexity of the method is 14
Complex Method,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,Cyclomatic complexity of the method is 10
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,Cyclomatic complexity of the method is 11
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editSaveComments,Cyclomatic complexity of the method is 12
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,showInformation,Cyclomatic complexity of the method is 12
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,restoreSave,Cyclomatic complexity of the method is 16
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,deleteSave,Cyclomatic complexity of the method is 16
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatSave,Cyclomatic complexity of the method is 11
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,copySave,Cyclomatic complexity of the method is 18
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,Cyclomatic complexity of the method is 34
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editIcon,Cyclomatic complexity of the method is 18
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,Cyclomatic complexity of the method is 33
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,Cyclomatic complexity of the method is 21
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editSaveHeader,Cyclomatic complexity of the method is 12
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshPluginBindings,Cyclomatic complexity of the method is 11
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,Cyclomatic complexity of the method is 48
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,Cyclomatic complexity of the method is 18
Complex Method,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatHardwareCard,Cyclomatic complexity of the method is 10
Complex Method,MemcardRex,preferencesWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\preferencesWindow.cs,initializeDialog,Cyclomatic complexity of the method is 9
Complex Method,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,Cyclomatic complexity of the method is 25
Complex Method,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,Cyclomatic complexity of the method is 8
Complex Method,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,toggleDeleteSave,Cyclomatic complexity of the method is 21
Complex Method,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIconFrames,Cyclomatic complexity of the method is 12
Complex Method,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,Cyclomatic complexity of the method is 20
Complex Method,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,Cyclomatic complexity of the method is 37
Complex Method,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveMemoryCard,Cyclomatic complexity of the method is 13
Complex Method,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,Cyclomatic complexity of the method is 22
Complex Method,MemcardRex,charConverter,C:\repos\ShendoXT_memcardrex\MemcardRex\sjisConverter.cs,convertSJIStoASCII,Cyclomatic complexity of the method is 309
Long Parameter List,MemcardRex,AboutWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\aboutWindow.cs,initDialog,The method has 6 parameters.
Long Parameter List,MemcardRex,compareWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\compareWindow.cs,initializeDialog,The method has 6 parameters.
Long Parameter List,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,writeMemoryCardDexDrive,The method has 5 parameters.
Long Parameter List,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,writeMemoryCardCARDuino,The method has 5 parameters.
Long Parameter List,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,writeMemoryCardPS1CLnk,The method has 5 parameters.
Long Parameter List,MemcardRex,glassSupport,C:\repos\ShendoXT_memcardrex\MemcardRex\glassSupport.cs,BitBlt,The method has 9 parameters.
Long Parameter List,MemcardRex,glassSupport,C:\repos\ShendoXT_memcardrex\MemcardRex\glassSupport.cs,DrawThemeTextEx,The method has 9 parameters.
Long Parameter List,MemcardRex,glassSupport,C:\repos\ShendoXT_memcardrex\MemcardRex\glassSupport.cs,CreateDIBSection,The method has 6 parameters.
Long Parameter List,MemcardRex,glassSupport,C:\repos\ShendoXT_memcardrex\MemcardRex\glassSupport.cs,DrawTextOnGlass,The method has 5 parameters.
Long Parameter List,MemcardRex,headerWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\headerWindow.cs,initializeDialog,The method has 5 parameters.
Long Parameter List,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,initializeDialog,The method has 11 parameters.
Long Parameter List,MemcardRex,messageWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\messageWindow.cs,ShowMessage,The method has 6 parameters.
Long Parameter List,MemcardRex,messageWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\messageWindow.cs,ShowMessage,The method has 7 parameters.
Long Statement,MemcardRex,compareWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\compareWindow.cs,initializeDialog,The length of the statement  "			compareListView.Items [compareListView.Items.Count - 1].SubItems.Add ("0x" + save1Data [i].ToString ("X2") + " (" + save1Data [i].ToString () + ")"); " is 149.
Long Statement,MemcardRex,compareWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\compareWindow.cs,initializeDialog,The length of the statement  "			compareListView.Items [compareListView.Items.Count - 1].SubItems.Add ("0x" + save2Data [i].ToString ("X2") + " (" + save2Data [i].ToString () + ")"); " is 149.
Long Statement,MemcardRex,glassSupport,C:\repos\ShendoXT_memcardrex\MemcardRex\glassSupport.cs,DrawTextOnGlass,The length of the statement  "					System.Windows.Forms.VisualStyles.VisualStyleRenderer renderer = new System.Windows.Forms.VisualStyles.VisualStyleRenderer (System.Windows.Forms.VisualStyles.VisualStyleElement.Window.Caption.Active); " is 200.
Long Statement,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The length of the statement  "	openDlg.Filter = "All supported|*.bmp;*.gif;*.jpeg;*.jpg;*.png|Bitmap (*.bmp)|*.bmp|GIF (*.gif)|*.gif|JPEG (*.jpeg;*.jpg)|*.jpeg;*.jpg|PNG (*.png)|*.png"; " is 154.
Long Statement,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The length of the statement  "		iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 48' 48))); " is 126.
Long Statement,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The length of the statement  "		iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 48' 48))); " is 126.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,applyGlass,The length of the statement  "		windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5); " is 132.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,applyGlass,The length of the statement  "			windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5); " is 132.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,openCardDialog,The length of the statement  "	openFileDlg.Filter = "All supported|*.mcr;*.gme;*.bin;*.mcd;*.mem;*.vgs;*.mc;*.ddf;*.ps;*.psm;*.mci;*.VMP;*.VM1|ePSXe/PSEmu Pro Memory Card (*.mcr)|*.mcr|DexDrive Memory Card (*.gme)|*.gme|pSX/AdriPSX Memory Card (*.bin)|*.bin|Bleem! Memory Card (*.mcd)|*.mcd|VGS Memory Card (*.mem' *.vgs)|*.mem; *.vgs|PSXGame Edit Memory Card (*.mc)|*.mc|DataDeck Memory Card (*.ddf)|*.ddf|WinPSM Memory Card (*.ps)|*.ps|Smart Link Memory Card (*.psm)|*.psm|MCExplorer (*.mci)|*.mci|PSP virtual Memory Card (*.VMP)|*.VMP|PS3 virtual Memory Card (*.VM1)|*.VM1|All files (*.*)|*.*"; " is 566.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,openCard,The length of the statement  "			new messageWindow ().ShowMessage (this' appName' "'" + Path.GetFileName (fileName) + "' is already opened."' "OK"' null' true); " is 127.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The length of the statement  "		saveFileDlg.Filter = "ePSXe/PSEmu Pro Memory Card (*.mcr)|*.mcr|DexDrive Memory Card (*.gme)|*.gme|pSX/AdriPSX Memory Card (*.bin)|*.bin|Bleem! Memory Card (*.mcd)|*.mcd|VGS Memory Card (*.mem' *.vgs)|*.mem; *.vgs|PSXGame Edit Memory Card (*.mc)|*.mc|DataDeck Memory Card (*.ddf)|*.ddf|WinPSM Memory Card (*.ps)|*.ps|Smart Link Memory Card (*.psm)|*.psm|MCExplorer (*.mci)|*.mci|PS3 virtual Memory Card (*.VM1)|*.VM1"; " is 418.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,showInformation,The length of the statement  "			informationDlg.initializeDialog (saveTitle' saveProdCode' saveIdentifier' saveRegion' saveSize' iconFrames' mainSettings.iconInterpolationMode' mainSettings.iconPropertiesSize' saveIcons' PScard [listIndex].findSaveLinks (slotNumber)' mainSettings.iconBackgroundColor); " is 269.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,restoreSave,The length of the statement  "			new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true); " is 140.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,deleteSave,The length of the statement  "			new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true); " is 140.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatSave,The length of the statement  "			if (new messageWindow ().ShowMessage (this' appName' "Formatted slots cannot be restored.\nDo you want to proceed with this operation?"' "No"' "Yes"' true) == "Yes") { " is 167.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatSave,The length of the statement  "			new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true); " is 140.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,copySave,The length of the statement  "			new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true); " is 140.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,pasteSave,The length of the statement  "					new messageWindow ().ShowMessage (this' appName' "To complete this operation " + requiredSlots.ToString () + " free slots are required."' "OK"' null' true); " is 156.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The length of the statement  "			string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber]; " is 181.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The length of the statement  "			saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*"; " is 222.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The length of the statement  "			new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true); " is 131.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The length of the statement  "			new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true); " is 140.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,importSaveDialog,The length of the statement  "			openFileDlg.Filter = "All supported|*.mcs;*.psx;*.ps1;*.mcb;*.mcx;*.pda;B???????????*;*.psv|PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*|PS3 virtual save (*.psv)|*.psv"; " is 323.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,importSaveDialog,The length of the statement  "					new messageWindow ().ShowMessage (this' appName' "To complete this operation " + requiredSlots.ToString () + " free slots are required."' "OK"' null' true); " is 156.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,savePrompt,The length of the statement  "		if (new messageWindow ().ShowMessage (this' appName' "Do you want to save changes to '" + PScard [listIndex].cardName + "'?"' "No"' "Yes"' true' true) == "Yes") " is 160.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editIcon,The length of the statement  "			new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true); " is 140.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,showAbout,The length of the statement  "	new AboutWindow ().initDialog (this' appName' appVersion' appDate' "Copyright © Shendo 2014"' "Beta testers: Gamesoul Master' Xtreme2damax'\nCarmax91.\n\nThanks to: @ruantec' Cobalt' TheCloudOfSmoke'\nRedawgTS' Hard core Rikki' RainMotorsports'\nZieg' Bobbi' OuTman' Kevstah2004' Kubusleonidas' \nFrédéric Brière' Cor'e' Gemini' DeadlySystem.\n\n" + "Special thanks to the following people whose\nMemory Card utilities inspired me to write my own:\nSimon Mallion (PSXMemTool)'\nLars Ole Dybdal (PSXGameEdit)'\nAldo Vargas (Memory Card Manager)'\nNeill Corlett (Dexter)'\nPaul Phoneix (ConvertM)."); " is 598.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The length of the statement  "		iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 16' 16))); " is 126.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The length of the statement  "		iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 16' 16))); " is 126.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The length of the statement  "		iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xA0' 0xFF' 0xFF' 0xFF))' new Region (new Rectangle (0' 0' 16' 16))); " is 126.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editWithPlugin,The length of the statement  "			if (new messageWindow ().ShowMessage (this' appName' "Save editing may potentialy corrupt the save.\nDo you want to proceed with this operation?"' "No"' "Yes"' true) == "No") " is 174.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editWithPlugin,The length of the statement  "		byte[] editedSaveBytes = pluginSystem.editSaveData (supportedPlugins [pluginIndex]' PScard [listIndex].getSaveBytes (slotNumber)' PScard [listIndex].saveProdCode [slotNumber]); " is 176.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The length of the statement  "				new messageWindow ().ShowMessage (this' appName' "Save file size mismatch. Saves can't be compared."' "OK"' null' true); " is 120.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The length of the statement  "			new compareWindow ().initializeDialog (this' appName' fetchedData' fetchedDataTitle' tempBuffer' tempBufferName + " (temp buffer)"); " is 132.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The length of the statement  "			new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true); " is 140.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,mainWindow_Paint,The length of the statement  "		windowGlass.DrawTextOnGlass (this.Handle' toolString.Text' new Font ("Segoe UI"' 9f' FontStyle.Regular)' windowRectangle' 10); " is 126.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,dexDriveMenuWrite_Click,The length of the statement  "		new cardReaderWindow ().writeMemoryCardDexDrive (this' appName' mainSettings.communicationPort' PScard [listIndex].saveMemoryCardStream ()' 1024); " is 146.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,memCARDuinoMenuWrite_Click,The length of the statement  "		new cardReaderWindow ().writeMemoryCardCARDuino (this' appName' mainSettings.communicationPort' PScard [listIndex].saveMemoryCardStream ()' 1024); " is 146.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,pS1CardLinkMenuWrite_Click,The length of the statement  "		new cardReaderWindow ().writeMemoryCardPS1CLnk (this' appName' mainSettings.communicationPort' PScard [listIndex].saveMemoryCardStream ()' 1024); " is 145.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatHardwareCard,The length of the statement  "	if (new messageWindow ().ShowMessage (this' appName' "Formatting will delete all saves on the Memory Card.\nDo you want to proceed with this operation?"' "No"' "Yes"' true) == "No") " is 181.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatHardwareCard,The length of the statement  "		new cardReaderWindow ().writeMemoryCardDexDrive (this' appName' mainSettings.communicationPort' blankCard.saveMemoryCardStream ()' frameNumber); " is 144.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatHardwareCard,The length of the statement  "		new cardReaderWindow ().writeMemoryCardCARDuino (this' appName' mainSettings.communicationPort' blankCard.saveMemoryCardStream ()' frameNumber); " is 144.
Long Statement,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatHardwareCard,The length of the statement  "		new cardReaderWindow ().writeMemoryCardPS1CLnk (this' appName' mainSettings.communicationPort' blankCard.saveMemoryCardStream ()' frameNumber); " is 143.
Long Statement,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The length of the statement  "		tempByteArray = Encoding.Convert (Encoding.Unicode' Encoding.Default' Encoding.Unicode.GetBytes (saveComments [slotNumber])); " is 125.
Long Statement,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The length of the statement  "		saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024; " is 133.
Long Statement,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The length of the statement  "			greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2); " is 124.
Long Statement,MemcardRex,rexPluginSystem,C:\repos\ShendoXT_memcardrex\MemcardRex\rexPluginSystem.cs,fetchPlugins,The length of the statement  "				if (assemblyTypes.Contains ("rexPluginSystem.rexPluginInterfaceV2") && assemblyTypes.Contains ("rexPluginSystem.rexPlugin")) { " is 126.
Long Statement,MemcardRex,rexPluginSystem,C:\repos\ShendoXT_memcardrex\MemcardRex\rexPluginSystem.cs,executeMethodString,The length of the statement  "		return (string)assemblyType.InvokeMember (methodName' BindingFlags.Default | BindingFlags.InvokeMethod' null' tempObject' null); " is 128.
Long Statement,MemcardRex,rexPluginSystem,C:\repos\ShendoXT_memcardrex\MemcardRex\rexPluginSystem.cs,executeMethodArray,The length of the statement  "		return (string[])assemblyType.InvokeMember (methodName' BindingFlags.Default | BindingFlags.InvokeMethod' null' tempObject' null); " is 130.
Long Statement,MemcardRex,rexPluginSystem,C:\repos\ShendoXT_memcardrex\MemcardRex\rexPluginSystem.cs,executeMethodByte,The length of the statement  "		return (byte[])assemblyType.InvokeMember (methodName' BindingFlags.Default | BindingFlags.InvokeMethod' null' tempObject' new object[] { " is 136.
Long Statement,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The length of the statement  "	if (ReadData [0] != 'P' || ReadData [1] != 'S' || ReadData [2] != '1' || ReadData [3] != 'C' || ReadData [4] != 'L' || ReadData [5] != 'N' || ReadData [6] != 'K') { " is 164.
Long Statement,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The length of the statement  "	//SendDataToPort((byte)DexCommands.INIT' new byte[] { 0x10' 0x29' 0x23' 0xbe' 0x84' 0xe1' 0x6c' 0xd6' 0xae' 0x52' 0x90' 0x49' 0xf1' 0xf1' 0xbb' 0xe9' 0xeb }' 50); " is 162.
Long Statement,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The length of the statement  "	FirmwareVersion = (ReadData [8] >> 6).ToString () + "." + ((ReadData [8] >> 2) & 0xF).ToString () + (ReadData [8] & 0x3).ToString (); " is 133.
Long Statement,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The length of the statement  "	if (ReadData [0] != 'M' || ReadData [1] != 'C' || ReadData [2] != 'D' || ReadData [3] != 'I' || ReadData [4] != 'N' || ReadData [5] != 'O') { " is 141.
Complex Conditional,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,iconRender_MouseDownMove,The conditional expression  "XposOriginal >= 0 && XposOriginal <= 15 && YposOriginal >= 0 && YposOriginal <= 15"  is complex.
Complex Conditional,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The conditional expression  "ReadData [0] != 'P' || ReadData [1] != 'S' || ReadData [2] != '1' || ReadData [3] != 'C' || ReadData [4] != 'L' || ReadData [5] != 'N' || ReadData [6] != 'K'"  is complex.
Complex Conditional,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The conditional expression  "ReadData [0] != 'M' || ReadData [1] != 'C' || ReadData [2] != 'D' || ReadData [3] != 'I' || ReadData [4] != 'N' || ReadData [5] != 'O'"  is complex.
Empty Catch Block,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,backupMemcard,The method has an empty catch block.
Empty Catch Block,MemcardRex,rexPluginSystem,C:\repos\ShendoXT_memcardrex\MemcardRex\rexPluginSystem.cs,fetchPlugins,The method has an empty catch block.
Magic Number,MemcardRex,AboutWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\aboutWindow.cs,initDialog,The following statement contains a magic number: this.Size = new Size (this.Size.Width' 132 + infoLabel.Height);  
Magic Number,MemcardRex,AboutWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\aboutWindow.cs,AboutWindow_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (80' 80' 80))' 0' 0' this.Width' 52);  
Magic Number,MemcardRex,AboutWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\aboutWindow.cs,AboutWindow_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (80' 80' 80))' 0' 0' this.Width' 52);  
Magic Number,MemcardRex,AboutWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\aboutWindow.cs,AboutWindow_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (80' 80' 80))' 0' 0' this.Width' 52);  
Magic Number,MemcardRex,AboutWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\aboutWindow.cs,AboutWindow_Paint,The following statement contains a magic number: e.Graphics.FillRectangle (new SolidBrush (Color.FromArgb (80' 80' 80))' 0' 0' this.Width' 52);  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,readMemoryCardDexDrive,The following statement contains a magic number: mainProgressBar.Maximum = 1024;  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,readMemoryCardCARDuino,The following statement contains a magic number: mainProgressBar.Maximum = 1024;  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,readMemoryCardPS1CLnk,The following statement contains a magic number: mainProgressBar.Maximum = 1024;  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,readMemoryCardPS1CLnk,The following statement contains a magic number: currentDeviceIdentifier = 2;  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,writeMemoryCardPS1CLnk,The following statement contains a magic number: currentDeviceIdentifier = 2;  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundReader_DoWork,The following statement contains a magic number: while (i < 1024) {  	//Check if the "Abort" button has been pressed  	if (backgroundReader.CancellationPending == true)  		return;  	//Get 128 byte frame data from DexDrive  	if (currentDeviceIdentifier == 0)  		tempDataBuffer = dexDevice.ReadMemoryCardFrame (i);  	//Get 128 byte frame data from MemCARDuino  	if (currentDeviceIdentifier == 1)  		tempDataBuffer = CARDuino.ReadMemoryCardFrame (i);  	//Get 128 byte frame data from PS1CardLink  	if (currentDeviceIdentifier == 2)  		tempDataBuffer = PS1CLnk.ReadMemoryCardFrame (i);  	//Check if there was a checksum mismatch  	if (tempDataBuffer != null) {  		Array.Copy (tempDataBuffer' 0' completeMemoryCard' i * 128' 128);  		backgroundReader.ReportProgress (i);  		i++;  	}  }  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundReader_DoWork,The following statement contains a magic number: while (i < 1024) {  	//Check if the "Abort" button has been pressed  	if (backgroundReader.CancellationPending == true)  		return;  	//Get 128 byte frame data from DexDrive  	if (currentDeviceIdentifier == 0)  		tempDataBuffer = dexDevice.ReadMemoryCardFrame (i);  	//Get 128 byte frame data from MemCARDuino  	if (currentDeviceIdentifier == 1)  		tempDataBuffer = CARDuino.ReadMemoryCardFrame (i);  	//Get 128 byte frame data from PS1CardLink  	if (currentDeviceIdentifier == 2)  		tempDataBuffer = PS1CLnk.ReadMemoryCardFrame (i);  	//Check if there was a checksum mismatch  	if (tempDataBuffer != null) {  		Array.Copy (tempDataBuffer' 0' completeMemoryCard' i * 128' 128);  		backgroundReader.ReportProgress (i);  		i++;  	}  }  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundReader_DoWork,The following statement contains a magic number: while (i < 1024) {  	//Check if the "Abort" button has been pressed  	if (backgroundReader.CancellationPending == true)  		return;  	//Get 128 byte frame data from DexDrive  	if (currentDeviceIdentifier == 0)  		tempDataBuffer = dexDevice.ReadMemoryCardFrame (i);  	//Get 128 byte frame data from MemCARDuino  	if (currentDeviceIdentifier == 1)  		tempDataBuffer = CARDuino.ReadMemoryCardFrame (i);  	//Get 128 byte frame data from PS1CardLink  	if (currentDeviceIdentifier == 2)  		tempDataBuffer = PS1CLnk.ReadMemoryCardFrame (i);  	//Check if there was a checksum mismatch  	if (tempDataBuffer != null) {  		Array.Copy (tempDataBuffer' 0' completeMemoryCard' i * 128' 128);  		backgroundReader.ReportProgress (i);  		i++;  	}  }  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundReader_DoWork,The following statement contains a magic number: while (i < 1024) {  	//Check if the "Abort" button has been pressed  	if (backgroundReader.CancellationPending == true)  		return;  	//Get 128 byte frame data from DexDrive  	if (currentDeviceIdentifier == 0)  		tempDataBuffer = dexDevice.ReadMemoryCardFrame (i);  	//Get 128 byte frame data from MemCARDuino  	if (currentDeviceIdentifier == 1)  		tempDataBuffer = CARDuino.ReadMemoryCardFrame (i);  	//Get 128 byte frame data from PS1CardLink  	if (currentDeviceIdentifier == 2)  		tempDataBuffer = PS1CLnk.ReadMemoryCardFrame (i);  	//Check if there was a checksum mismatch  	if (tempDataBuffer != null) {  		Array.Copy (tempDataBuffer' 0' completeMemoryCard' i * 128' 128);  		backgroundReader.ReportProgress (i);  		i++;  	}  }  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundReader_DoWork,The following statement contains a magic number: if (currentDeviceIdentifier == 2)  	tempDataBuffer = PS1CLnk.ReadMemoryCardFrame (i);  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundReader_DoWork,The following statement contains a magic number: if (tempDataBuffer != null) {  	Array.Copy (tempDataBuffer' 0' completeMemoryCard' i * 128' 128);  	backgroundReader.ReportProgress (i);  	i++;  }  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundReader_DoWork,The following statement contains a magic number: if (tempDataBuffer != null) {  	Array.Copy (tempDataBuffer' 0' completeMemoryCard' i * 128' 128);  	backgroundReader.ReportProgress (i);  	i++;  }  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundReader_DoWork,The following statement contains a magic number: Array.Copy (tempDataBuffer' 0' completeMemoryCard' i * 128' 128);  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundReader_DoWork,The following statement contains a magic number: Array.Copy (tempDataBuffer' 0' completeMemoryCard' i * 128' 128);  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundWriter_DoWork,The following statement contains a magic number: while (i < maxWritingFrames) {  	//Check if the "Abort" button has been pressed  	if (backgroundWriter.CancellationPending == true)  		return;  	//Get 128 byte frame data  	Array.Copy (completeMemoryCard' i * 128' tempDataBuffer' 0' 128);  	//Reset write status  	lastStatus = false;  	//Write data to DexDrive  	if (currentDeviceIdentifier == 0)  		lastStatus = dexDevice.WriteMemoryCardFrame (i' tempDataBuffer);  	//Write data to MemCARDuino  	if (currentDeviceIdentifier == 1)  		lastStatus = CARDuino.WriteMemoryCardFrame (i' tempDataBuffer);  	//Write data to PS1CardLink  	if (currentDeviceIdentifier == 2)  		lastStatus = PS1CLnk.WriteMemoryCardFrame (i' tempDataBuffer);  	//Check if there was a frame or checksum mismatch  	if (lastStatus == true) {  		backgroundWriter.ReportProgress (i);  		i++;  	}  }  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundWriter_DoWork,The following statement contains a magic number: while (i < maxWritingFrames) {  	//Check if the "Abort" button has been pressed  	if (backgroundWriter.CancellationPending == true)  		return;  	//Get 128 byte frame data  	Array.Copy (completeMemoryCard' i * 128' tempDataBuffer' 0' 128);  	//Reset write status  	lastStatus = false;  	//Write data to DexDrive  	if (currentDeviceIdentifier == 0)  		lastStatus = dexDevice.WriteMemoryCardFrame (i' tempDataBuffer);  	//Write data to MemCARDuino  	if (currentDeviceIdentifier == 1)  		lastStatus = CARDuino.WriteMemoryCardFrame (i' tempDataBuffer);  	//Write data to PS1CardLink  	if (currentDeviceIdentifier == 2)  		lastStatus = PS1CLnk.WriteMemoryCardFrame (i' tempDataBuffer);  	//Check if there was a frame or checksum mismatch  	if (lastStatus == true) {  		backgroundWriter.ReportProgress (i);  		i++;  	}  }  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundWriter_DoWork,The following statement contains a magic number: while (i < maxWritingFrames) {  	//Check if the "Abort" button has been pressed  	if (backgroundWriter.CancellationPending == true)  		return;  	//Get 128 byte frame data  	Array.Copy (completeMemoryCard' i * 128' tempDataBuffer' 0' 128);  	//Reset write status  	lastStatus = false;  	//Write data to DexDrive  	if (currentDeviceIdentifier == 0)  		lastStatus = dexDevice.WriteMemoryCardFrame (i' tempDataBuffer);  	//Write data to MemCARDuino  	if (currentDeviceIdentifier == 1)  		lastStatus = CARDuino.WriteMemoryCardFrame (i' tempDataBuffer);  	//Write data to PS1CardLink  	if (currentDeviceIdentifier == 2)  		lastStatus = PS1CLnk.WriteMemoryCardFrame (i' tempDataBuffer);  	//Check if there was a frame or checksum mismatch  	if (lastStatus == true) {  		backgroundWriter.ReportProgress (i);  		i++;  	}  }  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundWriter_DoWork,The following statement contains a magic number: Array.Copy (completeMemoryCard' i * 128' tempDataBuffer' 0' 128);  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundWriter_DoWork,The following statement contains a magic number: Array.Copy (completeMemoryCard' i * 128' tempDataBuffer' 0' 128);  
Magic Number,MemcardRex,cardReaderWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\cardReaderWindow.cs,backgroundWriter_DoWork,The following statement contains a magic number: if (currentDeviceIdentifier == 2)  	lastStatus = PS1CLnk.WriteMemoryCardFrame (i' tempDataBuffer);  
Magic Number,MemcardRex,glassSupport,C:\repos\ShendoXT_memcardrex\MemcardRex\glassSupport.cs,isGlassSupported,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6) {  	//Check if the DWM is enabled  	DwmIsCompositionEnabled (ref glassSupported);  }  
Magic Number,MemcardRex,glassSupport,C:\repos\ShendoXT_memcardrex\MemcardRex\glassSupport.cs,DrawTextOnGlass,The following statement contains a magic number: if (isGlassSupported ()) {  	RECT rc = new RECT ();  	RECT rc2 = new RECT ();  	rc.left = ctlrct.Left;  	rc.right = ctlrct.Right;  	rc.top = ctlrct.Top;  	rc.bottom = ctlrct.Bottom;  	rc2.left = 6;  	rc2.top = 5;  	rc2.right = rc.right - rc.left;  	rc2.bottom = rc.bottom - rc.top;  	IntPtr destdc = GetDC (hwnd);  	IntPtr Memdc = CreateCompatibleDC (destdc);  	IntPtr bitmap;  	IntPtr bitmapOld = IntPtr.Zero;  	IntPtr logfnotOld;  	int uFormat = DT_SINGLELINE | DT_NOPREFIX;  	BITMAPINFO dib = new BITMAPINFO ();  	dib.bmiHeader.biHeight = -(rc.bottom - rc.top);  	dib.bmiHeader.biWidth = rc.right - rc.left;  	dib.bmiHeader.biPlanes = 1;  	dib.bmiHeader.biSize = Marshal.SizeOf (typeof(BITMAPINFOHEADER));  	dib.bmiHeader.biBitCount = 32;  	dib.bmiHeader.biCompression = BI_RGB;  	if (!(SaveDC (Memdc) == 0)) {  		bitmap = CreateDIBSection (Memdc' ref dib' DIB_RGB_COLORS' 0' IntPtr.Zero' 0);  		if (!(bitmap == IntPtr.Zero)) {  			bitmapOld = SelectObject (Memdc' bitmap);  			IntPtr hFont = font.ToHfont ();  			logfnotOld = SelectObject (Memdc' hFont);  			try {  				System.Windows.Forms.VisualStyles.VisualStyleRenderer renderer = new System.Windows.Forms.VisualStyles.VisualStyleRenderer (System.Windows.Forms.VisualStyles.VisualStyleElement.Window.Caption.Active);  				DTTOPTS dttOpts = new DTTOPTS ();  				dttOpts.dwSize = (uint)Marshal.SizeOf (typeof(DTTOPTS));  				dttOpts.dwFlags = DTT_COMPOSITED | DTT_GLOWSIZE;  				dttOpts.iGlowSize = iglowSize;  				DrawThemeTextEx (renderer.Handle' Memdc' 0' 0' text' -1' uFormat' ref rc2' ref dttOpts);  				BitBlt (destdc' rc.left' rc.top' rc.right - rc.left' rc.bottom - rc.top' Memdc' 0' 0' SRCCOPY);  			}  			catch (Exception e) {  				Console.WriteLine (e.Message);  			}  			SelectObject (Memdc' bitmapOld);  			SelectObject (Memdc' logfnotOld);  			DeleteObject (bitmap);  			DeleteObject (hFont);  			ReleaseDC (Memdc' -1);  			DeleteDC (Memdc);  		}  	}  }  
Magic Number,MemcardRex,glassSupport,C:\repos\ShendoXT_memcardrex\MemcardRex\glassSupport.cs,DrawTextOnGlass,The following statement contains a magic number: if (isGlassSupported ()) {  	RECT rc = new RECT ();  	RECT rc2 = new RECT ();  	rc.left = ctlrct.Left;  	rc.right = ctlrct.Right;  	rc.top = ctlrct.Top;  	rc.bottom = ctlrct.Bottom;  	rc2.left = 6;  	rc2.top = 5;  	rc2.right = rc.right - rc.left;  	rc2.bottom = rc.bottom - rc.top;  	IntPtr destdc = GetDC (hwnd);  	IntPtr Memdc = CreateCompatibleDC (destdc);  	IntPtr bitmap;  	IntPtr bitmapOld = IntPtr.Zero;  	IntPtr logfnotOld;  	int uFormat = DT_SINGLELINE | DT_NOPREFIX;  	BITMAPINFO dib = new BITMAPINFO ();  	dib.bmiHeader.biHeight = -(rc.bottom - rc.top);  	dib.bmiHeader.biWidth = rc.right - rc.left;  	dib.bmiHeader.biPlanes = 1;  	dib.bmiHeader.biSize = Marshal.SizeOf (typeof(BITMAPINFOHEADER));  	dib.bmiHeader.biBitCount = 32;  	dib.bmiHeader.biCompression = BI_RGB;  	if (!(SaveDC (Memdc) == 0)) {  		bitmap = CreateDIBSection (Memdc' ref dib' DIB_RGB_COLORS' 0' IntPtr.Zero' 0);  		if (!(bitmap == IntPtr.Zero)) {  			bitmapOld = SelectObject (Memdc' bitmap);  			IntPtr hFont = font.ToHfont ();  			logfnotOld = SelectObject (Memdc' hFont);  			try {  				System.Windows.Forms.VisualStyles.VisualStyleRenderer renderer = new System.Windows.Forms.VisualStyles.VisualStyleRenderer (System.Windows.Forms.VisualStyles.VisualStyleElement.Window.Caption.Active);  				DTTOPTS dttOpts = new DTTOPTS ();  				dttOpts.dwSize = (uint)Marshal.SizeOf (typeof(DTTOPTS));  				dttOpts.dwFlags = DTT_COMPOSITED | DTT_GLOWSIZE;  				dttOpts.iGlowSize = iglowSize;  				DrawThemeTextEx (renderer.Handle' Memdc' 0' 0' text' -1' uFormat' ref rc2' ref dttOpts);  				BitBlt (destdc' rc.left' rc.top' rc.right - rc.left' rc.bottom - rc.top' Memdc' 0' 0' SRCCOPY);  			}  			catch (Exception e) {  				Console.WriteLine (e.Message);  			}  			SelectObject (Memdc' bitmapOld);  			SelectObject (Memdc' logfnotOld);  			DeleteObject (bitmap);  			DeleteObject (hFont);  			ReleaseDC (Memdc' -1);  			DeleteDC (Memdc);  		}  	}  }  
Magic Number,MemcardRex,glassSupport,C:\repos\ShendoXT_memcardrex\MemcardRex\glassSupport.cs,DrawTextOnGlass,The following statement contains a magic number: if (isGlassSupported ()) {  	RECT rc = new RECT ();  	RECT rc2 = new RECT ();  	rc.left = ctlrct.Left;  	rc.right = ctlrct.Right;  	rc.top = ctlrct.Top;  	rc.bottom = ctlrct.Bottom;  	rc2.left = 6;  	rc2.top = 5;  	rc2.right = rc.right - rc.left;  	rc2.bottom = rc.bottom - rc.top;  	IntPtr destdc = GetDC (hwnd);  	IntPtr Memdc = CreateCompatibleDC (destdc);  	IntPtr bitmap;  	IntPtr bitmapOld = IntPtr.Zero;  	IntPtr logfnotOld;  	int uFormat = DT_SINGLELINE | DT_NOPREFIX;  	BITMAPINFO dib = new BITMAPINFO ();  	dib.bmiHeader.biHeight = -(rc.bottom - rc.top);  	dib.bmiHeader.biWidth = rc.right - rc.left;  	dib.bmiHeader.biPlanes = 1;  	dib.bmiHeader.biSize = Marshal.SizeOf (typeof(BITMAPINFOHEADER));  	dib.bmiHeader.biBitCount = 32;  	dib.bmiHeader.biCompression = BI_RGB;  	if (!(SaveDC (Memdc) == 0)) {  		bitmap = CreateDIBSection (Memdc' ref dib' DIB_RGB_COLORS' 0' IntPtr.Zero' 0);  		if (!(bitmap == IntPtr.Zero)) {  			bitmapOld = SelectObject (Memdc' bitmap);  			IntPtr hFont = font.ToHfont ();  			logfnotOld = SelectObject (Memdc' hFont);  			try {  				System.Windows.Forms.VisualStyles.VisualStyleRenderer renderer = new System.Windows.Forms.VisualStyles.VisualStyleRenderer (System.Windows.Forms.VisualStyles.VisualStyleElement.Window.Caption.Active);  				DTTOPTS dttOpts = new DTTOPTS ();  				dttOpts.dwSize = (uint)Marshal.SizeOf (typeof(DTTOPTS));  				dttOpts.dwFlags = DTT_COMPOSITED | DTT_GLOWSIZE;  				dttOpts.iGlowSize = iglowSize;  				DrawThemeTextEx (renderer.Handle' Memdc' 0' 0' text' -1' uFormat' ref rc2' ref dttOpts);  				BitBlt (destdc' rc.left' rc.top' rc.right - rc.left' rc.bottom - rc.top' Memdc' 0' 0' SRCCOPY);  			}  			catch (Exception e) {  				Console.WriteLine (e.Message);  			}  			SelectObject (Memdc' bitmapOld);  			SelectObject (Memdc' logfnotOld);  			DeleteObject (bitmap);  			DeleteObject (hFont);  			ReleaseDC (Memdc' -1);  			DeleteDC (Memdc);  		}  	}  }  
Magic Number,MemcardRex,glassSupport,C:\repos\ShendoXT_memcardrex\MemcardRex\glassSupport.cs,DrawTextOnGlass,The following statement contains a magic number: rc2.left = 6;  
Magic Number,MemcardRex,glassSupport,C:\repos\ShendoXT_memcardrex\MemcardRex\glassSupport.cs,DrawTextOnGlass,The following statement contains a magic number: rc2.top = 5;  
Magic Number,MemcardRex,glassSupport,C:\repos\ShendoXT_memcardrex\MemcardRex\glassSupport.cs,DrawTextOnGlass,The following statement contains a magic number: dib.bmiHeader.biBitCount = 32;  
Magic Number,MemcardRex,headerWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\headerWindow.cs,initializeDialog,The following statement contains a magic number: switch (region) {  default:  	//Region custom' show hex  	customSaveRegion = region;  	regionCombobox.Items.Add ("0x" + region.ToString ("X4"));  	regionCombobox.SelectedIndex = 3;  	break;  case 0x4142:  	//America  	regionCombobox.SelectedIndex = 0;  	break;  case 0x4542:  	//Europe  	regionCombobox.SelectedIndex = 1;  	break;  case 0x4942:  	//Japan  	regionCombobox.SelectedIndex = 2;  	break;  }  
Magic Number,MemcardRex,headerWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\headerWindow.cs,initializeDialog,The following statement contains a magic number: switch (region) {  default:  	//Region custom' show hex  	customSaveRegion = region;  	regionCombobox.Items.Add ("0x" + region.ToString ("X4"));  	regionCombobox.SelectedIndex = 3;  	break;  case 0x4142:  	//America  	regionCombobox.SelectedIndex = 0;  	break;  case 0x4542:  	//Europe  	regionCombobox.SelectedIndex = 1;  	break;  case 0x4942:  	//Japan  	regionCombobox.SelectedIndex = 2;  	break;  }  
Magic Number,MemcardRex,headerWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\headerWindow.cs,initializeDialog,The following statement contains a magic number: regionCombobox.SelectedIndex = 3;  
Magic Number,MemcardRex,headerWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\headerWindow.cs,initializeDialog,The following statement contains a magic number: regionCombobox.SelectedIndex = 2;  
Magic Number,MemcardRex,headerWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\headerWindow.cs,okButton_Click,The following statement contains a magic number: if (prodCodeTextbox.Text.Length < 10 && identifierTextbox.Text.Length != 0) {  	//String is not valid  	new messageWindow ().ShowMessage (this' appName' "Product code must be exactly 10 characters long."' "OK"' null' true);  }  else {  	//String is valid  	prodCode = prodCodeTextbox.Text;  	saveIdentifier = identifierTextbox.Text;  	//Set the save region  	switch (regionCombobox.SelectedIndex) {  	default:  		//Custom region  		saveRegion = customSaveRegion;  		break;  	case 0:  		//America  		saveRegion = 0x4142;  		break;  	case 1:  		//Europe  		saveRegion = 0x4542;  		break;  	case 2:  		//Japan  		saveRegion = 0x4942;  		break;  	}  	//OK is pressed  	okPressed = true;  	this.Close ();  }  
Magic Number,MemcardRex,headerWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\headerWindow.cs,okButton_Click,The following statement contains a magic number: if (prodCodeTextbox.Text.Length < 10 && identifierTextbox.Text.Length != 0) {  	//String is not valid  	new messageWindow ().ShowMessage (this' appName' "Product code must be exactly 10 characters long."' "OK"' null' true);  }  else {  	//String is valid  	prodCode = prodCodeTextbox.Text;  	saveIdentifier = identifierTextbox.Text;  	//Set the save region  	switch (regionCombobox.SelectedIndex) {  	default:  		//Custom region  		saveRegion = customSaveRegion;  		break;  	case 0:  		//America  		saveRegion = 0x4142;  		break;  	case 1:  		//Europe  		saveRegion = 0x4542;  		break;  	case 2:  		//Japan  		saveRegion = 0x4942;  		break;  	}  	//OK is pressed  	okPressed = true;  	this.Close ();  }  
Magic Number,MemcardRex,headerWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\headerWindow.cs,okButton_Click,The following statement contains a magic number: switch (regionCombobox.SelectedIndex) {  default:  	//Custom region  	saveRegion = customSaveRegion;  	break;  case 0:  	//America  	saveRegion = 0x4142;  	break;  case 1:  	//Europe  	saveRegion = 0x4542;  	break;  case 2:  	//Japan  	saveRegion = 0x4942;  	break;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,initializeDialog,The following statement contains a magic number: switch (iconFrames) {  default:  	//Assume that there is only one icon frame  	frameCombo.Items.Add ("1st frame");  	frameCombo.Enabled = false;  	break;  case 2:  	//Two icons  	frameCombo.Items.Add ("1st frame");  	frameCombo.Items.Add ("2nd frame");  	break;  case 3:  	//Three icons  	frameCombo.Items.Add ("1st frame");  	frameCombo.Items.Add ("2nd frame");  	frameCombo.Items.Add ("3rd frame");  	break;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,initializeDialog,The following statement contains a magic number: switch (iconFrames) {  default:  	//Assume that there is only one icon frame  	frameCombo.Items.Add ("1st frame");  	frameCombo.Enabled = false;  	break;  case 2:  	//Two icons  	frameCombo.Items.Add ("1st frame");  	frameCombo.Items.Add ("2nd frame");  	break;  case 3:  	//Three icons  	frameCombo.Items.Add ("1st frame");  	frameCombo.Items.Add ("2nd frame");  	frameCombo.Items.Add ("3rd frame");  	break;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadPalette,The following statement contains a magic number: iconPalette = new Color[16];  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (iconData [byteCount] & 0x1F) << 3;  	greenChannel = ((iconData [byteCount + 1] & 0x3) << 6) | ((iconData [byteCount] & 0xE0) >> 2);  	blueChannel = ((iconData [byteCount + 1] & 0x7C) << 1);  	//Get the color value  	iconPalette [colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (iconData [byteCount] & 0x1F) << 3;  	greenChannel = ((iconData [byteCount + 1] & 0x3) << 6) | ((iconData [byteCount] & 0xE0) >> 2);  	blueChannel = ((iconData [byteCount + 1] & 0x7C) << 1);  	//Get the color value  	iconPalette [colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (iconData [byteCount] & 0x1F) << 3;  	greenChannel = ((iconData [byteCount + 1] & 0x3) << 6) | ((iconData [byteCount] & 0xE0) >> 2);  	blueChannel = ((iconData [byteCount + 1] & 0x7C) << 1);  	//Get the color value  	iconPalette [colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (iconData [byteCount] & 0x1F) << 3;  	greenChannel = ((iconData [byteCount + 1] & 0x3) << 6) | ((iconData [byteCount] & 0xE0) >> 2);  	blueChannel = ((iconData [byteCount + 1] & 0x7C) << 1);  	//Get the color value  	iconPalette [colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (iconData [byteCount] & 0x1F) << 3;  	greenChannel = ((iconData [byteCount + 1] & 0x3) << 6) | ((iconData [byteCount] & 0xE0) >> 2);  	blueChannel = ((iconData [byteCount + 1] & 0x7C) << 1);  	//Get the color value  	iconPalette [colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadPalette,The following statement contains a magic number: byteCount += 2
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadPalette,The following statement contains a magic number: redChannel = (iconData [byteCount] & 0x1F) << 3;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadPalette,The following statement contains a magic number: greenChannel = ((iconData [byteCount + 1] & 0x3) << 6) | ((iconData [byteCount] & 0xE0) >> 2);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadPalette,The following statement contains a magic number: greenChannel = ((iconData [byteCount + 1] & 0x3) << 6) | ((iconData [byteCount] & 0xE0) >> 2);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: iconBitmap = new Bitmap[3];  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconBitmap [iconNumber] = new Bitmap (16' 16);  	byteCount = 32 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  			iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconBitmap [iconNumber] = new Bitmap (16' 16);  	byteCount = 32 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  			iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconBitmap [iconNumber] = new Bitmap (16' 16);  	byteCount = 32 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  			iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconBitmap [iconNumber] = new Bitmap (16' 16);  	byteCount = 32 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  			iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconBitmap [iconNumber] = new Bitmap (16' 16);  	byteCount = 32 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  			iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconBitmap [iconNumber] = new Bitmap (16' 16);  	byteCount = 32 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  			iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconBitmap [iconNumber] = new Bitmap (16' 16);  	byteCount = 32 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  			iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconBitmap [iconNumber] = new Bitmap (16' 16);  	byteCount = 32 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  			iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconBitmap [iconNumber] = new Bitmap (16' 16);  	byteCount = 32 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  			iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: iconBitmap [iconNumber] = new Bitmap (16' 16);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: iconBitmap [iconNumber] = new Bitmap (16' 16);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: byteCount = 32 + (128 * iconNumber);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: byteCount = 32 + (128 * iconNumber);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  		iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  		byteCount++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  		iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  		byteCount++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  		iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  		byteCount++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  		iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  		byteCount++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int x = 0; x < 16; x += 2) {  	iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  	iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  	byteCount++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int x = 0; x < 16; x += 2) {  	iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  	iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  	byteCount++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: for (int x = 0; x < 16; x += 2) {  	iconBitmap [iconNumber].SetPixel (x' y' iconPalette [iconData [byteCount] & 0xF]);  	iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  	byteCount++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: x += 2
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,loadIcons,The following statement contains a magic number: iconBitmap [iconNumber].SetPixel (x + 1' y' iconPalette [iconData [byteCount] >> 4]);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: drawGraphics.DrawImage (iconBitmap [selectedIcon]' 0' 0' 177' 177);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: drawGraphics.DrawImage (iconBitmap [selectedIcon]' 0' 0' 177' 177);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: for (int y = 0; y < 17; y++)  	drawGraphics.DrawLine (blackPen' 0' (y * 11)' 177' (y * 11));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: for (int y = 0; y < 17; y++)  	drawGraphics.DrawLine (blackPen' 0' (y * 11)' 177' (y * 11));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: for (int y = 0; y < 17; y++)  	drawGraphics.DrawLine (blackPen' 0' (y * 11)' 177' (y * 11));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: for (int y = 0; y < 17; y++)  	drawGraphics.DrawLine (blackPen' 0' (y * 11)' 177' (y * 11));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: drawGraphics.DrawLine (blackPen' 0' (y * 11)' 177' (y * 11));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: drawGraphics.DrawLine (blackPen' 0' (y * 11)' 177' (y * 11));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: drawGraphics.DrawLine (blackPen' 0' (y * 11)' 177' (y * 11));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: for (int x = 0; x < 17; x++)  	drawGraphics.DrawLine (blackPen' (x * 11)' 0' (x * 11)' 177);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: for (int x = 0; x < 17; x++)  	drawGraphics.DrawLine (blackPen' (x * 11)' 0' (x * 11)' 177);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: for (int x = 0; x < 17; x++)  	drawGraphics.DrawLine (blackPen' (x * 11)' 0' (x * 11)' 177);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: for (int x = 0; x < 17; x++)  	drawGraphics.DrawLine (blackPen' (x * 11)' 0' (x * 11)' 177);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: drawGraphics.DrawLine (blackPen' (x * 11)' 0' (x * 11)' 177);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: drawGraphics.DrawLine (blackPen' (x * 11)' 0' (x * 11)' 177);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawIcon,The following statement contains a magic number: drawGraphics.DrawLine (blackPen' (x * 11)' 0' (x * 11)' 177);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: for (int y = 0; y < 2; y++) {  	for (int x = 0; x < 8; x++) {  		paletteBitmap.SetPixel (x' y' iconPalette [colorCounter]);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: for (int y = 0; y < 2; y++) {  	for (int x = 0; x < 8; x++) {  		paletteBitmap.SetPixel (x' y' iconPalette [colorCounter]);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: for (int x = 0; x < 8; x++) {  	paletteBitmap.SetPixel (x' y' iconPalette [colorCounter]);  	colorCounter++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: drawGraphics.DrawImage (paletteBitmap' 0' 0' 120' 30);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: drawGraphics.DrawImage (paletteBitmap' 0' 0' 120' 30);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: for (int y = 0; y < 3; y++)  	drawGraphics.DrawLine (blackPen' 0' (y * 15)' 121' (y * 15));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: for (int y = 0; y < 3; y++)  	drawGraphics.DrawLine (blackPen' 0' (y * 15)' 121' (y * 15));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: for (int y = 0; y < 3; y++)  	drawGraphics.DrawLine (blackPen' 0' (y * 15)' 121' (y * 15));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: for (int y = 0; y < 3; y++)  	drawGraphics.DrawLine (blackPen' 0' (y * 15)' 121' (y * 15));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: drawGraphics.DrawLine (blackPen' 0' (y * 15)' 121' (y * 15));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: drawGraphics.DrawLine (blackPen' 0' (y * 15)' 121' (y * 15));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: drawGraphics.DrawLine (blackPen' 0' (y * 15)' 121' (y * 15));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: for (int x = 0; x < 9; x++)  	drawGraphics.DrawLine (blackPen' (x * 15)' 0' (x * 15)' 31);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: for (int x = 0; x < 9; x++)  	drawGraphics.DrawLine (blackPen' (x * 15)' 0' (x * 15)' 31);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: for (int x = 0; x < 9; x++)  	drawGraphics.DrawLine (blackPen' (x * 15)' 0' (x * 15)' 31);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: for (int x = 0; x < 9; x++)  	drawGraphics.DrawLine (blackPen' (x * 15)' 0' (x * 15)' 31);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: drawGraphics.DrawLine (blackPen' (x * 15)' 0' (x * 15)' 31);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: drawGraphics.DrawLine (blackPen' (x * 15)' 0' (x * 15)' 31);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,drawPalette,The following statement contains a magic number: drawGraphics.DrawLine (blackPen' (x * 15)' 0' (x * 15)' 31);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: if ((X + (Y * 16)) % 2 == 0) {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  }  else {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: if ((X + (Y * 16)) % 2 == 0) {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  }  else {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: if ((X + (Y * 16)) % 2 == 0) {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  }  else {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: if ((X + (Y * 16)) % 2 == 0) {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  }  else {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: if ((X + (Y * 16)) % 2 == 0) {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  }  else {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: if ((X + (Y * 16)) % 2 == 0) {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  }  else {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: if ((X + (Y * 16)) % 2 == 0) {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  }  else {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: if ((X + (Y * 16)) % 2 == 0) {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  }  else {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: if ((X + (Y * 16)) % 2 == 0) {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  }  else {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: if ((X + (Y * 16)) % 2 == 0) {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  }  else {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: if ((X + (Y * 16)) % 2 == 0) {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  }  else {  	iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  	iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: iconData [32 + destinationByte + (selectedIcon * 128)] &= 0xF0;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)selectedColor [selectedColorIndex];  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: iconData [32 + destinationByte + (selectedIcon * 128)] &= 0x0F;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,putPixel,The following statement contains a magic number: iconData [32 + destinationByte + (selectedIcon * 128)] |= (byte)(selectedColor [selectedColorIndex] << 4);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: if (OpenedBitmap.Width != 16 || OpenedBitmap.Height != 16) {  	new messageWindow ().ShowMessage (this' "Warning"' "Selected image is not a 16x16 pixel image."' "OK"' null' true);  	OpenedBitmap.Dispose ();  	return;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: if (OpenedBitmap.Width != 16 || OpenedBitmap.Height != 16) {  	new messageWindow ().ShowMessage (this' "Warning"' "Selected image is not a 16x16 pixel image."' "OK"' null' true);  	OpenedBitmap.Dispose ();  	return;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		//Check if the given color exists and add it if it doesn't  		if (!foundColors.Contains (OpenedBitmap.GetPixel (x' y)))  			foundColors.Add (OpenedBitmap.GetPixel (x' y));  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		//Check if the given color exists and add it if it doesn't  		if (!foundColors.Contains (OpenedBitmap.GetPixel (x' y)))  			foundColors.Add (OpenedBitmap.GetPixel (x' y));  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int x = 0; x < 16; x++) {  	//Check if the given color exists and add it if it doesn't  	if (!foundColors.Contains (OpenedBitmap.GetPixel (x' y)))  		foundColors.Add (OpenedBitmap.GetPixel (x' y));  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: if (foundColors.Count > 16) {  	new messageWindow ().ShowMessage (this' "Warning"' "Selected image contains more then 16 colors."' "OK"' null' true);  	OpenedBitmap.Dispose ();  	return;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int i = foundColors.Count; i < 16; i++) {  	foundColors.Add (Color.Black);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	//Get RGB channels from the Bitmap palette  	redChannel = (foundColors [i].R >> 3);  	greenChannel = (foundColors [i].G >> 3);  	blueChannel = (foundColors [i].B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [i * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(i * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	//Get RGB channels from the Bitmap palette  	redChannel = (foundColors [i].R >> 3);  	greenChannel = (foundColors [i].G >> 3);  	blueChannel = (foundColors [i].B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [i * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(i * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	//Get RGB channels from the Bitmap palette  	redChannel = (foundColors [i].R >> 3);  	greenChannel = (foundColors [i].G >> 3);  	blueChannel = (foundColors [i].B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [i * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(i * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	//Get RGB channels from the Bitmap palette  	redChannel = (foundColors [i].R >> 3);  	greenChannel = (foundColors [i].G >> 3);  	blueChannel = (foundColors [i].B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [i * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(i * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	//Get RGB channels from the Bitmap palette  	redChannel = (foundColors [i].R >> 3);  	greenChannel = (foundColors [i].G >> 3);  	blueChannel = (foundColors [i].B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [i * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(i * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	//Get RGB channels from the Bitmap palette  	redChannel = (foundColors [i].R >> 3);  	greenChannel = (foundColors [i].G >> 3);  	blueChannel = (foundColors [i].B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [i * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(i * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	//Get RGB channels from the Bitmap palette  	redChannel = (foundColors [i].R >> 3);  	greenChannel = (foundColors [i].G >> 3);  	blueChannel = (foundColors [i].B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [i * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(i * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	//Get RGB channels from the Bitmap palette  	redChannel = (foundColors [i].R >> 3);  	greenChannel = (foundColors [i].G >> 3);  	blueChannel = (foundColors [i].B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [i * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(i * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int i = 0; i < 16; i++) {  	//Get RGB channels from the Bitmap palette  	redChannel = (foundColors [i].R >> 3);  	greenChannel = (foundColors [i].G >> 3);  	blueChannel = (foundColors [i].B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [i * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(i * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: redChannel = (foundColors [i].R >> 3);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: greenChannel = (foundColors [i].G >> 3);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: blueChannel = (foundColors [i].B >> 3);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: iconData [i * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: iconData [i * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: iconData [(i * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: iconData [(i * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: iconData [(i * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		//Reset index variable (not necessary' but to be safe anyway)  		tempIndex = 0;  		//Get the ARGB color of the current pixel  		tempColor = OpenedBitmap.GetPixel (x' y);  		//Cycle through palette to see the current index  		//This way is a bit resource heavy but since image is always 16x16 it's not an issue  		//There is no "good" alternative to do it with indexed bitmaps' only the unsafe one  		for (byte pIndex = 0; pIndex < 16; pIndex++) {  			if (foundColors [pIndex] == tempColor) {  				tempIndex = pIndex;  				break;  			}  		}  		returnData [x' y] = tempIndex;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		//Reset index variable (not necessary' but to be safe anyway)  		tempIndex = 0;  		//Get the ARGB color of the current pixel  		tempColor = OpenedBitmap.GetPixel (x' y);  		//Cycle through palette to see the current index  		//This way is a bit resource heavy but since image is always 16x16 it's not an issue  		//There is no "good" alternative to do it with indexed bitmaps' only the unsafe one  		for (byte pIndex = 0; pIndex < 16; pIndex++) {  			if (foundColors [pIndex] == tempColor) {  				tempIndex = pIndex;  				break;  			}  		}  		returnData [x' y] = tempIndex;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		//Reset index variable (not necessary' but to be safe anyway)  		tempIndex = 0;  		//Get the ARGB color of the current pixel  		tempColor = OpenedBitmap.GetPixel (x' y);  		//Cycle through palette to see the current index  		//This way is a bit resource heavy but since image is always 16x16 it's not an issue  		//There is no "good" alternative to do it with indexed bitmaps' only the unsafe one  		for (byte pIndex = 0; pIndex < 16; pIndex++) {  			if (foundColors [pIndex] == tempColor) {  				tempIndex = pIndex;  				break;  			}  		}  		returnData [x' y] = tempIndex;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int x = 0; x < 16; x++) {  	//Reset index variable (not necessary' but to be safe anyway)  	tempIndex = 0;  	//Get the ARGB color of the current pixel  	tempColor = OpenedBitmap.GetPixel (x' y);  	//Cycle through palette to see the current index  	//This way is a bit resource heavy but since image is always 16x16 it's not an issue  	//There is no "good" alternative to do it with indexed bitmaps' only the unsafe one  	for (byte pIndex = 0; pIndex < 16; pIndex++) {  		if (foundColors [pIndex] == tempColor) {  			tempIndex = pIndex;  			break;  		}  	}  	returnData [x' y] = tempIndex;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (int x = 0; x < 16; x++) {  	//Reset index variable (not necessary' but to be safe anyway)  	tempIndex = 0;  	//Get the ARGB color of the current pixel  	tempColor = OpenedBitmap.GetPixel (x' y);  	//Cycle through palette to see the current index  	//This way is a bit resource heavy but since image is always 16x16 it's not an issue  	//There is no "good" alternative to do it with indexed bitmaps' only the unsafe one  	for (byte pIndex = 0; pIndex < 16; pIndex++) {  		if (foundColors [pIndex] == tempColor) {  			tempIndex = pIndex;  			break;  		}  	}  	returnData [x' y] = tempIndex;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,importIcon,The following statement contains a magic number: for (byte pIndex = 0; pIndex < 16; pIndex++) {  	if (foundColors [pIndex] == tempColor) {  		tempIndex = pIndex;  		break;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,exportIcon,The following statement contains a magic number: if (saveDlg.ShowDialog () == DialogResult.OK) {  	ImageFormat imgFormat;  	switch (saveDlg.FilterIndex) {  	default:  		//bmp  		imgFormat = ImageFormat.Bmp;  		break;  	case 2:  		//gif  		imgFormat = ImageFormat.Gif;  		break;  	case 3:  		//jpg  		imgFormat = ImageFormat.Jpeg;  		break;  	case 4:  		//png  		imgFormat = ImageFormat.Png;  		break;  	}  	//Save the image in the selected format  	iconBitmap [selectedIcon].Save (saveDlg.FileName' imgFormat);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,exportIcon,The following statement contains a magic number: if (saveDlg.ShowDialog () == DialogResult.OK) {  	ImageFormat imgFormat;  	switch (saveDlg.FilterIndex) {  	default:  		//bmp  		imgFormat = ImageFormat.Bmp;  		break;  	case 2:  		//gif  		imgFormat = ImageFormat.Gif;  		break;  	case 3:  		//jpg  		imgFormat = ImageFormat.Jpeg;  		break;  	case 4:  		//png  		imgFormat = ImageFormat.Png;  		break;  	}  	//Save the image in the selected format  	iconBitmap [selectedIcon].Save (saveDlg.FileName' imgFormat);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,exportIcon,The following statement contains a magic number: if (saveDlg.ShowDialog () == DialogResult.OK) {  	ImageFormat imgFormat;  	switch (saveDlg.FilterIndex) {  	default:  		//bmp  		imgFormat = ImageFormat.Bmp;  		break;  	case 2:  		//gif  		imgFormat = ImageFormat.Gif;  		break;  	case 3:  		//jpg  		imgFormat = ImageFormat.Jpeg;  		break;  	case 4:  		//png  		imgFormat = ImageFormat.Png;  		break;  	}  	//Save the image in the selected format  	iconBitmap [selectedIcon].Save (saveDlg.FileName' imgFormat);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,exportIcon,The following statement contains a magic number: switch (saveDlg.FilterIndex) {  default:  	//bmp  	imgFormat = ImageFormat.Bmp;  	break;  case 2:  	//gif  	imgFormat = ImageFormat.Gif;  	break;  case 3:  	//jpg  	imgFormat = ImageFormat.Jpeg;  	break;  case 4:  	//png  	imgFormat = ImageFormat.Png;  	break;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,exportIcon,The following statement contains a magic number: switch (saveDlg.FilterIndex) {  default:  	//bmp  	imgFormat = ImageFormat.Bmp;  	break;  case 2:  	//gif  	imgFormat = ImageFormat.Gif;  	break;  case 3:  	//jpg  	imgFormat = ImageFormat.Jpeg;  	break;  case 4:  	//png  	imgFormat = ImageFormat.Png;  	break;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,exportIcon,The following statement contains a magic number: switch (saveDlg.FilterIndex) {  default:  	//bmp  	imgFormat = ImageFormat.Bmp;  	break;  case 2:  	//gif  	imgFormat = ImageFormat.Gif;  	break;  case 3:  	//jpg  	imgFormat = ImageFormat.Jpeg;  	break;  case 4:  	//png  	imgFormat = ImageFormat.Png;  	break;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,horizontalFlip,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		processedData [x' y] = tempIconData [15 - x' y];  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,horizontalFlip,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		processedData [x' y] = tempIconData [15 - x' y];  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,horizontalFlip,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		processedData [x' y] = tempIconData [15 - x' y];  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,horizontalFlip,The following statement contains a magic number: for (int x = 0; x < 16; x++) {  	processedData [x' y] = tempIconData [15 - x' y];  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,horizontalFlip,The following statement contains a magic number: for (int x = 0; x < 16; x++) {  	processedData [x' y] = tempIconData [15 - x' y];  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,horizontalFlip,The following statement contains a magic number: processedData [x' y] = tempIconData [15 - x' y];  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,verticalFlip,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		processedData [x' y] = tempIconData [x' 15 - y];  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,verticalFlip,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		processedData [x' y] = tempIconData [x' 15 - y];  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,verticalFlip,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		processedData [x' y] = tempIconData [x' 15 - y];  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,verticalFlip,The following statement contains a magic number: for (int x = 0; x < 16; x++) {  	processedData [x' y] = tempIconData [x' 15 - y];  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,verticalFlip,The following statement contains a magic number: for (int x = 0; x < 16; x++) {  	processedData [x' y] = tempIconData [x' 15 - y];  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,verticalFlip,The following statement contains a magic number: processedData [x' y] = tempIconData [x' 15 - y];  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,leftRotate,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		processedData [x' y] = tempIconData [y' x];  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,leftRotate,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		processedData [x' y] = tempIconData [y' x];  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,leftRotate,The following statement contains a magic number: for (int x = 0; x < 16; x++) {  	processedData [x' y] = tempIconData [y' x];  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,rightRotate,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		processedData [x' y] = tempIconData [y' x];  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,rightRotate,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x++) {  		processedData [x' y] = tempIconData [y' x];  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,rightRotate,The following statement contains a magic number: for (int x = 0; x < 16; x++) {  	processedData [x' y] = tempIconData [y' x];  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,getDataGrid,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		returnData [x' y] = (byte)(iconData [byteCount] & 0x0F);  		returnData [x + 1' y] = (byte)((iconData [byteCount] & 0xF0) >> 4);  		byteCount++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,getDataGrid,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		returnData [x' y] = (byte)(iconData [byteCount] & 0x0F);  		returnData [x + 1' y] = (byte)((iconData [byteCount] & 0xF0) >> 4);  		byteCount++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,getDataGrid,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		returnData [x' y] = (byte)(iconData [byteCount] & 0x0F);  		returnData [x + 1' y] = (byte)((iconData [byteCount] & 0xF0) >> 4);  		byteCount++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,getDataGrid,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		returnData [x' y] = (byte)(iconData [byteCount] & 0x0F);  		returnData [x + 1' y] = (byte)((iconData [byteCount] & 0xF0) >> 4);  		byteCount++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,getDataGrid,The following statement contains a magic number: for (int x = 0; x < 16; x += 2) {  	returnData [x' y] = (byte)(iconData [byteCount] & 0x0F);  	returnData [x + 1' y] = (byte)((iconData [byteCount] & 0xF0) >> 4);  	byteCount++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,getDataGrid,The following statement contains a magic number: for (int x = 0; x < 16; x += 2) {  	returnData [x' y] = (byte)(iconData [byteCount] & 0x0F);  	returnData [x + 1' y] = (byte)((iconData [byteCount] & 0xF0) >> 4);  	byteCount++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,getDataGrid,The following statement contains a magic number: for (int x = 0; x < 16; x += 2) {  	returnData [x' y] = (byte)(iconData [byteCount] & 0x0F);  	returnData [x + 1' y] = (byte)((iconData [byteCount] & 0xF0) >> 4);  	byteCount++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,getDataGrid,The following statement contains a magic number: x += 2
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,getDataGrid,The following statement contains a magic number: returnData [x + 1' y] = (byte)((iconData [byteCount] & 0xF0) >> 4);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,setDataGrid,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		iconData [byteCount] = (byte)(gridData [x' y] | (gridData [x + 1' y] << 4));  		byteCount++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,setDataGrid,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		iconData [byteCount] = (byte)(gridData [x' y] | (gridData [x + 1' y] << 4));  		byteCount++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,setDataGrid,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		iconData [byteCount] = (byte)(gridData [x' y] | (gridData [x + 1' y] << 4));  		byteCount++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,setDataGrid,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		iconData [byteCount] = (byte)(gridData [x' y] | (gridData [x + 1' y] << 4));  		byteCount++;  	}  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,setDataGrid,The following statement contains a magic number: for (int x = 0; x < 16; x += 2) {  	iconData [byteCount] = (byte)(gridData [x' y] | (gridData [x + 1' y] << 4));  	byteCount++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,setDataGrid,The following statement contains a magic number: for (int x = 0; x < 16; x += 2) {  	iconData [byteCount] = (byte)(gridData [x' y] | (gridData [x + 1' y] << 4));  	byteCount++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,setDataGrid,The following statement contains a magic number: for (int x = 0; x < 16; x += 2) {  	iconData [byteCount] = (byte)(gridData [x' y] | (gridData [x + 1' y] << 4));  	byteCount++;  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,setDataGrid,The following statement contains a magic number: x += 2
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,setDataGrid,The following statement contains a magic number: iconData [byteCount] = (byte)(gridData [x' y] | (gridData [x + 1' y] << 4));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_MouseDown,The following statement contains a magic number: if (Xpos > 7)  	Xpos = 7;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_MouseDown,The following statement contains a magic number: if (Xpos > 7)  	Xpos = 7;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_MouseDown,The following statement contains a magic number: Xpos = 7;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_MouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left)  	setSelectedColor (Xpos + (Ypos * 8)' 0);  //Left color selector  else  	setSelectedColor (Xpos + (Ypos * 8)' 1);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_MouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left)  	setSelectedColor (Xpos + (Ypos * 8)' 0);  //Left color selector  else  	setSelectedColor (Xpos + (Ypos * 8)' 1);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_MouseDown,The following statement contains a magic number: setSelectedColor (Xpos + (Ypos * 8)' 0);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_MouseDown,The following statement contains a magic number: setSelectedColor (Xpos + (Ypos * 8)' 1);  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: if (colorDlg.ShowDialog () == DialogResult.OK) {  	//Get each color channel  	int redChannel = (colorDlg.Color.R >> 3);  	int greenChannel = (colorDlg.Color.G >> 3);  	int blueChannel = (colorDlg.Color.B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [selectedColor [selectedColorIndex] * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(selectedColor [selectedColorIndex] * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  	//Draw palette to color selector  	drawPalette ();  	//Update selected colors  	setSelectedColor (selectedColor [0]' 0);  	setSelectedColor (selectedColor [1]' 1);  	//Draw icon on the icon render  	drawIcon ();  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: if (colorDlg.ShowDialog () == DialogResult.OK) {  	//Get each color channel  	int redChannel = (colorDlg.Color.R >> 3);  	int greenChannel = (colorDlg.Color.G >> 3);  	int blueChannel = (colorDlg.Color.B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [selectedColor [selectedColorIndex] * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(selectedColor [selectedColorIndex] * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  	//Draw palette to color selector  	drawPalette ();  	//Update selected colors  	setSelectedColor (selectedColor [0]' 0);  	setSelectedColor (selectedColor [1]' 1);  	//Draw icon on the icon render  	drawIcon ();  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: if (colorDlg.ShowDialog () == DialogResult.OK) {  	//Get each color channel  	int redChannel = (colorDlg.Color.R >> 3);  	int greenChannel = (colorDlg.Color.G >> 3);  	int blueChannel = (colorDlg.Color.B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [selectedColor [selectedColorIndex] * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(selectedColor [selectedColorIndex] * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  	//Draw palette to color selector  	drawPalette ();  	//Update selected colors  	setSelectedColor (selectedColor [0]' 0);  	setSelectedColor (selectedColor [1]' 1);  	//Draw icon on the icon render  	drawIcon ();  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: if (colorDlg.ShowDialog () == DialogResult.OK) {  	//Get each color channel  	int redChannel = (colorDlg.Color.R >> 3);  	int greenChannel = (colorDlg.Color.G >> 3);  	int blueChannel = (colorDlg.Color.B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [selectedColor [selectedColorIndex] * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(selectedColor [selectedColorIndex] * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  	//Draw palette to color selector  	drawPalette ();  	//Update selected colors  	setSelectedColor (selectedColor [0]' 0);  	setSelectedColor (selectedColor [1]' 1);  	//Draw icon on the icon render  	drawIcon ();  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: if (colorDlg.ShowDialog () == DialogResult.OK) {  	//Get each color channel  	int redChannel = (colorDlg.Color.R >> 3);  	int greenChannel = (colorDlg.Color.G >> 3);  	int blueChannel = (colorDlg.Color.B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [selectedColor [selectedColorIndex] * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(selectedColor [selectedColorIndex] * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  	//Draw palette to color selector  	drawPalette ();  	//Update selected colors  	setSelectedColor (selectedColor [0]' 0);  	setSelectedColor (selectedColor [1]' 1);  	//Draw icon on the icon render  	drawIcon ();  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: if (colorDlg.ShowDialog () == DialogResult.OK) {  	//Get each color channel  	int redChannel = (colorDlg.Color.R >> 3);  	int greenChannel = (colorDlg.Color.G >> 3);  	int blueChannel = (colorDlg.Color.B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [selectedColor [selectedColorIndex] * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(selectedColor [selectedColorIndex] * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  	//Draw palette to color selector  	drawPalette ();  	//Update selected colors  	setSelectedColor (selectedColor [0]' 0);  	setSelectedColor (selectedColor [1]' 1);  	//Draw icon on the icon render  	drawIcon ();  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: if (colorDlg.ShowDialog () == DialogResult.OK) {  	//Get each color channel  	int redChannel = (colorDlg.Color.R >> 3);  	int greenChannel = (colorDlg.Color.G >> 3);  	int blueChannel = (colorDlg.Color.B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [selectedColor [selectedColorIndex] * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(selectedColor [selectedColorIndex] * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  	//Draw palette to color selector  	drawPalette ();  	//Update selected colors  	setSelectedColor (selectedColor [0]' 0);  	setSelectedColor (selectedColor [1]' 1);  	//Draw icon on the icon render  	drawIcon ();  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: if (colorDlg.ShowDialog () == DialogResult.OK) {  	//Get each color channel  	int redChannel = (colorDlg.Color.R >> 3);  	int greenChannel = (colorDlg.Color.G >> 3);  	int blueChannel = (colorDlg.Color.B >> 3);  	//Set color to iconData (convert 24 bit color to 15 bit)  	iconData [selectedColor [selectedColorIndex] * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  	iconData [(selectedColor [selectedColorIndex] * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  	//Draw palette to color selector  	drawPalette ();  	//Update selected colors  	setSelectedColor (selectedColor [0]' 0);  	setSelectedColor (selectedColor [1]' 1);  	//Draw icon on the icon render  	drawIcon ();  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: iconData [selectedColor [selectedColorIndex] * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: iconData [selectedColor [selectedColorIndex] * 2] = (byte)(redChannel | ((greenChannel & 0x07) << 5));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: iconData [(selectedColor [selectedColorIndex] * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: iconData [(selectedColor [selectedColorIndex] * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,paletteRender_DoubleClick,The following statement contains a magic number: iconData [(selectedColor [selectedColorIndex] * 2) + 1] = (byte)((blueChannel << 2) | ((greenChannel & 0x18) >> 3));  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,iconRender_MouseDownMove,The following statement contains a magic number: if (Xpos > 15)  	Xpos = 15;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,iconRender_MouseDownMove,The following statement contains a magic number: if (Xpos > 15)  	Xpos = 15;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,iconRender_MouseDownMove,The following statement contains a magic number: Xpos = 15;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,iconRender_MouseDownMove,The following statement contains a magic number: if (Ypos > 15)  	Ypos = 15;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,iconRender_MouseDownMove,The following statement contains a magic number: if (Ypos > 15)  	Ypos = 15;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,iconRender_MouseDownMove,The following statement contains a magic number: Ypos = 15;  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,iconRender_MouseDownMove,The following statement contains a magic number: if (XposOriginal >= 0 && XposOriginal <= 15 && YposOriginal >= 0 && YposOriginal <= 15) {  	//Color with first selected color  	if (e.Button == MouseButtons.Left)  		putPixel (Xpos' Ypos' 0);  	//Color with second selected colro  	if (e.Button == MouseButtons.Right)  		putPixel (Xpos' Ypos' 1);  }  
Magic Number,MemcardRex,iconWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\iconWindow.cs,iconRender_MouseDownMove,The following statement contains a magic number: if (XposOriginal >= 0 && XposOriginal <= 15 && YposOriginal >= 0 && YposOriginal <= 15) {  	//Color with first selected color  	if (e.Button == MouseButtons.Left)  		putPixel (Xpos' Ypos' 0);  	//Color with second selected colro  	if (e.Button == MouseButtons.Right)  		putPixel (Xpos' Ypos' 1);  }  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,initializeDialog,The following statement contains a magic number: slotLabel.Text = ocupiedSlots.Remove (ocupiedSlots.Length - 2);  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: switch (iconBackColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  }  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: switch (iconBackColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  }  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: switch (iconBackColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  }  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: switch (iconBackColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  }  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: switch (iconBackColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  }  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: switch (iconBackColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  }  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: switch (iconBackColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  }  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: switch (iconBackColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  }  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 48' 48)));  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 48' 48)));  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 48' 48)));  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 48' 48)));  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 48' 48)));  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 48' 48)));  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: iconGraphics.DrawImage (iconData [selectedIndex]' 0' 0' 32 + (iconSize * 16)' 32 + (iconSize * 16));  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: iconGraphics.DrawImage (iconData [selectedIndex]' 0' 0' 32 + (iconSize * 16)' 32 + (iconSize * 16));  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: iconGraphics.DrawImage (iconData [selectedIndex]' 0' 0' 32 + (iconSize * 16)' 32 + (iconSize * 16));  
Magic Number,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following statement contains a magic number: iconGraphics.DrawImage (iconData [selectedIndex]' 0' 0' 32 + (iconSize * 16)' 32 + (iconSize * 16));  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,applyGlass,The following statement contains a magic number: if (windowGlass.isGlassSupported () && mainSettings.glassStatusBar == 1) {  	//Hide status strip  	this.mainStatusStrip.Visible = false;  	windowMargins.bottom = 22;  	windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5);  	glassSupport.DwmExtendFrameIntoClientArea (this.Handle' ref windowMargins);  	//Repaint the form  	this.Refresh ();  }  else {  	//Check if effect of aero needs to be supressed  	if (Environment.OSVersion.Version.Major >= 6) {  		windowMargins.bottom = 0;  		windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5);  		glassSupport.DwmExtendFrameIntoClientArea (this.Handle' ref windowMargins);  		//Repaint the form  		this.Refresh ();  	}  	//Show status strip  	this.mainStatusStrip.Visible = true;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,applyGlass,The following statement contains a magic number: if (windowGlass.isGlassSupported () && mainSettings.glassStatusBar == 1) {  	//Hide status strip  	this.mainStatusStrip.Visible = false;  	windowMargins.bottom = 22;  	windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5);  	glassSupport.DwmExtendFrameIntoClientArea (this.Handle' ref windowMargins);  	//Repaint the form  	this.Refresh ();  }  else {  	//Check if effect of aero needs to be supressed  	if (Environment.OSVersion.Version.Major >= 6) {  		windowMargins.bottom = 0;  		windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5);  		glassSupport.DwmExtendFrameIntoClientArea (this.Handle' ref windowMargins);  		//Repaint the form  		this.Refresh ();  	}  	//Show status strip  	this.mainStatusStrip.Visible = true;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,applyGlass,The following statement contains a magic number: if (windowGlass.isGlassSupported () && mainSettings.glassStatusBar == 1) {  	//Hide status strip  	this.mainStatusStrip.Visible = false;  	windowMargins.bottom = 22;  	windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5);  	glassSupport.DwmExtendFrameIntoClientArea (this.Handle' ref windowMargins);  	//Repaint the form  	this.Refresh ();  }  else {  	//Check if effect of aero needs to be supressed  	if (Environment.OSVersion.Version.Major >= 6) {  		windowMargins.bottom = 0;  		windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5);  		glassSupport.DwmExtendFrameIntoClientArea (this.Handle' ref windowMargins);  		//Repaint the form  		this.Refresh ();  	}  	//Show status strip  	this.mainStatusStrip.Visible = true;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,applyGlass,The following statement contains a magic number: if (windowGlass.isGlassSupported () && mainSettings.glassStatusBar == 1) {  	//Hide status strip  	this.mainStatusStrip.Visible = false;  	windowMargins.bottom = 22;  	windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5);  	glassSupport.DwmExtendFrameIntoClientArea (this.Handle' ref windowMargins);  	//Repaint the form  	this.Refresh ();  }  else {  	//Check if effect of aero needs to be supressed  	if (Environment.OSVersion.Version.Major >= 6) {  		windowMargins.bottom = 0;  		windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5);  		glassSupport.DwmExtendFrameIntoClientArea (this.Handle' ref windowMargins);  		//Repaint the form  		this.Refresh ();  	}  	//Show status strip  	this.mainStatusStrip.Visible = true;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,applyGlass,The following statement contains a magic number: windowMargins.bottom = 22;  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,applyGlass,The following statement contains a magic number: windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,applyGlass,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6) {  	windowMargins.bottom = 0;  	windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5);  	glassSupport.DwmExtendFrameIntoClientArea (this.Handle' ref windowMargins);  	//Repaint the form  	this.Refresh ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,applyGlass,The following statement contains a magic number: if (Environment.OSVersion.Version.Major >= 6) {  	windowMargins.bottom = 0;  	windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5);  	glassSupport.DwmExtendFrameIntoClientArea (this.Handle' ref windowMargins);  	//Repaint the form  	this.Refresh ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,applyGlass,The following statement contains a magic number: windowRectangle = new Rectangle (0' this.ClientSize.Height - windowMargins.bottom' this.ClientSize.Width' windowMargins.bottom + 5);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: if (File.Exists (appPath + "/Settings.xml")) {  	//Open XML file for reading' file is auto-closed  	xmlAppSettings.openXmlReader (appPath + "/Settings.xml");  	//Load list font  	mainSettings.listFont = xmlAppSettings.readXmlEntry ("ListFont");  	//Load DexDrive COM port  	mainSettings.communicationPort = xmlAppSettings.readXmlEntry ("ComPort");  	//Load Title Encoding  	mainSettings.titleEncoding = xmlAppSettings.readXmlEntryInt ("TitleEncoding"' 0' 1);  	//Load List Grid settings  	mainSettings.showListGrid = xmlAppSettings.readXmlEntryInt ("ShowGrid"' 0' 1);  	//Load glass option switch  	mainSettings.glassStatusBar = xmlAppSettings.readXmlEntryInt ("GlassStatusBar"' 0' 1);  	//Load icon interpolation settings  	mainSettings.iconInterpolationMode = xmlAppSettings.readXmlEntryInt ("IconInterpolationMode"' 0' 1);  	//Load icon size settings  	mainSettings.iconPropertiesSize = xmlAppSettings.readXmlEntryInt ("IconSize"' 0' 1);  	//Load icon background color  	mainSettings.iconBackgroundColor = xmlAppSettings.readXmlEntryInt ("IconBackgroundColor"' 0' 4);  	//Load backup Memory Cards value  	mainSettings.backupMemcards = xmlAppSettings.readXmlEntryInt ("BackupMemoryCards"' 0' 1);  	//Load warning message switch  	mainSettings.warningMessage = xmlAppSettings.readXmlEntryInt ("WarningMessage"' 0' 1);  	//Load window position switch  	mainSettings.restoreWindowPosition = xmlAppSettings.readXmlEntryInt ("RestoreWindowPosition"' 0' 1);  	//Load format type  	mainSettings.formatType = xmlAppSettings.readXmlEntryInt ("HardwareFormatType"' 0' 1);  	//Check if window position should be read  	if (mainSettings.restoreWindowPosition == 1) {  		mainWindowLocation.X = xmlAppSettings.readXmlEntryInt ("WindowX"' -65535' 65535);  		mainWindowLocation.Y = xmlAppSettings.readXmlEntryInt ("WindowY"' -65535' 65535);  		//Apply read position  		this.Location = mainWindowLocation;  	}  	//Apply loaded settings  	applySettings ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: if (File.Exists (appPath + "/Settings.xml")) {  	//Open XML file for reading' file is auto-closed  	xmlAppSettings.openXmlReader (appPath + "/Settings.xml");  	//Load list font  	mainSettings.listFont = xmlAppSettings.readXmlEntry ("ListFont");  	//Load DexDrive COM port  	mainSettings.communicationPort = xmlAppSettings.readXmlEntry ("ComPort");  	//Load Title Encoding  	mainSettings.titleEncoding = xmlAppSettings.readXmlEntryInt ("TitleEncoding"' 0' 1);  	//Load List Grid settings  	mainSettings.showListGrid = xmlAppSettings.readXmlEntryInt ("ShowGrid"' 0' 1);  	//Load glass option switch  	mainSettings.glassStatusBar = xmlAppSettings.readXmlEntryInt ("GlassStatusBar"' 0' 1);  	//Load icon interpolation settings  	mainSettings.iconInterpolationMode = xmlAppSettings.readXmlEntryInt ("IconInterpolationMode"' 0' 1);  	//Load icon size settings  	mainSettings.iconPropertiesSize = xmlAppSettings.readXmlEntryInt ("IconSize"' 0' 1);  	//Load icon background color  	mainSettings.iconBackgroundColor = xmlAppSettings.readXmlEntryInt ("IconBackgroundColor"' 0' 4);  	//Load backup Memory Cards value  	mainSettings.backupMemcards = xmlAppSettings.readXmlEntryInt ("BackupMemoryCards"' 0' 1);  	//Load warning message switch  	mainSettings.warningMessage = xmlAppSettings.readXmlEntryInt ("WarningMessage"' 0' 1);  	//Load window position switch  	mainSettings.restoreWindowPosition = xmlAppSettings.readXmlEntryInt ("RestoreWindowPosition"' 0' 1);  	//Load format type  	mainSettings.formatType = xmlAppSettings.readXmlEntryInt ("HardwareFormatType"' 0' 1);  	//Check if window position should be read  	if (mainSettings.restoreWindowPosition == 1) {  		mainWindowLocation.X = xmlAppSettings.readXmlEntryInt ("WindowX"' -65535' 65535);  		mainWindowLocation.Y = xmlAppSettings.readXmlEntryInt ("WindowY"' -65535' 65535);  		//Apply read position  		this.Location = mainWindowLocation;  	}  	//Apply loaded settings  	applySettings ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: if (File.Exists (appPath + "/Settings.xml")) {  	//Open XML file for reading' file is auto-closed  	xmlAppSettings.openXmlReader (appPath + "/Settings.xml");  	//Load list font  	mainSettings.listFont = xmlAppSettings.readXmlEntry ("ListFont");  	//Load DexDrive COM port  	mainSettings.communicationPort = xmlAppSettings.readXmlEntry ("ComPort");  	//Load Title Encoding  	mainSettings.titleEncoding = xmlAppSettings.readXmlEntryInt ("TitleEncoding"' 0' 1);  	//Load List Grid settings  	mainSettings.showListGrid = xmlAppSettings.readXmlEntryInt ("ShowGrid"' 0' 1);  	//Load glass option switch  	mainSettings.glassStatusBar = xmlAppSettings.readXmlEntryInt ("GlassStatusBar"' 0' 1);  	//Load icon interpolation settings  	mainSettings.iconInterpolationMode = xmlAppSettings.readXmlEntryInt ("IconInterpolationMode"' 0' 1);  	//Load icon size settings  	mainSettings.iconPropertiesSize = xmlAppSettings.readXmlEntryInt ("IconSize"' 0' 1);  	//Load icon background color  	mainSettings.iconBackgroundColor = xmlAppSettings.readXmlEntryInt ("IconBackgroundColor"' 0' 4);  	//Load backup Memory Cards value  	mainSettings.backupMemcards = xmlAppSettings.readXmlEntryInt ("BackupMemoryCards"' 0' 1);  	//Load warning message switch  	mainSettings.warningMessage = xmlAppSettings.readXmlEntryInt ("WarningMessage"' 0' 1);  	//Load window position switch  	mainSettings.restoreWindowPosition = xmlAppSettings.readXmlEntryInt ("RestoreWindowPosition"' 0' 1);  	//Load format type  	mainSettings.formatType = xmlAppSettings.readXmlEntryInt ("HardwareFormatType"' 0' 1);  	//Check if window position should be read  	if (mainSettings.restoreWindowPosition == 1) {  		mainWindowLocation.X = xmlAppSettings.readXmlEntryInt ("WindowX"' -65535' 65535);  		mainWindowLocation.Y = xmlAppSettings.readXmlEntryInt ("WindowY"' -65535' 65535);  		//Apply read position  		this.Location = mainWindowLocation;  	}  	//Apply loaded settings  	applySettings ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: if (File.Exists (appPath + "/Settings.xml")) {  	//Open XML file for reading' file is auto-closed  	xmlAppSettings.openXmlReader (appPath + "/Settings.xml");  	//Load list font  	mainSettings.listFont = xmlAppSettings.readXmlEntry ("ListFont");  	//Load DexDrive COM port  	mainSettings.communicationPort = xmlAppSettings.readXmlEntry ("ComPort");  	//Load Title Encoding  	mainSettings.titleEncoding = xmlAppSettings.readXmlEntryInt ("TitleEncoding"' 0' 1);  	//Load List Grid settings  	mainSettings.showListGrid = xmlAppSettings.readXmlEntryInt ("ShowGrid"' 0' 1);  	//Load glass option switch  	mainSettings.glassStatusBar = xmlAppSettings.readXmlEntryInt ("GlassStatusBar"' 0' 1);  	//Load icon interpolation settings  	mainSettings.iconInterpolationMode = xmlAppSettings.readXmlEntryInt ("IconInterpolationMode"' 0' 1);  	//Load icon size settings  	mainSettings.iconPropertiesSize = xmlAppSettings.readXmlEntryInt ("IconSize"' 0' 1);  	//Load icon background color  	mainSettings.iconBackgroundColor = xmlAppSettings.readXmlEntryInt ("IconBackgroundColor"' 0' 4);  	//Load backup Memory Cards value  	mainSettings.backupMemcards = xmlAppSettings.readXmlEntryInt ("BackupMemoryCards"' 0' 1);  	//Load warning message switch  	mainSettings.warningMessage = xmlAppSettings.readXmlEntryInt ("WarningMessage"' 0' 1);  	//Load window position switch  	mainSettings.restoreWindowPosition = xmlAppSettings.readXmlEntryInt ("RestoreWindowPosition"' 0' 1);  	//Load format type  	mainSettings.formatType = xmlAppSettings.readXmlEntryInt ("HardwareFormatType"' 0' 1);  	//Check if window position should be read  	if (mainSettings.restoreWindowPosition == 1) {  		mainWindowLocation.X = xmlAppSettings.readXmlEntryInt ("WindowX"' -65535' 65535);  		mainWindowLocation.Y = xmlAppSettings.readXmlEntryInt ("WindowY"' -65535' 65535);  		//Apply read position  		this.Location = mainWindowLocation;  	}  	//Apply loaded settings  	applySettings ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: if (File.Exists (appPath + "/Settings.xml")) {  	//Open XML file for reading' file is auto-closed  	xmlAppSettings.openXmlReader (appPath + "/Settings.xml");  	//Load list font  	mainSettings.listFont = xmlAppSettings.readXmlEntry ("ListFont");  	//Load DexDrive COM port  	mainSettings.communicationPort = xmlAppSettings.readXmlEntry ("ComPort");  	//Load Title Encoding  	mainSettings.titleEncoding = xmlAppSettings.readXmlEntryInt ("TitleEncoding"' 0' 1);  	//Load List Grid settings  	mainSettings.showListGrid = xmlAppSettings.readXmlEntryInt ("ShowGrid"' 0' 1);  	//Load glass option switch  	mainSettings.glassStatusBar = xmlAppSettings.readXmlEntryInt ("GlassStatusBar"' 0' 1);  	//Load icon interpolation settings  	mainSettings.iconInterpolationMode = xmlAppSettings.readXmlEntryInt ("IconInterpolationMode"' 0' 1);  	//Load icon size settings  	mainSettings.iconPropertiesSize = xmlAppSettings.readXmlEntryInt ("IconSize"' 0' 1);  	//Load icon background color  	mainSettings.iconBackgroundColor = xmlAppSettings.readXmlEntryInt ("IconBackgroundColor"' 0' 4);  	//Load backup Memory Cards value  	mainSettings.backupMemcards = xmlAppSettings.readXmlEntryInt ("BackupMemoryCards"' 0' 1);  	//Load warning message switch  	mainSettings.warningMessage = xmlAppSettings.readXmlEntryInt ("WarningMessage"' 0' 1);  	//Load window position switch  	mainSettings.restoreWindowPosition = xmlAppSettings.readXmlEntryInt ("RestoreWindowPosition"' 0' 1);  	//Load format type  	mainSettings.formatType = xmlAppSettings.readXmlEntryInt ("HardwareFormatType"' 0' 1);  	//Check if window position should be read  	if (mainSettings.restoreWindowPosition == 1) {  		mainWindowLocation.X = xmlAppSettings.readXmlEntryInt ("WindowX"' -65535' 65535);  		mainWindowLocation.Y = xmlAppSettings.readXmlEntryInt ("WindowY"' -65535' 65535);  		//Apply read position  		this.Location = mainWindowLocation;  	}  	//Apply loaded settings  	applySettings ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: mainSettings.iconBackgroundColor = xmlAppSettings.readXmlEntryInt ("IconBackgroundColor"' 0' 4);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: if (mainSettings.restoreWindowPosition == 1) {  	mainWindowLocation.X = xmlAppSettings.readXmlEntryInt ("WindowX"' -65535' 65535);  	mainWindowLocation.Y = xmlAppSettings.readXmlEntryInt ("WindowY"' -65535' 65535);  	//Apply read position  	this.Location = mainWindowLocation;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: if (mainSettings.restoreWindowPosition == 1) {  	mainWindowLocation.X = xmlAppSettings.readXmlEntryInt ("WindowX"' -65535' 65535);  	mainWindowLocation.Y = xmlAppSettings.readXmlEntryInt ("WindowY"' -65535' 65535);  	//Apply read position  	this.Location = mainWindowLocation;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: if (mainSettings.restoreWindowPosition == 1) {  	mainWindowLocation.X = xmlAppSettings.readXmlEntryInt ("WindowX"' -65535' 65535);  	mainWindowLocation.Y = xmlAppSettings.readXmlEntryInt ("WindowY"' -65535' 65535);  	//Apply read position  	this.Location = mainWindowLocation;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: if (mainSettings.restoreWindowPosition == 1) {  	mainWindowLocation.X = xmlAppSettings.readXmlEntryInt ("WindowX"' -65535' 65535);  	mainWindowLocation.Y = xmlAppSettings.readXmlEntryInt ("WindowY"' -65535' 65535);  	//Apply read position  	this.Location = mainWindowLocation;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: mainWindowLocation.X = xmlAppSettings.readXmlEntryInt ("WindowX"' -65535' 65535);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: mainWindowLocation.X = xmlAppSettings.readXmlEntryInt ("WindowX"' -65535' 65535);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: mainWindowLocation.Y = xmlAppSettings.readXmlEntryInt ("WindowY"' -65535' 65535);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,loadProgramSettings,The following statement contains a magic number: mainWindowLocation.Y = xmlAppSettings.readXmlEntryInt ("WindowY"' -65535' 65535);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,backupMemcard,The following statement contains a magic number: if (mainSettings.backupMemcards == 1 && fileName != null) {  	FileInfo fInfo = new FileInfo (fileName);  	//Backup only if file is less then 512KB  	if (fInfo.Length < 524288) {  		//Copy the file  		try {  			//Check if the backup directory exists and create it if it's missing  			if (!Directory.Exists (appPath + "/Backup"))  				Directory.CreateDirectory (appPath + "/Backup");  			//Copy the file (make a backup of it)  			File.Copy (fileName' appPath + "/Backup/" + fInfo.Name);  		}  		catch (Exception) {  		}  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,backupMemcard,The following statement contains a magic number: if (fInfo.Length < 524288) {  	//Copy the file  	try {  		//Check if the backup directory exists and create it if it's missing  		if (!Directory.Exists (appPath + "/Backup"))  			Directory.CreateDirectory (appPath + "/Backup");  		//Copy the file (make a backup of it)  		File.Copy (fileName' appPath + "/Backup/" + fInfo.Name);  	}  	catch (Exception) {  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,filterNullCard,The following statement contains a magic number: if (PScard.Count > 0) {  	if (PScard.Count == 2 && PScard [0].cardLocation == null && PScard [0].changedFlag == false) {  		closeCard (0);  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,filterNullCard,The following statement contains a magic number: if (PScard.Count == 2 && PScard [0].cardLocation == null && PScard [0].changedFlag == false) {  	closeCard (0);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	byte memoryCardType = 0;  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Save Memory Card";  	saveFileDlg.Filter = "ePSXe/PSEmu Pro Memory Card (*.mcr)|*.mcr|DexDrive Memory Card (*.gme)|*.gme|pSX/AdriPSX Memory Card (*.bin)|*.bin|Bleem! Memory Card (*.mcd)|*.mcd|VGS Memory Card (*.mem' *.vgs)|*.mem; *.vgs|PSXGame Edit Memory Card (*.mc)|*.mc|DataDeck Memory Card (*.ddf)|*.ddf|WinPSM Memory Card (*.ps)|*.ps|Smart Link Memory Card (*.psm)|*.psm|MCExplorer (*.mci)|*.mci|PS3 virtual Memory Card (*.VM1)|*.VM1";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Raw Memory Card  			memoryCardType = 1;  			break;  		case 2:  			//GME Memory Card  			memoryCardType = 2;  			break;  		case 5:  			//VGS Memory Card  			memoryCardType = 3;  			break;  		}  		saveMemoryCard (listIndex' saveFileDlg.FileName' memoryCardType);  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	byte memoryCardType = 0;  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Save Memory Card";  	saveFileDlg.Filter = "ePSXe/PSEmu Pro Memory Card (*.mcr)|*.mcr|DexDrive Memory Card (*.gme)|*.gme|pSX/AdriPSX Memory Card (*.bin)|*.bin|Bleem! Memory Card (*.mcd)|*.mcd|VGS Memory Card (*.mem' *.vgs)|*.mem; *.vgs|PSXGame Edit Memory Card (*.mc)|*.mc|DataDeck Memory Card (*.ddf)|*.ddf|WinPSM Memory Card (*.ps)|*.ps|Smart Link Memory Card (*.psm)|*.psm|MCExplorer (*.mci)|*.mci|PS3 virtual Memory Card (*.VM1)|*.VM1";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Raw Memory Card  			memoryCardType = 1;  			break;  		case 2:  			//GME Memory Card  			memoryCardType = 2;  			break;  		case 5:  			//VGS Memory Card  			memoryCardType = 3;  			break;  		}  		saveMemoryCard (listIndex' saveFileDlg.FileName' memoryCardType);  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	byte memoryCardType = 0;  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Save Memory Card";  	saveFileDlg.Filter = "ePSXe/PSEmu Pro Memory Card (*.mcr)|*.mcr|DexDrive Memory Card (*.gme)|*.gme|pSX/AdriPSX Memory Card (*.bin)|*.bin|Bleem! Memory Card (*.mcd)|*.mcd|VGS Memory Card (*.mem' *.vgs)|*.mem; *.vgs|PSXGame Edit Memory Card (*.mc)|*.mc|DataDeck Memory Card (*.ddf)|*.ddf|WinPSM Memory Card (*.ps)|*.ps|Smart Link Memory Card (*.psm)|*.psm|MCExplorer (*.mci)|*.mci|PS3 virtual Memory Card (*.VM1)|*.VM1";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Raw Memory Card  			memoryCardType = 1;  			break;  		case 2:  			//GME Memory Card  			memoryCardType = 2;  			break;  		case 5:  			//VGS Memory Card  			memoryCardType = 3;  			break;  		}  		saveMemoryCard (listIndex' saveFileDlg.FileName' memoryCardType);  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	byte memoryCardType = 0;  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Save Memory Card";  	saveFileDlg.Filter = "ePSXe/PSEmu Pro Memory Card (*.mcr)|*.mcr|DexDrive Memory Card (*.gme)|*.gme|pSX/AdriPSX Memory Card (*.bin)|*.bin|Bleem! Memory Card (*.mcd)|*.mcd|VGS Memory Card (*.mem' *.vgs)|*.mem; *.vgs|PSXGame Edit Memory Card (*.mc)|*.mc|DataDeck Memory Card (*.ddf)|*.ddf|WinPSM Memory Card (*.ps)|*.ps|Smart Link Memory Card (*.psm)|*.psm|MCExplorer (*.mci)|*.mci|PS3 virtual Memory Card (*.VM1)|*.VM1";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Raw Memory Card  			memoryCardType = 1;  			break;  		case 2:  			//GME Memory Card  			memoryCardType = 2;  			break;  		case 5:  			//VGS Memory Card  			memoryCardType = 3;  			break;  		}  		saveMemoryCard (listIndex' saveFileDlg.FileName' memoryCardType);  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: if (saveFileDlg.ShowDialog () == DialogResult.OK) {  	//Get save type  	switch (saveFileDlg.FilterIndex) {  	default:  		//Raw Memory Card  		memoryCardType = 1;  		break;  	case 2:  		//GME Memory Card  		memoryCardType = 2;  		break;  	case 5:  		//VGS Memory Card  		memoryCardType = 3;  		break;  	}  	saveMemoryCard (listIndex' saveFileDlg.FileName' memoryCardType);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: if (saveFileDlg.ShowDialog () == DialogResult.OK) {  	//Get save type  	switch (saveFileDlg.FilterIndex) {  	default:  		//Raw Memory Card  		memoryCardType = 1;  		break;  	case 2:  		//GME Memory Card  		memoryCardType = 2;  		break;  	case 5:  		//VGS Memory Card  		memoryCardType = 3;  		break;  	}  	saveMemoryCard (listIndex' saveFileDlg.FileName' memoryCardType);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: if (saveFileDlg.ShowDialog () == DialogResult.OK) {  	//Get save type  	switch (saveFileDlg.FilterIndex) {  	default:  		//Raw Memory Card  		memoryCardType = 1;  		break;  	case 2:  		//GME Memory Card  		memoryCardType = 2;  		break;  	case 5:  		//VGS Memory Card  		memoryCardType = 3;  		break;  	}  	saveMemoryCard (listIndex' saveFileDlg.FileName' memoryCardType);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: if (saveFileDlg.ShowDialog () == DialogResult.OK) {  	//Get save type  	switch (saveFileDlg.FilterIndex) {  	default:  		//Raw Memory Card  		memoryCardType = 1;  		break;  	case 2:  		//GME Memory Card  		memoryCardType = 2;  		break;  	case 5:  		//VGS Memory Card  		memoryCardType = 3;  		break;  	}  	saveMemoryCard (listIndex' saveFileDlg.FileName' memoryCardType);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: switch (saveFileDlg.FilterIndex) {  default:  	//Raw Memory Card  	memoryCardType = 1;  	break;  case 2:  	//GME Memory Card  	memoryCardType = 2;  	break;  case 5:  	//VGS Memory Card  	memoryCardType = 3;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: switch (saveFileDlg.FilterIndex) {  default:  	//Raw Memory Card  	memoryCardType = 1;  	break;  case 2:  	//GME Memory Card  	memoryCardType = 2;  	break;  case 5:  	//VGS Memory Card  	memoryCardType = 3;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: switch (saveFileDlg.FilterIndex) {  default:  	//Raw Memory Card  	memoryCardType = 1;  	break;  case 2:  	//GME Memory Card  	memoryCardType = 2;  	break;  case 5:  	//VGS Memory Card  	memoryCardType = 3;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: switch (saveFileDlg.FilterIndex) {  default:  	//Raw Memory Card  	memoryCardType = 1;  	break;  case 2:  	//GME Memory Card  	memoryCardType = 2;  	break;  case 5:  	//VGS Memory Card  	memoryCardType = 3;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: memoryCardType = 2;  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardDialog,The following statement contains a magic number: memoryCardType = 3;  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardFunction,The following statement contains a magic number: if (PScard.Count > 0) {  	//Check if file can be saved or save dialog must be shown (VMP is read only)  	if (PScard [listIndex].cardLocation == null || PScard [listIndex].cardType == 4)  		saveCardDialog (listIndex);  	else  		saveMemoryCard (listIndex' PScard [listIndex].cardLocation' PScard [listIndex].cardType);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,saveCardFunction,The following statement contains a magic number: if (PScard [listIndex].cardLocation == null || PScard [listIndex].cardType == 4)  	saveCardDialog (listIndex);  else  	saveMemoryCard (listIndex' PScard [listIndex].cardLocation' PScard [listIndex].cardType);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editSaveComments,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	string saveTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	string saveComment = PScard [listIndex].saveComments [slotNumber];  	//Check if comments are allowed to be edited  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		//Not allowed  		break;  	case 1:  	case 4:  		commentsWindow commentsDlg = new commentsWindow ();  		//Load values to dialog  		commentsDlg.initializeDialog (saveTitle' saveComment);  		commentsDlg.ShowDialog (this);  		//Update values if OK was pressed  		if (commentsDlg.okPressed) {  			//Insert edited comments back in the card  			PScard [listIndex].saveComments [slotNumber] = commentsDlg.saveComment;  		}  		commentsDlg.Dispose ();  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editSaveComments,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	//Not allowed  	break;  case 1:  case 4:  	commentsWindow commentsDlg = new commentsWindow ();  	//Load values to dialog  	commentsDlg.initializeDialog (saveTitle' saveComment);  	commentsDlg.ShowDialog (this);  	//Update values if OK was pressed  	if (commentsDlg.okPressed) {  		//Insert edited comments back in the card  		PScard [listIndex].saveComments [slotNumber] = commentsDlg.saveComment;  	}  	commentsDlg.Dispose ();  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,showInformation,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	ushort saveRegion = PScard [listIndex].saveRegion [slotNumber];  	int saveSize = PScard [listIndex].saveSize [slotNumber];  	int iconFrames = PScard [listIndex].iconFrames [slotNumber];  	string saveProdCode = PScard [listIndex].saveProdCode [slotNumber];  	string saveIdentifier = PScard [listIndex].saveIdentifier [slotNumber];  	string saveTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	Bitmap[] saveIcons = new Bitmap[3];  	//Get all 3 bitmaps for selected save  	for (int i = 0; i < 3; i++)  		saveIcons [i] = PScard [listIndex].iconData [slotNumber' i];  	//Check if slot is "legal"  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		//Not allowed  		break;  	case 1:  	case 4:  		informationWindow informationDlg = new informationWindow ();  		//Load values to dialog  		informationDlg.initializeDialog (saveTitle' saveProdCode' saveIdentifier' saveRegion' saveSize' iconFrames' mainSettings.iconInterpolationMode' mainSettings.iconPropertiesSize' saveIcons' PScard [listIndex].findSaveLinks (slotNumber)' mainSettings.iconBackgroundColor);  		informationDlg.ShowDialog (this);  		informationDlg.Dispose ();  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,showInformation,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	ushort saveRegion = PScard [listIndex].saveRegion [slotNumber];  	int saveSize = PScard [listIndex].saveSize [slotNumber];  	int iconFrames = PScard [listIndex].iconFrames [slotNumber];  	string saveProdCode = PScard [listIndex].saveProdCode [slotNumber];  	string saveIdentifier = PScard [listIndex].saveIdentifier [slotNumber];  	string saveTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	Bitmap[] saveIcons = new Bitmap[3];  	//Get all 3 bitmaps for selected save  	for (int i = 0; i < 3; i++)  		saveIcons [i] = PScard [listIndex].iconData [slotNumber' i];  	//Check if slot is "legal"  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		//Not allowed  		break;  	case 1:  	case 4:  		informationWindow informationDlg = new informationWindow ();  		//Load values to dialog  		informationDlg.initializeDialog (saveTitle' saveProdCode' saveIdentifier' saveRegion' saveSize' iconFrames' mainSettings.iconInterpolationMode' mainSettings.iconPropertiesSize' saveIcons' PScard [listIndex].findSaveLinks (slotNumber)' mainSettings.iconBackgroundColor);  		informationDlg.ShowDialog (this);  		informationDlg.Dispose ();  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,showInformation,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	ushort saveRegion = PScard [listIndex].saveRegion [slotNumber];  	int saveSize = PScard [listIndex].saveSize [slotNumber];  	int iconFrames = PScard [listIndex].iconFrames [slotNumber];  	string saveProdCode = PScard [listIndex].saveProdCode [slotNumber];  	string saveIdentifier = PScard [listIndex].saveIdentifier [slotNumber];  	string saveTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	Bitmap[] saveIcons = new Bitmap[3];  	//Get all 3 bitmaps for selected save  	for (int i = 0; i < 3; i++)  		saveIcons [i] = PScard [listIndex].iconData [slotNumber' i];  	//Check if slot is "legal"  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		//Not allowed  		break;  	case 1:  	case 4:  		informationWindow informationDlg = new informationWindow ();  		//Load values to dialog  		informationDlg.initializeDialog (saveTitle' saveProdCode' saveIdentifier' saveRegion' saveSize' iconFrames' mainSettings.iconInterpolationMode' mainSettings.iconPropertiesSize' saveIcons' PScard [listIndex].findSaveLinks (slotNumber)' mainSettings.iconBackgroundColor);  		informationDlg.ShowDialog (this);  		informationDlg.Dispose ();  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,showInformation,The following statement contains a magic number: for (int i = 0; i < 3; i++)  	saveIcons [i] = PScard [listIndex].iconData [slotNumber' i];  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,showInformation,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	//Not allowed  	break;  case 1:  case 4:  	informationWindow informationDlg = new informationWindow ();  	//Load values to dialog  	informationDlg.initializeDialog (saveTitle' saveProdCode' saveIdentifier' saveRegion' saveSize' iconFrames' mainSettings.iconInterpolationMode' mainSettings.iconPropertiesSize' saveIcons' PScard [listIndex].findSaveLinks (slotNumber)' mainSettings.iconBackgroundColor);  	informationDlg.ShowDialog (this);  	informationDlg.Dispose ();  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,restoreSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 4:  		//Deleted initial  		PScard [listIndex].toggleDeleteSave (slotNumber);  		refreshListView (listIndex' slotNumber);  		break;  	case 1:  		//Initial save  		new messageWindow ().ShowMessage (this' appName' "The selected save is not deleted."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,restoreSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 4:  		//Deleted initial  		PScard [listIndex].toggleDeleteSave (slotNumber);  		refreshListView (listIndex' slotNumber);  		break;  	case 1:  		//Initial save  		new messageWindow ().ShowMessage (this' appName' "The selected save is not deleted."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,restoreSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 4:  		//Deleted initial  		PScard [listIndex].toggleDeleteSave (slotNumber);  		refreshListView (listIndex' slotNumber);  		break;  	case 1:  		//Initial save  		new messageWindow ().ShowMessage (this' appName' "The selected save is not deleted."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,restoreSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 4:  		//Deleted initial  		PScard [listIndex].toggleDeleteSave (slotNumber);  		refreshListView (listIndex' slotNumber);  		break;  	case 1:  		//Initial save  		new messageWindow ().ShowMessage (this' appName' "The selected save is not deleted."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,restoreSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 4:  		//Deleted initial  		PScard [listIndex].toggleDeleteSave (slotNumber);  		refreshListView (listIndex' slotNumber);  		break;  	case 1:  		//Initial save  		new messageWindow ().ShowMessage (this' appName' "The selected save is not deleted."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,restoreSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 4:  	//Deleted initial  	PScard [listIndex].toggleDeleteSave (slotNumber);  	refreshListView (listIndex' slotNumber);  	break;  case 1:  	//Initial save  	new messageWindow ().ShowMessage (this' appName' "The selected save is not deleted."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,restoreSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 4:  	//Deleted initial  	PScard [listIndex].toggleDeleteSave (slotNumber);  	refreshListView (listIndex' slotNumber);  	break;  case 1:  	//Initial save  	new messageWindow ().ShowMessage (this' appName' "The selected save is not deleted."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,restoreSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 4:  	//Deleted initial  	PScard [listIndex].toggleDeleteSave (slotNumber);  	refreshListView (listIndex' slotNumber);  	break;  case 1:  	//Initial save  	new messageWindow ().ShowMessage (this' appName' "The selected save is not deleted."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,restoreSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 4:  	//Deleted initial  	PScard [listIndex].toggleDeleteSave (slotNumber);  	refreshListView (listIndex' slotNumber);  	break;  case 1:  	//Initial save  	new messageWindow ().ShowMessage (this' appName' "The selected save is not deleted."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,restoreSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 4:  	//Deleted initial  	PScard [listIndex].toggleDeleteSave (slotNumber);  	refreshListView (listIndex' slotNumber);  	break;  case 1:  	//Initial save  	new messageWindow ().ShowMessage (this' appName' "The selected save is not deleted."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,deleteSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		PScard [listIndex].toggleDeleteSave (slotNumber);  		refreshListView (listIndex' slotNumber);  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "The selected save is already deleted."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,deleteSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		PScard [listIndex].toggleDeleteSave (slotNumber);  		refreshListView (listIndex' slotNumber);  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "The selected save is already deleted."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,deleteSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		PScard [listIndex].toggleDeleteSave (slotNumber);  		refreshListView (listIndex' slotNumber);  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "The selected save is already deleted."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,deleteSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		PScard [listIndex].toggleDeleteSave (slotNumber);  		refreshListView (listIndex' slotNumber);  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "The selected save is already deleted."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,deleteSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		PScard [listIndex].toggleDeleteSave (slotNumber);  		refreshListView (listIndex' slotNumber);  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "The selected save is already deleted."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,deleteSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	PScard [listIndex].toggleDeleteSave (slotNumber);  	refreshListView (listIndex' slotNumber);  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "The selected save is already deleted."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,deleteSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	PScard [listIndex].toggleDeleteSave (slotNumber);  	refreshListView (listIndex' slotNumber);  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "The selected save is already deleted."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,deleteSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	PScard [listIndex].toggleDeleteSave (slotNumber);  	refreshListView (listIndex' slotNumber);  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "The selected save is already deleted."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,deleteSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	PScard [listIndex].toggleDeleteSave (slotNumber);  	refreshListView (listIndex' slotNumber);  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "The selected save is already deleted."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,deleteSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	PScard [listIndex].toggleDeleteSave (slotNumber);  	refreshListView (listIndex' slotNumber);  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "The selected save is already deleted."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		//Slot is either initial' deleted initial or corrupted so it can be safetly formatted  		if (new messageWindow ().ShowMessage (this' appName' "Formatted slots cannot be restored.\nDo you want to proceed with this operation?"' "No"' "Yes"' true) == "Yes") {  			PScard [listIndex].formatSave (slotNumber);  			refreshListView (listIndex' slotNumber);  		}  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		//Slot is either initial' deleted initial or corrupted so it can be safetly formatted  		if (new messageWindow ().ShowMessage (this' appName' "Formatted slots cannot be restored.\nDo you want to proceed with this operation?"' "No"' "Yes"' true) == "Yes") {  			PScard [listIndex].formatSave (slotNumber);  			refreshListView (listIndex' slotNumber);  		}  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		//Slot is either initial' deleted initial or corrupted so it can be safetly formatted  		if (new messageWindow ().ShowMessage (this' appName' "Formatted slots cannot be restored.\nDo you want to proceed with this operation?"' "No"' "Yes"' true) == "Yes") {  			PScard [listIndex].formatSave (slotNumber);  			refreshListView (listIndex' slotNumber);  		}  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatSave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		//Slot is either initial' deleted initial or corrupted so it can be safetly formatted  		if (new messageWindow ().ShowMessage (this' appName' "Formatted slots cannot be restored.\nDo you want to proceed with this operation?"' "No"' "Yes"' true) == "Yes") {  			PScard [listIndex].formatSave (slotNumber);  			refreshListView (listIndex' slotNumber);  		}  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	//Slot is either initial' deleted initial or corrupted so it can be safetly formatted  	if (new messageWindow ().ShowMessage (this' appName' "Formatted slots cannot be restored.\nDo you want to proceed with this operation?"' "No"' "Yes"' true) == "Yes") {  		PScard [listIndex].formatSave (slotNumber);  		refreshListView (listIndex' slotNumber);  	}  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	//Slot is either initial' deleted initial or corrupted so it can be safetly formatted  	if (new messageWindow ().ShowMessage (this' appName' "Formatted slots cannot be restored.\nDo you want to proceed with this operation?"' "No"' "Yes"' true) == "Yes") {  		PScard [listIndex].formatSave (slotNumber);  		refreshListView (listIndex' slotNumber);  	}  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	//Slot is either initial' deleted initial or corrupted so it can be safetly formatted  	if (new messageWindow ().ShowMessage (this' appName' "Formatted slots cannot be restored.\nDo you want to proceed with this operation?"' "No"' "Yes"' true) == "Yes") {  		PScard [listIndex].formatSave (slotNumber);  		refreshListView (listIndex' slotNumber);  	}  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatSave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	//Slot is either initial' deleted initial or corrupted so it can be safetly formatted  	if (new messageWindow ().ShowMessage (this' appName' "Formatted slots cannot be restored.\nDo you want to proceed with this operation?"' "No"' "Yes"' true) == "Yes") {  		PScard [listIndex].formatSave (slotNumber);  		refreshListView (listIndex' slotNumber);  	}  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,copySave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	string saveName = PScard [listIndex].saveName [slotNumber' 0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		tempBuffer = PScard [listIndex].getSaveBytes (slotNumber);  		tempBufferName = PScard [listIndex].saveName [slotNumber' 0];  		//Show temp buffer toolbar info  		tBufToolButton.Enabled = true;  		tBufToolButton.Image = PScard [listIndex].iconData [slotNumber' 0];  		tBufToolButton.Text = saveName;  		//Refresh the current list  		refreshListView (listIndex' slotNumber);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,copySave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	string saveName = PScard [listIndex].saveName [slotNumber' 0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		tempBuffer = PScard [listIndex].getSaveBytes (slotNumber);  		tempBufferName = PScard [listIndex].saveName [slotNumber' 0];  		//Show temp buffer toolbar info  		tBufToolButton.Enabled = true;  		tBufToolButton.Image = PScard [listIndex].iconData [slotNumber' 0];  		tBufToolButton.Text = saveName;  		//Refresh the current list  		refreshListView (listIndex' slotNumber);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,copySave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	string saveName = PScard [listIndex].saveName [slotNumber' 0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		tempBuffer = PScard [listIndex].getSaveBytes (slotNumber);  		tempBufferName = PScard [listIndex].saveName [slotNumber' 0];  		//Show temp buffer toolbar info  		tBufToolButton.Enabled = true;  		tBufToolButton.Image = PScard [listIndex].iconData [slotNumber' 0];  		tBufToolButton.Text = saveName;  		//Refresh the current list  		refreshListView (listIndex' slotNumber);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,copySave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	string saveName = PScard [listIndex].saveName [slotNumber' 0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		tempBuffer = PScard [listIndex].getSaveBytes (slotNumber);  		tempBufferName = PScard [listIndex].saveName [slotNumber' 0];  		//Show temp buffer toolbar info  		tBufToolButton.Enabled = true;  		tBufToolButton.Image = PScard [listIndex].iconData [slotNumber' 0];  		tBufToolButton.Text = saveName;  		//Refresh the current list  		refreshListView (listIndex' slotNumber);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,copySave,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	string saveName = PScard [listIndex].saveName [slotNumber' 0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		tempBuffer = PScard [listIndex].getSaveBytes (slotNumber);  		tempBufferName = PScard [listIndex].saveName [slotNumber' 0];  		//Show temp buffer toolbar info  		tBufToolButton.Enabled = true;  		tBufToolButton.Image = PScard [listIndex].iconData [slotNumber' 0];  		tBufToolButton.Text = saveName;  		//Refresh the current list  		refreshListView (listIndex' slotNumber);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,copySave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	tempBuffer = PScard [listIndex].getSaveBytes (slotNumber);  	tempBufferName = PScard [listIndex].saveName [slotNumber' 0];  	//Show temp buffer toolbar info  	tBufToolButton.Enabled = true;  	tBufToolButton.Image = PScard [listIndex].iconData [slotNumber' 0];  	tBufToolButton.Text = saveName;  	//Refresh the current list  	refreshListView (listIndex' slotNumber);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,copySave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	tempBuffer = PScard [listIndex].getSaveBytes (slotNumber);  	tempBufferName = PScard [listIndex].saveName [slotNumber' 0];  	//Show temp buffer toolbar info  	tBufToolButton.Enabled = true;  	tBufToolButton.Image = PScard [listIndex].iconData [slotNumber' 0];  	tBufToolButton.Text = saveName;  	//Refresh the current list  	refreshListView (listIndex' slotNumber);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,copySave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	tempBuffer = PScard [listIndex].getSaveBytes (slotNumber);  	tempBufferName = PScard [listIndex].saveName [slotNumber' 0];  	//Show temp buffer toolbar info  	tBufToolButton.Enabled = true;  	tBufToolButton.Image = PScard [listIndex].iconData [slotNumber' 0];  	tBufToolButton.Text = saveName;  	//Refresh the current list  	refreshListView (listIndex' slotNumber);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,copySave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	tempBuffer = PScard [listIndex].getSaveBytes (slotNumber);  	tempBufferName = PScard [listIndex].saveName [slotNumber' 0];  	//Show temp buffer toolbar info  	tBufToolButton.Enabled = true;  	tBufToolButton.Image = PScard [listIndex].iconData [slotNumber' 0];  	tBufToolButton.Text = saveName;  	//Refresh the current list  	refreshListView (listIndex' slotNumber);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,copySave,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	tempBuffer = PScard [listIndex].getSaveBytes (slotNumber);  	tempBufferName = PScard [listIndex].saveName [slotNumber' 0];  	//Show temp buffer toolbar info  	tBufToolButton.Enabled = true;  	tBufToolButton.Image = PScard [listIndex].iconData [slotNumber' 0];  	tBufToolButton.Text = saveName;  	//Refresh the current list  	refreshListView (listIndex' slotNumber);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		byte singleSaveType = 0;  		//Set output filename  		string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  		//Filter illegal characters from the name  		foreach (char illegalChar in Path.GetInvalidPathChars ()) {  			outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  		}  		SaveFileDialog saveFileDlg = new SaveFileDialog ();  		saveFileDlg.Title = "Export save";  		saveFileDlg.FileName = outputFilename;  		saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  		//If user selected a card save to it  		if (saveFileDlg.ShowDialog () == DialogResult.OK) {  			//Get save type  			switch (saveFileDlg.FilterIndex) {  			default:  				//Action Replay  				singleSaveType = 1;  				break;  			case 1:  			//MCS single save  			case 3:  				//PS1 (Memory Juggler)  				singleSaveType = 2;  				break;  			case 6:  				//RAW single save  				singleSaveType = 3;  				//Omit the extension if the user left it  				saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  				break;  			}  			PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  		}  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		byte singleSaveType = 0;  		//Set output filename  		string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  		//Filter illegal characters from the name  		foreach (char illegalChar in Path.GetInvalidPathChars ()) {  			outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  		}  		SaveFileDialog saveFileDlg = new SaveFileDialog ();  		saveFileDlg.Title = "Export save";  		saveFileDlg.FileName = outputFilename;  		saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  		//If user selected a card save to it  		if (saveFileDlg.ShowDialog () == DialogResult.OK) {  			//Get save type  			switch (saveFileDlg.FilterIndex) {  			default:  				//Action Replay  				singleSaveType = 1;  				break;  			case 1:  			//MCS single save  			case 3:  				//PS1 (Memory Juggler)  				singleSaveType = 2;  				break;  			case 6:  				//RAW single save  				singleSaveType = 3;  				//Omit the extension if the user left it  				saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  				break;  			}  			PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  		}  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		byte singleSaveType = 0;  		//Set output filename  		string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  		//Filter illegal characters from the name  		foreach (char illegalChar in Path.GetInvalidPathChars ()) {  			outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  		}  		SaveFileDialog saveFileDlg = new SaveFileDialog ();  		saveFileDlg.Title = "Export save";  		saveFileDlg.FileName = outputFilename;  		saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  		//If user selected a card save to it  		if (saveFileDlg.ShowDialog () == DialogResult.OK) {  			//Get save type  			switch (saveFileDlg.FilterIndex) {  			default:  				//Action Replay  				singleSaveType = 1;  				break;  			case 1:  			//MCS single save  			case 3:  				//PS1 (Memory Juggler)  				singleSaveType = 2;  				break;  			case 6:  				//RAW single save  				singleSaveType = 3;  				//Omit the extension if the user left it  				saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  				break;  			}  			PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  		}  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		byte singleSaveType = 0;  		//Set output filename  		string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  		//Filter illegal characters from the name  		foreach (char illegalChar in Path.GetInvalidPathChars ()) {  			outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  		}  		SaveFileDialog saveFileDlg = new SaveFileDialog ();  		saveFileDlg.Title = "Export save";  		saveFileDlg.FileName = outputFilename;  		saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  		//If user selected a card save to it  		if (saveFileDlg.ShowDialog () == DialogResult.OK) {  			//Get save type  			switch (saveFileDlg.FilterIndex) {  			default:  				//Action Replay  				singleSaveType = 1;  				break;  			case 1:  			//MCS single save  			case 3:  				//PS1 (Memory Juggler)  				singleSaveType = 2;  				break;  			case 6:  				//RAW single save  				singleSaveType = 3;  				//Omit the extension if the user left it  				saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  				break;  			}  			PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  		}  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		byte singleSaveType = 0;  		//Set output filename  		string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  		//Filter illegal characters from the name  		foreach (char illegalChar in Path.GetInvalidPathChars ()) {  			outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  		}  		SaveFileDialog saveFileDlg = new SaveFileDialog ();  		saveFileDlg.Title = "Export save";  		saveFileDlg.FileName = outputFilename;  		saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  		//If user selected a card save to it  		if (saveFileDlg.ShowDialog () == DialogResult.OK) {  			//Get save type  			switch (saveFileDlg.FilterIndex) {  			default:  				//Action Replay  				singleSaveType = 1;  				break;  			case 1:  			//MCS single save  			case 3:  				//PS1 (Memory Juggler)  				singleSaveType = 2;  				break;  			case 6:  				//RAW single save  				singleSaveType = 3;  				//Omit the extension if the user left it  				saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  				break;  			}  			PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  		}  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		byte singleSaveType = 0;  		//Set output filename  		string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  		//Filter illegal characters from the name  		foreach (char illegalChar in Path.GetInvalidPathChars ()) {  			outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  		}  		SaveFileDialog saveFileDlg = new SaveFileDialog ();  		saveFileDlg.Title = "Export save";  		saveFileDlg.FileName = outputFilename;  		saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  		//If user selected a card save to it  		if (saveFileDlg.ShowDialog () == DialogResult.OK) {  			//Get save type  			switch (saveFileDlg.FilterIndex) {  			default:  				//Action Replay  				singleSaveType = 1;  				break;  			case 1:  			//MCS single save  			case 3:  				//PS1 (Memory Juggler)  				singleSaveType = 2;  				break;  			case 6:  				//RAW single save  				singleSaveType = 3;  				//Omit the extension if the user left it  				saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  				break;  			}  			PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  		}  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		byte singleSaveType = 0;  		//Set output filename  		string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  		//Filter illegal characters from the name  		foreach (char illegalChar in Path.GetInvalidPathChars ()) {  			outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  		}  		SaveFileDialog saveFileDlg = new SaveFileDialog ();  		saveFileDlg.Title = "Export save";  		saveFileDlg.FileName = outputFilename;  		saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  		//If user selected a card save to it  		if (saveFileDlg.ShowDialog () == DialogResult.OK) {  			//Get save type  			switch (saveFileDlg.FilterIndex) {  			default:  				//Action Replay  				singleSaveType = 1;  				break;  			case 1:  			//MCS single save  			case 3:  				//PS1 (Memory Juggler)  				singleSaveType = 2;  				break;  			case 6:  				//RAW single save  				singleSaveType = 3;  				//Omit the extension if the user left it  				saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  				break;  			}  			PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  		}  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		byte singleSaveType = 0;  		//Set output filename  		string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  		//Filter illegal characters from the name  		foreach (char illegalChar in Path.GetInvalidPathChars ()) {  			outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  		}  		SaveFileDialog saveFileDlg = new SaveFileDialog ();  		saveFileDlg.Title = "Export save";  		saveFileDlg.FileName = outputFilename;  		saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  		//If user selected a card save to it  		if (saveFileDlg.ShowDialog () == DialogResult.OK) {  			//Get save type  			switch (saveFileDlg.FilterIndex) {  			default:  				//Action Replay  				singleSaveType = 1;  				break;  			case 1:  			//MCS single save  			case 3:  				//PS1 (Memory Juggler)  				singleSaveType = 2;  				break;  			case 6:  				//RAW single save  				singleSaveType = 3;  				//Omit the extension if the user left it  				saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  				break;  			}  			PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  		}  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  		//Initial save  		byte singleSaveType = 0;  		//Set output filename  		string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  		//Filter illegal characters from the name  		foreach (char illegalChar in Path.GetInvalidPathChars ()) {  			outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  		}  		SaveFileDialog saveFileDlg = new SaveFileDialog ();  		saveFileDlg.Title = "Export save";  		saveFileDlg.FileName = outputFilename;  		saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  		//If user selected a card save to it  		if (saveFileDlg.ShowDialog () == DialogResult.OK) {  			//Get save type  			switch (saveFileDlg.FilterIndex) {  			default:  				//Action Replay  				singleSaveType = 1;  				break;  			case 1:  			//MCS single save  			case 3:  				//PS1 (Memory Juggler)  				singleSaveType = 2;  				break;  			case 6:  				//RAW single save  				singleSaveType = 3;  				//Omit the extension if the user left it  				saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  				break;  			}  			PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  		}  		break;  	case 4:  		//Deleted initial  		new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	byte singleSaveType = 0;  	//Set output filename  	string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  	//Filter illegal characters from the name  	foreach (char illegalChar in Path.GetInvalidPathChars ()) {  		outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  	}  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Export save";  	saveFileDlg.FileName = outputFilename;  	saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Action Replay  			singleSaveType = 1;  			break;  		case 1:  		//MCS single save  		case 3:  			//PS1 (Memory Juggler)  			singleSaveType = 2;  			break;  		case 6:  			//RAW single save  			singleSaveType = 3;  			//Omit the extension if the user left it  			saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  			break;  		}  		PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  	}  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	byte singleSaveType = 0;  	//Set output filename  	string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  	//Filter illegal characters from the name  	foreach (char illegalChar in Path.GetInvalidPathChars ()) {  		outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  	}  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Export save";  	saveFileDlg.FileName = outputFilename;  	saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Action Replay  			singleSaveType = 1;  			break;  		case 1:  		//MCS single save  		case 3:  			//PS1 (Memory Juggler)  			singleSaveType = 2;  			break;  		case 6:  			//RAW single save  			singleSaveType = 3;  			//Omit the extension if the user left it  			saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  			break;  		}  		PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  	}  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	byte singleSaveType = 0;  	//Set output filename  	string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  	//Filter illegal characters from the name  	foreach (char illegalChar in Path.GetInvalidPathChars ()) {  		outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  	}  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Export save";  	saveFileDlg.FileName = outputFilename;  	saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Action Replay  			singleSaveType = 1;  			break;  		case 1:  		//MCS single save  		case 3:  			//PS1 (Memory Juggler)  			singleSaveType = 2;  			break;  		case 6:  			//RAW single save  			singleSaveType = 3;  			//Omit the extension if the user left it  			saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  			break;  		}  		PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  	}  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	byte singleSaveType = 0;  	//Set output filename  	string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  	//Filter illegal characters from the name  	foreach (char illegalChar in Path.GetInvalidPathChars ()) {  		outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  	}  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Export save";  	saveFileDlg.FileName = outputFilename;  	saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Action Replay  			singleSaveType = 1;  			break;  		case 1:  		//MCS single save  		case 3:  			//PS1 (Memory Juggler)  			singleSaveType = 2;  			break;  		case 6:  			//RAW single save  			singleSaveType = 3;  			//Omit the extension if the user left it  			saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  			break;  		}  		PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  	}  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	byte singleSaveType = 0;  	//Set output filename  	string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  	//Filter illegal characters from the name  	foreach (char illegalChar in Path.GetInvalidPathChars ()) {  		outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  	}  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Export save";  	saveFileDlg.FileName = outputFilename;  	saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Action Replay  			singleSaveType = 1;  			break;  		case 1:  		//MCS single save  		case 3:  			//PS1 (Memory Juggler)  			singleSaveType = 2;  			break;  		case 6:  			//RAW single save  			singleSaveType = 3;  			//Omit the extension if the user left it  			saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  			break;  		}  		PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  	}  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	byte singleSaveType = 0;  	//Set output filename  	string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  	//Filter illegal characters from the name  	foreach (char illegalChar in Path.GetInvalidPathChars ()) {  		outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  	}  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Export save";  	saveFileDlg.FileName = outputFilename;  	saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Action Replay  			singleSaveType = 1;  			break;  		case 1:  		//MCS single save  		case 3:  			//PS1 (Memory Juggler)  			singleSaveType = 2;  			break;  		case 6:  			//RAW single save  			singleSaveType = 3;  			//Omit the extension if the user left it  			saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  			break;  		}  		PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  	}  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	byte singleSaveType = 0;  	//Set output filename  	string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  	//Filter illegal characters from the name  	foreach (char illegalChar in Path.GetInvalidPathChars ()) {  		outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  	}  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Export save";  	saveFileDlg.FileName = outputFilename;  	saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Action Replay  			singleSaveType = 1;  			break;  		case 1:  		//MCS single save  		case 3:  			//PS1 (Memory Juggler)  			singleSaveType = 2;  			break;  		case 6:  			//RAW single save  			singleSaveType = 3;  			//Omit the extension if the user left it  			saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  			break;  		}  		PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  	}  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	byte singleSaveType = 0;  	//Set output filename  	string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  	//Filter illegal characters from the name  	foreach (char illegalChar in Path.GetInvalidPathChars ()) {  		outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  	}  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Export save";  	saveFileDlg.FileName = outputFilename;  	saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Action Replay  			singleSaveType = 1;  			break;  		case 1:  		//MCS single save  		case 3:  			//PS1 (Memory Juggler)  			singleSaveType = 2;  			break;  		case 6:  			//RAW single save  			singleSaveType = 3;  			//Omit the extension if the user left it  			saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  			break;  		}  		PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  	}  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  	//Initial save  	byte singleSaveType = 0;  	//Set output filename  	string outputFilename = getRegionString (PScard [listIndex].saveRegion [slotNumber]) + PScard [listIndex].saveProdCode [slotNumber] + PScard [listIndex].saveIdentifier [slotNumber];  	//Filter illegal characters from the name  	foreach (char illegalChar in Path.GetInvalidPathChars ()) {  		outputFilename = outputFilename.Replace (illegalChar.ToString ()' "");  	}  	SaveFileDialog saveFileDlg = new SaveFileDialog ();  	saveFileDlg.Title = "Export save";  	saveFileDlg.FileName = outputFilename;  	saveFileDlg.Filter = "PSXGameEdit single save (*.mcs)|*.mcs|XP' AR' GS' Caetla single save (*.psx)|*.psx|Memory Juggler (*.ps1)|*.ps1|Smart Link (*.mcb)|*.mcb|Datel (*.mcx;*.pda)|*.mcx;*.pda|RAW single save|B???????????*";  	//If user selected a card save to it  	if (saveFileDlg.ShowDialog () == DialogResult.OK) {  		//Get save type  		switch (saveFileDlg.FilterIndex) {  		default:  			//Action Replay  			singleSaveType = 1;  			break;  		case 1:  		//MCS single save  		case 3:  			//PS1 (Memory Juggler)  			singleSaveType = 2;  			break;  		case 6:  			//RAW single save  			singleSaveType = 3;  			//Omit the extension if the user left it  			saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  			break;  		}  		PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  	}  	break;  case 4:  	//Deleted initial  	new messageWindow ().ShowMessage (this' appName' "Deleted saves cannot be exported. Restore a save to proceed."' "OK"' null' true);  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (saveFileDlg.ShowDialog () == DialogResult.OK) {  	//Get save type  	switch (saveFileDlg.FilterIndex) {  	default:  		//Action Replay  		singleSaveType = 1;  		break;  	case 1:  	//MCS single save  	case 3:  		//PS1 (Memory Juggler)  		singleSaveType = 2;  		break;  	case 6:  		//RAW single save  		singleSaveType = 3;  		//Omit the extension if the user left it  		saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  		break;  	}  	PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (saveFileDlg.ShowDialog () == DialogResult.OK) {  	//Get save type  	switch (saveFileDlg.FilterIndex) {  	default:  		//Action Replay  		singleSaveType = 1;  		break;  	case 1:  	//MCS single save  	case 3:  		//PS1 (Memory Juggler)  		singleSaveType = 2;  		break;  	case 6:  		//RAW single save  		singleSaveType = 3;  		//Omit the extension if the user left it  		saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  		break;  	}  	PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (saveFileDlg.ShowDialog () == DialogResult.OK) {  	//Get save type  	switch (saveFileDlg.FilterIndex) {  	default:  		//Action Replay  		singleSaveType = 1;  		break;  	case 1:  	//MCS single save  	case 3:  		//PS1 (Memory Juggler)  		singleSaveType = 2;  		break;  	case 6:  		//RAW single save  		singleSaveType = 3;  		//Omit the extension if the user left it  		saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  		break;  	}  	PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: if (saveFileDlg.ShowDialog () == DialogResult.OK) {  	//Get save type  	switch (saveFileDlg.FilterIndex) {  	default:  		//Action Replay  		singleSaveType = 1;  		break;  	case 1:  	//MCS single save  	case 3:  		//PS1 (Memory Juggler)  		singleSaveType = 2;  		break;  	case 6:  		//RAW single save  		singleSaveType = 3;  		//Omit the extension if the user left it  		saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  		break;  	}  	PScard [listIndex].saveSingleSave (saveFileDlg.FileName' slotNumber' singleSaveType);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (saveFileDlg.FilterIndex) {  default:  	//Action Replay  	singleSaveType = 1;  	break;  case 1:  //MCS single save  case 3:  	//PS1 (Memory Juggler)  	singleSaveType = 2;  	break;  case 6:  	//RAW single save  	singleSaveType = 3;  	//Omit the extension if the user left it  	saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (saveFileDlg.FilterIndex) {  default:  	//Action Replay  	singleSaveType = 1;  	break;  case 1:  //MCS single save  case 3:  	//PS1 (Memory Juggler)  	singleSaveType = 2;  	break;  case 6:  	//RAW single save  	singleSaveType = 3;  	//Omit the extension if the user left it  	saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (saveFileDlg.FilterIndex) {  default:  	//Action Replay  	singleSaveType = 1;  	break;  case 1:  //MCS single save  case 3:  	//PS1 (Memory Juggler)  	singleSaveType = 2;  	break;  case 6:  	//RAW single save  	singleSaveType = 3;  	//Omit the extension if the user left it  	saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: switch (saveFileDlg.FilterIndex) {  default:  	//Action Replay  	singleSaveType = 1;  	break;  case 1:  //MCS single save  case 3:  	//PS1 (Memory Juggler)  	singleSaveType = 2;  	break;  case 6:  	//RAW single save  	singleSaveType = 3;  	//Omit the extension if the user left it  	saveFileDlg.FileName = saveFileDlg.FileName.Split ('.') [0];  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: singleSaveType = 2;  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,exportSaveDialog,The following statement contains a magic number: singleSaveType = 3;  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,getRegionString,The following statement contains a magic number: tempRegion [1] = (byte)(regionUshort >> 8);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editIcon,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	int iconFrames = PScard [listIndex].iconFrames [slotNumber];  	string saveTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	byte[] iconBytes = PScard [listIndex].getIconBytes (slotNumber);  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		iconWindow iconDlg = new iconWindow ();  		iconDlg.initializeDialog (saveTitle' iconFrames' iconBytes);  		iconDlg.ShowDialog (this);  		//Update data if OK has been pressed  		if (iconDlg.okPressed) {  			PScard [listIndex].setIconBytes (slotNumber' iconDlg.iconData);  			refreshListView (listIndex' slotNumber);  		}  		iconDlg.Dispose ();  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editIcon,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	int iconFrames = PScard [listIndex].iconFrames [slotNumber];  	string saveTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	byte[] iconBytes = PScard [listIndex].getIconBytes (slotNumber);  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		iconWindow iconDlg = new iconWindow ();  		iconDlg.initializeDialog (saveTitle' iconFrames' iconBytes);  		iconDlg.ShowDialog (this);  		//Update data if OK has been pressed  		if (iconDlg.okPressed) {  			PScard [listIndex].setIconBytes (slotNumber' iconDlg.iconData);  			refreshListView (listIndex' slotNumber);  		}  		iconDlg.Dispose ();  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editIcon,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	int iconFrames = PScard [listIndex].iconFrames [slotNumber];  	string saveTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	byte[] iconBytes = PScard [listIndex].getIconBytes (slotNumber);  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		iconWindow iconDlg = new iconWindow ();  		iconDlg.initializeDialog (saveTitle' iconFrames' iconBytes);  		iconDlg.ShowDialog (this);  		//Update data if OK has been pressed  		if (iconDlg.okPressed) {  			PScard [listIndex].setIconBytes (slotNumber' iconDlg.iconData);  			refreshListView (listIndex' slotNumber);  		}  		iconDlg.Dispose ();  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editIcon,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	int iconFrames = PScard [listIndex].iconFrames [slotNumber];  	string saveTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	byte[] iconBytes = PScard [listIndex].getIconBytes (slotNumber);  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		iconWindow iconDlg = new iconWindow ();  		iconDlg.initializeDialog (saveTitle' iconFrames' iconBytes);  		iconDlg.ShowDialog (this);  		//Update data if OK has been pressed  		if (iconDlg.okPressed) {  			PScard [listIndex].setIconBytes (slotNumber' iconDlg.iconData);  			refreshListView (listIndex' slotNumber);  		}  		iconDlg.Dispose ();  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editIcon,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	int iconFrames = PScard [listIndex].iconFrames [slotNumber];  	string saveTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	byte[] iconBytes = PScard [listIndex].getIconBytes (slotNumber);  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		iconWindow iconDlg = new iconWindow ();  		iconDlg.initializeDialog (saveTitle' iconFrames' iconBytes);  		iconDlg.ShowDialog (this);  		//Update data if OK has been pressed  		if (iconDlg.okPressed) {  			PScard [listIndex].setIconBytes (slotNumber' iconDlg.iconData);  			refreshListView (listIndex' slotNumber);  		}  		iconDlg.Dispose ();  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editIcon,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	iconWindow iconDlg = new iconWindow ();  	iconDlg.initializeDialog (saveTitle' iconFrames' iconBytes);  	iconDlg.ShowDialog (this);  	//Update data if OK has been pressed  	if (iconDlg.okPressed) {  		PScard [listIndex].setIconBytes (slotNumber' iconDlg.iconData);  		refreshListView (listIndex' slotNumber);  	}  	iconDlg.Dispose ();  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editIcon,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	iconWindow iconDlg = new iconWindow ();  	iconDlg.initializeDialog (saveTitle' iconFrames' iconBytes);  	iconDlg.ShowDialog (this);  	//Update data if OK has been pressed  	if (iconDlg.okPressed) {  		PScard [listIndex].setIconBytes (slotNumber' iconDlg.iconData);  		refreshListView (listIndex' slotNumber);  	}  	iconDlg.Dispose ();  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editIcon,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	iconWindow iconDlg = new iconWindow ();  	iconDlg.initializeDialog (saveTitle' iconFrames' iconBytes);  	iconDlg.ShowDialog (this);  	//Update data if OK has been pressed  	if (iconDlg.okPressed) {  		PScard [listIndex].setIconBytes (slotNumber' iconDlg.iconData);  		refreshListView (listIndex' slotNumber);  	}  	iconDlg.Dispose ();  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editIcon,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	iconWindow iconDlg = new iconWindow ();  	iconDlg.initializeDialog (saveTitle' iconFrames' iconBytes);  	iconDlg.ShowDialog (this);  	//Update data if OK has been pressed  	if (iconDlg.okPressed) {  		PScard [listIndex].setIconBytes (slotNumber' iconDlg.iconData);  		refreshListView (listIndex' slotNumber);  	}  	iconDlg.Dispose ();  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editIcon,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	iconWindow iconDlg = new iconWindow ();  	iconDlg.initializeDialog (saveTitle' iconFrames' iconBytes);  	iconDlg.ShowDialog (this);  	//Update data if OK has been pressed  	if (iconDlg.okPressed) {  		PScard [listIndex].setIconBytes (slotNumber' iconDlg.iconData);  		refreshListView (listIndex' slotNumber);  	}  	iconDlg.Dispose ();  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,makeListView,The following statement contains a magic number: iconList [iconList.Count - 1].ImageSize = new Size (48' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,makeListView,The following statement contains a magic number: iconList [iconList.Count - 1].ImageSize = new Size (48' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,makeListView,The following statement contains a magic number: cardList [cardList.Count - 1].Location = new Point (0' 3);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,makeListView,The following statement contains a magic number: cardList [cardList.Count - 1].Size = new Size (492' 286);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,makeListView,The following statement contains a magic number: cardList [cardList.Count - 1].Size = new Size (492' 286);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,makeListView,The following statement contains a magic number: cardList [cardList.Count - 1].Columns [0].Width = 315;  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,makeListView,The following statement contains a magic number: cardList [cardList.Count - 1].Columns [1].Width = 87;  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,makeListView,The following statement contains a magic number: cardList [cardList.Count - 1].Columns [2].Width = 84;  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,makeListView,The following statement contains a magic number: cardList [cardList.Count - 1].Columns [2].Width = 84;  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	//Add save icons to the list  	iconList [listIndex].Images.Add (prepareIcons (listIndex' i));  	switch (PScard [listIndex].saveType [i]) {  	default:  		//Corrupted  		cardList [listIndex].Items.Add ("Corrupted slot");  		break;  	case 0:  		//Formatted save  		cardList [listIndex].Items.Add ("Free slot");  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial save  		cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  		cardList [listIndex].Items [i].ImageIndex = i + 2;  		//Skip two linked slot icons  		break;  	case 2:  		//Middle link  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 5:  		//Middle link deleted  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	case 3:  		//End link  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 6:  		//End link deleted  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	//Add save icons to the list  	iconList [listIndex].Images.Add (prepareIcons (listIndex' i));  	switch (PScard [listIndex].saveType [i]) {  	default:  		//Corrupted  		cardList [listIndex].Items.Add ("Corrupted slot");  		break;  	case 0:  		//Formatted save  		cardList [listIndex].Items.Add ("Free slot");  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial save  		cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  		cardList [listIndex].Items [i].ImageIndex = i + 2;  		//Skip two linked slot icons  		break;  	case 2:  		//Middle link  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 5:  		//Middle link deleted  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	case 3:  		//End link  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 6:  		//End link deleted  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	//Add save icons to the list  	iconList [listIndex].Images.Add (prepareIcons (listIndex' i));  	switch (PScard [listIndex].saveType [i]) {  	default:  		//Corrupted  		cardList [listIndex].Items.Add ("Corrupted slot");  		break;  	case 0:  		//Formatted save  		cardList [listIndex].Items.Add ("Free slot");  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial save  		cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  		cardList [listIndex].Items [i].ImageIndex = i + 2;  		//Skip two linked slot icons  		break;  	case 2:  		//Middle link  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 5:  		//Middle link deleted  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	case 3:  		//End link  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 6:  		//End link deleted  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	//Add save icons to the list  	iconList [listIndex].Images.Add (prepareIcons (listIndex' i));  	switch (PScard [listIndex].saveType [i]) {  	default:  		//Corrupted  		cardList [listIndex].Items.Add ("Corrupted slot");  		break;  	case 0:  		//Formatted save  		cardList [listIndex].Items.Add ("Free slot");  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial save  		cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  		cardList [listIndex].Items [i].ImageIndex = i + 2;  		//Skip two linked slot icons  		break;  	case 2:  		//Middle link  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 5:  		//Middle link deleted  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	case 3:  		//End link  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 6:  		//End link deleted  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	//Add save icons to the list  	iconList [listIndex].Images.Add (prepareIcons (listIndex' i));  	switch (PScard [listIndex].saveType [i]) {  	default:  		//Corrupted  		cardList [listIndex].Items.Add ("Corrupted slot");  		break;  	case 0:  		//Formatted save  		cardList [listIndex].Items.Add ("Free slot");  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial save  		cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  		cardList [listIndex].Items [i].ImageIndex = i + 2;  		//Skip two linked slot icons  		break;  	case 2:  		//Middle link  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 5:  		//Middle link deleted  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	case 3:  		//End link  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 6:  		//End link deleted  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	//Add save icons to the list  	iconList [listIndex].Images.Add (prepareIcons (listIndex' i));  	switch (PScard [listIndex].saveType [i]) {  	default:  		//Corrupted  		cardList [listIndex].Items.Add ("Corrupted slot");  		break;  	case 0:  		//Formatted save  		cardList [listIndex].Items.Add ("Free slot");  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial save  		cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  		cardList [listIndex].Items [i].ImageIndex = i + 2;  		//Skip two linked slot icons  		break;  	case 2:  		//Middle link  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 5:  		//Middle link deleted  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	case 3:  		//End link  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 6:  		//End link deleted  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	//Add save icons to the list  	iconList [listIndex].Images.Add (prepareIcons (listIndex' i));  	switch (PScard [listIndex].saveType [i]) {  	default:  		//Corrupted  		cardList [listIndex].Items.Add ("Corrupted slot");  		break;  	case 0:  		//Formatted save  		cardList [listIndex].Items.Add ("Free slot");  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial save  		cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  		cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  		cardList [listIndex].Items [i].ImageIndex = i + 2;  		//Skip two linked slot icons  		break;  	case 2:  		//Middle link  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 5:  		//Middle link deleted  		cardList [listIndex].Items.Add ("Linked slot (middle link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	case 3:  		//End link  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 0;  		break;  	case 6:  		//End link deleted  		cardList [listIndex].Items.Add ("Linked slot (end link)");  		cardList [listIndex].Items [i].ImageIndex = 1;  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: switch (PScard [listIndex].saveType [i]) {  default:  	//Corrupted  	cardList [listIndex].Items.Add ("Corrupted slot");  	break;  case 0:  	//Formatted save  	cardList [listIndex].Items.Add ("Free slot");  	break;  case 1:  //Initial save  case 4:  	//Deleted initial save  	cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  	cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  	cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  	cardList [listIndex].Items [i].ImageIndex = i + 2;  	//Skip two linked slot icons  	break;  case 2:  	//Middle link  	cardList [listIndex].Items.Add ("Linked slot (middle link)");  	cardList [listIndex].Items [i].ImageIndex = 0;  	break;  case 5:  	//Middle link deleted  	cardList [listIndex].Items.Add ("Linked slot (middle link)");  	cardList [listIndex].Items [i].ImageIndex = 1;  	break;  case 3:  	//End link  	cardList [listIndex].Items.Add ("Linked slot (end link)");  	cardList [listIndex].Items [i].ImageIndex = 0;  	break;  case 6:  	//End link deleted  	cardList [listIndex].Items.Add ("Linked slot (end link)");  	cardList [listIndex].Items [i].ImageIndex = 1;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: switch (PScard [listIndex].saveType [i]) {  default:  	//Corrupted  	cardList [listIndex].Items.Add ("Corrupted slot");  	break;  case 0:  	//Formatted save  	cardList [listIndex].Items.Add ("Free slot");  	break;  case 1:  //Initial save  case 4:  	//Deleted initial save  	cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  	cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  	cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  	cardList [listIndex].Items [i].ImageIndex = i + 2;  	//Skip two linked slot icons  	break;  case 2:  	//Middle link  	cardList [listIndex].Items.Add ("Linked slot (middle link)");  	cardList [listIndex].Items [i].ImageIndex = 0;  	break;  case 5:  	//Middle link deleted  	cardList [listIndex].Items.Add ("Linked slot (middle link)");  	cardList [listIndex].Items [i].ImageIndex = 1;  	break;  case 3:  	//End link  	cardList [listIndex].Items.Add ("Linked slot (end link)");  	cardList [listIndex].Items [i].ImageIndex = 0;  	break;  case 6:  	//End link deleted  	cardList [listIndex].Items.Add ("Linked slot (end link)");  	cardList [listIndex].Items [i].ImageIndex = 1;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: switch (PScard [listIndex].saveType [i]) {  default:  	//Corrupted  	cardList [listIndex].Items.Add ("Corrupted slot");  	break;  case 0:  	//Formatted save  	cardList [listIndex].Items.Add ("Free slot");  	break;  case 1:  //Initial save  case 4:  	//Deleted initial save  	cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  	cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  	cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  	cardList [listIndex].Items [i].ImageIndex = i + 2;  	//Skip two linked slot icons  	break;  case 2:  	//Middle link  	cardList [listIndex].Items.Add ("Linked slot (middle link)");  	cardList [listIndex].Items [i].ImageIndex = 0;  	break;  case 5:  	//Middle link deleted  	cardList [listIndex].Items.Add ("Linked slot (middle link)");  	cardList [listIndex].Items [i].ImageIndex = 1;  	break;  case 3:  	//End link  	cardList [listIndex].Items.Add ("Linked slot (end link)");  	cardList [listIndex].Items [i].ImageIndex = 0;  	break;  case 6:  	//End link deleted  	cardList [listIndex].Items.Add ("Linked slot (end link)");  	cardList [listIndex].Items [i].ImageIndex = 1;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: switch (PScard [listIndex].saveType [i]) {  default:  	//Corrupted  	cardList [listIndex].Items.Add ("Corrupted slot");  	break;  case 0:  	//Formatted save  	cardList [listIndex].Items.Add ("Free slot");  	break;  case 1:  //Initial save  case 4:  	//Deleted initial save  	cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  	cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  	cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  	cardList [listIndex].Items [i].ImageIndex = i + 2;  	//Skip two linked slot icons  	break;  case 2:  	//Middle link  	cardList [listIndex].Items.Add ("Linked slot (middle link)");  	cardList [listIndex].Items [i].ImageIndex = 0;  	break;  case 5:  	//Middle link deleted  	cardList [listIndex].Items.Add ("Linked slot (middle link)");  	cardList [listIndex].Items [i].ImageIndex = 1;  	break;  case 3:  	//End link  	cardList [listIndex].Items.Add ("Linked slot (end link)");  	cardList [listIndex].Items [i].ImageIndex = 0;  	break;  case 6:  	//End link deleted  	cardList [listIndex].Items.Add ("Linked slot (end link)");  	cardList [listIndex].Items [i].ImageIndex = 1;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: switch (PScard [listIndex].saveType [i]) {  default:  	//Corrupted  	cardList [listIndex].Items.Add ("Corrupted slot");  	break;  case 0:  	//Formatted save  	cardList [listIndex].Items.Add ("Free slot");  	break;  case 1:  //Initial save  case 4:  	//Deleted initial save  	cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  	cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  	cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  	cardList [listIndex].Items [i].ImageIndex = i + 2;  	//Skip two linked slot icons  	break;  case 2:  	//Middle link  	cardList [listIndex].Items.Add ("Linked slot (middle link)");  	cardList [listIndex].Items [i].ImageIndex = 0;  	break;  case 5:  	//Middle link deleted  	cardList [listIndex].Items.Add ("Linked slot (middle link)");  	cardList [listIndex].Items [i].ImageIndex = 1;  	break;  case 3:  	//End link  	cardList [listIndex].Items.Add ("Linked slot (end link)");  	cardList [listIndex].Items [i].ImageIndex = 0;  	break;  case 6:  	//End link deleted  	cardList [listIndex].Items.Add ("Linked slot (end link)");  	cardList [listIndex].Items [i].ImageIndex = 1;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: switch (PScard [listIndex].saveType [i]) {  default:  	//Corrupted  	cardList [listIndex].Items.Add ("Corrupted slot");  	break;  case 0:  	//Formatted save  	cardList [listIndex].Items.Add ("Free slot");  	break;  case 1:  //Initial save  case 4:  	//Deleted initial save  	cardList [listIndex].Items.Add (PScard [listIndex].saveName [i' mainSettings.titleEncoding]);  	cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveProdCode [i]);  	cardList [listIndex].Items [i].SubItems.Add (PScard [listIndex].saveIdentifier [i]);  	cardList [listIndex].Items [i].ImageIndex = i + 2;  	//Skip two linked slot icons  	break;  case 2:  	//Middle link  	cardList [listIndex].Items.Add ("Linked slot (middle link)");  	cardList [listIndex].Items [i].ImageIndex = 0;  	break;  case 5:  	//Middle link deleted  	cardList [listIndex].Items.Add ("Linked slot (middle link)");  	cardList [listIndex].Items [i].ImageIndex = 1;  	break;  case 3:  	//End link  	cardList [listIndex].Items.Add ("Linked slot (end link)");  	cardList [listIndex].Items [i].ImageIndex = 0;  	break;  case 6:  	//End link deleted  	cardList [listIndex].Items.Add ("Linked slot (end link)");  	cardList [listIndex].Items [i].ImageIndex = 1;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshListView,The following statement contains a magic number: cardList [listIndex].Items [i].ImageIndex = i + 2;  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (mainSettings.iconBackgroundColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (mainSettings.iconBackgroundColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (mainSettings.iconBackgroundColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (mainSettings.iconBackgroundColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (mainSettings.iconBackgroundColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (mainSettings.iconBackgroundColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (mainSettings.iconBackgroundColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (mainSettings.iconBackgroundColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 16' 16)));  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 16' 16)));  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 16' 16)));  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 16' 16)));  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 16' 16)));  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 16' 16)));  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (PScard [listIndex].iconData [slotNumber' 0]' 0' 0' 16' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (PScard [listIndex].iconData [slotNumber' 0]' 0' 0' 16' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (PScard [listIndex].saveRegion [slotNumber]) {  default:  	//Formatted save' Corrupted save' Unknown region  	iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  	break;  case 0x4142:  	//American region  	iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  	break;  case 0x4542:  	//European region  	iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  	break;  case 0x4942:  	//Japanese region  	iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (PScard [listIndex].saveRegion [slotNumber]) {  default:  	//Formatted save' Corrupted save' Unknown region  	iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  	break;  case 0x4142:  	//American region  	iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  	break;  case 0x4542:  	//European region  	iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  	break;  case 0x4942:  	//Japanese region  	iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (PScard [listIndex].saveRegion [slotNumber]) {  default:  	//Formatted save' Corrupted save' Unknown region  	iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  	break;  case 0x4142:  	//American region  	iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  	break;  case 0x4542:  	//European region  	iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  	break;  case 0x4942:  	//Japanese region  	iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (PScard [listIndex].saveRegion [slotNumber]) {  default:  	//Formatted save' Corrupted save' Unknown region  	iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  	break;  case 0x4142:  	//American region  	iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  	break;  case 0x4542:  	//European region  	iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  	break;  case 0x4942:  	//Japanese region  	iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (PScard [listIndex].saveRegion [slotNumber]) {  default:  	//Formatted save' Corrupted save' Unknown region  	iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  	break;  case 0x4142:  	//American region  	iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  	break;  case 0x4542:  	//European region  	iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  	break;  case 0x4942:  	//Japanese region  	iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (PScard [listIndex].saveRegion [slotNumber]) {  default:  	//Formatted save' Corrupted save' Unknown region  	iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  	break;  case 0x4142:  	//American region  	iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  	break;  case 0x4542:  	//European region  	iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  	break;  case 0x4942:  	//Japanese region  	iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (PScard [listIndex].saveRegion [slotNumber]) {  default:  	//Formatted save' Corrupted save' Unknown region  	iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  	break;  case 0x4142:  	//American region  	iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  	break;  case 0x4542:  	//European region  	iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  	break;  case 0x4942:  	//Japanese region  	iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (PScard [listIndex].saveRegion [slotNumber]) {  default:  	//Formatted save' Corrupted save' Unknown region  	iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  	break;  case 0x4142:  	//American region  	iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  	break;  case 0x4542:  	//European region  	iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  	break;  case 0x4942:  	//Japanese region  	iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (PScard [listIndex].saveRegion [slotNumber]) {  default:  	//Formatted save' Corrupted save' Unknown region  	iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  	break;  case 0x4142:  	//American region  	iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  	break;  case 0x4542:  	//European region  	iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  	break;  case 0x4942:  	//Japanese region  	iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (PScard [listIndex].saveRegion [slotNumber]) {  default:  	//Formatted save' Corrupted save' Unknown region  	iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  	break;  case 0x4142:  	//American region  	iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  	break;  case 0x4542:  	//European region  	iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  	break;  case 0x4942:  	//Japanese region  	iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (PScard [listIndex].saveRegion [slotNumber]) {  default:  	//Formatted save' Corrupted save' Unknown region  	iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  	break;  case 0x4142:  	//American region  	iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  	break;  case 0x4542:  	//European region  	iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  	break;  case 0x4942:  	//Japanese region  	iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: switch (PScard [listIndex].saveRegion [slotNumber]) {  default:  	//Formatted save' Corrupted save' Unknown region  	iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  	break;  case 0x4142:  	//American region  	iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  	break;  case 0x4542:  	//European region  	iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  	break;  case 0x4942:  	//Japanese region  	iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (Properties.Resources.naflag' 17' 0' 30' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (Properties.Resources.amflag' 17' 0' 30' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (Properties.Resources.euflag' 17' 0' 30' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.DrawImage (Properties.Resources.jpflag' 17' 0' 30' 16);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: if (PScard [listIndex].saveType [slotNumber] == 4)  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xA0' 0xFF' 0xFF' 0xFF))' new Region (new Rectangle (0' 0' 16' 16)));  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: if (PScard [listIndex].saveType [slotNumber] == 4)  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xA0' 0xFF' 0xFF' 0xFF))' new Region (new Rectangle (0' 0' 16' 16)));  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: if (PScard [listIndex].saveType [slotNumber] == 4)  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xA0' 0xFF' 0xFF' 0xFF))' new Region (new Rectangle (0' 0' 16' 16)));  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xA0' 0xFF' 0xFF' 0xFF))' new Region (new Rectangle (0' 0' 16' 16)));  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following statement contains a magic number: iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xA0' 0xFF' 0xFF' 0xFF))' new Region (new Rectangle (0' 0' 16' 16)));  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editSaveHeader,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	ushort saveRegion = PScard [listIndex].saveRegion [slotNumber];  	string saveProdCode = PScard [listIndex].saveProdCode [slotNumber];  	string saveIdentifier = PScard [listIndex].saveIdentifier [slotNumber];  	string saveTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	//Check if slot is allowed to be edited  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		//Not allowed  		break;  	case 1:  	case 4:  		headerWindow headerDlg = new headerWindow ();  		//Load values to dialog  		headerDlg.initializeDialog (appName' saveTitle' saveProdCode' saveIdentifier' saveRegion);  		headerDlg.ShowDialog (this);  		//Update values if OK was pressed  		if (headerDlg.okPressed) {  			//Insert data to save header of the selected card and slot  			PScard [listIndex].setHeaderData (slotNumber' headerDlg.prodCode' headerDlg.saveIdentifier' headerDlg.saveRegion);  			refreshListView (listIndex' slotNumber);  		}  		headerDlg.Dispose ();  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,editSaveHeader,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	//Not allowed  	break;  case 1:  case 4:  	headerWindow headerDlg = new headerWindow ();  	//Load values to dialog  	headerDlg.initializeDialog (appName' saveTitle' saveProdCode' saveIdentifier' saveRegion);  	headerDlg.ShowDialog (this);  	//Update values if OK was pressed  	if (headerDlg.okPressed) {  		//Insert data to save header of the selected card and slot  		PScard [listIndex].setHeaderData (slotNumber' headerDlg.prodCode' headerDlg.saveIdentifier' headerDlg.saveRegion);  		refreshListView (listIndex' slotNumber);  	}  	headerDlg.Dispose ();  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshPluginBindings,The following statement contains a magic number: if (cardList.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if any item on the list is selected  	if (cardList [listIndex].SelectedItems.Count > 0) {  		int slotNumber = cardList [listIndex].SelectedIndices [0];  		//Check the save type  		switch (PScard [listIndex].saveType [slotNumber]) {  		default:  			break;  		case 1:  		//Initial save  		case 4:  			//Deleted initial  			//Get the supported plugins  			supportedPlugins = pluginSystem.getSupportedPlugins (PScard [listIndex].saveProdCode [slotNumber]);  			//Check if there are any plugins that support the product code  			if (supportedPlugins != null) {  				//Enable plugin menu  				editWithPluginToolStripMenuItem.Enabled = true;  				editWithPluginToolStripMenuItem1.Enabled = true;  				foreach (int currentAssembly in supportedPlugins) {  					//Add item to the plugin menu  					editWithPluginToolStripMenuItem.DropDownItems.Add (pluginSystem.assembliesMetadata [currentAssembly].pluginName);  					editWithPluginToolStripMenuItem1.DropDownItems.Add (pluginSystem.assembliesMetadata [currentAssembly].pluginName);  				}  			}  			break;  		}  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshPluginBindings,The following statement contains a magic number: if (cardList [listIndex].SelectedItems.Count > 0) {  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		//Get the supported plugins  		supportedPlugins = pluginSystem.getSupportedPlugins (PScard [listIndex].saveProdCode [slotNumber]);  		//Check if there are any plugins that support the product code  		if (supportedPlugins != null) {  			//Enable plugin menu  			editWithPluginToolStripMenuItem.Enabled = true;  			editWithPluginToolStripMenuItem1.Enabled = true;  			foreach (int currentAssembly in supportedPlugins) {  				//Add item to the plugin menu  				editWithPluginToolStripMenuItem.DropDownItems.Add (pluginSystem.assembliesMetadata [currentAssembly].pluginName);  				editWithPluginToolStripMenuItem1.DropDownItems.Add (pluginSystem.assembliesMetadata [currentAssembly].pluginName);  			}  		}  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,refreshPluginBindings,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	//Get the supported plugins  	supportedPlugins = pluginSystem.getSupportedPlugins (PScard [listIndex].saveProdCode [slotNumber]);  	//Check if there are any plugins that support the product code  	if (supportedPlugins != null) {  		//Enable plugin menu  		editWithPluginToolStripMenuItem.Enabled = true;  		editWithPluginToolStripMenuItem1.Enabled = true;  		foreach (int currentAssembly in supportedPlugins) {  			//Add item to the plugin menu  			editWithPluginToolStripMenuItem.DropDownItems.Add (pluginSystem.assembliesMetadata [currentAssembly].pluginName);  			editWithPluginToolStripMenuItem1.DropDownItems.Add (pluginSystem.assembliesMetadata [currentAssembly].pluginName);  		}  	}  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: if (cardList.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if any item on the list is selected  	if (cardList [listIndex].SelectedItems.Count > 0) {  		int slotNumber = cardList [listIndex].SelectedIndices [0];  		//Check the save type  		switch (PScard [listIndex].saveType [slotNumber]) {  		default:  			break;  		case 0:  			//Formatted  			disableEditItems ();  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  			paseToolStripMenuItem.Enabled = true;  			importSaveToolStripMenuItem.Enabled = true;  			importSaveToolStripMenuItem1.Enabled = true;  			importButton.Enabled = true;  			break;  		case 1:  			//Initial  			enableEditItems ();  			restoreSaveToolStripMenuItem.Enabled = false;  			restoreSaveToolStripMenuItem1.Enabled = false;  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  			paseToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem1.Enabled = false;  			importButton.Enabled = false;  			break;  		case 2:  		//Middle link  		case 3:  			//End link  			disableEditItems ();  			break;  		case 4:  			//Deleted initial  			enableEditItems ();  			deleteSaveToolStripMenuItem.Enabled = false;  			deleteSaveToolStripMenuItem1.Enabled = false;  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  			paseToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem1.Enabled = false;  			importButton.Enabled = false;  			exportSaveToolStripMenuItem.Enabled = false;  			exportSaveToolStripMenuItem1.Enabled = false;  			exportButton.Enabled = false;  			break;  		case 5:  		//Deleted middle link  		case 6:  			//Deleted end link  			disableEditItems ();  			break;  		case 7:  			//Corrupted  			disableEditItems ();  			removeSaveformatSlotsToolStripMenuItem.Enabled = true;  			removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  			break;  		}  	}  	else {  		//No save is selected' disable all items  		disableEditItems ();  	}  }  else {  	//There is no card' disable all items  	disableEditItems ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: if (cardList.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if any item on the list is selected  	if (cardList [listIndex].SelectedItems.Count > 0) {  		int slotNumber = cardList [listIndex].SelectedIndices [0];  		//Check the save type  		switch (PScard [listIndex].saveType [slotNumber]) {  		default:  			break;  		case 0:  			//Formatted  			disableEditItems ();  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  			paseToolStripMenuItem.Enabled = true;  			importSaveToolStripMenuItem.Enabled = true;  			importSaveToolStripMenuItem1.Enabled = true;  			importButton.Enabled = true;  			break;  		case 1:  			//Initial  			enableEditItems ();  			restoreSaveToolStripMenuItem.Enabled = false;  			restoreSaveToolStripMenuItem1.Enabled = false;  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  			paseToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem1.Enabled = false;  			importButton.Enabled = false;  			break;  		case 2:  		//Middle link  		case 3:  			//End link  			disableEditItems ();  			break;  		case 4:  			//Deleted initial  			enableEditItems ();  			deleteSaveToolStripMenuItem.Enabled = false;  			deleteSaveToolStripMenuItem1.Enabled = false;  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  			paseToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem1.Enabled = false;  			importButton.Enabled = false;  			exportSaveToolStripMenuItem.Enabled = false;  			exportSaveToolStripMenuItem1.Enabled = false;  			exportButton.Enabled = false;  			break;  		case 5:  		//Deleted middle link  		case 6:  			//Deleted end link  			disableEditItems ();  			break;  		case 7:  			//Corrupted  			disableEditItems ();  			removeSaveformatSlotsToolStripMenuItem.Enabled = true;  			removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  			break;  		}  	}  	else {  		//No save is selected' disable all items  		disableEditItems ();  	}  }  else {  	//There is no card' disable all items  	disableEditItems ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: if (cardList.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if any item on the list is selected  	if (cardList [listIndex].SelectedItems.Count > 0) {  		int slotNumber = cardList [listIndex].SelectedIndices [0];  		//Check the save type  		switch (PScard [listIndex].saveType [slotNumber]) {  		default:  			break;  		case 0:  			//Formatted  			disableEditItems ();  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  			paseToolStripMenuItem.Enabled = true;  			importSaveToolStripMenuItem.Enabled = true;  			importSaveToolStripMenuItem1.Enabled = true;  			importButton.Enabled = true;  			break;  		case 1:  			//Initial  			enableEditItems ();  			restoreSaveToolStripMenuItem.Enabled = false;  			restoreSaveToolStripMenuItem1.Enabled = false;  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  			paseToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem1.Enabled = false;  			importButton.Enabled = false;  			break;  		case 2:  		//Middle link  		case 3:  			//End link  			disableEditItems ();  			break;  		case 4:  			//Deleted initial  			enableEditItems ();  			deleteSaveToolStripMenuItem.Enabled = false;  			deleteSaveToolStripMenuItem1.Enabled = false;  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  			paseToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem1.Enabled = false;  			importButton.Enabled = false;  			exportSaveToolStripMenuItem.Enabled = false;  			exportSaveToolStripMenuItem1.Enabled = false;  			exportButton.Enabled = false;  			break;  		case 5:  		//Deleted middle link  		case 6:  			//Deleted end link  			disableEditItems ();  			break;  		case 7:  			//Corrupted  			disableEditItems ();  			removeSaveformatSlotsToolStripMenuItem.Enabled = true;  			removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  			break;  		}  	}  	else {  		//No save is selected' disable all items  		disableEditItems ();  	}  }  else {  	//There is no card' disable all items  	disableEditItems ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: if (cardList.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if any item on the list is selected  	if (cardList [listIndex].SelectedItems.Count > 0) {  		int slotNumber = cardList [listIndex].SelectedIndices [0];  		//Check the save type  		switch (PScard [listIndex].saveType [slotNumber]) {  		default:  			break;  		case 0:  			//Formatted  			disableEditItems ();  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  			paseToolStripMenuItem.Enabled = true;  			importSaveToolStripMenuItem.Enabled = true;  			importSaveToolStripMenuItem1.Enabled = true;  			importButton.Enabled = true;  			break;  		case 1:  			//Initial  			enableEditItems ();  			restoreSaveToolStripMenuItem.Enabled = false;  			restoreSaveToolStripMenuItem1.Enabled = false;  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  			paseToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem1.Enabled = false;  			importButton.Enabled = false;  			break;  		case 2:  		//Middle link  		case 3:  			//End link  			disableEditItems ();  			break;  		case 4:  			//Deleted initial  			enableEditItems ();  			deleteSaveToolStripMenuItem.Enabled = false;  			deleteSaveToolStripMenuItem1.Enabled = false;  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  			paseToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem1.Enabled = false;  			importButton.Enabled = false;  			exportSaveToolStripMenuItem.Enabled = false;  			exportSaveToolStripMenuItem1.Enabled = false;  			exportButton.Enabled = false;  			break;  		case 5:  		//Deleted middle link  		case 6:  			//Deleted end link  			disableEditItems ();  			break;  		case 7:  			//Corrupted  			disableEditItems ();  			removeSaveformatSlotsToolStripMenuItem.Enabled = true;  			removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  			break;  		}  	}  	else {  		//No save is selected' disable all items  		disableEditItems ();  	}  }  else {  	//There is no card' disable all items  	disableEditItems ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: if (cardList.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if any item on the list is selected  	if (cardList [listIndex].SelectedItems.Count > 0) {  		int slotNumber = cardList [listIndex].SelectedIndices [0];  		//Check the save type  		switch (PScard [listIndex].saveType [slotNumber]) {  		default:  			break;  		case 0:  			//Formatted  			disableEditItems ();  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  			paseToolStripMenuItem.Enabled = true;  			importSaveToolStripMenuItem.Enabled = true;  			importSaveToolStripMenuItem1.Enabled = true;  			importButton.Enabled = true;  			break;  		case 1:  			//Initial  			enableEditItems ();  			restoreSaveToolStripMenuItem.Enabled = false;  			restoreSaveToolStripMenuItem1.Enabled = false;  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  			paseToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem1.Enabled = false;  			importButton.Enabled = false;  			break;  		case 2:  		//Middle link  		case 3:  			//End link  			disableEditItems ();  			break;  		case 4:  			//Deleted initial  			enableEditItems ();  			deleteSaveToolStripMenuItem.Enabled = false;  			deleteSaveToolStripMenuItem1.Enabled = false;  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  			paseToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem1.Enabled = false;  			importButton.Enabled = false;  			exportSaveToolStripMenuItem.Enabled = false;  			exportSaveToolStripMenuItem1.Enabled = false;  			exportButton.Enabled = false;  			break;  		case 5:  		//Deleted middle link  		case 6:  			//Deleted end link  			disableEditItems ();  			break;  		case 7:  			//Corrupted  			disableEditItems ();  			removeSaveformatSlotsToolStripMenuItem.Enabled = true;  			removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  			break;  		}  	}  	else {  		//No save is selected' disable all items  		disableEditItems ();  	}  }  else {  	//There is no card' disable all items  	disableEditItems ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: if (cardList.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if any item on the list is selected  	if (cardList [listIndex].SelectedItems.Count > 0) {  		int slotNumber = cardList [listIndex].SelectedIndices [0];  		//Check the save type  		switch (PScard [listIndex].saveType [slotNumber]) {  		default:  			break;  		case 0:  			//Formatted  			disableEditItems ();  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  			paseToolStripMenuItem.Enabled = true;  			importSaveToolStripMenuItem.Enabled = true;  			importSaveToolStripMenuItem1.Enabled = true;  			importButton.Enabled = true;  			break;  		case 1:  			//Initial  			enableEditItems ();  			restoreSaveToolStripMenuItem.Enabled = false;  			restoreSaveToolStripMenuItem1.Enabled = false;  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  			paseToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem1.Enabled = false;  			importButton.Enabled = false;  			break;  		case 2:  		//Middle link  		case 3:  			//End link  			disableEditItems ();  			break;  		case 4:  			//Deleted initial  			enableEditItems ();  			deleteSaveToolStripMenuItem.Enabled = false;  			deleteSaveToolStripMenuItem1.Enabled = false;  			pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  			paseToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem.Enabled = false;  			importSaveToolStripMenuItem1.Enabled = false;  			importButton.Enabled = false;  			exportSaveToolStripMenuItem.Enabled = false;  			exportSaveToolStripMenuItem1.Enabled = false;  			exportButton.Enabled = false;  			break;  		case 5:  		//Deleted middle link  		case 6:  			//Deleted end link  			disableEditItems ();  			break;  		case 7:  			//Corrupted  			disableEditItems ();  			removeSaveformatSlotsToolStripMenuItem.Enabled = true;  			removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  			break;  		}  	}  	else {  		//No save is selected' disable all items  		disableEditItems ();  	}  }  else {  	//There is no card' disable all items  	disableEditItems ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: if (cardList [listIndex].SelectedItems.Count > 0) {  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 0:  		//Formatted  		disableEditItems ();  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  		paseToolStripMenuItem.Enabled = true;  		importSaveToolStripMenuItem.Enabled = true;  		importSaveToolStripMenuItem1.Enabled = true;  		importButton.Enabled = true;  		break;  	case 1:  		//Initial  		enableEditItems ();  		restoreSaveToolStripMenuItem.Enabled = false;  		restoreSaveToolStripMenuItem1.Enabled = false;  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  		paseToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem1.Enabled = false;  		importButton.Enabled = false;  		break;  	case 2:  	//Middle link  	case 3:  		//End link  		disableEditItems ();  		break;  	case 4:  		//Deleted initial  		enableEditItems ();  		deleteSaveToolStripMenuItem.Enabled = false;  		deleteSaveToolStripMenuItem1.Enabled = false;  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  		paseToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem1.Enabled = false;  		importButton.Enabled = false;  		exportSaveToolStripMenuItem.Enabled = false;  		exportSaveToolStripMenuItem1.Enabled = false;  		exportButton.Enabled = false;  		break;  	case 5:  	//Deleted middle link  	case 6:  		//Deleted end link  		disableEditItems ();  		break;  	case 7:  		//Corrupted  		disableEditItems ();  		removeSaveformatSlotsToolStripMenuItem.Enabled = true;  		removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  		break;  	}  }  else {  	//No save is selected' disable all items  	disableEditItems ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: if (cardList [listIndex].SelectedItems.Count > 0) {  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 0:  		//Formatted  		disableEditItems ();  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  		paseToolStripMenuItem.Enabled = true;  		importSaveToolStripMenuItem.Enabled = true;  		importSaveToolStripMenuItem1.Enabled = true;  		importButton.Enabled = true;  		break;  	case 1:  		//Initial  		enableEditItems ();  		restoreSaveToolStripMenuItem.Enabled = false;  		restoreSaveToolStripMenuItem1.Enabled = false;  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  		paseToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem1.Enabled = false;  		importButton.Enabled = false;  		break;  	case 2:  	//Middle link  	case 3:  		//End link  		disableEditItems ();  		break;  	case 4:  		//Deleted initial  		enableEditItems ();  		deleteSaveToolStripMenuItem.Enabled = false;  		deleteSaveToolStripMenuItem1.Enabled = false;  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  		paseToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem1.Enabled = false;  		importButton.Enabled = false;  		exportSaveToolStripMenuItem.Enabled = false;  		exportSaveToolStripMenuItem1.Enabled = false;  		exportButton.Enabled = false;  		break;  	case 5:  	//Deleted middle link  	case 6:  		//Deleted end link  		disableEditItems ();  		break;  	case 7:  		//Corrupted  		disableEditItems ();  		removeSaveformatSlotsToolStripMenuItem.Enabled = true;  		removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  		break;  	}  }  else {  	//No save is selected' disable all items  	disableEditItems ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: if (cardList [listIndex].SelectedItems.Count > 0) {  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 0:  		//Formatted  		disableEditItems ();  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  		paseToolStripMenuItem.Enabled = true;  		importSaveToolStripMenuItem.Enabled = true;  		importSaveToolStripMenuItem1.Enabled = true;  		importButton.Enabled = true;  		break;  	case 1:  		//Initial  		enableEditItems ();  		restoreSaveToolStripMenuItem.Enabled = false;  		restoreSaveToolStripMenuItem1.Enabled = false;  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  		paseToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem1.Enabled = false;  		importButton.Enabled = false;  		break;  	case 2:  	//Middle link  	case 3:  		//End link  		disableEditItems ();  		break;  	case 4:  		//Deleted initial  		enableEditItems ();  		deleteSaveToolStripMenuItem.Enabled = false;  		deleteSaveToolStripMenuItem1.Enabled = false;  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  		paseToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem1.Enabled = false;  		importButton.Enabled = false;  		exportSaveToolStripMenuItem.Enabled = false;  		exportSaveToolStripMenuItem1.Enabled = false;  		exportButton.Enabled = false;  		break;  	case 5:  	//Deleted middle link  	case 6:  		//Deleted end link  		disableEditItems ();  		break;  	case 7:  		//Corrupted  		disableEditItems ();  		removeSaveformatSlotsToolStripMenuItem.Enabled = true;  		removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  		break;  	}  }  else {  	//No save is selected' disable all items  	disableEditItems ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: if (cardList [listIndex].SelectedItems.Count > 0) {  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 0:  		//Formatted  		disableEditItems ();  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  		paseToolStripMenuItem.Enabled = true;  		importSaveToolStripMenuItem.Enabled = true;  		importSaveToolStripMenuItem1.Enabled = true;  		importButton.Enabled = true;  		break;  	case 1:  		//Initial  		enableEditItems ();  		restoreSaveToolStripMenuItem.Enabled = false;  		restoreSaveToolStripMenuItem1.Enabled = false;  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  		paseToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem1.Enabled = false;  		importButton.Enabled = false;  		break;  	case 2:  	//Middle link  	case 3:  		//End link  		disableEditItems ();  		break;  	case 4:  		//Deleted initial  		enableEditItems ();  		deleteSaveToolStripMenuItem.Enabled = false;  		deleteSaveToolStripMenuItem1.Enabled = false;  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  		paseToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem1.Enabled = false;  		importButton.Enabled = false;  		exportSaveToolStripMenuItem.Enabled = false;  		exportSaveToolStripMenuItem1.Enabled = false;  		exportButton.Enabled = false;  		break;  	case 5:  	//Deleted middle link  	case 6:  		//Deleted end link  		disableEditItems ();  		break;  	case 7:  		//Corrupted  		disableEditItems ();  		removeSaveformatSlotsToolStripMenuItem.Enabled = true;  		removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  		break;  	}  }  else {  	//No save is selected' disable all items  	disableEditItems ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: if (cardList [listIndex].SelectedItems.Count > 0) {  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 0:  		//Formatted  		disableEditItems ();  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  		paseToolStripMenuItem.Enabled = true;  		importSaveToolStripMenuItem.Enabled = true;  		importSaveToolStripMenuItem1.Enabled = true;  		importButton.Enabled = true;  		break;  	case 1:  		//Initial  		enableEditItems ();  		restoreSaveToolStripMenuItem.Enabled = false;  		restoreSaveToolStripMenuItem1.Enabled = false;  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  		paseToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem1.Enabled = false;  		importButton.Enabled = false;  		break;  	case 2:  	//Middle link  	case 3:  		//End link  		disableEditItems ();  		break;  	case 4:  		//Deleted initial  		enableEditItems ();  		deleteSaveToolStripMenuItem.Enabled = false;  		deleteSaveToolStripMenuItem1.Enabled = false;  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  		paseToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem1.Enabled = false;  		importButton.Enabled = false;  		exportSaveToolStripMenuItem.Enabled = false;  		exportSaveToolStripMenuItem1.Enabled = false;  		exportButton.Enabled = false;  		break;  	case 5:  	//Deleted middle link  	case 6:  		//Deleted end link  		disableEditItems ();  		break;  	case 7:  		//Corrupted  		disableEditItems ();  		removeSaveformatSlotsToolStripMenuItem.Enabled = true;  		removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  		break;  	}  }  else {  	//No save is selected' disable all items  	disableEditItems ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: if (cardList [listIndex].SelectedItems.Count > 0) {  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 0:  		//Formatted  		disableEditItems ();  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  		paseToolStripMenuItem.Enabled = true;  		importSaveToolStripMenuItem.Enabled = true;  		importSaveToolStripMenuItem1.Enabled = true;  		importButton.Enabled = true;  		break;  	case 1:  		//Initial  		enableEditItems ();  		restoreSaveToolStripMenuItem.Enabled = false;  		restoreSaveToolStripMenuItem1.Enabled = false;  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  		paseToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem1.Enabled = false;  		importButton.Enabled = false;  		break;  	case 2:  	//Middle link  	case 3:  		//End link  		disableEditItems ();  		break;  	case 4:  		//Deleted initial  		enableEditItems ();  		deleteSaveToolStripMenuItem.Enabled = false;  		deleteSaveToolStripMenuItem1.Enabled = false;  		pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  		paseToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem.Enabled = false;  		importSaveToolStripMenuItem1.Enabled = false;  		importButton.Enabled = false;  		exportSaveToolStripMenuItem.Enabled = false;  		exportSaveToolStripMenuItem1.Enabled = false;  		exportButton.Enabled = false;  		break;  	case 5:  	//Deleted middle link  	case 6:  		//Deleted end link  		disableEditItems ();  		break;  	case 7:  		//Corrupted  		disableEditItems ();  		removeSaveformatSlotsToolStripMenuItem.Enabled = true;  		removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  		break;  	}  }  else {  	//No save is selected' disable all items  	disableEditItems ();  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 0:  	//Formatted  	disableEditItems ();  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  	paseToolStripMenuItem.Enabled = true;  	importSaveToolStripMenuItem.Enabled = true;  	importSaveToolStripMenuItem1.Enabled = true;  	importButton.Enabled = true;  	break;  case 1:  	//Initial  	enableEditItems ();  	restoreSaveToolStripMenuItem.Enabled = false;  	restoreSaveToolStripMenuItem1.Enabled = false;  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  	paseToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem1.Enabled = false;  	importButton.Enabled = false;  	break;  case 2:  //Middle link  case 3:  	//End link  	disableEditItems ();  	break;  case 4:  	//Deleted initial  	enableEditItems ();  	deleteSaveToolStripMenuItem.Enabled = false;  	deleteSaveToolStripMenuItem1.Enabled = false;  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  	paseToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem1.Enabled = false;  	importButton.Enabled = false;  	exportSaveToolStripMenuItem.Enabled = false;  	exportSaveToolStripMenuItem1.Enabled = false;  	exportButton.Enabled = false;  	break;  case 5:  //Deleted middle link  case 6:  	//Deleted end link  	disableEditItems ();  	break;  case 7:  	//Corrupted  	disableEditItems ();  	removeSaveformatSlotsToolStripMenuItem.Enabled = true;  	removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 0:  	//Formatted  	disableEditItems ();  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  	paseToolStripMenuItem.Enabled = true;  	importSaveToolStripMenuItem.Enabled = true;  	importSaveToolStripMenuItem1.Enabled = true;  	importButton.Enabled = true;  	break;  case 1:  	//Initial  	enableEditItems ();  	restoreSaveToolStripMenuItem.Enabled = false;  	restoreSaveToolStripMenuItem1.Enabled = false;  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  	paseToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem1.Enabled = false;  	importButton.Enabled = false;  	break;  case 2:  //Middle link  case 3:  	//End link  	disableEditItems ();  	break;  case 4:  	//Deleted initial  	enableEditItems ();  	deleteSaveToolStripMenuItem.Enabled = false;  	deleteSaveToolStripMenuItem1.Enabled = false;  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  	paseToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem1.Enabled = false;  	importButton.Enabled = false;  	exportSaveToolStripMenuItem.Enabled = false;  	exportSaveToolStripMenuItem1.Enabled = false;  	exportButton.Enabled = false;  	break;  case 5:  //Deleted middle link  case 6:  	//Deleted end link  	disableEditItems ();  	break;  case 7:  	//Corrupted  	disableEditItems ();  	removeSaveformatSlotsToolStripMenuItem.Enabled = true;  	removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 0:  	//Formatted  	disableEditItems ();  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  	paseToolStripMenuItem.Enabled = true;  	importSaveToolStripMenuItem.Enabled = true;  	importSaveToolStripMenuItem1.Enabled = true;  	importButton.Enabled = true;  	break;  case 1:  	//Initial  	enableEditItems ();  	restoreSaveToolStripMenuItem.Enabled = false;  	restoreSaveToolStripMenuItem1.Enabled = false;  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  	paseToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem1.Enabled = false;  	importButton.Enabled = false;  	break;  case 2:  //Middle link  case 3:  	//End link  	disableEditItems ();  	break;  case 4:  	//Deleted initial  	enableEditItems ();  	deleteSaveToolStripMenuItem.Enabled = false;  	deleteSaveToolStripMenuItem1.Enabled = false;  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  	paseToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem1.Enabled = false;  	importButton.Enabled = false;  	exportSaveToolStripMenuItem.Enabled = false;  	exportSaveToolStripMenuItem1.Enabled = false;  	exportButton.Enabled = false;  	break;  case 5:  //Deleted middle link  case 6:  	//Deleted end link  	disableEditItems ();  	break;  case 7:  	//Corrupted  	disableEditItems ();  	removeSaveformatSlotsToolStripMenuItem.Enabled = true;  	removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 0:  	//Formatted  	disableEditItems ();  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  	paseToolStripMenuItem.Enabled = true;  	importSaveToolStripMenuItem.Enabled = true;  	importSaveToolStripMenuItem1.Enabled = true;  	importButton.Enabled = true;  	break;  case 1:  	//Initial  	enableEditItems ();  	restoreSaveToolStripMenuItem.Enabled = false;  	restoreSaveToolStripMenuItem1.Enabled = false;  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  	paseToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem1.Enabled = false;  	importButton.Enabled = false;  	break;  case 2:  //Middle link  case 3:  	//End link  	disableEditItems ();  	break;  case 4:  	//Deleted initial  	enableEditItems ();  	deleteSaveToolStripMenuItem.Enabled = false;  	deleteSaveToolStripMenuItem1.Enabled = false;  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  	paseToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem1.Enabled = false;  	importButton.Enabled = false;  	exportSaveToolStripMenuItem.Enabled = false;  	exportSaveToolStripMenuItem1.Enabled = false;  	exportButton.Enabled = false;  	break;  case 5:  //Deleted middle link  case 6:  	//Deleted end link  	disableEditItems ();  	break;  case 7:  	//Corrupted  	disableEditItems ();  	removeSaveformatSlotsToolStripMenuItem.Enabled = true;  	removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 0:  	//Formatted  	disableEditItems ();  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  	paseToolStripMenuItem.Enabled = true;  	importSaveToolStripMenuItem.Enabled = true;  	importSaveToolStripMenuItem1.Enabled = true;  	importButton.Enabled = true;  	break;  case 1:  	//Initial  	enableEditItems ();  	restoreSaveToolStripMenuItem.Enabled = false;  	restoreSaveToolStripMenuItem1.Enabled = false;  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  	paseToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem1.Enabled = false;  	importButton.Enabled = false;  	break;  case 2:  //Middle link  case 3:  	//End link  	disableEditItems ();  	break;  case 4:  	//Deleted initial  	enableEditItems ();  	deleteSaveToolStripMenuItem.Enabled = false;  	deleteSaveToolStripMenuItem1.Enabled = false;  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  	paseToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem1.Enabled = false;  	importButton.Enabled = false;  	exportSaveToolStripMenuItem.Enabled = false;  	exportSaveToolStripMenuItem1.Enabled = false;  	exportButton.Enabled = false;  	break;  case 5:  //Deleted middle link  case 6:  	//Deleted end link  	disableEditItems ();  	break;  case 7:  	//Corrupted  	disableEditItems ();  	removeSaveformatSlotsToolStripMenuItem.Enabled = true;  	removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,enableSelectiveEditItems,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 0:  	//Formatted  	disableEditItems ();  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = true;  	paseToolStripMenuItem.Enabled = true;  	importSaveToolStripMenuItem.Enabled = true;  	importSaveToolStripMenuItem1.Enabled = true;  	importButton.Enabled = true;  	break;  case 1:  	//Initial  	enableEditItems ();  	restoreSaveToolStripMenuItem.Enabled = false;  	restoreSaveToolStripMenuItem1.Enabled = false;  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  	paseToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem1.Enabled = false;  	importButton.Enabled = false;  	break;  case 2:  //Middle link  case 3:  	//End link  	disableEditItems ();  	break;  case 4:  	//Deleted initial  	enableEditItems ();  	deleteSaveToolStripMenuItem.Enabled = false;  	deleteSaveToolStripMenuItem1.Enabled = false;  	pasteSaveFromTemporaryBufferToolStripMenuItem.Enabled = false;  	paseToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem.Enabled = false;  	importSaveToolStripMenuItem1.Enabled = false;  	importButton.Enabled = false;  	exportSaveToolStripMenuItem.Enabled = false;  	exportSaveToolStripMenuItem1.Enabled = false;  	exportButton.Enabled = false;  	break;  case 5:  //Deleted middle link  case 6:  	//Deleted end link  	disableEditItems ();  	break;  case 7:  	//Corrupted  	disableEditItems ();  	removeSaveformatSlotsToolStripMenuItem.Enabled = true;  	removeSaveformatSlotsToolStripMenuItem1.Enabled = true;  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		//Get data to work with  		fetchedData = PScard [listIndex].getSaveBytes (slotNumber);  		fetchedDataTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  		//Check if selected saves have the same size  		if (fetchedData.Length != tempBuffer.Length) {  			new messageWindow ().ShowMessage (this' appName' "Save file size mismatch. Saves can't be compared."' "OK"' null' true);  			return;  		}  		//Show compare window  		new compareWindow ().initializeDialog (this' appName' fetchedData' fetchedDataTitle' tempBuffer' tempBufferName + " (temp buffer)");  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		//Get data to work with  		fetchedData = PScard [listIndex].getSaveBytes (slotNumber);  		fetchedDataTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  		//Check if selected saves have the same size  		if (fetchedData.Length != tempBuffer.Length) {  			new messageWindow ().ShowMessage (this' appName' "Save file size mismatch. Saves can't be compared."' "OK"' null' true);  			return;  		}  		//Show compare window  		new compareWindow ().initializeDialog (this' appName' fetchedData' fetchedDataTitle' tempBuffer' tempBufferName + " (temp buffer)");  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		//Get data to work with  		fetchedData = PScard [listIndex].getSaveBytes (slotNumber);  		fetchedDataTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  		//Check if selected saves have the same size  		if (fetchedData.Length != tempBuffer.Length) {  			new messageWindow ().ShowMessage (this' appName' "Save file size mismatch. Saves can't be compared."' "OK"' null' true);  			return;  		}  		//Show compare window  		new compareWindow ().initializeDialog (this' appName' fetchedData' fetchedDataTitle' tempBuffer' tempBufferName + " (temp buffer)");  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		//Get data to work with  		fetchedData = PScard [listIndex].getSaveBytes (slotNumber);  		fetchedDataTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  		//Check if selected saves have the same size  		if (fetchedData.Length != tempBuffer.Length) {  			new messageWindow ().ShowMessage (this' appName' "Save file size mismatch. Saves can't be compared."' "OK"' null' true);  			return;  		}  		//Show compare window  		new compareWindow ().initializeDialog (this' appName' fetchedData' fetchedDataTitle' tempBuffer' tempBufferName + " (temp buffer)");  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The following statement contains a magic number: if (PScard.Count > 0) {  	int listIndex = mainTabControl.SelectedIndex;  	//Check if a save is selected  	if (cardList [listIndex].SelectedIndices.Count == 0)  		return;  	int slotNumber = cardList [listIndex].SelectedIndices [0];  	//Check the save type  	switch (PScard [listIndex].saveType [slotNumber]) {  	default:  		break;  	case 1:  	//Initial save  	case 4:  		//Deleted initial  		//Get data to work with  		fetchedData = PScard [listIndex].getSaveBytes (slotNumber);  		fetchedDataTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  		//Check if selected saves have the same size  		if (fetchedData.Length != tempBuffer.Length) {  			new messageWindow ().ShowMessage (this' appName' "Save file size mismatch. Saves can't be compared."' "OK"' null' true);  			return;  		}  		//Show compare window  		new compareWindow ().initializeDialog (this' appName' fetchedData' fetchedDataTitle' tempBuffer' tempBufferName + " (temp buffer)");  		break;  	case 2:  	case 3:  	case 5:  	case 6:  		new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  		break;  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	//Get data to work with  	fetchedData = PScard [listIndex].getSaveBytes (slotNumber);  	fetchedDataTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	//Check if selected saves have the same size  	if (fetchedData.Length != tempBuffer.Length) {  		new messageWindow ().ShowMessage (this' appName' "Save file size mismatch. Saves can't be compared."' "OK"' null' true);  		return;  	}  	//Show compare window  	new compareWindow ().initializeDialog (this' appName' fetchedData' fetchedDataTitle' tempBuffer' tempBufferName + " (temp buffer)");  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	//Get data to work with  	fetchedData = PScard [listIndex].getSaveBytes (slotNumber);  	fetchedDataTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	//Check if selected saves have the same size  	if (fetchedData.Length != tempBuffer.Length) {  		new messageWindow ().ShowMessage (this' appName' "Save file size mismatch. Saves can't be compared."' "OK"' null' true);  		return;  	}  	//Show compare window  	new compareWindow ().initializeDialog (this' appName' fetchedData' fetchedDataTitle' tempBuffer' tempBufferName + " (temp buffer)");  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	//Get data to work with  	fetchedData = PScard [listIndex].getSaveBytes (slotNumber);  	fetchedDataTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	//Check if selected saves have the same size  	if (fetchedData.Length != tempBuffer.Length) {  		new messageWindow ().ShowMessage (this' appName' "Save file size mismatch. Saves can't be compared."' "OK"' null' true);  		return;  	}  	//Show compare window  	new compareWindow ().initializeDialog (this' appName' fetchedData' fetchedDataTitle' tempBuffer' tempBufferName + " (temp buffer)");  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	//Get data to work with  	fetchedData = PScard [listIndex].getSaveBytes (slotNumber);  	fetchedDataTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	//Check if selected saves have the same size  	if (fetchedData.Length != tempBuffer.Length) {  		new messageWindow ().ShowMessage (this' appName' "Save file size mismatch. Saves can't be compared."' "OK"' null' true);  		return;  	}  	//Show compare window  	new compareWindow ().initializeDialog (this' appName' fetchedData' fetchedDataTitle' tempBuffer' tempBufferName + " (temp buffer)");  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,compareSaveWithTemp,The following statement contains a magic number: switch (PScard [listIndex].saveType [slotNumber]) {  default:  	break;  case 1:  //Initial save  case 4:  	//Deleted initial  	//Get data to work with  	fetchedData = PScard [listIndex].getSaveBytes (slotNumber);  	fetchedDataTitle = PScard [listIndex].saveName [slotNumber' mainSettings.titleEncoding];  	//Check if selected saves have the same size  	if (fetchedData.Length != tempBuffer.Length) {  		new messageWindow ().ShowMessage (this' appName' "Save file size mismatch. Saves can't be compared."' "OK"' null' true);  		return;  	}  	//Show compare window  	new compareWindow ().initializeDialog (this' appName' fetchedData' fetchedDataTitle' tempBuffer' tempBufferName + " (temp buffer)");  	break;  case 2:  case 3:  case 5:  case 6:  	new messageWindow ().ShowMessage (this' appName' "The selected slot is linked. Select the initial save slot to proceed."' "OK"' null' true);  	break;  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,mainWindow_Paint,The following statement contains a magic number: if (windowGlass.isGlassSupported () && mainSettings.glassStatusBar == 1) {  	Brush blackBrush = new SolidBrush (Color.Black);  	Graphics windowGraphics = e.Graphics;  	//Create a black rectangle for Aero glass  	windowGraphics.FillRectangle (blackBrush' windowRectangle);  	//Show path of the currently active card  	windowGlass.DrawTextOnGlass (this.Handle' toolString.Text' new Font ("Segoe UI"' 9f' FontStyle.Regular)' windowRectangle' 10);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,mainWindow_Paint,The following statement contains a magic number: windowGlass.DrawTextOnGlass (this.Handle' toolString.Text' new Font ("Segoe UI"' 9f' FontStyle.Regular)' windowRectangle' 10);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,WndProc,The following statement contains a magic number: if (message.Msg == glassSupport.WM_NCHITTEST && message.Result.ToInt32 () == glassSupport.HTCLIENT) {  	//Check if DWM composition is enabled  	if (windowGlass.isGlassSupported () && mainSettings.glassStatusBar == 1) {  		int mouseX = (message.LParam.ToInt32 () & 0xFFFF);  		int mouseY = (message.LParam.ToInt32 () >> 16);  		Point windowPoint = this.PointToClient (new Point (mouseX' mouseY));  		//Check if the clicked area is on glass  		if (windowRectangle.Contains (windowPoint))  			message.Result = new IntPtr (glassSupport.HTCAPTION);  	}  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,WndProc,The following statement contains a magic number: if (windowGlass.isGlassSupported () && mainSettings.glassStatusBar == 1) {  	int mouseX = (message.LParam.ToInt32 () & 0xFFFF);  	int mouseY = (message.LParam.ToInt32 () >> 16);  	Point windowPoint = this.PointToClient (new Point (mouseX' mouseY));  	//Check if the clicked area is on glass  	if (windowRectangle.Contains (windowPoint))  		message.Result = new IntPtr (glassSupport.HTCAPTION);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,dexDriveMenuWrite_Click,The following statement contains a magic number: if (PScard.Count > 0) {  	//Open a DexDrive communication window  	new cardReaderWindow ().writeMemoryCardDexDrive (this' appName' mainSettings.communicationPort' PScard [listIndex].saveMemoryCardStream ()' 1024);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,dexDriveMenuWrite_Click,The following statement contains a magic number: new cardReaderWindow ().writeMemoryCardDexDrive (this' appName' mainSettings.communicationPort' PScard [listIndex].saveMemoryCardStream ()' 1024);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,memCARDuinoMenuWrite_Click,The following statement contains a magic number: if (PScard.Count > 0) {  	//Open a DexDrive communication window  	new cardReaderWindow ().writeMemoryCardCARDuino (this' appName' mainSettings.communicationPort' PScard [listIndex].saveMemoryCardStream ()' 1024);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,memCARDuinoMenuWrite_Click,The following statement contains a magic number: new cardReaderWindow ().writeMemoryCardCARDuino (this' appName' mainSettings.communicationPort' PScard [listIndex].saveMemoryCardStream ()' 1024);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,pS1CardLinkMenuWrite_Click,The following statement contains a magic number: if (PScard.Count > 0) {  	//Open a DexDrive communication window  	new cardReaderWindow ().writeMemoryCardPS1CLnk (this' appName' mainSettings.communicationPort' PScard [listIndex].saveMemoryCardStream ()' 1024);  }  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,pS1CardLinkMenuWrite_Click,The following statement contains a magic number: new cardReaderWindow ().writeMemoryCardPS1CLnk (this' appName' mainSettings.communicationPort' PScard [listIndex].saveMemoryCardStream ()' 1024);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,pS1CardLinkMenuFormat_Click,The following statement contains a magic number: formatHardwareCard (2);  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatHardwareCard,The following statement contains a magic number: if (mainSettings.formatType == 0)  	frameNumber = 64;  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatHardwareCard,The following statement contains a magic number: frameNumber = 64;  
Magic Number,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatHardwareCard,The following statement contains a magic number: switch (hardDevice) {  case 0:  	//DexDrive  	new cardReaderWindow ().writeMemoryCardDexDrive (this' appName' mainSettings.communicationPort' blankCard.saveMemoryCardStream ()' frameNumber);  	break;  case 1:  	//MemCARDuino  	new cardReaderWindow ().writeMemoryCardCARDuino (this' appName' mainSettings.communicationPort' blankCard.saveMemoryCardStream ()' frameNumber);  	break;  case 2:  	//PS1CardLink  	new cardReaderWindow ().writeMemoryCardPS1CLnk (this' appName' mainSettings.communicationPort' blankCard.saveMemoryCardStream ()' frameNumber);  	break;  }  
Magic Number,MemcardRex,messageWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\messageWindow.cs,ShowMessage,The following statement contains a magic number: if (Button2Selected == true)  	Button1.TabIndex = 3;  
Magic Number,MemcardRex,messageWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\messageWindow.cs,ShowMessage,The following statement contains a magic number: Button1.TabIndex = 3;  
Magic Number,MemcardRex,messageWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\messageWindow.cs,ShowMessage,The following statement contains a magic number: this.ClientSize = new Size (MessageLabel.Width + 32' MessageLabel.Height + 80);  
Magic Number,MemcardRex,messageWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\messageWindow.cs,ShowMessage,The following statement contains a magic number: this.ClientSize = new Size (MessageLabel.Width + 32' MessageLabel.Height + 80);  
Magic Number,MemcardRex,messageWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\messageWindow.cs,ShowMessage,The following statement contains a magic number: BackgroundColorLabel.Size = new Size (120' Button1.Location.Y - 6);  
Magic Number,MemcardRex,messageWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\messageWindow.cs,ShowMessage,The following statement contains a magic number: BackgroundColorLabel.Size = new Size (120' Button1.Location.Y - 6);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		headerData [slotNumber' currentByte] = rawMemoryCard [128 + (slotNumber * 128) + currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		saveData [slotNumber' currentByte] = rawMemoryCard [8192 + (slotNumber * 8192) + currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		headerData [slotNumber' currentByte] = rawMemoryCard [128 + (slotNumber * 128) + currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		saveData [slotNumber' currentByte] = rawMemoryCard [8192 + (slotNumber * 8192) + currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		headerData [slotNumber' currentByte] = rawMemoryCard [128 + (slotNumber * 128) + currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		saveData [slotNumber' currentByte] = rawMemoryCard [8192 + (slotNumber * 8192) + currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		headerData [slotNumber' currentByte] = rawMemoryCard [128 + (slotNumber * 128) + currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		saveData [slotNumber' currentByte] = rawMemoryCard [8192 + (slotNumber * 8192) + currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		headerData [slotNumber' currentByte] = rawMemoryCard [128 + (slotNumber * 128) + currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		saveData [slotNumber' currentByte] = rawMemoryCard [8192 + (slotNumber * 8192) + currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		headerData [slotNumber' currentByte] = rawMemoryCard [128 + (slotNumber * 128) + currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		saveData [slotNumber' currentByte] = rawMemoryCard [8192 + (slotNumber * 8192) + currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		headerData [slotNumber' currentByte] = rawMemoryCard [128 + (slotNumber * 128) + currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		saveData [slotNumber' currentByte] = rawMemoryCard [8192 + (slotNumber * 8192) + currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int currentByte = 0; currentByte < 128; currentByte++) {  	headerData [slotNumber' currentByte] = rawMemoryCard [128 + (slotNumber * 128) + currentByte];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int currentByte = 0; currentByte < 128; currentByte++) {  	headerData [slotNumber' currentByte] = rawMemoryCard [128 + (slotNumber * 128) + currentByte];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int currentByte = 0; currentByte < 128; currentByte++) {  	headerData [slotNumber' currentByte] = rawMemoryCard [128 + (slotNumber * 128) + currentByte];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: headerData [slotNumber' currentByte] = rawMemoryCard [128 + (slotNumber * 128) + currentByte];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: headerData [slotNumber' currentByte] = rawMemoryCard [128 + (slotNumber * 128) + currentByte];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int currentByte = 0; currentByte < 8192; currentByte++) {  	saveData [slotNumber' currentByte] = rawMemoryCard [8192 + (slotNumber * 8192) + currentByte];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int currentByte = 0; currentByte < 8192; currentByte++) {  	saveData [slotNumber' currentByte] = rawMemoryCard [8192 + (slotNumber * 8192) + currentByte];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: for (int currentByte = 0; currentByte < 8192; currentByte++) {  	saveData [slotNumber' currentByte] = rawMemoryCard [8192 + (slotNumber * 8192) + currentByte];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: saveData [slotNumber' currentByte] = rawMemoryCard [8192 + (slotNumber * 8192) + currentByte];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataFromRawCard,The following statement contains a magic number: saveData [slotNumber' currentByte] = rawMemoryCard [8192 + (slotNumber * 8192) + currentByte];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard = new byte[131072];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [127] = 0x0E;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [8064] = 0x4D;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [8065] = 0x43;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [8191] = 0x0E;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		rawMemoryCard [128 + (slotNumber * 128) + currentByte] = headerData [slotNumber' currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		rawMemoryCard [8192 + (slotNumber * 8192) + currentByte] = saveData [slotNumber' currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		rawMemoryCard [128 + (slotNumber * 128) + currentByte] = headerData [slotNumber' currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		rawMemoryCard [8192 + (slotNumber * 8192) + currentByte] = saveData [slotNumber' currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		rawMemoryCard [128 + (slotNumber * 128) + currentByte] = headerData [slotNumber' currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		rawMemoryCard [8192 + (slotNumber * 8192) + currentByte] = saveData [slotNumber' currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		rawMemoryCard [128 + (slotNumber * 128) + currentByte] = headerData [slotNumber' currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		rawMemoryCard [8192 + (slotNumber * 8192) + currentByte] = saveData [slotNumber' currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		rawMemoryCard [128 + (slotNumber * 128) + currentByte] = headerData [slotNumber' currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		rawMemoryCard [8192 + (slotNumber * 8192) + currentByte] = saveData [slotNumber' currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		rawMemoryCard [128 + (slotNumber * 128) + currentByte] = headerData [slotNumber' currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		rawMemoryCard [8192 + (slotNumber * 8192) + currentByte] = saveData [slotNumber' currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Load header data  	for (int currentByte = 0; currentByte < 128; currentByte++) {  		rawMemoryCard [128 + (slotNumber * 128) + currentByte] = headerData [slotNumber' currentByte];  	}  	//Load save data  	for (int currentByte = 0; currentByte < 8192; currentByte++) {  		rawMemoryCard [8192 + (slotNumber * 8192) + currentByte] = saveData [slotNumber' currentByte];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int currentByte = 0; currentByte < 128; currentByte++) {  	rawMemoryCard [128 + (slotNumber * 128) + currentByte] = headerData [slotNumber' currentByte];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int currentByte = 0; currentByte < 128; currentByte++) {  	rawMemoryCard [128 + (slotNumber * 128) + currentByte] = headerData [slotNumber' currentByte];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int currentByte = 0; currentByte < 128; currentByte++) {  	rawMemoryCard [128 + (slotNumber * 128) + currentByte] = headerData [slotNumber' currentByte];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [128 + (slotNumber * 128) + currentByte] = headerData [slotNumber' currentByte];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [128 + (slotNumber * 128) + currentByte] = headerData [slotNumber' currentByte];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int currentByte = 0; currentByte < 8192; currentByte++) {  	rawMemoryCard [8192 + (slotNumber * 8192) + currentByte] = saveData [slotNumber' currentByte];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int currentByte = 0; currentByte < 8192; currentByte++) {  	rawMemoryCard [8192 + (slotNumber * 8192) + currentByte] = saveData [slotNumber' currentByte];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int currentByte = 0; currentByte < 8192; currentByte++) {  	rawMemoryCard [8192 + (slotNumber * 8192) + currentByte] = saveData [slotNumber' currentByte];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [8192 + (slotNumber * 8192) + currentByte] = saveData [slotNumber' currentByte];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [8192 + (slotNumber * 8192) + currentByte] = saveData [slotNumber' currentByte];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	//Reserved slot typed  	rawMemoryCard [2048 + (i * 128)] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  	//Next slot pointer doesn't point to anything  	rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  	rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128)] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128)] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 1] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 2] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 3] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 8] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadDataToRawCard,The following statement contains a magic number: rawMemoryCard [2048 + (i * 128) + 9] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader = new byte[3904];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [2] = 0x33;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [3] = 0x2D;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [4] = 0x34;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [5] = 0x35;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [6] = 0x36;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [7] = 0x2D;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [8] = 0x53;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [9] = 0x54;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [10] = 0x44;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [18] = 0x1;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [20] = 0x1;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [21] = 0x4D;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	gmeHeader [22 + slotNumber] = headerData [slotNumber' 0];  	gmeHeader [38 + slotNumber] = headerData [slotNumber' 8];  	//Convert string from UTF-16 to currently used codepage  	tempByteArray = Encoding.Convert (Encoding.Unicode' Encoding.Default' Encoding.Unicode.GetBytes (saveComments [slotNumber]));  	//Inject comments to GME header  	for (int byteCount = 0; byteCount < tempByteArray.Length; byteCount++)  		gmeHeader [byteCount + 64 + (256 * slotNumber)] = tempByteArray [byteCount];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	gmeHeader [22 + slotNumber] = headerData [slotNumber' 0];  	gmeHeader [38 + slotNumber] = headerData [slotNumber' 8];  	//Convert string from UTF-16 to currently used codepage  	tempByteArray = Encoding.Convert (Encoding.Unicode' Encoding.Default' Encoding.Unicode.GetBytes (saveComments [slotNumber]));  	//Inject comments to GME header  	for (int byteCount = 0; byteCount < tempByteArray.Length; byteCount++)  		gmeHeader [byteCount + 64 + (256 * slotNumber)] = tempByteArray [byteCount];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	gmeHeader [22 + slotNumber] = headerData [slotNumber' 0];  	gmeHeader [38 + slotNumber] = headerData [slotNumber' 8];  	//Convert string from UTF-16 to currently used codepage  	tempByteArray = Encoding.Convert (Encoding.Unicode' Encoding.Default' Encoding.Unicode.GetBytes (saveComments [slotNumber]));  	//Inject comments to GME header  	for (int byteCount = 0; byteCount < tempByteArray.Length; byteCount++)  		gmeHeader [byteCount + 64 + (256 * slotNumber)] = tempByteArray [byteCount];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	gmeHeader [22 + slotNumber] = headerData [slotNumber' 0];  	gmeHeader [38 + slotNumber] = headerData [slotNumber' 8];  	//Convert string from UTF-16 to currently used codepage  	tempByteArray = Encoding.Convert (Encoding.Unicode' Encoding.Default' Encoding.Unicode.GetBytes (saveComments [slotNumber]));  	//Inject comments to GME header  	for (int byteCount = 0; byteCount < tempByteArray.Length; byteCount++)  		gmeHeader [byteCount + 64 + (256 * slotNumber)] = tempByteArray [byteCount];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	gmeHeader [22 + slotNumber] = headerData [slotNumber' 0];  	gmeHeader [38 + slotNumber] = headerData [slotNumber' 8];  	//Convert string from UTF-16 to currently used codepage  	tempByteArray = Encoding.Convert (Encoding.Unicode' Encoding.Default' Encoding.Unicode.GetBytes (saveComments [slotNumber]));  	//Inject comments to GME header  	for (int byteCount = 0; byteCount < tempByteArray.Length; byteCount++)  		gmeHeader [byteCount + 64 + (256 * slotNumber)] = tempByteArray [byteCount];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	gmeHeader [22 + slotNumber] = headerData [slotNumber' 0];  	gmeHeader [38 + slotNumber] = headerData [slotNumber' 8];  	//Convert string from UTF-16 to currently used codepage  	tempByteArray = Encoding.Convert (Encoding.Unicode' Encoding.Default' Encoding.Unicode.GetBytes (saveComments [slotNumber]));  	//Inject comments to GME header  	for (int byteCount = 0; byteCount < tempByteArray.Length; byteCount++)  		gmeHeader [byteCount + 64 + (256 * slotNumber)] = tempByteArray [byteCount];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [22 + slotNumber] = headerData [slotNumber' 0];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [38 + slotNumber] = headerData [slotNumber' 8];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [38 + slotNumber] = headerData [slotNumber' 8];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: for (int byteCount = 0; byteCount < tempByteArray.Length; byteCount++)  	gmeHeader [byteCount + 64 + (256 * slotNumber)] = tempByteArray [byteCount];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: for (int byteCount = 0; byteCount < tempByteArray.Length; byteCount++)  	gmeHeader [byteCount + 64 + (256 * slotNumber)] = tempByteArray [byteCount];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [byteCount + 64 + (256 * slotNumber)] = tempByteArray [byteCount];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,fillGmeHeader,The following statement contains a magic number: gmeHeader [byteCount + 64 + (256 * slotNumber)] = tempByteArray [byteCount];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getVGSheader,The following statement contains a magic number: vgsHeader [2] = 0x73;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getVGSheader,The following statement contains a magic number: vgsHeader [3] = 0x4D;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getVGSheader,The following statement contains a magic number: vgsHeader [4] = 0x1;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getVGSheader,The following statement contains a magic number: vgsHeader [8] = 0x1;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getVGSheader,The following statement contains a magic number: vgsHeader [12] = 0x1;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getVGSheader,The following statement contains a magic number: vgsHeader [17] = 0x2;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: saveType = new byte[15];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	switch (headerData [slotNumber' 0]) {  	default:  		//Regular values have not been found' save is corrupted  		saveType [slotNumber] = 7;  		break;  	case 0xA0:  		//Formatted  		saveType [slotNumber] = 0;  		break;  	case 0x51:  		//Initial  		saveType [slotNumber] = 1;  		break;  	case 0x52:  		//Middle link  		saveType [slotNumber] = 2;  		break;  	case 0x53:  		//End link  		saveType [slotNumber] = 3;  		break;  	case 0xA1:  		//Initial deleted  		saveType [slotNumber] = 4;  		break;  	case 0xA2:  		//Middle link deleted  		saveType [slotNumber] = 5;  		break;  	case 0xA3:  		//End link deleted  		saveType [slotNumber] = 6;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	switch (headerData [slotNumber' 0]) {  	default:  		//Regular values have not been found' save is corrupted  		saveType [slotNumber] = 7;  		break;  	case 0xA0:  		//Formatted  		saveType [slotNumber] = 0;  		break;  	case 0x51:  		//Initial  		saveType [slotNumber] = 1;  		break;  	case 0x52:  		//Middle link  		saveType [slotNumber] = 2;  		break;  	case 0x53:  		//End link  		saveType [slotNumber] = 3;  		break;  	case 0xA1:  		//Initial deleted  		saveType [slotNumber] = 4;  		break;  	case 0xA2:  		//Middle link deleted  		saveType [slotNumber] = 5;  		break;  	case 0xA3:  		//End link deleted  		saveType [slotNumber] = 6;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	switch (headerData [slotNumber' 0]) {  	default:  		//Regular values have not been found' save is corrupted  		saveType [slotNumber] = 7;  		break;  	case 0xA0:  		//Formatted  		saveType [slotNumber] = 0;  		break;  	case 0x51:  		//Initial  		saveType [slotNumber] = 1;  		break;  	case 0x52:  		//Middle link  		saveType [slotNumber] = 2;  		break;  	case 0x53:  		//End link  		saveType [slotNumber] = 3;  		break;  	case 0xA1:  		//Initial deleted  		saveType [slotNumber] = 4;  		break;  	case 0xA2:  		//Middle link deleted  		saveType [slotNumber] = 5;  		break;  	case 0xA3:  		//End link deleted  		saveType [slotNumber] = 6;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	switch (headerData [slotNumber' 0]) {  	default:  		//Regular values have not been found' save is corrupted  		saveType [slotNumber] = 7;  		break;  	case 0xA0:  		//Formatted  		saveType [slotNumber] = 0;  		break;  	case 0x51:  		//Initial  		saveType [slotNumber] = 1;  		break;  	case 0x52:  		//Middle link  		saveType [slotNumber] = 2;  		break;  	case 0x53:  		//End link  		saveType [slotNumber] = 3;  		break;  	case 0xA1:  		//Initial deleted  		saveType [slotNumber] = 4;  		break;  	case 0xA2:  		//Middle link deleted  		saveType [slotNumber] = 5;  		break;  	case 0xA3:  		//End link deleted  		saveType [slotNumber] = 6;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	switch (headerData [slotNumber' 0]) {  	default:  		//Regular values have not been found' save is corrupted  		saveType [slotNumber] = 7;  		break;  	case 0xA0:  		//Formatted  		saveType [slotNumber] = 0;  		break;  	case 0x51:  		//Initial  		saveType [slotNumber] = 1;  		break;  	case 0x52:  		//Middle link  		saveType [slotNumber] = 2;  		break;  	case 0x53:  		//End link  		saveType [slotNumber] = 3;  		break;  	case 0xA1:  		//Initial deleted  		saveType [slotNumber] = 4;  		break;  	case 0xA2:  		//Middle link deleted  		saveType [slotNumber] = 5;  		break;  	case 0xA3:  		//End link deleted  		saveType [slotNumber] = 6;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	switch (headerData [slotNumber' 0]) {  	default:  		//Regular values have not been found' save is corrupted  		saveType [slotNumber] = 7;  		break;  	case 0xA0:  		//Formatted  		saveType [slotNumber] = 0;  		break;  	case 0x51:  		//Initial  		saveType [slotNumber] = 1;  		break;  	case 0x52:  		//Middle link  		saveType [slotNumber] = 2;  		break;  	case 0x53:  		//End link  		saveType [slotNumber] = 3;  		break;  	case 0xA1:  		//Initial deleted  		saveType [slotNumber] = 4;  		break;  	case 0xA2:  		//Middle link deleted  		saveType [slotNumber] = 5;  		break;  	case 0xA3:  		//End link deleted  		saveType [slotNumber] = 6;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	switch (headerData [slotNumber' 0]) {  	default:  		//Regular values have not been found' save is corrupted  		saveType [slotNumber] = 7;  		break;  	case 0xA0:  		//Formatted  		saveType [slotNumber] = 0;  		break;  	case 0x51:  		//Initial  		saveType [slotNumber] = 1;  		break;  	case 0x52:  		//Middle link  		saveType [slotNumber] = 2;  		break;  	case 0x53:  		//End link  		saveType [slotNumber] = 3;  		break;  	case 0xA1:  		//Initial deleted  		saveType [slotNumber] = 4;  		break;  	case 0xA2:  		//Middle link deleted  		saveType [slotNumber] = 5;  		break;  	case 0xA3:  		//End link deleted  		saveType [slotNumber] = 6;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: switch (headerData [slotNumber' 0]) {  default:  	//Regular values have not been found' save is corrupted  	saveType [slotNumber] = 7;  	break;  case 0xA0:  	//Formatted  	saveType [slotNumber] = 0;  	break;  case 0x51:  	//Initial  	saveType [slotNumber] = 1;  	break;  case 0x52:  	//Middle link  	saveType [slotNumber] = 2;  	break;  case 0x53:  	//End link  	saveType [slotNumber] = 3;  	break;  case 0xA1:  	//Initial deleted  	saveType [slotNumber] = 4;  	break;  case 0xA2:  	//Middle link deleted  	saveType [slotNumber] = 5;  	break;  case 0xA3:  	//End link deleted  	saveType [slotNumber] = 6;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: switch (headerData [slotNumber' 0]) {  default:  	//Regular values have not been found' save is corrupted  	saveType [slotNumber] = 7;  	break;  case 0xA0:  	//Formatted  	saveType [slotNumber] = 0;  	break;  case 0x51:  	//Initial  	saveType [slotNumber] = 1;  	break;  case 0x52:  	//Middle link  	saveType [slotNumber] = 2;  	break;  case 0x53:  	//End link  	saveType [slotNumber] = 3;  	break;  case 0xA1:  	//Initial deleted  	saveType [slotNumber] = 4;  	break;  case 0xA2:  	//Middle link deleted  	saveType [slotNumber] = 5;  	break;  case 0xA3:  	//End link deleted  	saveType [slotNumber] = 6;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: switch (headerData [slotNumber' 0]) {  default:  	//Regular values have not been found' save is corrupted  	saveType [slotNumber] = 7;  	break;  case 0xA0:  	//Formatted  	saveType [slotNumber] = 0;  	break;  case 0x51:  	//Initial  	saveType [slotNumber] = 1;  	break;  case 0x52:  	//Middle link  	saveType [slotNumber] = 2;  	break;  case 0x53:  	//End link  	saveType [slotNumber] = 3;  	break;  case 0xA1:  	//Initial deleted  	saveType [slotNumber] = 4;  	break;  case 0xA2:  	//Middle link deleted  	saveType [slotNumber] = 5;  	break;  case 0xA3:  	//End link deleted  	saveType [slotNumber] = 6;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: switch (headerData [slotNumber' 0]) {  default:  	//Regular values have not been found' save is corrupted  	saveType [slotNumber] = 7;  	break;  case 0xA0:  	//Formatted  	saveType [slotNumber] = 0;  	break;  case 0x51:  	//Initial  	saveType [slotNumber] = 1;  	break;  case 0x52:  	//Middle link  	saveType [slotNumber] = 2;  	break;  case 0x53:  	//End link  	saveType [slotNumber] = 3;  	break;  case 0xA1:  	//Initial deleted  	saveType [slotNumber] = 4;  	break;  case 0xA2:  	//Middle link deleted  	saveType [slotNumber] = 5;  	break;  case 0xA3:  	//End link deleted  	saveType [slotNumber] = 6;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: switch (headerData [slotNumber' 0]) {  default:  	//Regular values have not been found' save is corrupted  	saveType [slotNumber] = 7;  	break;  case 0xA0:  	//Formatted  	saveType [slotNumber] = 0;  	break;  case 0x51:  	//Initial  	saveType [slotNumber] = 1;  	break;  case 0x52:  	//Middle link  	saveType [slotNumber] = 2;  	break;  case 0x53:  	//End link  	saveType [slotNumber] = 3;  	break;  case 0xA1:  	//Initial deleted  	saveType [slotNumber] = 4;  	break;  case 0xA2:  	//Middle link deleted  	saveType [slotNumber] = 5;  	break;  case 0xA3:  	//End link deleted  	saveType [slotNumber] = 6;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: switch (headerData [slotNumber' 0]) {  default:  	//Regular values have not been found' save is corrupted  	saveType [slotNumber] = 7;  	break;  case 0xA0:  	//Formatted  	saveType [slotNumber] = 0;  	break;  case 0x51:  	//Initial  	saveType [slotNumber] = 1;  	break;  case 0x52:  	//Middle link  	saveType [slotNumber] = 2;  	break;  case 0x53:  	//End link  	saveType [slotNumber] = 3;  	break;  case 0xA1:  	//Initial deleted  	saveType [slotNumber] = 4;  	break;  case 0xA2:  	//Middle link deleted  	saveType [slotNumber] = 5;  	break;  case 0xA3:  	//End link deleted  	saveType [slotNumber] = 6;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: saveType [slotNumber] = 7;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: saveType [slotNumber] = 2;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: saveType [slotNumber] = 3;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: saveType [slotNumber] = 4;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: saveType [slotNumber] = 5;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSlotTypes,The following statement contains a magic number: saveType [slotNumber] = 6;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: saveProdCode = new string[15];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: saveIdentifier = new string[15];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: saveName = new string[15' 2];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: saveName = new string[15' 2];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Copy Product code  	tempByteArray = new byte[10];  	for (int byteCount = 0; byteCount < 10; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  	//Convert Product Code from currently used codepage to UTF-16  	saveProdCode [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy Identifier  	tempByteArray = new byte[8];  	for (int byteCount = 0; byteCount < 8; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  	//Convert Identifier from currently used codepage to UTF-16  	saveIdentifier [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy bytes from save data to temp array  	tempByteArray = new byte[64];  	for (int currentByte = 0; currentByte < 64; currentByte++) {  		tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  	}  	//Convert save name from Shift-JIS to UTF-16 as ASCII equivalent  	saveName [slotNumber' 0] = SJISC.convertSJIStoASCII (tempByteArray);  	//Convert save name from Shift-JIS to UTF-16  	saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  	//Check if the title converted properly' get ASCII if it didn't  	if (saveName [slotNumber' 0] == null)  		saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Copy Product code  	tempByteArray = new byte[10];  	for (int byteCount = 0; byteCount < 10; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  	//Convert Product Code from currently used codepage to UTF-16  	saveProdCode [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy Identifier  	tempByteArray = new byte[8];  	for (int byteCount = 0; byteCount < 8; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  	//Convert Identifier from currently used codepage to UTF-16  	saveIdentifier [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy bytes from save data to temp array  	tempByteArray = new byte[64];  	for (int currentByte = 0; currentByte < 64; currentByte++) {  		tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  	}  	//Convert save name from Shift-JIS to UTF-16 as ASCII equivalent  	saveName [slotNumber' 0] = SJISC.convertSJIStoASCII (tempByteArray);  	//Convert save name from Shift-JIS to UTF-16  	saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  	//Check if the title converted properly' get ASCII if it didn't  	if (saveName [slotNumber' 0] == null)  		saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Copy Product code  	tempByteArray = new byte[10];  	for (int byteCount = 0; byteCount < 10; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  	//Convert Product Code from currently used codepage to UTF-16  	saveProdCode [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy Identifier  	tempByteArray = new byte[8];  	for (int byteCount = 0; byteCount < 8; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  	//Convert Identifier from currently used codepage to UTF-16  	saveIdentifier [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy bytes from save data to temp array  	tempByteArray = new byte[64];  	for (int currentByte = 0; currentByte < 64; currentByte++) {  		tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  	}  	//Convert save name from Shift-JIS to UTF-16 as ASCII equivalent  	saveName [slotNumber' 0] = SJISC.convertSJIStoASCII (tempByteArray);  	//Convert save name from Shift-JIS to UTF-16  	saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  	//Check if the title converted properly' get ASCII if it didn't  	if (saveName [slotNumber' 0] == null)  		saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Copy Product code  	tempByteArray = new byte[10];  	for (int byteCount = 0; byteCount < 10; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  	//Convert Product Code from currently used codepage to UTF-16  	saveProdCode [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy Identifier  	tempByteArray = new byte[8];  	for (int byteCount = 0; byteCount < 8; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  	//Convert Identifier from currently used codepage to UTF-16  	saveIdentifier [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy bytes from save data to temp array  	tempByteArray = new byte[64];  	for (int currentByte = 0; currentByte < 64; currentByte++) {  		tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  	}  	//Convert save name from Shift-JIS to UTF-16 as ASCII equivalent  	saveName [slotNumber' 0] = SJISC.convertSJIStoASCII (tempByteArray);  	//Convert save name from Shift-JIS to UTF-16  	saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  	//Check if the title converted properly' get ASCII if it didn't  	if (saveName [slotNumber' 0] == null)  		saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Copy Product code  	tempByteArray = new byte[10];  	for (int byteCount = 0; byteCount < 10; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  	//Convert Product Code from currently used codepage to UTF-16  	saveProdCode [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy Identifier  	tempByteArray = new byte[8];  	for (int byteCount = 0; byteCount < 8; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  	//Convert Identifier from currently used codepage to UTF-16  	saveIdentifier [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy bytes from save data to temp array  	tempByteArray = new byte[64];  	for (int currentByte = 0; currentByte < 64; currentByte++) {  		tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  	}  	//Convert save name from Shift-JIS to UTF-16 as ASCII equivalent  	saveName [slotNumber' 0] = SJISC.convertSJIStoASCII (tempByteArray);  	//Convert save name from Shift-JIS to UTF-16  	saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  	//Check if the title converted properly' get ASCII if it didn't  	if (saveName [slotNumber' 0] == null)  		saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Copy Product code  	tempByteArray = new byte[10];  	for (int byteCount = 0; byteCount < 10; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  	//Convert Product Code from currently used codepage to UTF-16  	saveProdCode [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy Identifier  	tempByteArray = new byte[8];  	for (int byteCount = 0; byteCount < 8; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  	//Convert Identifier from currently used codepage to UTF-16  	saveIdentifier [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy bytes from save data to temp array  	tempByteArray = new byte[64];  	for (int currentByte = 0; currentByte < 64; currentByte++) {  		tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  	}  	//Convert save name from Shift-JIS to UTF-16 as ASCII equivalent  	saveName [slotNumber' 0] = SJISC.convertSJIStoASCII (tempByteArray);  	//Convert save name from Shift-JIS to UTF-16  	saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  	//Check if the title converted properly' get ASCII if it didn't  	if (saveName [slotNumber' 0] == null)  		saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Copy Product code  	tempByteArray = new byte[10];  	for (int byteCount = 0; byteCount < 10; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  	//Convert Product Code from currently used codepage to UTF-16  	saveProdCode [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy Identifier  	tempByteArray = new byte[8];  	for (int byteCount = 0; byteCount < 8; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  	//Convert Identifier from currently used codepage to UTF-16  	saveIdentifier [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy bytes from save data to temp array  	tempByteArray = new byte[64];  	for (int currentByte = 0; currentByte < 64; currentByte++) {  		tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  	}  	//Convert save name from Shift-JIS to UTF-16 as ASCII equivalent  	saveName [slotNumber' 0] = SJISC.convertSJIStoASCII (tempByteArray);  	//Convert save name from Shift-JIS to UTF-16  	saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  	//Check if the title converted properly' get ASCII if it didn't  	if (saveName [slotNumber' 0] == null)  		saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Copy Product code  	tempByteArray = new byte[10];  	for (int byteCount = 0; byteCount < 10; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  	//Convert Product Code from currently used codepage to UTF-16  	saveProdCode [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy Identifier  	tempByteArray = new byte[8];  	for (int byteCount = 0; byteCount < 8; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  	//Convert Identifier from currently used codepage to UTF-16  	saveIdentifier [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy bytes from save data to temp array  	tempByteArray = new byte[64];  	for (int currentByte = 0; currentByte < 64; currentByte++) {  		tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  	}  	//Convert save name from Shift-JIS to UTF-16 as ASCII equivalent  	saveName [slotNumber' 0] = SJISC.convertSJIStoASCII (tempByteArray);  	//Convert save name from Shift-JIS to UTF-16  	saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  	//Check if the title converted properly' get ASCII if it didn't  	if (saveName [slotNumber' 0] == null)  		saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Copy Product code  	tempByteArray = new byte[10];  	for (int byteCount = 0; byteCount < 10; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  	//Convert Product Code from currently used codepage to UTF-16  	saveProdCode [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy Identifier  	tempByteArray = new byte[8];  	for (int byteCount = 0; byteCount < 8; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  	//Convert Identifier from currently used codepage to UTF-16  	saveIdentifier [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy bytes from save data to temp array  	tempByteArray = new byte[64];  	for (int currentByte = 0; currentByte < 64; currentByte++) {  		tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  	}  	//Convert save name from Shift-JIS to UTF-16 as ASCII equivalent  	saveName [slotNumber' 0] = SJISC.convertSJIStoASCII (tempByteArray);  	//Convert save name from Shift-JIS to UTF-16  	saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  	//Check if the title converted properly' get ASCII if it didn't  	if (saveName [slotNumber' 0] == null)  		saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Copy Product code  	tempByteArray = new byte[10];  	for (int byteCount = 0; byteCount < 10; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  	//Convert Product Code from currently used codepage to UTF-16  	saveProdCode [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy Identifier  	tempByteArray = new byte[8];  	for (int byteCount = 0; byteCount < 8; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  	//Convert Identifier from currently used codepage to UTF-16  	saveIdentifier [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy bytes from save data to temp array  	tempByteArray = new byte[64];  	for (int currentByte = 0; currentByte < 64; currentByte++) {  		tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  	}  	//Convert save name from Shift-JIS to UTF-16 as ASCII equivalent  	saveName [slotNumber' 0] = SJISC.convertSJIStoASCII (tempByteArray);  	//Convert save name from Shift-JIS to UTF-16  	saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  	//Check if the title converted properly' get ASCII if it didn't  	if (saveName [slotNumber' 0] == null)  		saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Copy Product code  	tempByteArray = new byte[10];  	for (int byteCount = 0; byteCount < 10; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  	//Convert Product Code from currently used codepage to UTF-16  	saveProdCode [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy Identifier  	tempByteArray = new byte[8];  	for (int byteCount = 0; byteCount < 8; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  	//Convert Identifier from currently used codepage to UTF-16  	saveIdentifier [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy bytes from save data to temp array  	tempByteArray = new byte[64];  	for (int currentByte = 0; currentByte < 64; currentByte++) {  		tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  	}  	//Convert save name from Shift-JIS to UTF-16 as ASCII equivalent  	saveName [slotNumber' 0] = SJISC.convertSJIStoASCII (tempByteArray);  	//Convert save name from Shift-JIS to UTF-16  	saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  	//Check if the title converted properly' get ASCII if it didn't  	if (saveName [slotNumber' 0] == null)  		saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Copy Product code  	tempByteArray = new byte[10];  	for (int byteCount = 0; byteCount < 10; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  	//Convert Product Code from currently used codepage to UTF-16  	saveProdCode [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy Identifier  	tempByteArray = new byte[8];  	for (int byteCount = 0; byteCount < 8; byteCount++)  		tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  	//Convert Identifier from currently used codepage to UTF-16  	saveIdentifier [slotNumber] = Encoding.Default.GetString (tempByteArray);  	//Copy bytes from save data to temp array  	tempByteArray = new byte[64];  	for (int currentByte = 0; currentByte < 64; currentByte++) {  		tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  	}  	//Convert save name from Shift-JIS to UTF-16 as ASCII equivalent  	saveName [slotNumber' 0] = SJISC.convertSJIStoASCII (tempByteArray);  	//Convert save name from Shift-JIS to UTF-16  	saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  	//Check if the title converted properly' get ASCII if it didn't  	if (saveName [slotNumber' 0] == null)  		saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: tempByteArray = new byte[10];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int byteCount = 0; byteCount < 10; byteCount++)  	tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int byteCount = 0; byteCount < 10; byteCount++)  	tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: tempByteArray [byteCount] = headerData [slotNumber' byteCount + 12];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: tempByteArray = new byte[8];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int byteCount = 0; byteCount < 8; byteCount++)  	tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int byteCount = 0; byteCount < 8; byteCount++)  	tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: tempByteArray [byteCount] = headerData [slotNumber' byteCount + 22];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: tempByteArray = new byte[64];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int currentByte = 0; currentByte < 64; currentByte++) {  	tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: for (int currentByte = 0; currentByte < 64; currentByte++) {  	tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: tempByteArray [currentByte] = saveData [slotNumber' currentByte + 4];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: saveName [slotNumber' 1] = Encoding.GetEncoding (932).GetString (tempByteArray);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: if (saveName [slotNumber' 0] == null)  	saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadStringData,The following statement contains a magic number: saveName [slotNumber' 0] = Encoding.Default.GetString (tempByteArray' 0' 32);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: saveSize = new int[15];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++)  	saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++)  	saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++)  	saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++)  	saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++)  	saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++)  	saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++)  	saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadSaveSize,The following statement contains a magic number: saveSize [slotNumber] = (headerData [slotNumber' 4] | (headerData [slotNumber' 5] << 8) | (headerData [slotNumber' 6] << 16)) / 1024;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,toggleDeleteSave,The following statement contains a magic number: for (int i = 0; i < saveSlots.Length; i++) {  	//Check the save type  	switch (saveType [saveSlots [i]]) {  	default:  		//Slot should not be deleted  		break;  	case 1:  		//Regular save  		headerData [saveSlots [i]' 0] = 0xA1;  		break;  	case 2:  		//Middle link  		headerData [saveSlots [i]' 0] = 0xA2;  		break;  	case 3:  		//End link  		headerData [saveSlots [i]' 0] = 0xA3;  		break;  	case 4:  		//Regular deleted save  		headerData [saveSlots [i]' 0] = 0x51;  		break;  	case 5:  		//Middle link deleted  		headerData [saveSlots [i]' 0] = 0x52;  		break;  	case 6:  		//End link deleted  		headerData [saveSlots [i]' 0] = 0x53;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,toggleDeleteSave,The following statement contains a magic number: for (int i = 0; i < saveSlots.Length; i++) {  	//Check the save type  	switch (saveType [saveSlots [i]]) {  	default:  		//Slot should not be deleted  		break;  	case 1:  		//Regular save  		headerData [saveSlots [i]' 0] = 0xA1;  		break;  	case 2:  		//Middle link  		headerData [saveSlots [i]' 0] = 0xA2;  		break;  	case 3:  		//End link  		headerData [saveSlots [i]' 0] = 0xA3;  		break;  	case 4:  		//Regular deleted save  		headerData [saveSlots [i]' 0] = 0x51;  		break;  	case 5:  		//Middle link deleted  		headerData [saveSlots [i]' 0] = 0x52;  		break;  	case 6:  		//End link deleted  		headerData [saveSlots [i]' 0] = 0x53;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,toggleDeleteSave,The following statement contains a magic number: for (int i = 0; i < saveSlots.Length; i++) {  	//Check the save type  	switch (saveType [saveSlots [i]]) {  	default:  		//Slot should not be deleted  		break;  	case 1:  		//Regular save  		headerData [saveSlots [i]' 0] = 0xA1;  		break;  	case 2:  		//Middle link  		headerData [saveSlots [i]' 0] = 0xA2;  		break;  	case 3:  		//End link  		headerData [saveSlots [i]' 0] = 0xA3;  		break;  	case 4:  		//Regular deleted save  		headerData [saveSlots [i]' 0] = 0x51;  		break;  	case 5:  		//Middle link deleted  		headerData [saveSlots [i]' 0] = 0x52;  		break;  	case 6:  		//End link deleted  		headerData [saveSlots [i]' 0] = 0x53;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,toggleDeleteSave,The following statement contains a magic number: for (int i = 0; i < saveSlots.Length; i++) {  	//Check the save type  	switch (saveType [saveSlots [i]]) {  	default:  		//Slot should not be deleted  		break;  	case 1:  		//Regular save  		headerData [saveSlots [i]' 0] = 0xA1;  		break;  	case 2:  		//Middle link  		headerData [saveSlots [i]' 0] = 0xA2;  		break;  	case 3:  		//End link  		headerData [saveSlots [i]' 0] = 0xA3;  		break;  	case 4:  		//Regular deleted save  		headerData [saveSlots [i]' 0] = 0x51;  		break;  	case 5:  		//Middle link deleted  		headerData [saveSlots [i]' 0] = 0x52;  		break;  	case 6:  		//End link deleted  		headerData [saveSlots [i]' 0] = 0x53;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,toggleDeleteSave,The following statement contains a magic number: for (int i = 0; i < saveSlots.Length; i++) {  	//Check the save type  	switch (saveType [saveSlots [i]]) {  	default:  		//Slot should not be deleted  		break;  	case 1:  		//Regular save  		headerData [saveSlots [i]' 0] = 0xA1;  		break;  	case 2:  		//Middle link  		headerData [saveSlots [i]' 0] = 0xA2;  		break;  	case 3:  		//End link  		headerData [saveSlots [i]' 0] = 0xA3;  		break;  	case 4:  		//Regular deleted save  		headerData [saveSlots [i]' 0] = 0x51;  		break;  	case 5:  		//Middle link deleted  		headerData [saveSlots [i]' 0] = 0x52;  		break;  	case 6:  		//End link deleted  		headerData [saveSlots [i]' 0] = 0x53;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,toggleDeleteSave,The following statement contains a magic number: switch (saveType [saveSlots [i]]) {  default:  	//Slot should not be deleted  	break;  case 1:  	//Regular save  	headerData [saveSlots [i]' 0] = 0xA1;  	break;  case 2:  	//Middle link  	headerData [saveSlots [i]' 0] = 0xA2;  	break;  case 3:  	//End link  	headerData [saveSlots [i]' 0] = 0xA3;  	break;  case 4:  	//Regular deleted save  	headerData [saveSlots [i]' 0] = 0x51;  	break;  case 5:  	//Middle link deleted  	headerData [saveSlots [i]' 0] = 0x52;  	break;  case 6:  	//End link deleted  	headerData [saveSlots [i]' 0] = 0x53;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,toggleDeleteSave,The following statement contains a magic number: switch (saveType [saveSlots [i]]) {  default:  	//Slot should not be deleted  	break;  case 1:  	//Regular save  	headerData [saveSlots [i]' 0] = 0xA1;  	break;  case 2:  	//Middle link  	headerData [saveSlots [i]' 0] = 0xA2;  	break;  case 3:  	//End link  	headerData [saveSlots [i]' 0] = 0xA3;  	break;  case 4:  	//Regular deleted save  	headerData [saveSlots [i]' 0] = 0x51;  	break;  case 5:  	//Middle link deleted  	headerData [saveSlots [i]' 0] = 0x52;  	break;  case 6:  	//End link deleted  	headerData [saveSlots [i]' 0] = 0x53;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,toggleDeleteSave,The following statement contains a magic number: switch (saveType [saveSlots [i]]) {  default:  	//Slot should not be deleted  	break;  case 1:  	//Regular save  	headerData [saveSlots [i]' 0] = 0xA1;  	break;  case 2:  	//Middle link  	headerData [saveSlots [i]' 0] = 0xA2;  	break;  case 3:  	//End link  	headerData [saveSlots [i]' 0] = 0xA3;  	break;  case 4:  	//Regular deleted save  	headerData [saveSlots [i]' 0] = 0x51;  	break;  case 5:  	//Middle link deleted  	headerData [saveSlots [i]' 0] = 0x52;  	break;  case 6:  	//End link deleted  	headerData [saveSlots [i]' 0] = 0x53;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,toggleDeleteSave,The following statement contains a magic number: switch (saveType [saveSlots [i]]) {  default:  	//Slot should not be deleted  	break;  case 1:  	//Regular save  	headerData [saveSlots [i]' 0] = 0xA1;  	break;  case 2:  	//Middle link  	headerData [saveSlots [i]' 0] = 0xA2;  	break;  case 3:  	//End link  	headerData [saveSlots [i]' 0] = 0xA3;  	break;  case 4:  	//Regular deleted save  	headerData [saveSlots [i]' 0] = 0x51;  	break;  case 5:  	//Middle link deleted  	headerData [saveSlots [i]' 0] = 0x52;  	break;  case 6:  	//End link deleted  	headerData [saveSlots [i]' 0] = 0x53;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,toggleDeleteSave,The following statement contains a magic number: switch (saveType [saveSlots [i]]) {  default:  	//Slot should not be deleted  	break;  case 1:  	//Regular save  	headerData [saveSlots [i]' 0] = 0xA1;  	break;  case 2:  	//Middle link  	headerData [saveSlots [i]' 0] = 0xA2;  	break;  case 3:  	//End link  	headerData [saveSlots [i]' 0] = 0xA3;  	break;  case 4:  	//Regular deleted save  	headerData [saveSlots [i]' 0] = 0x51;  	break;  case 5:  	//Middle link deleted  	headerData [saveSlots [i]' 0] = 0x52;  	break;  case 6:  	//End link deleted  	headerData [saveSlots [i]' 0] = 0x53;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,findSaveLinks,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	//Add current slot to the list  	tempSlotList.Add (currentSlot);  	//Check if next slot pointer overflows  	if (currentSlot > 15)  		break;  	//Check if current slot is corrupted  	if (saveType [currentSlot] == 7)  		break;  	//Check if pointer points to the next save  	if (headerData [currentSlot' 8] == 0xFF)  		break;  	else  		currentSlot = headerData [currentSlot' 8];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,findSaveLinks,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	//Add current slot to the list  	tempSlotList.Add (currentSlot);  	//Check if next slot pointer overflows  	if (currentSlot > 15)  		break;  	//Check if current slot is corrupted  	if (saveType [currentSlot] == 7)  		break;  	//Check if pointer points to the next save  	if (headerData [currentSlot' 8] == 0xFF)  		break;  	else  		currentSlot = headerData [currentSlot' 8];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,findSaveLinks,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	//Add current slot to the list  	tempSlotList.Add (currentSlot);  	//Check if next slot pointer overflows  	if (currentSlot > 15)  		break;  	//Check if current slot is corrupted  	if (saveType [currentSlot] == 7)  		break;  	//Check if pointer points to the next save  	if (headerData [currentSlot' 8] == 0xFF)  		break;  	else  		currentSlot = headerData [currentSlot' 8];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,findSaveLinks,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	//Add current slot to the list  	tempSlotList.Add (currentSlot);  	//Check if next slot pointer overflows  	if (currentSlot > 15)  		break;  	//Check if current slot is corrupted  	if (saveType [currentSlot] == 7)  		break;  	//Check if pointer points to the next save  	if (headerData [currentSlot' 8] == 0xFF)  		break;  	else  		currentSlot = headerData [currentSlot' 8];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,findSaveLinks,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	//Add current slot to the list  	tempSlotList.Add (currentSlot);  	//Check if next slot pointer overflows  	if (currentSlot > 15)  		break;  	//Check if current slot is corrupted  	if (saveType [currentSlot] == 7)  		break;  	//Check if pointer points to the next save  	if (headerData [currentSlot' 8] == 0xFF)  		break;  	else  		currentSlot = headerData [currentSlot' 8];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,findSaveLinks,The following statement contains a magic number: if (currentSlot > 15)  	break;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,findSaveLinks,The following statement contains a magic number: if (saveType [currentSlot] == 7)  	break;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,findSaveLinks,The following statement contains a magic number: if (headerData [currentSlot' 8] == 0xFF)  	break;  else  	currentSlot = headerData [currentSlot' 8];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,findSaveLinks,The following statement contains a magic number: if (headerData [currentSlot' 8] == 0xFF)  	break;  else  	currentSlot = headerData [currentSlot' 8];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,findSaveLinks,The following statement contains a magic number: currentSlot = headerData [currentSlot' 8];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,findFreeSlots,The following statement contains a magic number: for (int i = slotNumber; i < (slotNumber + slotCount); i++) {  	if (saveType [i] == 0)  		tempSlotList.Add (i);  	else  		break;  	//Exit if next save would be over the limit of 15  	if (slotNumber + slotCount > 15)  		break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,findFreeSlots,The following statement contains a magic number: if (slotNumber + slotCount > 15)  	break;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getSaveBytes,The following statement contains a magic number: for (int i = 0; i < 128; i++)  	saveBytes [i] = headerData [saveSlots [0]' i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getSaveBytes,The following statement contains a magic number: for (int sNumber = 0; sNumber < saveSlots.Length; sNumber++) {  	for (int i = 0; i < 8192; i++)  		saveBytes [128 + (sNumber * 8192) + i] = saveData [saveSlots [sNumber]' i];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getSaveBytes,The following statement contains a magic number: for (int sNumber = 0; sNumber < saveSlots.Length; sNumber++) {  	for (int i = 0; i < 8192; i++)  		saveBytes [128 + (sNumber * 8192) + i] = saveData [saveSlots [sNumber]' i];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getSaveBytes,The following statement contains a magic number: for (int sNumber = 0; sNumber < saveSlots.Length; sNumber++) {  	for (int i = 0; i < 8192; i++)  		saveBytes [128 + (sNumber * 8192) + i] = saveData [saveSlots [sNumber]' i];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getSaveBytes,The following statement contains a magic number: for (int i = 0; i < 8192; i++)  	saveBytes [128 + (sNumber * 8192) + i] = saveData [saveSlots [sNumber]' i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getSaveBytes,The following statement contains a magic number: for (int i = 0; i < 8192; i++)  	saveBytes [128 + (sNumber * 8192) + i] = saveData [saveSlots [sNumber]' i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getSaveBytes,The following statement contains a magic number: for (int i = 0; i < 8192; i++)  	saveBytes [128 + (sNumber * 8192) + i] = saveData [saveSlots [sNumber]' i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getSaveBytes,The following statement contains a magic number: saveBytes [128 + (sNumber * 8192) + i] = saveData [saveSlots [sNumber]' i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getSaveBytes,The following statement contains a magic number: saveBytes [128 + (sNumber * 8192) + i] = saveData [saveSlots [sNumber]' i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: for (int i = 0; i < 128; i++)  	headerData [freeSlots [0]' i] = saveBytes [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: headerData [freeSlots [0]' 4] = (byte)(numberOfBytes & 0xFF);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: headerData [freeSlots [0]' 5] = (byte)((numberOfBytes & 0xFF00) >> 8);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: headerData [freeSlots [0]' 5] = (byte)((numberOfBytes & 0xFF00) >> 8);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: headerData [freeSlots [0]' 6] = (byte)((numberOfBytes & 0xFF0000) >> 16);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: headerData [freeSlots [0]' 6] = (byte)((numberOfBytes & 0xFF0000) >> 16);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: for (int i = 0; i < slotCount; i++) {  	//Set all bytes  	for (int byteCount = 0; byteCount < 8192; byteCount++) {  		saveData [freeSlots [i]' byteCount] = saveBytes [128 + (i * 8192) + byteCount];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: for (int i = 0; i < slotCount; i++) {  	//Set all bytes  	for (int byteCount = 0; byteCount < 8192; byteCount++) {  		saveData [freeSlots [i]' byteCount] = saveBytes [128 + (i * 8192) + byteCount];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: for (int i = 0; i < slotCount; i++) {  	//Set all bytes  	for (int byteCount = 0; byteCount < 8192; byteCount++) {  		saveData [freeSlots [i]' byteCount] = saveBytes [128 + (i * 8192) + byteCount];  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: for (int byteCount = 0; byteCount < 8192; byteCount++) {  	saveData [freeSlots [i]' byteCount] = saveBytes [128 + (i * 8192) + byteCount];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: for (int byteCount = 0; byteCount < 8192; byteCount++) {  	saveData [freeSlots [i]' byteCount] = saveBytes [128 + (i * 8192) + byteCount];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: for (int byteCount = 0; byteCount < 8192; byteCount++) {  	saveData [freeSlots [i]' byteCount] = saveBytes [128 + (i * 8192) + byteCount];  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: saveData [freeSlots [i]' byteCount] = saveBytes [128 + (i * 8192) + byteCount];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: saveData [freeSlots [i]' byteCount] = saveBytes [128 + (i * 8192) + byteCount];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: for (int i = 0; i < (freeSlots.Length - 1); i++) {  	headerData [freeSlots [i]' 0] = 0x52;  	headerData [freeSlots [i]' 8] = (byte)freeSlots [i + 1];  	headerData [freeSlots [i]' 9] = 0x00;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: for (int i = 0; i < (freeSlots.Length - 1); i++) {  	headerData [freeSlots [i]' 0] = 0x52;  	headerData [freeSlots [i]' 8] = (byte)freeSlots [i + 1];  	headerData [freeSlots [i]' 9] = 0x00;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: headerData [freeSlots [i]' 8] = (byte)freeSlots [i + 1];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: headerData [freeSlots [i]' 9] = 0x00;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: headerData [freeSlots [freeSlots.Length - 1]' 8] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setSaveBytes,The following statement contains a magic number: headerData [freeSlots [freeSlots.Length - 1]' 9] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setHeaderData,The following statement contains a magic number: for (int byteCount = 0; byteCount < 20; byteCount++)  	headerData [slotNumber' byteCount + 10] = 0x00;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setHeaderData,The following statement contains a magic number: for (int byteCount = 0; byteCount < 20; byteCount++)  	headerData [slotNumber' byteCount + 10] = 0x00;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setHeaderData,The following statement contains a magic number: headerData [slotNumber' byteCount + 10] = 0x00;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setHeaderData,The following statement contains a magic number: for (int byteCount = 0; byteCount < headerString.Length; byteCount++)  	headerData [slotNumber' byteCount + 12] = tempByteArray [byteCount];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setHeaderData,The following statement contains a magic number: headerData [slotNumber' byteCount + 12] = tempByteArray [byteCount];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setHeaderData,The following statement contains a magic number: headerData [slotNumber' 10] = (byte)(sRegion & 0xFF);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setHeaderData,The following statement contains a magic number: headerData [slotNumber' 11] = (byte)(sRegion >> 8);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setHeaderData,The following statement contains a magic number: headerData [slotNumber' 11] = (byte)(sRegion >> 8);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadRegion,The following statement contains a magic number: saveRegion = new ushort[15];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadRegion,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Store save region  	saveRegion [slotNumber] = (ushort)((headerData [slotNumber' 11] << 8) | headerData [slotNumber' 10]);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadRegion,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Store save region  	saveRegion [slotNumber] = (ushort)((headerData [slotNumber' 11] << 8) | headerData [slotNumber' 10]);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadRegion,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Store save region  	saveRegion [slotNumber] = (ushort)((headerData [slotNumber' 11] << 8) | headerData [slotNumber' 10]);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadRegion,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Store save region  	saveRegion [slotNumber] = (ushort)((headerData [slotNumber' 11] << 8) | headerData [slotNumber' 10]);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadRegion,The following statement contains a magic number: saveRegion [slotNumber] = (ushort)((headerData [slotNumber' 11] << 8) | headerData [slotNumber' 10]);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadRegion,The following statement contains a magic number: saveRegion [slotNumber] = (ushort)((headerData [slotNumber' 11] << 8) | headerData [slotNumber' 10]);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadRegion,The following statement contains a magic number: saveRegion [slotNumber] = (ushort)((headerData [slotNumber' 11] << 8) | headerData [slotNumber' 10]);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: iconPalette = new Color[15' 16];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: iconPalette = new Color[15' 16];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Reset color counter  	colorCounter = 0;  	//Fetch two bytes at a time  	for (int byteCount = 0; byteCount < 32; byteCount += 2) {  		redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  		greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  		blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  		blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  		//Get the color value  		if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  			iconPalette [slotNumber' colorCounter] = Color.Transparent;  		else  			iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Reset color counter  	colorCounter = 0;  	//Fetch two bytes at a time  	for (int byteCount = 0; byteCount < 32; byteCount += 2) {  		redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  		greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  		blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  		blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  		//Get the color value  		if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  			iconPalette [slotNumber' colorCounter] = Color.Transparent;  		else  			iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Reset color counter  	colorCounter = 0;  	//Fetch two bytes at a time  	for (int byteCount = 0; byteCount < 32; byteCount += 2) {  		redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  		greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  		blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  		blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  		//Get the color value  		if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  			iconPalette [slotNumber' colorCounter] = Color.Transparent;  		else  			iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Reset color counter  	colorCounter = 0;  	//Fetch two bytes at a time  	for (int byteCount = 0; byteCount < 32; byteCount += 2) {  		redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  		greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  		blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  		blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  		//Get the color value  		if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  			iconPalette [slotNumber' colorCounter] = Color.Transparent;  		else  			iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Reset color counter  	colorCounter = 0;  	//Fetch two bytes at a time  	for (int byteCount = 0; byteCount < 32; byteCount += 2) {  		redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  		greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  		blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  		blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  		//Get the color value  		if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  			iconPalette [slotNumber' colorCounter] = Color.Transparent;  		else  			iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Reset color counter  	colorCounter = 0;  	//Fetch two bytes at a time  	for (int byteCount = 0; byteCount < 32; byteCount += 2) {  		redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  		greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  		blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  		blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  		//Get the color value  		if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  			iconPalette [slotNumber' colorCounter] = Color.Transparent;  		else  			iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Reset color counter  	colorCounter = 0;  	//Fetch two bytes at a time  	for (int byteCount = 0; byteCount < 32; byteCount += 2) {  		redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  		greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  		blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  		blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  		//Get the color value  		if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  			iconPalette [slotNumber' colorCounter] = Color.Transparent;  		else  			iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Reset color counter  	colorCounter = 0;  	//Fetch two bytes at a time  	for (int byteCount = 0; byteCount < 32; byteCount += 2) {  		redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  		greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  		blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  		blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  		//Get the color value  		if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  			iconPalette [slotNumber' colorCounter] = Color.Transparent;  		else  			iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Reset color counter  	colorCounter = 0;  	//Fetch two bytes at a time  	for (int byteCount = 0; byteCount < 32; byteCount += 2) {  		redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  		greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  		blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  		blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  		//Get the color value  		if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  			iconPalette [slotNumber' colorCounter] = Color.Transparent;  		else  			iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Reset color counter  	colorCounter = 0;  	//Fetch two bytes at a time  	for (int byteCount = 0; byteCount < 32; byteCount += 2) {  		redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  		greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  		blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  		blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  		//Get the color value  		if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  			iconPalette [slotNumber' colorCounter] = Color.Transparent;  		else  			iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Reset color counter  	colorCounter = 0;  	//Fetch two bytes at a time  	for (int byteCount = 0; byteCount < 32; byteCount += 2) {  		redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  		greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  		blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  		blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  		//Get the color value  		if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  			iconPalette [slotNumber' colorCounter] = Color.Transparent;  		else  			iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  		colorCounter++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  	greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  	blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  	blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  	//Get the color value  	if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  		iconPalette [slotNumber' colorCounter] = Color.Transparent;  	else  		iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  	greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  	blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  	blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  	//Get the color value  	if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  		iconPalette [slotNumber' colorCounter] = Color.Transparent;  	else  		iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  	greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  	blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  	blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  	//Get the color value  	if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  		iconPalette [slotNumber' colorCounter] = Color.Transparent;  	else  		iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  	greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  	blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  	blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  	//Get the color value  	if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  		iconPalette [slotNumber' colorCounter] = Color.Transparent;  	else  		iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  	greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  	blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  	blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  	//Get the color value  	if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  		iconPalette [slotNumber' colorCounter] = Color.Transparent;  	else  		iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  	greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  	blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  	blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  	//Get the color value  	if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  		iconPalette [slotNumber' colorCounter] = Color.Transparent;  	else  		iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  	greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  	blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  	blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  	//Get the color value  	if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  		iconPalette [slotNumber' colorCounter] = Color.Transparent;  	else  		iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  	greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  	blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  	blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  	//Get the color value  	if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  		iconPalette [slotNumber' colorCounter] = Color.Transparent;  	else  		iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  	greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  	blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  	blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  	//Get the color value  	if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  		iconPalette [slotNumber' colorCounter] = Color.Transparent;  	else  		iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: for (int byteCount = 0; byteCount < 32; byteCount += 2) {  	redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  	greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  	blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  	blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  	//Get the color value  	if ((redChannel | greenChannel | blueChannel | blackFlag) == 0)  		iconPalette [slotNumber' colorCounter] = Color.Transparent;  	else  		iconPalette [slotNumber' colorCounter] = Color.FromArgb (redChannel' greenChannel' blueChannel);  	colorCounter++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: byteCount += 2
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: redChannel = (saveData [slotNumber' byteCount + 96] & 0x1F) << 3;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: greenChannel = ((saveData [slotNumber' byteCount + 97] & 0x3) << 6) | ((saveData [slotNumber' byteCount + 96] & 0xE0) >> 2);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: blueChannel = ((saveData [slotNumber' byteCount + 97] & 0x7C) << 1);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadPalette,The following statement contains a magic number: blackFlag = (saveData [slotNumber' byteCount + 97] & 0x80);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: iconData = new Bitmap[15' 3];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: iconData = new Bitmap[15' 3];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Each save has 3 icons (some are data but those will not be shown)  	for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  		iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  		byteCount = 128 + (128 * iconNumber);  		for (int y = 0; y < 16; y++) {  			for (int x = 0; x < 16; x += 2) {  				iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  				iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  				byteCount++;  			}  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Each save has 3 icons (some are data but those will not be shown)  	for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  		iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  		byteCount = 128 + (128 * iconNumber);  		for (int y = 0; y < 16; y++) {  			for (int x = 0; x < 16; x += 2) {  				iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  				iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  				byteCount++;  			}  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Each save has 3 icons (some are data but those will not be shown)  	for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  		iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  		byteCount = 128 + (128 * iconNumber);  		for (int y = 0; y < 16; y++) {  			for (int x = 0; x < 16; x += 2) {  				iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  				iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  				byteCount++;  			}  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Each save has 3 icons (some are data but those will not be shown)  	for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  		iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  		byteCount = 128 + (128 * iconNumber);  		for (int y = 0; y < 16; y++) {  			for (int x = 0; x < 16; x += 2) {  				iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  				iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  				byteCount++;  			}  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Each save has 3 icons (some are data but those will not be shown)  	for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  		iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  		byteCount = 128 + (128 * iconNumber);  		for (int y = 0; y < 16; y++) {  			for (int x = 0; x < 16; x += 2) {  				iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  				iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  				byteCount++;  			}  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Each save has 3 icons (some are data but those will not be shown)  	for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  		iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  		byteCount = 128 + (128 * iconNumber);  		for (int y = 0; y < 16; y++) {  			for (int x = 0; x < 16; x += 2) {  				iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  				iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  				byteCount++;  			}  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Each save has 3 icons (some are data but those will not be shown)  	for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  		iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  		byteCount = 128 + (128 * iconNumber);  		for (int y = 0; y < 16; y++) {  			for (int x = 0; x < 16; x += 2) {  				iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  				iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  				byteCount++;  			}  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Each save has 3 icons (some are data but those will not be shown)  	for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  		iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  		byteCount = 128 + (128 * iconNumber);  		for (int y = 0; y < 16; y++) {  			for (int x = 0; x < 16; x += 2) {  				iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  				iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  				byteCount++;  			}  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Each save has 3 icons (some are data but those will not be shown)  	for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  		iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  		byteCount = 128 + (128 * iconNumber);  		for (int y = 0; y < 16; y++) {  			for (int x = 0; x < 16; x += 2) {  				iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  				iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  				byteCount++;  			}  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Each save has 3 icons (some are data but those will not be shown)  	for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  		iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  		byteCount = 128 + (128 * iconNumber);  		for (int y = 0; y < 16; y++) {  			for (int x = 0; x < 16; x += 2) {  				iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  				iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  				byteCount++;  			}  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  	byteCount = 128 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  			iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  	byteCount = 128 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  			iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  	byteCount = 128 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  			iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  	byteCount = 128 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  			iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  	byteCount = 128 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  			iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  	byteCount = 128 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  			iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  	byteCount = 128 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  			iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  	byteCount = 128 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  			iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int iconNumber = 0; iconNumber < 3; iconNumber++) {  	iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  	byteCount = 128 + (128 * iconNumber);  	for (int y = 0; y < 16; y++) {  		for (int x = 0; x < 16; x += 2) {  			iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  			iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  			byteCount++;  		}  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: iconData [slotNumber' iconNumber] = new Bitmap (16' 16);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: byteCount = 128 + (128 * iconNumber);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: byteCount = 128 + (128 * iconNumber);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  		iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  		byteCount++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  		iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  		byteCount++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  		iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  		byteCount++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int y = 0; y < 16; y++) {  	for (int x = 0; x < 16; x += 2) {  		iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  		iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  		byteCount++;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int x = 0; x < 16; x += 2) {  	iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  	iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  	byteCount++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int x = 0; x < 16; x += 2) {  	iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  	iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  	byteCount++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: for (int x = 0; x < 16; x += 2) {  	iconData [slotNumber' iconNumber].SetPixel (x' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] & 0xF]);  	iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  	byteCount++;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: x += 2
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIcons,The following statement contains a magic number: iconData [slotNumber' iconNumber].SetPixel (x + 1' y' iconPalette [slotNumber' saveData [slotNumber' byteCount] >> 4]);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getIconBytes,The following statement contains a magic number: for (int i = 0; i < 416; i++)  	iconBytes [i] = saveData [slotNumber' i + 96];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getIconBytes,The following statement contains a magic number: for (int i = 0; i < 416; i++)  	iconBytes [i] = saveData [slotNumber' i + 96];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,getIconBytes,The following statement contains a magic number: iconBytes [i] = saveData [slotNumber' i + 96];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setIconBytes,The following statement contains a magic number: for (int i = 0; i < 416; i++)  	saveData [slotNumber' i + 96] = iconBytes [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setIconBytes,The following statement contains a magic number: for (int i = 0; i < 416; i++)  	saveData [slotNumber' i + 96] = iconBytes [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,setIconBytes,The following statement contains a magic number: saveData [slotNumber' i + 96] = iconBytes [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIconFrames,The following statement contains a magic number: iconFrames = new int[15];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIconFrames,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	switch (saveData [slotNumber' 2]) {  	default:  		//No frames (save data is probably clean)  		break;  	case 0x11:  		//1 frame  		iconFrames [slotNumber] = 1;  		break;  	case 0x12:  		//2 frames  		iconFrames [slotNumber] = 2;  		break;  	case 0x13:  		//3 frames  		iconFrames [slotNumber] = 3;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIconFrames,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	switch (saveData [slotNumber' 2]) {  	default:  		//No frames (save data is probably clean)  		break;  	case 0x11:  		//1 frame  		iconFrames [slotNumber] = 1;  		break;  	case 0x12:  		//2 frames  		iconFrames [slotNumber] = 2;  		break;  	case 0x13:  		//3 frames  		iconFrames [slotNumber] = 3;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIconFrames,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	switch (saveData [slotNumber' 2]) {  	default:  		//No frames (save data is probably clean)  		break;  	case 0x11:  		//1 frame  		iconFrames [slotNumber] = 1;  		break;  	case 0x12:  		//2 frames  		iconFrames [slotNumber] = 2;  		break;  	case 0x13:  		//3 frames  		iconFrames [slotNumber] = 3;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIconFrames,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	switch (saveData [slotNumber' 2]) {  	default:  		//No frames (save data is probably clean)  		break;  	case 0x11:  		//1 frame  		iconFrames [slotNumber] = 1;  		break;  	case 0x12:  		//2 frames  		iconFrames [slotNumber] = 2;  		break;  	case 0x13:  		//3 frames  		iconFrames [slotNumber] = 3;  		break;  	}  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIconFrames,The following statement contains a magic number: switch (saveData [slotNumber' 2]) {  default:  	//No frames (save data is probably clean)  	break;  case 0x11:  	//1 frame  	iconFrames [slotNumber] = 1;  	break;  case 0x12:  	//2 frames  	iconFrames [slotNumber] = 2;  	break;  case 0x13:  	//3 frames  	iconFrames [slotNumber] = 3;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIconFrames,The following statement contains a magic number: switch (saveData [slotNumber' 2]) {  default:  	//No frames (save data is probably clean)  	break;  case 0x11:  	//1 frame  	iconFrames [slotNumber] = 1;  	break;  case 0x12:  	//2 frames  	iconFrames [slotNumber] = 2;  	break;  case 0x13:  	//3 frames  	iconFrames [slotNumber] = 3;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIconFrames,The following statement contains a magic number: switch (saveData [slotNumber' 2]) {  default:  	//No frames (save data is probably clean)  	break;  case 0x11:  	//1 frame  	iconFrames [slotNumber] = 1;  	break;  case 0x12:  	//2 frames  	iconFrames [slotNumber] = 2;  	break;  case 0x13:  	//3 frames  	iconFrames [slotNumber] = 3;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIconFrames,The following statement contains a magic number: iconFrames [slotNumber] = 2;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadIconFrames,The following statement contains a magic number: iconFrames [slotNumber] = 3;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadGMEComments,The following statement contains a magic number: saveComments = new string[15];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadGMEComments,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	tempByteArray = new byte[256];  	for (int byteCount = 0; byteCount < 256; byteCount++)  		tempByteArray [byteCount] = gmeHeader [byteCount + 64 + (256 * slotNumber)];  	//Set save comment for each slot  	saveComments [slotNumber] = Encoding.Default.GetString (tempByteArray);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadGMEComments,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	tempByteArray = new byte[256];  	for (int byteCount = 0; byteCount < 256; byteCount++)  		tempByteArray [byteCount] = gmeHeader [byteCount + 64 + (256 * slotNumber)];  	//Set save comment for each slot  	saveComments [slotNumber] = Encoding.Default.GetString (tempByteArray);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadGMEComments,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	tempByteArray = new byte[256];  	for (int byteCount = 0; byteCount < 256; byteCount++)  		tempByteArray [byteCount] = gmeHeader [byteCount + 64 + (256 * slotNumber)];  	//Set save comment for each slot  	saveComments [slotNumber] = Encoding.Default.GetString (tempByteArray);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadGMEComments,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	tempByteArray = new byte[256];  	for (int byteCount = 0; byteCount < 256; byteCount++)  		tempByteArray [byteCount] = gmeHeader [byteCount + 64 + (256 * slotNumber)];  	//Set save comment for each slot  	saveComments [slotNumber] = Encoding.Default.GetString (tempByteArray);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadGMEComments,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	tempByteArray = new byte[256];  	for (int byteCount = 0; byteCount < 256; byteCount++)  		tempByteArray [byteCount] = gmeHeader [byteCount + 64 + (256 * slotNumber)];  	//Set save comment for each slot  	saveComments [slotNumber] = Encoding.Default.GetString (tempByteArray);  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadGMEComments,The following statement contains a magic number: tempByteArray = new byte[256];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadGMEComments,The following statement contains a magic number: for (int byteCount = 0; byteCount < 256; byteCount++)  	tempByteArray [byteCount] = gmeHeader [byteCount + 64 + (256 * slotNumber)];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadGMEComments,The following statement contains a magic number: for (int byteCount = 0; byteCount < 256; byteCount++)  	tempByteArray [byteCount] = gmeHeader [byteCount + 64 + (256 * slotNumber)];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadGMEComments,The following statement contains a magic number: for (int byteCount = 0; byteCount < 256; byteCount++)  	tempByteArray [byteCount] = gmeHeader [byteCount + 64 + (256 * slotNumber)];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadGMEComments,The following statement contains a magic number: tempByteArray [byteCount] = gmeHeader [byteCount + 64 + (256 * slotNumber)];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,loadGMEComments,The following statement contains a magic number: tempByteArray [byteCount] = gmeHeader [byteCount + 64 + (256 * slotNumber)];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,calculateXOR,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Set default value  	XORchecksum = 0;  	//Count 127 bytes  	for (int byteCount = 0; byteCount < 126; byteCount++)  		XORchecksum ^= headerData [slotNumber' byteCount];  	//Store checksum in 128th byte  	headerData [slotNumber' 127] = XORchecksum;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,calculateXOR,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Set default value  	XORchecksum = 0;  	//Count 127 bytes  	for (int byteCount = 0; byteCount < 126; byteCount++)  		XORchecksum ^= headerData [slotNumber' byteCount];  	//Store checksum in 128th byte  	headerData [slotNumber' 127] = XORchecksum;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,calculateXOR,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++) {  	//Set default value  	XORchecksum = 0;  	//Count 127 bytes  	for (int byteCount = 0; byteCount < 126; byteCount++)  		XORchecksum ^= headerData [slotNumber' byteCount];  	//Store checksum in 128th byte  	headerData [slotNumber' 127] = XORchecksum;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,calculateXOR,The following statement contains a magic number: for (int byteCount = 0; byteCount < 126; byteCount++)  	XORchecksum ^= headerData [slotNumber' byteCount];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,calculateXOR,The following statement contains a magic number: headerData [slotNumber' 127] = XORchecksum;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,formatSlot,The following statement contains a magic number: for (int byteCount = 0; byteCount < 128; byteCount++)  	headerData [slotNumber' byteCount] = 0x00;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,formatSlot,The following statement contains a magic number: for (int byteCount = 0; byteCount < 8192; byteCount++)  	saveData [slotNumber' byteCount] = 0x00;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,formatSlot,The following statement contains a magic number: saveComments [slotNumber] = new string ('\0'' 256);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,formatSlot,The following statement contains a magic number: headerData [slotNumber' 8] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,formatSlot,The following statement contains a magic number: headerData [slotNumber' 9] = 0xFF;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,formatMemoryCard,The following statement contains a magic number: for (int slotNumber = 0; slotNumber < 15; slotNumber++)  	formatSlot (slotNumber);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: switch (singleSaveType) {  default:  	//Action Replay single save  	byte[] arHeader = new byte[54];  	byte[] arName = null;  	//Copy header data to arHeader  	for (int byteCount = 0; byteCount < 22; byteCount++)  		arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  	//Convert save name to bytes  	arName = Encoding.Default.GetBytes (saveName [slotNumber' 0]);  	//Copy save name to arHeader  	for (int byteCount = 0; byteCount < arName.Length; byteCount++)  		arHeader [byteCount + 21] = arName [byteCount];  	binWriter.Write (arHeader);  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  case 2:  	//MCS single save  	binWriter.Write (outputData);  	break;  case 3:  	//RAW single save  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: switch (singleSaveType) {  default:  	//Action Replay single save  	byte[] arHeader = new byte[54];  	byte[] arName = null;  	//Copy header data to arHeader  	for (int byteCount = 0; byteCount < 22; byteCount++)  		arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  	//Convert save name to bytes  	arName = Encoding.Default.GetBytes (saveName [slotNumber' 0]);  	//Copy save name to arHeader  	for (int byteCount = 0; byteCount < arName.Length; byteCount++)  		arHeader [byteCount + 21] = arName [byteCount];  	binWriter.Write (arHeader);  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  case 2:  	//MCS single save  	binWriter.Write (outputData);  	break;  case 3:  	//RAW single save  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: switch (singleSaveType) {  default:  	//Action Replay single save  	byte[] arHeader = new byte[54];  	byte[] arName = null;  	//Copy header data to arHeader  	for (int byteCount = 0; byteCount < 22; byteCount++)  		arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  	//Convert save name to bytes  	arName = Encoding.Default.GetBytes (saveName [slotNumber' 0]);  	//Copy save name to arHeader  	for (int byteCount = 0; byteCount < arName.Length; byteCount++)  		arHeader [byteCount + 21] = arName [byteCount];  	binWriter.Write (arHeader);  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  case 2:  	//MCS single save  	binWriter.Write (outputData);  	break;  case 3:  	//RAW single save  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: switch (singleSaveType) {  default:  	//Action Replay single save  	byte[] arHeader = new byte[54];  	byte[] arName = null;  	//Copy header data to arHeader  	for (int byteCount = 0; byteCount < 22; byteCount++)  		arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  	//Convert save name to bytes  	arName = Encoding.Default.GetBytes (saveName [slotNumber' 0]);  	//Copy save name to arHeader  	for (int byteCount = 0; byteCount < arName.Length; byteCount++)  		arHeader [byteCount + 21] = arName [byteCount];  	binWriter.Write (arHeader);  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  case 2:  	//MCS single save  	binWriter.Write (outputData);  	break;  case 3:  	//RAW single save  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: switch (singleSaveType) {  default:  	//Action Replay single save  	byte[] arHeader = new byte[54];  	byte[] arName = null;  	//Copy header data to arHeader  	for (int byteCount = 0; byteCount < 22; byteCount++)  		arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  	//Convert save name to bytes  	arName = Encoding.Default.GetBytes (saveName [slotNumber' 0]);  	//Copy save name to arHeader  	for (int byteCount = 0; byteCount < arName.Length; byteCount++)  		arHeader [byteCount + 21] = arName [byteCount];  	binWriter.Write (arHeader);  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  case 2:  	//MCS single save  	binWriter.Write (outputData);  	break;  case 3:  	//RAW single save  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: switch (singleSaveType) {  default:  	//Action Replay single save  	byte[] arHeader = new byte[54];  	byte[] arName = null;  	//Copy header data to arHeader  	for (int byteCount = 0; byteCount < 22; byteCount++)  		arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  	//Convert save name to bytes  	arName = Encoding.Default.GetBytes (saveName [slotNumber' 0]);  	//Copy save name to arHeader  	for (int byteCount = 0; byteCount < arName.Length; byteCount++)  		arHeader [byteCount + 21] = arName [byteCount];  	binWriter.Write (arHeader);  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  case 2:  	//MCS single save  	binWriter.Write (outputData);  	break;  case 3:  	//RAW single save  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: switch (singleSaveType) {  default:  	//Action Replay single save  	byte[] arHeader = new byte[54];  	byte[] arName = null;  	//Copy header data to arHeader  	for (int byteCount = 0; byteCount < 22; byteCount++)  		arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  	//Convert save name to bytes  	arName = Encoding.Default.GetBytes (saveName [slotNumber' 0]);  	//Copy save name to arHeader  	for (int byteCount = 0; byteCount < arName.Length; byteCount++)  		arHeader [byteCount + 21] = arName [byteCount];  	binWriter.Write (arHeader);  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  case 2:  	//MCS single save  	binWriter.Write (outputData);  	break;  case 3:  	//RAW single save  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: switch (singleSaveType) {  default:  	//Action Replay single save  	byte[] arHeader = new byte[54];  	byte[] arName = null;  	//Copy header data to arHeader  	for (int byteCount = 0; byteCount < 22; byteCount++)  		arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  	//Convert save name to bytes  	arName = Encoding.Default.GetBytes (saveName [slotNumber' 0]);  	//Copy save name to arHeader  	for (int byteCount = 0; byteCount < arName.Length; byteCount++)  		arHeader [byteCount + 21] = arName [byteCount];  	binWriter.Write (arHeader);  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  case 2:  	//MCS single save  	binWriter.Write (outputData);  	break;  case 3:  	//RAW single save  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: switch (singleSaveType) {  default:  	//Action Replay single save  	byte[] arHeader = new byte[54];  	byte[] arName = null;  	//Copy header data to arHeader  	for (int byteCount = 0; byteCount < 22; byteCount++)  		arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  	//Convert save name to bytes  	arName = Encoding.Default.GetBytes (saveName [slotNumber' 0]);  	//Copy save name to arHeader  	for (int byteCount = 0; byteCount < arName.Length; byteCount++)  		arHeader [byteCount + 21] = arName [byteCount];  	binWriter.Write (arHeader);  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  case 2:  	//MCS single save  	binWriter.Write (outputData);  	break;  case 3:  	//RAW single save  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: switch (singleSaveType) {  default:  	//Action Replay single save  	byte[] arHeader = new byte[54];  	byte[] arName = null;  	//Copy header data to arHeader  	for (int byteCount = 0; byteCount < 22; byteCount++)  		arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  	//Convert save name to bytes  	arName = Encoding.Default.GetBytes (saveName [slotNumber' 0]);  	//Copy save name to arHeader  	for (int byteCount = 0; byteCount < arName.Length; byteCount++)  		arHeader [byteCount + 21] = arName [byteCount];  	binWriter.Write (arHeader);  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  case 2:  	//MCS single save  	binWriter.Write (outputData);  	break;  case 3:  	//RAW single save  	binWriter.Write (outputData' 128' outputData.Length - 128);  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: for (int byteCount = 0; byteCount < 22; byteCount++)  	arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: for (int byteCount = 0; byteCount < 22; byteCount++)  	arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: arHeader [byteCount] = headerData [slotNumber' byteCount + 10];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: for (int byteCount = 0; byteCount < arName.Length; byteCount++)  	arHeader [byteCount + 21] = arName [byteCount];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: arHeader [byteCount + 21] = arName [byteCount];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: binWriter.Write (outputData' 128' outputData.Length - 128);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: binWriter.Write (outputData' 128' outputData.Length - 128);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: binWriter.Write (outputData' 128' outputData.Length - 128);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveSingleSave,The following statement contains a magic number: binWriter.Write (outputData' 128' outputData.Length - 128);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: inputData = binReader.ReadBytes (123008);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: if (inputData.Length > 3)  	tempString = Encoding.ASCII.GetString (inputData' 0' 2).Trim ((char)0x0);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: if (inputData.Length > 3)  	tempString = Encoding.ASCII.GetString (inputData' 0' 2).Trim ((char)0x0);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: tempString = Encoding.ASCII.GetString (inputData' 0' 2).Trim ((char)0x0);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: switch (tempString) {  default:  	//Action Replay single save  	//Check if this is really an AR save (check for SC magic)  	if (!(inputData [0x36] == 0x53 && inputData [0x37] == 0x43))  		return false;  	finalData = new byte[inputData.Length + 74];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i];  	//Copy save data  	for (int i = 0; i < inputData.Length - 54; i++)  		finalData [i + 128] = inputData [i + 54];  	break;  case "Q":  	//MCS single save  	finalData = inputData;  	break;  case "SC":  	//RAW single save  	finalData = new byte[inputData.Length + 128];  	byte[] singleSaveHeader = Encoding.Default.GetBytes (Path.GetFileName (fileName));  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  		finalData [i + 10] = singleSaveHeader [i];  	//Copy save data  	for (int i = 0; i < inputData.Length; i++)  		finalData [i + 128] = inputData [i];  	break;  case "V":  	//PSV single save (PS3 virtual save)  	//Check if this is a PS1 type save  	if (inputData [60] != 1)  		return false;  	finalData = new byte[inputData.Length - 4];  	//Recreate save header  	finalData [0] = 0x51;  	//Q  	for (int i = 0; i < 20; i++)  		finalData [i + 10] = inputData [i + 100];  	//Copy save data  	for (int i = 0; i < inputData.Length - 132; i++)  		finalData [i + 128] = inputData [i + 132];  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: finalData = new byte[inputData.Length + 74];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < 20; i++)  	finalData [i + 10] = inputData [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < 20; i++)  	finalData [i + 10] = inputData [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: finalData [i + 10] = inputData [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < inputData.Length - 54; i++)  	finalData [i + 128] = inputData [i + 54];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < inputData.Length - 54; i++)  	finalData [i + 128] = inputData [i + 54];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < inputData.Length - 54; i++)  	finalData [i + 128] = inputData [i + 54];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: finalData [i + 128] = inputData [i + 54];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: finalData [i + 128] = inputData [i + 54];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: finalData = new byte[inputData.Length + 128];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  	finalData [i + 10] = singleSaveHeader [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < 20 && i < singleSaveHeader.Length; i++)  	finalData [i + 10] = singleSaveHeader [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: finalData [i + 10] = singleSaveHeader [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < inputData.Length; i++)  	finalData [i + 128] = inputData [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: finalData [i + 128] = inputData [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: if (inputData [60] != 1)  	return false;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: finalData = new byte[inputData.Length - 4];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < 20; i++)  	finalData [i + 10] = inputData [i + 100];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < 20; i++)  	finalData [i + 10] = inputData [i + 100];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < 20; i++)  	finalData [i + 10] = inputData [i + 100];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: finalData [i + 10] = inputData [i + 100];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: finalData [i + 10] = inputData [i + 100];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < inputData.Length - 132; i++)  	finalData [i + 128] = inputData [i + 132];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < inputData.Length - 132; i++)  	finalData [i + 128] = inputData [i + 132];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: for (int i = 0; i < inputData.Length - 132; i++)  	finalData [i + 128] = inputData [i + 132];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: finalData [i + 128] = inputData [i + 132];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openSingleSave,The following statement contains a magic number: finalData [i + 128] = inputData [i + 132];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveMemoryCard,The following statement contains a magic number: switch (memoryCardType) {  default:  	//Raw Memory Card  	binWriter.Write (rawMemoryCard);  	break;  case 2:  	//GME Memory Card  	fillGmeHeader ();  	binWriter.Write (gmeHeader);  	binWriter.Write (rawMemoryCard);  	break;  case 3:  	//VGS Memory Card  	binWriter.Write (getVGSheader ());  	binWriter.Write (rawMemoryCard);  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,saveMemoryCard,The following statement contains a magic number: switch (memoryCardType) {  default:  	//Raw Memory Card  	binWriter.Write (rawMemoryCard);  	break;  case 2:  	//GME Memory Card  	fillGmeHeader ();  	binWriter.Write (gmeHeader);  	binWriter.Write (rawMemoryCard);  	break;  case 3:  	//VGS Memory Card  	binWriter.Write (getVGSheader ());  	binWriter.Write (rawMemoryCard);  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: if (fileName != null) {  	byte[] tempData = new byte[134976];  	string tempString = null;  	int startOffset = 0;  	BinaryReader binReader = null;  	//Check if the file is allowed to be opened  	try {  		binReader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite));  	}  	catch (Exception errorException) {  		//Return the error description  		return errorException.Message;  	}  	//Put data into temp array  	binReader.BaseStream.Read (tempData' 0' 134976);  	//File is sucesfully read' close the stream  	binReader.Close ();  	//Store the location of the Memory Card  	cardLocation = fileName;  	//Store the filename of the Memory Card  	cardName = Path.GetFileNameWithoutExtension (fileName);  	//Check the format of the card and if it's supported load it (filter illegal characters from types)  	tempString = Encoding.ASCII.GetString (tempData' 0' 11).Trim ((char)0x0' (char)0x1' (char)0x3F);  	switch (tempString) {  	default:  		//File type is not supported  		return "'" + cardName + "' is not a supported Memory Card format.";  	case "MC":  		//Standard raw Memory Card  		startOffset = 0;  		cardType = 1;  		break;  	case "123-456-STD":  		//DexDrive GME Memory Card  		startOffset = 3904;  		cardType = 2;  		//Copy input data to gmeHeader  		for (int i = 0; i < 3904; i++)  			gmeHeader [i] = tempData [i];  		break;  	case "VgsM":  		//VGS Memory Card  		startOffset = 64;  		cardType = 3;  		break;  	case "PMV":  		//PSP virtual Memory Card  		startOffset = 128;  		cardType = 4;  		break;  	}  	//Copy data to rawMemoryCard array with offset from input data  	Array.Copy (tempData' startOffset' rawMemoryCard' 0' 131072);  	//Load Memory Card data from raw card  	loadDataFromRawCard ();  }  // Memory Card should be created  else {  	cardName = "Untitled";  	formatMemoryCard ();  	//Set changedFlag to false since this is created card  	changedFlag = false;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: if (fileName != null) {  	byte[] tempData = new byte[134976];  	string tempString = null;  	int startOffset = 0;  	BinaryReader binReader = null;  	//Check if the file is allowed to be opened  	try {  		binReader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite));  	}  	catch (Exception errorException) {  		//Return the error description  		return errorException.Message;  	}  	//Put data into temp array  	binReader.BaseStream.Read (tempData' 0' 134976);  	//File is sucesfully read' close the stream  	binReader.Close ();  	//Store the location of the Memory Card  	cardLocation = fileName;  	//Store the filename of the Memory Card  	cardName = Path.GetFileNameWithoutExtension (fileName);  	//Check the format of the card and if it's supported load it (filter illegal characters from types)  	tempString = Encoding.ASCII.GetString (tempData' 0' 11).Trim ((char)0x0' (char)0x1' (char)0x3F);  	switch (tempString) {  	default:  		//File type is not supported  		return "'" + cardName + "' is not a supported Memory Card format.";  	case "MC":  		//Standard raw Memory Card  		startOffset = 0;  		cardType = 1;  		break;  	case "123-456-STD":  		//DexDrive GME Memory Card  		startOffset = 3904;  		cardType = 2;  		//Copy input data to gmeHeader  		for (int i = 0; i < 3904; i++)  			gmeHeader [i] = tempData [i];  		break;  	case "VgsM":  		//VGS Memory Card  		startOffset = 64;  		cardType = 3;  		break;  	case "PMV":  		//PSP virtual Memory Card  		startOffset = 128;  		cardType = 4;  		break;  	}  	//Copy data to rawMemoryCard array with offset from input data  	Array.Copy (tempData' startOffset' rawMemoryCard' 0' 131072);  	//Load Memory Card data from raw card  	loadDataFromRawCard ();  }  // Memory Card should be created  else {  	cardName = "Untitled";  	formatMemoryCard ();  	//Set changedFlag to false since this is created card  	changedFlag = false;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: if (fileName != null) {  	byte[] tempData = new byte[134976];  	string tempString = null;  	int startOffset = 0;  	BinaryReader binReader = null;  	//Check if the file is allowed to be opened  	try {  		binReader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite));  	}  	catch (Exception errorException) {  		//Return the error description  		return errorException.Message;  	}  	//Put data into temp array  	binReader.BaseStream.Read (tempData' 0' 134976);  	//File is sucesfully read' close the stream  	binReader.Close ();  	//Store the location of the Memory Card  	cardLocation = fileName;  	//Store the filename of the Memory Card  	cardName = Path.GetFileNameWithoutExtension (fileName);  	//Check the format of the card and if it's supported load it (filter illegal characters from types)  	tempString = Encoding.ASCII.GetString (tempData' 0' 11).Trim ((char)0x0' (char)0x1' (char)0x3F);  	switch (tempString) {  	default:  		//File type is not supported  		return "'" + cardName + "' is not a supported Memory Card format.";  	case "MC":  		//Standard raw Memory Card  		startOffset = 0;  		cardType = 1;  		break;  	case "123-456-STD":  		//DexDrive GME Memory Card  		startOffset = 3904;  		cardType = 2;  		//Copy input data to gmeHeader  		for (int i = 0; i < 3904; i++)  			gmeHeader [i] = tempData [i];  		break;  	case "VgsM":  		//VGS Memory Card  		startOffset = 64;  		cardType = 3;  		break;  	case "PMV":  		//PSP virtual Memory Card  		startOffset = 128;  		cardType = 4;  		break;  	}  	//Copy data to rawMemoryCard array with offset from input data  	Array.Copy (tempData' startOffset' rawMemoryCard' 0' 131072);  	//Load Memory Card data from raw card  	loadDataFromRawCard ();  }  // Memory Card should be created  else {  	cardName = "Untitled";  	formatMemoryCard ();  	//Set changedFlag to false since this is created card  	changedFlag = false;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: if (fileName != null) {  	byte[] tempData = new byte[134976];  	string tempString = null;  	int startOffset = 0;  	BinaryReader binReader = null;  	//Check if the file is allowed to be opened  	try {  		binReader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite));  	}  	catch (Exception errorException) {  		//Return the error description  		return errorException.Message;  	}  	//Put data into temp array  	binReader.BaseStream.Read (tempData' 0' 134976);  	//File is sucesfully read' close the stream  	binReader.Close ();  	//Store the location of the Memory Card  	cardLocation = fileName;  	//Store the filename of the Memory Card  	cardName = Path.GetFileNameWithoutExtension (fileName);  	//Check the format of the card and if it's supported load it (filter illegal characters from types)  	tempString = Encoding.ASCII.GetString (tempData' 0' 11).Trim ((char)0x0' (char)0x1' (char)0x3F);  	switch (tempString) {  	default:  		//File type is not supported  		return "'" + cardName + "' is not a supported Memory Card format.";  	case "MC":  		//Standard raw Memory Card  		startOffset = 0;  		cardType = 1;  		break;  	case "123-456-STD":  		//DexDrive GME Memory Card  		startOffset = 3904;  		cardType = 2;  		//Copy input data to gmeHeader  		for (int i = 0; i < 3904; i++)  			gmeHeader [i] = tempData [i];  		break;  	case "VgsM":  		//VGS Memory Card  		startOffset = 64;  		cardType = 3;  		break;  	case "PMV":  		//PSP virtual Memory Card  		startOffset = 128;  		cardType = 4;  		break;  	}  	//Copy data to rawMemoryCard array with offset from input data  	Array.Copy (tempData' startOffset' rawMemoryCard' 0' 131072);  	//Load Memory Card data from raw card  	loadDataFromRawCard ();  }  // Memory Card should be created  else {  	cardName = "Untitled";  	formatMemoryCard ();  	//Set changedFlag to false since this is created card  	changedFlag = false;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: if (fileName != null) {  	byte[] tempData = new byte[134976];  	string tempString = null;  	int startOffset = 0;  	BinaryReader binReader = null;  	//Check if the file is allowed to be opened  	try {  		binReader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite));  	}  	catch (Exception errorException) {  		//Return the error description  		return errorException.Message;  	}  	//Put data into temp array  	binReader.BaseStream.Read (tempData' 0' 134976);  	//File is sucesfully read' close the stream  	binReader.Close ();  	//Store the location of the Memory Card  	cardLocation = fileName;  	//Store the filename of the Memory Card  	cardName = Path.GetFileNameWithoutExtension (fileName);  	//Check the format of the card and if it's supported load it (filter illegal characters from types)  	tempString = Encoding.ASCII.GetString (tempData' 0' 11).Trim ((char)0x0' (char)0x1' (char)0x3F);  	switch (tempString) {  	default:  		//File type is not supported  		return "'" + cardName + "' is not a supported Memory Card format.";  	case "MC":  		//Standard raw Memory Card  		startOffset = 0;  		cardType = 1;  		break;  	case "123-456-STD":  		//DexDrive GME Memory Card  		startOffset = 3904;  		cardType = 2;  		//Copy input data to gmeHeader  		for (int i = 0; i < 3904; i++)  			gmeHeader [i] = tempData [i];  		break;  	case "VgsM":  		//VGS Memory Card  		startOffset = 64;  		cardType = 3;  		break;  	case "PMV":  		//PSP virtual Memory Card  		startOffset = 128;  		cardType = 4;  		break;  	}  	//Copy data to rawMemoryCard array with offset from input data  	Array.Copy (tempData' startOffset' rawMemoryCard' 0' 131072);  	//Load Memory Card data from raw card  	loadDataFromRawCard ();  }  // Memory Card should be created  else {  	cardName = "Untitled";  	formatMemoryCard ();  	//Set changedFlag to false since this is created card  	changedFlag = false;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: if (fileName != null) {  	byte[] tempData = new byte[134976];  	string tempString = null;  	int startOffset = 0;  	BinaryReader binReader = null;  	//Check if the file is allowed to be opened  	try {  		binReader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite));  	}  	catch (Exception errorException) {  		//Return the error description  		return errorException.Message;  	}  	//Put data into temp array  	binReader.BaseStream.Read (tempData' 0' 134976);  	//File is sucesfully read' close the stream  	binReader.Close ();  	//Store the location of the Memory Card  	cardLocation = fileName;  	//Store the filename of the Memory Card  	cardName = Path.GetFileNameWithoutExtension (fileName);  	//Check the format of the card and if it's supported load it (filter illegal characters from types)  	tempString = Encoding.ASCII.GetString (tempData' 0' 11).Trim ((char)0x0' (char)0x1' (char)0x3F);  	switch (tempString) {  	default:  		//File type is not supported  		return "'" + cardName + "' is not a supported Memory Card format.";  	case "MC":  		//Standard raw Memory Card  		startOffset = 0;  		cardType = 1;  		break;  	case "123-456-STD":  		//DexDrive GME Memory Card  		startOffset = 3904;  		cardType = 2;  		//Copy input data to gmeHeader  		for (int i = 0; i < 3904; i++)  			gmeHeader [i] = tempData [i];  		break;  	case "VgsM":  		//VGS Memory Card  		startOffset = 64;  		cardType = 3;  		break;  	case "PMV":  		//PSP virtual Memory Card  		startOffset = 128;  		cardType = 4;  		break;  	}  	//Copy data to rawMemoryCard array with offset from input data  	Array.Copy (tempData' startOffset' rawMemoryCard' 0' 131072);  	//Load Memory Card data from raw card  	loadDataFromRawCard ();  }  // Memory Card should be created  else {  	cardName = "Untitled";  	formatMemoryCard ();  	//Set changedFlag to false since this is created card  	changedFlag = false;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: if (fileName != null) {  	byte[] tempData = new byte[134976];  	string tempString = null;  	int startOffset = 0;  	BinaryReader binReader = null;  	//Check if the file is allowed to be opened  	try {  		binReader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite));  	}  	catch (Exception errorException) {  		//Return the error description  		return errorException.Message;  	}  	//Put data into temp array  	binReader.BaseStream.Read (tempData' 0' 134976);  	//File is sucesfully read' close the stream  	binReader.Close ();  	//Store the location of the Memory Card  	cardLocation = fileName;  	//Store the filename of the Memory Card  	cardName = Path.GetFileNameWithoutExtension (fileName);  	//Check the format of the card and if it's supported load it (filter illegal characters from types)  	tempString = Encoding.ASCII.GetString (tempData' 0' 11).Trim ((char)0x0' (char)0x1' (char)0x3F);  	switch (tempString) {  	default:  		//File type is not supported  		return "'" + cardName + "' is not a supported Memory Card format.";  	case "MC":  		//Standard raw Memory Card  		startOffset = 0;  		cardType = 1;  		break;  	case "123-456-STD":  		//DexDrive GME Memory Card  		startOffset = 3904;  		cardType = 2;  		//Copy input data to gmeHeader  		for (int i = 0; i < 3904; i++)  			gmeHeader [i] = tempData [i];  		break;  	case "VgsM":  		//VGS Memory Card  		startOffset = 64;  		cardType = 3;  		break;  	case "PMV":  		//PSP virtual Memory Card  		startOffset = 128;  		cardType = 4;  		break;  	}  	//Copy data to rawMemoryCard array with offset from input data  	Array.Copy (tempData' startOffset' rawMemoryCard' 0' 131072);  	//Load Memory Card data from raw card  	loadDataFromRawCard ();  }  // Memory Card should be created  else {  	cardName = "Untitled";  	formatMemoryCard ();  	//Set changedFlag to false since this is created card  	changedFlag = false;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: if (fileName != null) {  	byte[] tempData = new byte[134976];  	string tempString = null;  	int startOffset = 0;  	BinaryReader binReader = null;  	//Check if the file is allowed to be opened  	try {  		binReader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite));  	}  	catch (Exception errorException) {  		//Return the error description  		return errorException.Message;  	}  	//Put data into temp array  	binReader.BaseStream.Read (tempData' 0' 134976);  	//File is sucesfully read' close the stream  	binReader.Close ();  	//Store the location of the Memory Card  	cardLocation = fileName;  	//Store the filename of the Memory Card  	cardName = Path.GetFileNameWithoutExtension (fileName);  	//Check the format of the card and if it's supported load it (filter illegal characters from types)  	tempString = Encoding.ASCII.GetString (tempData' 0' 11).Trim ((char)0x0' (char)0x1' (char)0x3F);  	switch (tempString) {  	default:  		//File type is not supported  		return "'" + cardName + "' is not a supported Memory Card format.";  	case "MC":  		//Standard raw Memory Card  		startOffset = 0;  		cardType = 1;  		break;  	case "123-456-STD":  		//DexDrive GME Memory Card  		startOffset = 3904;  		cardType = 2;  		//Copy input data to gmeHeader  		for (int i = 0; i < 3904; i++)  			gmeHeader [i] = tempData [i];  		break;  	case "VgsM":  		//VGS Memory Card  		startOffset = 64;  		cardType = 3;  		break;  	case "PMV":  		//PSP virtual Memory Card  		startOffset = 128;  		cardType = 4;  		break;  	}  	//Copy data to rawMemoryCard array with offset from input data  	Array.Copy (tempData' startOffset' rawMemoryCard' 0' 131072);  	//Load Memory Card data from raw card  	loadDataFromRawCard ();  }  // Memory Card should be created  else {  	cardName = "Untitled";  	formatMemoryCard ();  	//Set changedFlag to false since this is created card  	changedFlag = false;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: if (fileName != null) {  	byte[] tempData = new byte[134976];  	string tempString = null;  	int startOffset = 0;  	BinaryReader binReader = null;  	//Check if the file is allowed to be opened  	try {  		binReader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite));  	}  	catch (Exception errorException) {  		//Return the error description  		return errorException.Message;  	}  	//Put data into temp array  	binReader.BaseStream.Read (tempData' 0' 134976);  	//File is sucesfully read' close the stream  	binReader.Close ();  	//Store the location of the Memory Card  	cardLocation = fileName;  	//Store the filename of the Memory Card  	cardName = Path.GetFileNameWithoutExtension (fileName);  	//Check the format of the card and if it's supported load it (filter illegal characters from types)  	tempString = Encoding.ASCII.GetString (tempData' 0' 11).Trim ((char)0x0' (char)0x1' (char)0x3F);  	switch (tempString) {  	default:  		//File type is not supported  		return "'" + cardName + "' is not a supported Memory Card format.";  	case "MC":  		//Standard raw Memory Card  		startOffset = 0;  		cardType = 1;  		break;  	case "123-456-STD":  		//DexDrive GME Memory Card  		startOffset = 3904;  		cardType = 2;  		//Copy input data to gmeHeader  		for (int i = 0; i < 3904; i++)  			gmeHeader [i] = tempData [i];  		break;  	case "VgsM":  		//VGS Memory Card  		startOffset = 64;  		cardType = 3;  		break;  	case "PMV":  		//PSP virtual Memory Card  		startOffset = 128;  		cardType = 4;  		break;  	}  	//Copy data to rawMemoryCard array with offset from input data  	Array.Copy (tempData' startOffset' rawMemoryCard' 0' 131072);  	//Load Memory Card data from raw card  	loadDataFromRawCard ();  }  // Memory Card should be created  else {  	cardName = "Untitled";  	formatMemoryCard ();  	//Set changedFlag to false since this is created card  	changedFlag = false;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: if (fileName != null) {  	byte[] tempData = new byte[134976];  	string tempString = null;  	int startOffset = 0;  	BinaryReader binReader = null;  	//Check if the file is allowed to be opened  	try {  		binReader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite));  	}  	catch (Exception errorException) {  		//Return the error description  		return errorException.Message;  	}  	//Put data into temp array  	binReader.BaseStream.Read (tempData' 0' 134976);  	//File is sucesfully read' close the stream  	binReader.Close ();  	//Store the location of the Memory Card  	cardLocation = fileName;  	//Store the filename of the Memory Card  	cardName = Path.GetFileNameWithoutExtension (fileName);  	//Check the format of the card and if it's supported load it (filter illegal characters from types)  	tempString = Encoding.ASCII.GetString (tempData' 0' 11).Trim ((char)0x0' (char)0x1' (char)0x3F);  	switch (tempString) {  	default:  		//File type is not supported  		return "'" + cardName + "' is not a supported Memory Card format.";  	case "MC":  		//Standard raw Memory Card  		startOffset = 0;  		cardType = 1;  		break;  	case "123-456-STD":  		//DexDrive GME Memory Card  		startOffset = 3904;  		cardType = 2;  		//Copy input data to gmeHeader  		for (int i = 0; i < 3904; i++)  			gmeHeader [i] = tempData [i];  		break;  	case "VgsM":  		//VGS Memory Card  		startOffset = 64;  		cardType = 3;  		break;  	case "PMV":  		//PSP virtual Memory Card  		startOffset = 128;  		cardType = 4;  		break;  	}  	//Copy data to rawMemoryCard array with offset from input data  	Array.Copy (tempData' startOffset' rawMemoryCard' 0' 131072);  	//Load Memory Card data from raw card  	loadDataFromRawCard ();  }  // Memory Card should be created  else {  	cardName = "Untitled";  	formatMemoryCard ();  	//Set changedFlag to false since this is created card  	changedFlag = false;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: if (fileName != null) {  	byte[] tempData = new byte[134976];  	string tempString = null;  	int startOffset = 0;  	BinaryReader binReader = null;  	//Check if the file is allowed to be opened  	try {  		binReader = new BinaryReader (File.Open (fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite));  	}  	catch (Exception errorException) {  		//Return the error description  		return errorException.Message;  	}  	//Put data into temp array  	binReader.BaseStream.Read (tempData' 0' 134976);  	//File is sucesfully read' close the stream  	binReader.Close ();  	//Store the location of the Memory Card  	cardLocation = fileName;  	//Store the filename of the Memory Card  	cardName = Path.GetFileNameWithoutExtension (fileName);  	//Check the format of the card and if it's supported load it (filter illegal characters from types)  	tempString = Encoding.ASCII.GetString (tempData' 0' 11).Trim ((char)0x0' (char)0x1' (char)0x3F);  	switch (tempString) {  	default:  		//File type is not supported  		return "'" + cardName + "' is not a supported Memory Card format.";  	case "MC":  		//Standard raw Memory Card  		startOffset = 0;  		cardType = 1;  		break;  	case "123-456-STD":  		//DexDrive GME Memory Card  		startOffset = 3904;  		cardType = 2;  		//Copy input data to gmeHeader  		for (int i = 0; i < 3904; i++)  			gmeHeader [i] = tempData [i];  		break;  	case "VgsM":  		//VGS Memory Card  		startOffset = 64;  		cardType = 3;  		break;  	case "PMV":  		//PSP virtual Memory Card  		startOffset = 128;  		cardType = 4;  		break;  	}  	//Copy data to rawMemoryCard array with offset from input data  	Array.Copy (tempData' startOffset' rawMemoryCard' 0' 131072);  	//Load Memory Card data from raw card  	loadDataFromRawCard ();  }  // Memory Card should be created  else {  	cardName = "Untitled";  	formatMemoryCard ();  	//Set changedFlag to false since this is created card  	changedFlag = false;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: binReader.BaseStream.Read (tempData' 0' 134976);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: tempString = Encoding.ASCII.GetString (tempData' 0' 11).Trim ((char)0x0' (char)0x1' (char)0x3F);  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: switch (tempString) {  default:  	//File type is not supported  	return "'" + cardName + "' is not a supported Memory Card format.";  case "MC":  	//Standard raw Memory Card  	startOffset = 0;  	cardType = 1;  	break;  case "123-456-STD":  	//DexDrive GME Memory Card  	startOffset = 3904;  	cardType = 2;  	//Copy input data to gmeHeader  	for (int i = 0; i < 3904; i++)  		gmeHeader [i] = tempData [i];  	break;  case "VgsM":  	//VGS Memory Card  	startOffset = 64;  	cardType = 3;  	break;  case "PMV":  	//PSP virtual Memory Card  	startOffset = 128;  	cardType = 4;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: switch (tempString) {  default:  	//File type is not supported  	return "'" + cardName + "' is not a supported Memory Card format.";  case "MC":  	//Standard raw Memory Card  	startOffset = 0;  	cardType = 1;  	break;  case "123-456-STD":  	//DexDrive GME Memory Card  	startOffset = 3904;  	cardType = 2;  	//Copy input data to gmeHeader  	for (int i = 0; i < 3904; i++)  		gmeHeader [i] = tempData [i];  	break;  case "VgsM":  	//VGS Memory Card  	startOffset = 64;  	cardType = 3;  	break;  case "PMV":  	//PSP virtual Memory Card  	startOffset = 128;  	cardType = 4;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: switch (tempString) {  default:  	//File type is not supported  	return "'" + cardName + "' is not a supported Memory Card format.";  case "MC":  	//Standard raw Memory Card  	startOffset = 0;  	cardType = 1;  	break;  case "123-456-STD":  	//DexDrive GME Memory Card  	startOffset = 3904;  	cardType = 2;  	//Copy input data to gmeHeader  	for (int i = 0; i < 3904; i++)  		gmeHeader [i] = tempData [i];  	break;  case "VgsM":  	//VGS Memory Card  	startOffset = 64;  	cardType = 3;  	break;  case "PMV":  	//PSP virtual Memory Card  	startOffset = 128;  	cardType = 4;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: switch (tempString) {  default:  	//File type is not supported  	return "'" + cardName + "' is not a supported Memory Card format.";  case "MC":  	//Standard raw Memory Card  	startOffset = 0;  	cardType = 1;  	break;  case "123-456-STD":  	//DexDrive GME Memory Card  	startOffset = 3904;  	cardType = 2;  	//Copy input data to gmeHeader  	for (int i = 0; i < 3904; i++)  		gmeHeader [i] = tempData [i];  	break;  case "VgsM":  	//VGS Memory Card  	startOffset = 64;  	cardType = 3;  	break;  case "PMV":  	//PSP virtual Memory Card  	startOffset = 128;  	cardType = 4;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: switch (tempString) {  default:  	//File type is not supported  	return "'" + cardName + "' is not a supported Memory Card format.";  case "MC":  	//Standard raw Memory Card  	startOffset = 0;  	cardType = 1;  	break;  case "123-456-STD":  	//DexDrive GME Memory Card  	startOffset = 3904;  	cardType = 2;  	//Copy input data to gmeHeader  	for (int i = 0; i < 3904; i++)  		gmeHeader [i] = tempData [i];  	break;  case "VgsM":  	//VGS Memory Card  	startOffset = 64;  	cardType = 3;  	break;  case "PMV":  	//PSP virtual Memory Card  	startOffset = 128;  	cardType = 4;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: switch (tempString) {  default:  	//File type is not supported  	return "'" + cardName + "' is not a supported Memory Card format.";  case "MC":  	//Standard raw Memory Card  	startOffset = 0;  	cardType = 1;  	break;  case "123-456-STD":  	//DexDrive GME Memory Card  	startOffset = 3904;  	cardType = 2;  	//Copy input data to gmeHeader  	for (int i = 0; i < 3904; i++)  		gmeHeader [i] = tempData [i];  	break;  case "VgsM":  	//VGS Memory Card  	startOffset = 64;  	cardType = 3;  	break;  case "PMV":  	//PSP virtual Memory Card  	startOffset = 128;  	cardType = 4;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: switch (tempString) {  default:  	//File type is not supported  	return "'" + cardName + "' is not a supported Memory Card format.";  case "MC":  	//Standard raw Memory Card  	startOffset = 0;  	cardType = 1;  	break;  case "123-456-STD":  	//DexDrive GME Memory Card  	startOffset = 3904;  	cardType = 2;  	//Copy input data to gmeHeader  	for (int i = 0; i < 3904; i++)  		gmeHeader [i] = tempData [i];  	break;  case "VgsM":  	//VGS Memory Card  	startOffset = 64;  	cardType = 3;  	break;  case "PMV":  	//PSP virtual Memory Card  	startOffset = 128;  	cardType = 4;  	break;  }  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: startOffset = 3904;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: cardType = 2;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: for (int i = 0; i < 3904; i++)  	gmeHeader [i] = tempData [i];  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: startOffset = 64;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: cardType = 3;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: startOffset = 128;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: cardType = 4;  
Magic Number,MemcardRex,ps1card,C:\repos\ShendoXT_memcardrex\MemcardRex\ps1card.cs,openMemoryCard,The following statement contains a magic number: Array.Copy (tempData' startOffset' rawMemoryCard' 0' 131072);  
Magic Number,MemcardRex,charConverter,C:\repos\ShendoXT_memcardrex\MemcardRex\sjisConverter.cs,convertSJIStoASCII,The following statement contains a magic number: for (int bCounter = 0; bCounter < bData.Length; bCounter += 2) {  	switch ((bData [bCounter] << 8) | bData [bCounter + 1]) {  	default:  		//Character not found  		break;  	case 0x0000:  		//End of the string  		return output;  	case 0x8140:  		output += "  ";  		break;  	case 0x8143:  		output += ''';  		break;  	case 0x8144:  		output += '.';  		break;  	case 0x8145:  		output += '·';  		break;  	case 0x8146:  		output += ':';  		break;  	case 0x8147:  		output += ';';  		break;  	case 0x8148:  		output += '?';  		break;  	case 0x8149:  		output += '!';  		break;  	case 0x814F:  		output += '^';  		break;  	case 0x8151:  		output += '_';  		break;  	case 0x815B:  	case 0x815C:  	case 0x815D:  		output += '-';  		break;  	case 0x815E:  		output += '/';  		break;  	case 0x815F:  		output += '\\';  		break;  	case 0x8160:  		output += '~';  		break;  	case 0x8161:  		output += '|';  		break;  	case 0x8168:  		output += "\"";  		break;  	case 0x8169:  		output += '(';  		break;  	case 0x816A:  		output += ')';  		break;  	case 0x816D:  		output += '[';  		break;  	case 0x816E:  		output += ']';  		break;  	case 0x816F:  		output += '{';  		break;  	case 0x8170:  		output += '}';  		break;  	case 0x817B:  		output += '+';  		break;  	case 0x817C:  		output += '-';  		break;  	case 0x817D:  		output += '±';  		break;  	case 0x817E:  		output += '*';  		break;  	case 0x8180:  		output += '÷';  		break;  	case 0x8181:  		output += '=';  		break;  	case 0x8183:  		output += '<';  		break;  	case 0x8184:  		output += '>';  		break;  	case 0x818A:  		output += '°';  		break;  	case 0x818B:  		output += '\'';  		break;  	case 0x818C:  		output += '\"';  		break;  	case 0x8190:  		output += '$';  		break;  	case 0x8193:  		output += '%';  		break;  	case 0x8194:  		output += '#';  		break;  	case 0x8195:  		output += '&';  		break;  	case 0x8196:  		output += '*';  		break;  	case 0x8197:  		output += '@';  		break;  	case 0x824F:  		output += '0';  		break;  	case 0x8250:  		output += '1';  		break;  	case 0x8251:  		output += '2';  		break;  	case 0x8252:  		output += '3';  		break;  	case 0x8253:  		output += '4';  		break;  	case 0x8254:  		output += '5';  		break;  	case 0x8255:  		output += '6';  		break;  	case 0x8256:  		output += '7';  		break;  	case 0x8257:  		output += '8';  		break;  	case 0x8258:  		output += '9';  		break;  	case 0x8260:  		output += 'A';  		break;  	case 0x8261:  		output += 'B';  		break;  	case 0x8262:  		output += 'C';  		break;  	case 0x8263:  		output += 'D';  		break;  	case 0x8264:  		output += 'E';  		break;  	case 0x8265:  		output += 'F';  		break;  	case 0x8266:  		output += 'G';  		break;  	case 0x8267:  		output += 'H';  		break;  	case 0x8268:  		output += 'I';  		break;  	case 0x8269:  		output += 'J';  		break;  	case 0x826A:  		output += 'K';  		break;  	case 0x826B:  		output += 'L';  		break;  	case 0x826C:  		output += 'M';  		break;  	case 0x826D:  		output += 'N';  		break;  	case 0x826E:  		output += 'O';  		break;  	case 0x826F:  		output += 'P';  		break;  	case 0x8270:  		output += 'Q';  		break;  	case 0x8271:  		output += 'R';  		break;  	case 0x8272:  		output += 'S';  		break;  	case 0x8273:  		output += 'T';  		break;  	case 0x8274:  		output += 'U';  		break;  	case 0x8275:  		output += 'V';  		break;  	case 0x8276:  		output += 'W';  		break;  	case 0x8277:  		output += 'X';  		break;  	case 0x8278:  		output += 'Y';  		break;  	case 0x8279:  		output += 'Z';  		break;  	case 0x8281:  		output += 'a';  		break;  	case 0x8282:  		output += 'b';  		break;  	case 0x8283:  		output += 'c';  		break;  	case 0x8284:  		output += 'd';  		break;  	case 0x8285:  		output += 'e';  		break;  	case 0x8286:  		output += 'f';  		break;  	case 0x8287:  		output += 'g';  		break;  	case 0x8288:  		output += 'h';  		break;  	case 0x8289:  		output += 'i';  		break;  	case 0x828A:  		output += 'j';  		break;  	case 0x828B:  		output += 'k';  		break;  	case 0x828C:  		output += 'l';  		break;  	case 0x828D:  		output += 'm';  		break;  	case 0x828E:  		output += 'n';  		break;  	case 0x828F:  		output += 'o';  		break;  	case 0x8290:  		output += 'p';  		break;  	case 0x8291:  		output += 'q';  		break;  	case 0x8292:  		output += 'r';  		break;  	case 0x8293:  		output += 's';  		break;  	case 0x8294:  		output += 't';  		break;  	case 0x8295:  		output += 'u';  		break;  	case 0x8296:  		output += 'v';  		break;  	case 0x8297:  		output += 'w';  		break;  	case 0x8298:  		output += 'x';  		break;  	case 0x8299:  		output += 'y';  		break;  	case 0x829A:  		output += 'z';  		break;  	}  }  
Magic Number,MemcardRex,charConverter,C:\repos\ShendoXT_memcardrex\MemcardRex\sjisConverter.cs,convertSJIStoASCII,The following statement contains a magic number: for (int bCounter = 0; bCounter < bData.Length; bCounter += 2) {  	switch ((bData [bCounter] << 8) | bData [bCounter + 1]) {  	default:  		//Character not found  		break;  	case 0x0000:  		//End of the string  		return output;  	case 0x8140:  		output += "  ";  		break;  	case 0x8143:  		output += ''';  		break;  	case 0x8144:  		output += '.';  		break;  	case 0x8145:  		output += '·';  		break;  	case 0x8146:  		output += ':';  		break;  	case 0x8147:  		output += ';';  		break;  	case 0x8148:  		output += '?';  		break;  	case 0x8149:  		output += '!';  		break;  	case 0x814F:  		output += '^';  		break;  	case 0x8151:  		output += '_';  		break;  	case 0x815B:  	case 0x815C:  	case 0x815D:  		output += '-';  		break;  	case 0x815E:  		output += '/';  		break;  	case 0x815F:  		output += '\\';  		break;  	case 0x8160:  		output += '~';  		break;  	case 0x8161:  		output += '|';  		break;  	case 0x8168:  		output += "\"";  		break;  	case 0x8169:  		output += '(';  		break;  	case 0x816A:  		output += ')';  		break;  	case 0x816D:  		output += '[';  		break;  	case 0x816E:  		output += ']';  		break;  	case 0x816F:  		output += '{';  		break;  	case 0x8170:  		output += '}';  		break;  	case 0x817B:  		output += '+';  		break;  	case 0x817C:  		output += '-';  		break;  	case 0x817D:  		output += '±';  		break;  	case 0x817E:  		output += '*';  		break;  	case 0x8180:  		output += '÷';  		break;  	case 0x8181:  		output += '=';  		break;  	case 0x8183:  		output += '<';  		break;  	case 0x8184:  		output += '>';  		break;  	case 0x818A:  		output += '°';  		break;  	case 0x818B:  		output += '\'';  		break;  	case 0x818C:  		output += '\"';  		break;  	case 0x8190:  		output += '$';  		break;  	case 0x8193:  		output += '%';  		break;  	case 0x8194:  		output += '#';  		break;  	case 0x8195:  		output += '&';  		break;  	case 0x8196:  		output += '*';  		break;  	case 0x8197:  		output += '@';  		break;  	case 0x824F:  		output += '0';  		break;  	case 0x8250:  		output += '1';  		break;  	case 0x8251:  		output += '2';  		break;  	case 0x8252:  		output += '3';  		break;  	case 0x8253:  		output += '4';  		break;  	case 0x8254:  		output += '5';  		break;  	case 0x8255:  		output += '6';  		break;  	case 0x8256:  		output += '7';  		break;  	case 0x8257:  		output += '8';  		break;  	case 0x8258:  		output += '9';  		break;  	case 0x8260:  		output += 'A';  		break;  	case 0x8261:  		output += 'B';  		break;  	case 0x8262:  		output += 'C';  		break;  	case 0x8263:  		output += 'D';  		break;  	case 0x8264:  		output += 'E';  		break;  	case 0x8265:  		output += 'F';  		break;  	case 0x8266:  		output += 'G';  		break;  	case 0x8267:  		output += 'H';  		break;  	case 0x8268:  		output += 'I';  		break;  	case 0x8269:  		output += 'J';  		break;  	case 0x826A:  		output += 'K';  		break;  	case 0x826B:  		output += 'L';  		break;  	case 0x826C:  		output += 'M';  		break;  	case 0x826D:  		output += 'N';  		break;  	case 0x826E:  		output += 'O';  		break;  	case 0x826F:  		output += 'P';  		break;  	case 0x8270:  		output += 'Q';  		break;  	case 0x8271:  		output += 'R';  		break;  	case 0x8272:  		output += 'S';  		break;  	case 0x8273:  		output += 'T';  		break;  	case 0x8274:  		output += 'U';  		break;  	case 0x8275:  		output += 'V';  		break;  	case 0x8276:  		output += 'W';  		break;  	case 0x8277:  		output += 'X';  		break;  	case 0x8278:  		output += 'Y';  		break;  	case 0x8279:  		output += 'Z';  		break;  	case 0x8281:  		output += 'a';  		break;  	case 0x8282:  		output += 'b';  		break;  	case 0x8283:  		output += 'c';  		break;  	case 0x8284:  		output += 'd';  		break;  	case 0x8285:  		output += 'e';  		break;  	case 0x8286:  		output += 'f';  		break;  	case 0x8287:  		output += 'g';  		break;  	case 0x8288:  		output += 'h';  		break;  	case 0x8289:  		output += 'i';  		break;  	case 0x828A:  		output += 'j';  		break;  	case 0x828B:  		output += 'k';  		break;  	case 0x828C:  		output += 'l';  		break;  	case 0x828D:  		output += 'm';  		break;  	case 0x828E:  		output += 'n';  		break;  	case 0x828F:  		output += 'o';  		break;  	case 0x8290:  		output += 'p';  		break;  	case 0x8291:  		output += 'q';  		break;  	case 0x8292:  		output += 'r';  		break;  	case 0x8293:  		output += 's';  		break;  	case 0x8294:  		output += 't';  		break;  	case 0x8295:  		output += 'u';  		break;  	case 0x8296:  		output += 'v';  		break;  	case 0x8297:  		output += 'w';  		break;  	case 0x8298:  		output += 'x';  		break;  	case 0x8299:  		output += 'y';  		break;  	case 0x829A:  		output += 'z';  		break;  	}  }  
Magic Number,MemcardRex,charConverter,C:\repos\ShendoXT_memcardrex\MemcardRex\sjisConverter.cs,convertSJIStoASCII,The following statement contains a magic number: bCounter += 2
Magic Number,MemcardRex,charConverter,C:\repos\ShendoXT_memcardrex\MemcardRex\sjisConverter.cs,convertSJIStoASCII,The following statement contains a magic number: switch ((bData [bCounter] << 8) | bData [bCounter + 1]) {  default:  	//Character not found  	break;  case 0x0000:  	//End of the string  	return output;  case 0x8140:  	output += "  ";  	break;  case 0x8143:  	output += ''';  	break;  case 0x8144:  	output += '.';  	break;  case 0x8145:  	output += '·';  	break;  case 0x8146:  	output += ':';  	break;  case 0x8147:  	output += ';';  	break;  case 0x8148:  	output += '?';  	break;  case 0x8149:  	output += '!';  	break;  case 0x814F:  	output += '^';  	break;  case 0x8151:  	output += '_';  	break;  case 0x815B:  case 0x815C:  case 0x815D:  	output += '-';  	break;  case 0x815E:  	output += '/';  	break;  case 0x815F:  	output += '\\';  	break;  case 0x8160:  	output += '~';  	break;  case 0x8161:  	output += '|';  	break;  case 0x8168:  	output += "\"";  	break;  case 0x8169:  	output += '(';  	break;  case 0x816A:  	output += ')';  	break;  case 0x816D:  	output += '[';  	break;  case 0x816E:  	output += ']';  	break;  case 0x816F:  	output += '{';  	break;  case 0x8170:  	output += '}';  	break;  case 0x817B:  	output += '+';  	break;  case 0x817C:  	output += '-';  	break;  case 0x817D:  	output += '±';  	break;  case 0x817E:  	output += '*';  	break;  case 0x8180:  	output += '÷';  	break;  case 0x8181:  	output += '=';  	break;  case 0x8183:  	output += '<';  	break;  case 0x8184:  	output += '>';  	break;  case 0x818A:  	output += '°';  	break;  case 0x818B:  	output += '\'';  	break;  case 0x818C:  	output += '\"';  	break;  case 0x8190:  	output += '$';  	break;  case 0x8193:  	output += '%';  	break;  case 0x8194:  	output += '#';  	break;  case 0x8195:  	output += '&';  	break;  case 0x8196:  	output += '*';  	break;  case 0x8197:  	output += '@';  	break;  case 0x824F:  	output += '0';  	break;  case 0x8250:  	output += '1';  	break;  case 0x8251:  	output += '2';  	break;  case 0x8252:  	output += '3';  	break;  case 0x8253:  	output += '4';  	break;  case 0x8254:  	output += '5';  	break;  case 0x8255:  	output += '6';  	break;  case 0x8256:  	output += '7';  	break;  case 0x8257:  	output += '8';  	break;  case 0x8258:  	output += '9';  	break;  case 0x8260:  	output += 'A';  	break;  case 0x8261:  	output += 'B';  	break;  case 0x8262:  	output += 'C';  	break;  case 0x8263:  	output += 'D';  	break;  case 0x8264:  	output += 'E';  	break;  case 0x8265:  	output += 'F';  	break;  case 0x8266:  	output += 'G';  	break;  case 0x8267:  	output += 'H';  	break;  case 0x8268:  	output += 'I';  	break;  case 0x8269:  	output += 'J';  	break;  case 0x826A:  	output += 'K';  	break;  case 0x826B:  	output += 'L';  	break;  case 0x826C:  	output += 'M';  	break;  case 0x826D:  	output += 'N';  	break;  case 0x826E:  	output += 'O';  	break;  case 0x826F:  	output += 'P';  	break;  case 0x8270:  	output += 'Q';  	break;  case 0x8271:  	output += 'R';  	break;  case 0x8272:  	output += 'S';  	break;  case 0x8273:  	output += 'T';  	break;  case 0x8274:  	output += 'U';  	break;  case 0x8275:  	output += 'V';  	break;  case 0x8276:  	output += 'W';  	break;  case 0x8277:  	output += 'X';  	break;  case 0x8278:  	output += 'Y';  	break;  case 0x8279:  	output += 'Z';  	break;  case 0x8281:  	output += 'a';  	break;  case 0x8282:  	output += 'b';  	break;  case 0x8283:  	output += 'c';  	break;  case 0x8284:  	output += 'd';  	break;  case 0x8285:  	output += 'e';  	break;  case 0x8286:  	output += 'f';  	break;  case 0x8287:  	output += 'g';  	break;  case 0x8288:  	output += 'h';  	break;  case 0x8289:  	output += 'i';  	break;  case 0x828A:  	output += 'j';  	break;  case 0x828B:  	output += 'k';  	break;  case 0x828C:  	output += 'l';  	break;  case 0x828D:  	output += 'm';  	break;  case 0x828E:  	output += 'n';  	break;  case 0x828F:  	output += 'o';  	break;  case 0x8290:  	output += 'p';  	break;  case 0x8291:  	output += 'q';  	break;  case 0x8292:  	output += 'r';  	break;  case 0x8293:  	output += 's';  	break;  case 0x8294:  	output += 't';  	break;  case 0x8295:  	output += 'u';  	break;  case 0x8296:  	output += 'v';  	break;  case 0x8297:  	output += 'w';  	break;  case 0x8298:  	output += 'x';  	break;  case 0x8299:  	output += 'y';  	break;  case 0x829A:  	output += 'z';  	break;  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The following statement contains a magic number: OpenedPort = new SerialPort (ComPortName' 38400' Parity.None' 8' StopBits.One);  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The following statement contains a magic number: OpenedPort = new SerialPort (ComPortName' 38400' Parity.None' 8' StopBits.One);  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The following statement contains a magic number: OpenedPort.ReadBufferSize = 256;  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The following statement contains a magic number: SendDataToPort ((byte)PS1CLnkCommands.GETID' 100);  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The following statement contains a magic number: if (ReadData [0] != 'P' || ReadData [1] != 'S' || ReadData [2] != '1' || ReadData [3] != 'C' || ReadData [4] != 'L' || ReadData [5] != 'N' || ReadData [6] != 'K') {  	return "PS1CardLink was not detected on '" + ComPortName + "' port.";  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The following statement contains a magic number: if (ReadData [0] != 'P' || ReadData [1] != 'S' || ReadData [2] != '1' || ReadData [3] != 'C' || ReadData [4] != 'L' || ReadData [5] != 'N' || ReadData [6] != 'K') {  	return "PS1CardLink was not detected on '" + ComPortName + "' port.";  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The following statement contains a magic number: if (ReadData [0] != 'P' || ReadData [1] != 'S' || ReadData [2] != '1' || ReadData [3] != 'C' || ReadData [4] != 'L' || ReadData [5] != 'N' || ReadData [6] != 'K') {  	return "PS1CardLink was not detected on '" + ComPortName + "' port.";  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The following statement contains a magic number: if (ReadData [0] != 'P' || ReadData [1] != 'S' || ReadData [2] != '1' || ReadData [3] != 'C' || ReadData [4] != 'L' || ReadData [5] != 'N' || ReadData [6] != 'K') {  	return "PS1CardLink was not detected on '" + ComPortName + "' port.";  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The following statement contains a magic number: if (ReadData [0] != 'P' || ReadData [1] != 'S' || ReadData [2] != '1' || ReadData [3] != 'C' || ReadData [4] != 'L' || ReadData [5] != 'N' || ReadData [6] != 'K') {  	return "PS1CardLink was not detected on '" + ComPortName + "' port.";  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The following statement contains a magic number: SendDataToPort ((byte)PS1CLnkCommands.GETVER' 30);  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,StartPS1CardLink,The following statement contains a magic number: SoftwareVersion = (ReadData [0] >> 4).ToString () + "." + (ReadData [0] & 0xF).ToString ();  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,ReadDataFromPort,The following statement contains a magic number: if (OpenedPort.BytesToRead != 0)  	OpenedPort.Read (InputStream' 0' 256);  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,ReadDataFromPort,The following statement contains a magic number: OpenedPort.Read (InputStream' 0' 256);  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,ReadMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 130 && DelayCounter < 18) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,ReadMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 130 && DelayCounter < 18) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,ReadMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 130 && DelayCounter < 18) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,ReadMemoryCardFrame,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,ReadMemoryCardFrame,The following statement contains a magic number: Array.Copy (ReadData' 0' ReturnDataBuffer' 0' 128);  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,ReadMemoryCardFrame,The following statement contains a magic number: for (int i = 0; i < 128; i++) {  	XorData ^= ReturnDataBuffer [i];  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,ReadMemoryCardFrame,The following statement contains a magic number: if (XorData != ReadData [128] || ReadData [129] != (byte)PS1CLnkResponses.GOOD)  	return null;  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,ReadMemoryCardFrame,The following statement contains a magic number: if (XorData != ReadData [128] || ReadData [129] != (byte)PS1CLnkResponses.GOOD)  	return null;  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,WriteMemoryCardFrame,The following statement contains a magic number: for (int i = 0; i < 128; i++) {  	XorData ^= FrameData [i];  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,WriteMemoryCardFrame,The following statement contains a magic number: OpenedPort.Write (FrameData' 0' 128);  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,WriteMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 1 && DelayCounter < 18) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,WriteMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 1 && DelayCounter < 18) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,PS1CardLinkCommunication,PS1CardLink,C:\repos\ShendoXT_memcardrex\MemcardRex\CardLink.cs,WriteMemoryCardFrame,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: OpenedPort = new SerialPort (ComPortName' 38400' Parity.None' 8' StopBits.One);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: OpenedPort = new SerialPort (ComPortName' 38400' Parity.None' 8' StopBits.One);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: OpenedPort.ReadBufferSize = 256;  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	OpenedPort.DiscardInBuffer ();  	OpenedPort.Write ("XXXXX");  	Thread.Sleep (20);  }  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	OpenedPort.DiscardInBuffer ();  	OpenedPort.Write ("XXXXX");  	Thread.Sleep (20);  }  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: Thread.Sleep (20);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: if (ReadData [0] != 0x49 || ReadData [1] != 0x41 || ReadData [2] != 0x49)  	return "DexDrive was not detected on '" + ComPortName + "' port.";  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: SendDataToPort ((byte)DexCommands.INIT' new byte[] {  	0x10'  	0xAA'  	0xBB'  	0xCC'  	0xDD'  	0xEE'  	0xFF'  	0xAA'  	0xBB'  	0xCC'  	0xDD'  	0xEE'  	0xFF'  	0xAA'  	0xBB'  	0xCC'  	0xDD  }' 50);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: if (ReadData [5] != 0x50 || ReadData [6] != 0x53 || ReadData [7] != 0x58)  	return "Detected device is not a PS1 DexDrive.";  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: if (ReadData [5] != 0x50 || ReadData [6] != 0x53 || ReadData [7] != 0x58)  	return "Detected device is not a PS1 DexDrive.";  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: if (ReadData [5] != 0x50 || ReadData [6] != 0x53 || ReadData [7] != 0x58)  	return "Detected device is not a PS1 DexDrive.";  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: FirmwareVersion = (ReadData [8] >> 6).ToString () + "." + ((ReadData [8] >> 2) & 0xF).ToString () + (ReadData [8] & 0x3).ToString ();  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: FirmwareVersion = (ReadData [8] >> 6).ToString () + "." + ((ReadData [8] >> 2) & 0xF).ToString () + (ReadData [8] & 0x3).ToString ();  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: FirmwareVersion = (ReadData [8] >> 6).ToString () + "." + ((ReadData [8] >> 2) & 0xF).ToString () + (ReadData [8] & 0x3).ToString ();  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: FirmwareVersion = (ReadData [8] >> 6).ToString () + "." + ((ReadData [8] >> 2) & 0xF).ToString () + (ReadData [8] & 0x3).ToString ();  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: FirmwareVersion = (ReadData [8] >> 6).ToString () + "." + ((ReadData [8] >> 2) & 0xF).ToString () + (ReadData [8] & 0x3).ToString ();  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: for (int i = 0; i < 10; i++)  	SendDataToPort ((byte)DexCommands.MAGIC_HANDSHAKE' null' 0);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,StartDexDrive,The following statement contains a magic number: SendDataToPort ((byte)DexCommands.LIGHT' new byte[] {  	1  }' 50);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,ReadDataFromPort,The following statement contains a magic number: if (OpenedPort.BytesToRead != 0)  	OpenedPort.Read (InputStream' 0' 256);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,ReadDataFromPort,The following statement contains a magic number: OpenedPort.Read (InputStream' 0' 256);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,ReadMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 133 && DelayCounter < 16) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,ReadMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 133 && DelayCounter < 16) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,ReadMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 133 && DelayCounter < 16) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,ReadMemoryCardFrame,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,ReadMemoryCardFrame,The following statement contains a magic number: Array.Copy (ReadData' 4' ReturnDataBuffer' 0' 128);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,ReadMemoryCardFrame,The following statement contains a magic number: Array.Copy (ReadData' 4' ReturnDataBuffer' 0' 128);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,ReadMemoryCardFrame,The following statement contains a magic number: for (int i = 0; i < 128; i++) {  	XorData ^= ReturnDataBuffer [i];  }  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,ReadMemoryCardFrame,The following statement contains a magic number: if (XorData != ReadData [132])  	return null;  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,WriteMemoryCardFrame,The following statement contains a magic number: for (int i = 0; i < 128; i++) {  	XorData ^= FrameData [i];  }  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,WriteMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 4 && DelayCounter < 20) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,WriteMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 4 && DelayCounter < 20) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,WriteMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 4 && DelayCounter < 20) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,WriteMemoryCardFrame,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,DexDriveCommunication,DexDrive,C:\repos\ShendoXT_memcardrex\MemcardRex\DexDrive.cs,ReverseByte,The following statement contains a magic number: while (i < 8) {  	if ((InputByte & (1 << i)) > 0)  		ReturnByte |= (byte)(1 << j);  	i++;  	j--;  }  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The following statement contains a magic number: OpenedPort = new SerialPort (ComPortName' 38400' Parity.None' 8' StopBits.One);  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The following statement contains a magic number: OpenedPort = new SerialPort (ComPortName' 38400' Parity.None' 8' StopBits.One);  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The following statement contains a magic number: OpenedPort.ReadBufferSize = 256;  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The following statement contains a magic number: SendDataToPort ((byte)MCinoCommands.GETID' 100);  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The following statement contains a magic number: if (ReadData [0] != 'M' || ReadData [1] != 'C' || ReadData [2] != 'D' || ReadData [3] != 'I' || ReadData [4] != 'N' || ReadData [5] != 'O') {  	return "MemCARDuino was not detected on '" + ComPortName + "' port.";  }  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The following statement contains a magic number: if (ReadData [0] != 'M' || ReadData [1] != 'C' || ReadData [2] != 'D' || ReadData [3] != 'I' || ReadData [4] != 'N' || ReadData [5] != 'O') {  	return "MemCARDuino was not detected on '" + ComPortName + "' port.";  }  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The following statement contains a magic number: if (ReadData [0] != 'M' || ReadData [1] != 'C' || ReadData [2] != 'D' || ReadData [3] != 'I' || ReadData [4] != 'N' || ReadData [5] != 'O') {  	return "MemCARDuino was not detected on '" + ComPortName + "' port.";  }  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The following statement contains a magic number: if (ReadData [0] != 'M' || ReadData [1] != 'C' || ReadData [2] != 'D' || ReadData [3] != 'I' || ReadData [4] != 'N' || ReadData [5] != 'O') {  	return "MemCARDuino was not detected on '" + ComPortName + "' port.";  }  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The following statement contains a magic number: SendDataToPort ((byte)MCinoCommands.GETVER' 30);  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,StartMemCARDuino,The following statement contains a magic number: FirmwareVersion = (ReadData [0] >> 4).ToString () + "." + (ReadData [0] & 0xF).ToString ();  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,ReadDataFromPort,The following statement contains a magic number: if (OpenedPort.BytesToRead != 0)  	OpenedPort.Read (InputStream' 0' 256);  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,ReadDataFromPort,The following statement contains a magic number: OpenedPort.Read (InputStream' 0' 256);  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,ReadMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 130 && DelayCounter < 18) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,ReadMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 130 && DelayCounter < 18) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,ReadMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 130 && DelayCounter < 18) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,ReadMemoryCardFrame,The following statement contains a magic number: Thread.Sleep (5);  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,ReadMemoryCardFrame,The following statement contains a magic number: Array.Copy (ReadData' 0' ReturnDataBuffer' 0' 128);  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,ReadMemoryCardFrame,The following statement contains a magic number: for (int i = 0; i < 128; i++) {  	XorData ^= ReturnDataBuffer [i];  }  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,ReadMemoryCardFrame,The following statement contains a magic number: if (XorData != ReadData [128] || ReadData [129] != (byte)MCinoResponses.GOOD)  	return null;  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,ReadMemoryCardFrame,The following statement contains a magic number: if (XorData != ReadData [128] || ReadData [129] != (byte)MCinoResponses.GOOD)  	return null;  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,WriteMemoryCardFrame,The following statement contains a magic number: for (int i = 0; i < 128; i++) {  	XorData ^= FrameData [i];  }  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,WriteMemoryCardFrame,The following statement contains a magic number: OpenedPort.Write (FrameData' 0' 128);  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,WriteMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 1 && DelayCounter < 18) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,WriteMemoryCardFrame,The following statement contains a magic number: while (OpenedPort.BytesToRead < 1 && DelayCounter < 18) {  	Thread.Sleep (5);  	DelayCounter++;  }  
Magic Number,MemCARDuinoCommunication,MemCARDuino,C:\repos\ShendoXT_memcardrex\MemcardRex\MemCARDduino.cs,WriteMemoryCardFrame,The following statement contains a magic number: Thread.Sleep (5);  
Missing Default,MemcardRex,informationWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\informationWindow.cs,drawIcons,The following switch statement is missing a default case: switch (iconBackColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 48' 48)));  	break;  }  
Missing Default,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,prepareIcons,The following switch statement is missing a default case: switch (mainSettings.iconBackgroundColor) {  case 1:  	//Black  	iconGraphics.FillRegion (new SolidBrush (Color.Black)' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 2:  	//Gray  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x30' 0x30' 0x30))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  case 3:  	//Blue  	iconGraphics.FillRegion (new SolidBrush (Color.FromArgb (0xFF' 0x44' 0x44' 0x98))' new Region (new Rectangle (0' 0' 16' 16)));  	break;  }  
Missing Default,MemcardRex,mainWindow,C:\repos\ShendoXT_memcardrex\MemcardRex\mainWindow.cs,formatHardwareCard,The following switch statement is missing a default case: switch (hardDevice) {  case 0:  	//DexDrive  	new cardReaderWindow ().writeMemoryCardDexDrive (this' appName' mainSettings.communicationPort' blankCard.saveMemoryCardStream ()' frameNumber);  	break;  case 1:  	//MemCARDuino  	new cardReaderWindow ().writeMemoryCardCARDuino (this' appName' mainSettings.communicationPort' blankCard.saveMemoryCardStream ()' frameNumber);  	break;  case 2:  	//PS1CardLink  	new cardReaderWindow ().writeMemoryCardPS1CLnk (this' appName' mainSettings.communicationPort' blankCard.saveMemoryCardStream ()' frameNumber);  	break;  }  
Missing Default,MemcardRex,xmlSettingsEditor,C:\repos\ShendoXT_memcardrex\MemcardRex\xmlSettingsEditor.cs,openXmlReader,The following switch statement is missing a default case: switch (xmlReader.NodeType) {  case XmlNodeType.Element:  	xmlElements.Add (xmlReader.Name);  	break;  case XmlNodeType.Text:  	xmlValues.Add (xmlReader.Value);  	break;  }  
