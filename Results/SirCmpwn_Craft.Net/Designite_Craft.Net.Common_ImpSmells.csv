Implementation smell,Namespace,Class,File,Method,Description
Long Method,Craft.Net.Common,AsnKeyParser,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,ParseRSAPrivateKey,The method has 104 lines of code.
Complex Method,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateOid,Cyclomatic complexity of the method is 10
Complex Method,Craft.Net.Common,AsnKeyParser,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,ParseRSAPrivateKey,Cyclomatic complexity of the method is 9
Complex Method,Craft.Net.Common,Ray,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Ray.cs,Intersects,Cyclomatic complexity of the method is 13
Long Statement,Craft.Net.Common,ItemStack,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\ItemStack.cs,Equals,The length of the statement  "            return _Id == other._Id && _Count == other._Count && _Metadata == other._Metadata && Index == other.Index && Equals(Nbt' other.Nbt); " is 132.
Complex Conditional,Craft.Net.Common,BoundingBox,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\BoundingBox.cs,Contains,The conditional expression  "box.Max.X < Min.X                  || box.Min.X > Max.X                  || box.Max.Y < Min.Y                  || box.Min.Y > Max.Y                  || box.Max.Z < Min.Z                  || box.Min.Z > Max.Z"  is complex.
Complex Conditional,Craft.Net.Common,BoundingBox,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\BoundingBox.cs,Contains,The conditional expression  "box.Min.X >= Min.X                  && box.Max.X <= Max.X                  && box.Min.Y >= Min.Y                  && box.Max.Y <= Max.Y                  && box.Min.Z >= Min.Z                  && box.Max.Z <= Max.Z"  is complex.
Complex Conditional,Craft.Net.Common,Ray,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Ray.cs,Intersects,The conditional expression  "Position.X >= box.Min.X                      && Position.X <= box.Max.X                      && Position.Y >= box.Min.Y                      && Position.Y <= box.Max.Y                      && Position.Z >= box.Min.Z                      && Position.Z <= box.Max.Z"  is complex.
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateBitString,The following statement contains a magic number: if (!(unusedBits < 8))              {                  throw new ArgumentException("Unused bits must be less than 8.");              }
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateBitString,The following statement contains a magic number: int unusedBits = 8 - (lstrlen%8);
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateBitString,The following statement contains a magic number: int unusedBits = 8 - (lstrlen%8);
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateBitString,The following statement contains a magic number: if (8 == unusedBits)              {                  unusedBits = 0;              }
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateBitString,The following statement contains a magic number: int loctlen = (lstrlen + 7)/8;
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateBitString,The following statement contains a magic number: int loctlen = (lstrlen + 7)/8;
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateBitString,The following statement contains a magic number: for (int i = 0; i < loctlen; i++)              {                  String s = value.Substring(i*8' 8);                  byte b = 0x00;                    try                  {                      b = Convert.ToByte(s' 2);                  }                    catch (FormatException /*e*/)                  {                      unusedBits = 0;                      break;                  }                  catch (OverflowException /*e*/)                  {                      unusedBits = 0;                      break;                  }                    octets.Add(b);              }
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateBitString,The following statement contains a magic number: for (int i = 0; i < loctlen; i++)              {                  String s = value.Substring(i*8' 8);                  byte b = 0x00;                    try                  {                      b = Convert.ToByte(s' 2);                  }                    catch (FormatException /*e*/)                  {                      unusedBits = 0;                      break;                  }                  catch (OverflowException /*e*/)                  {                      unusedBits = 0;                      break;                  }                    octets.Add(b);              }
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateBitString,The following statement contains a magic number: for (int i = 0; i < loctlen; i++)              {                  String s = value.Substring(i*8' 8);                  byte b = 0x00;                    try                  {                      b = Convert.ToByte(s' 2);                  }                    catch (FormatException /*e*/)                  {                      unusedBits = 0;                      break;                  }                  catch (OverflowException /*e*/)                  {                      unusedBits = 0;                      break;                  }                    octets.Add(b);              }
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateOctetString,The following statement contains a magic number: int len = (value.Length + 255)/256;
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateOctetString,The following statement contains a magic number: int len = (value.Length + 255)/256;
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateOctetString,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  String s = value.Substring(i*2' 2);                  byte b = 0x00;                    try                  {                      b = Convert.ToByte(s' 16);                  }                  catch (FormatException /*e*/)                  {                      break;                  }                  catch (OverflowException /*e*/)                  {                      break;                  }                    octets.Add(b);              }
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateOctetString,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  String s = value.Substring(i*2' 2);                  byte b = 0x00;                    try                  {                      b = Convert.ToByte(s' 16);                  }                  catch (FormatException /*e*/)                  {                      break;                  }                  catch (OverflowException /*e*/)                  {                      break;                  }                    octets.Add(b);              }
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateOctetString,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  String s = value.Substring(i*2' 2);                  byte b = 0x00;                    try                  {                      b = Convert.ToByte(s' 16);                  }                  catch (FormatException /*e*/)                  {                      break;                  }                  catch (OverflowException /*e*/)                  {                      break;                  }                    octets.Add(b);              }
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateOid,The following statement contains a magic number: if (arcs.Count >= 1)              {                  a = arcs[0]*40;              }
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateOid,The following statement contains a magic number: if (arcs.Count >= 2)              {                  a += arcs[1];              }
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateOid,The following statement contains a magic number: for (int i = 2; i < arcs.Count; i++)              {                  // Scratch list builder for this arc                  var temp = new List<byte>();                    // The current arc (subidentifier)                  UInt64 arc = arcs[i];                    // Build the arc (subidentifier) byte array                  // The array is built in reverse (LSB to MSB).                  do                  {                      // Each entry is formed from the low 7 bits (0x7F).                      // Set high bit of all entries (0x80) per X.680. We                      // will unset the high bit of the final byte later.                      temp.Add((byte)(0x80 | (arc & 0x7F)));                      arc >>= 7;                  } while (0 != arc);                    // Grab resulting array. Because of the do/while'                  // there is at least one value in the array.                  byte[] t = temp.ToArray();                    // Unset high bit of byte t[0]                  // t[0] will be LSB after the array is reversed.                  t[0] = (byte)(0x7F & t[0]);                    // MSB first...                  Array.Reverse(t);                    // Add to the resulting array                  foreach (byte b in t)                  {                      octets.Add(b);                  }              }
Magic Number,Craft.Net.Common,AsnKeyBuilder,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,CreateOid,The following statement contains a magic number: for (int i = 2; i < arcs.Count; i++)              {                  // Scratch list builder for this arc                  var temp = new List<byte>();                    // The current arc (subidentifier)                  UInt64 arc = arcs[i];                    // Build the arc (subidentifier) byte array                  // The array is built in reverse (LSB to MSB).                  do                  {                      // Each entry is formed from the low 7 bits (0x7F).                      // Set high bit of all entries (0x80) per X.680. We                      // will unset the high bit of the final byte later.                      temp.Add((byte)(0x80 | (arc & 0x7F)));                      arc >>= 7;                  } while (0 != arc);                    // Grab resulting array. Because of the do/while'                  // there is at least one value in the array.                  byte[] t = temp.ToArray();                    // Unset high bit of byte t[0]                  // t[0] will be LSB after the array is reversed.                  t[0] = (byte)(0x7F & t[0]);                    // MSB first...                  Array.Reverse(t);                    // Add to the resulting array                  foreach (byte b in t)                  {                      octets.Add(b);                  }              }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnType,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,SetLength,The following statement contains a magic number: if (mOctets.Length < 0x80)                  {                      length = new byte[1];                      length[0] = (byte)mOctets.Length;                  }                      // 0x80 < length <= 0xFF                  else if (mOctets.Length <= 0xFF)                  {                      length = new byte[2];                      length[0] = 0x81;                      length[1] = (byte)((mOctets.Length & 0xFF));                  }                        //                      // We should almost never see these...                      //                        // 0xFF < length <= 0xFFFF                  else if (mOctets.Length <= 0xFFFF)                  {                      length = new byte[3];                      length[0] = 0x82;                      length[1] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[2] = (byte)((mOctets.Length & 0xFF));                  }                        // 0xFFFF < length <= 0xFFFFFF                  else if (mOctets.Length <= 0xFFFFFF)                  {                      length = new byte[4];                      length[0] = 0x83;                      length[1] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[2] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[3] = (byte)((mOctets.Length & 0xFF));                  }                      // 0xFFFFFF < length <= 0xFFFFFFFF                  else                  {                      length = new byte[5];                      length[0] = 0x84;                      length[1] = (byte)((mOctets.Length & 0xFF000000) >> 24);                      length[2] = (byte)((mOctets.Length & 0xFF0000) >> 16);                      length[3] = (byte)((mOctets.Length & 0xFF00) >> 8);                      length[4] = (byte)((mOctets.Length & 0xFF));                  }
Magic Number,Craft.Net.Common,AsnKeyParser,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,ParseRSAPrivateKey,The following statement contains a magic number: if (0x00 != value[0])              {                  StringBuilder sb = new StringBuilder("Incorrect PrivateKeyInfo Version. ");                  BigInteger v = new BigInteger(value);                  sb.AppendFormat("Expected: 0' Specified: {0}"' v.ToString(10));                  throw new BerDecodeException(sb.ToString()' position);              }
Magic Number,Craft.Net.Common,AsnKeyParser,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,ParseRSAPrivateKey,The following statement contains a magic number: if (0x00 != value[0])              {                  StringBuilder sb = new StringBuilder("Incorrect RSAPrivateKey Version. ");                  BigInteger v = new BigInteger(value);                  sb.AppendFormat("Expected: 0' Specified: {0}"' v.ToString(10));                  throw new BerDecodeException(sb.ToString()' position);              }
Magic Number,Craft.Net.Common,AsnParser,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,GetLength,The following statement contains a magic number: try              {                  byte b = GetNextOctet();                    if (b == (b & 0x7f)) { return b; }                  int i = b & 0x7f;                    if (i > 4)                  {                      StringBuilder sb = new StringBuilder("Invalid Length Encoding. ");                      sb.AppendFormat("Length uses {0} octets"'                        i.ToString(CultureInfo.InvariantCulture));                      throw new BerDecodeException(sb.ToString()' position);                  }                    while (0 != i--)                  {                      // shift left                      length <<= 8;                        length |= GetNextOctet();                  }              }              catch (ArgumentOutOfRangeException ex)              { throw new BerDecodeException("Error Parsing Key"' position' ex); }
Magic Number,Craft.Net.Common,AsnParser,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Cryptography.cs,GetLength,The following statement contains a magic number: try              {                  byte b = GetNextOctet();                    if (b == (b & 0x7f)) { return b; }                  int i = b & 0x7f;                    if (i > 4)                  {                      StringBuilder sb = new StringBuilder("Invalid Length Encoding. ");                      sb.AppendFormat("Length uses {0} octets"'                        i.ToString(CultureInfo.InvariantCulture));                      throw new BerDecodeException(sb.ToString()' position);                  }                    while (0 != i--)                  {                      // shift left                      length <<= 8;                        length |= GetNextOctet();                  }              }              catch (ArgumentOutOfRangeException ex)              { throw new BerDecodeException("Error Parsing Key"' position' ex); }
Magic Number,Craft.Net.Common,ItemStack,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\ItemStack.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = _Id.GetHashCode();                  hashCode = (hashCode * 397) ^ _Count.GetHashCode();                  hashCode = (hashCode * 397) ^ _Metadata.GetHashCode();                  hashCode = (hashCode * 397) ^ Index;                  hashCode = (hashCode * 397) ^ (Nbt != null ? Nbt.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Craft.Net.Common,ItemStack,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\ItemStack.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = _Id.GetHashCode();                  hashCode = (hashCode * 397) ^ _Count.GetHashCode();                  hashCode = (hashCode * 397) ^ _Metadata.GetHashCode();                  hashCode = (hashCode * 397) ^ Index;                  hashCode = (hashCode * 397) ^ (Nbt != null ? Nbt.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Craft.Net.Common,ItemStack,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\ItemStack.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = _Id.GetHashCode();                  hashCode = (hashCode * 397) ^ _Count.GetHashCode();                  hashCode = (hashCode * 397) ^ _Metadata.GetHashCode();                  hashCode = (hashCode * 397) ^ Index;                  hashCode = (hashCode * 397) ^ (Nbt != null ? Nbt.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Craft.Net.Common,ItemStack,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\ItemStack.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = _Id.GetHashCode();                  hashCode = (hashCode * 397) ^ _Count.GetHashCode();                  hashCode = (hashCode * 397) ^ _Metadata.GetHashCode();                  hashCode = (hashCode * 397) ^ Index;                  hashCode = (hashCode * 397) ^ (Nbt != null ? Nbt.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,CreateRotationByte,The following statement contains a magic number: return (byte)(((value % 360) / 360) * 256);
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,CreateRotationByte,The following statement contains a magic number: return (byte)(((value % 360) / 360) * 256);
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,CreateRotationByte,The following statement contains a magic number: return (byte)(((value % 360) / 360) * 256);
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,CreateAbsoluteInt,The following statement contains a magic number: return (int)(value * 32);
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,Distance2D,The following statement contains a magic number: return Math.Sqrt(Math.Pow(b1 - a1' 2) + Math.Pow(b2 - a2' 2));
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,Distance2D,The following statement contains a magic number: return Math.Sqrt(Math.Pow(b1 - a1' 2) + Math.Pow(b2 - a2' 2));
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,DirectionByRotationFlat,The following statement contains a magic number: byte direction = (byte)((int)Math.Floor((yaw * 4F) / 360F + 0.5D) & 3);
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,DirectionByRotationFlat,The following statement contains a magic number: if (invert)                  switch (direction)                  {                      case 0: return Direction.North;                      case 1: return Direction.East;                      case 2: return Direction.South;                      case 3: return Direction.West;                  }              else                  switch (direction)                  {                      case 0: return Direction.South;                      case 1: return Direction.West;                      case 2: return Direction.North;                      case 3: return Direction.East;                  }
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,DirectionByRotationFlat,The following statement contains a magic number: if (invert)                  switch (direction)                  {                      case 0: return Direction.North;                      case 1: return Direction.East;                      case 2: return Direction.South;                      case 3: return Direction.West;                  }              else                  switch (direction)                  {                      case 0: return Direction.South;                      case 1: return Direction.West;                      case 2: return Direction.North;                      case 3: return Direction.East;                  }
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,DirectionByRotationFlat,The following statement contains a magic number: if (invert)                  switch (direction)                  {                      case 0: return Direction.North;                      case 1: return Direction.East;                      case 2: return Direction.South;                      case 3: return Direction.West;                  }              else                  switch (direction)                  {                      case 0: return Direction.South;                      case 1: return Direction.West;                      case 2: return Direction.North;                      case 3: return Direction.East;                  }
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,DirectionByRotationFlat,The following statement contains a magic number: if (invert)                  switch (direction)                  {                      case 0: return Direction.North;                      case 1: return Direction.East;                      case 2: return Direction.South;                      case 3: return Direction.West;                  }              else                  switch (direction)                  {                      case 0: return Direction.South;                      case 1: return Direction.West;                      case 2: return Direction.North;                      case 3: return Direction.East;                  }
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,DirectionByRotation,The following statement contains a magic number: if (d > (Math.PI / 4)) return invert ? (Direction)1 : (Direction)0;
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,DirectionByRotation,The following statement contains a magic number: if (d < -(Math.PI / 4)) return invert ? (Direction)0 : (Direction)1;
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,GetVectorTowards,The following statement contains a magic number: double angle = Math.Asin((a.X - b.X) / Math.Sqrt(Math.Pow(a.X - b.X' 2) + Math.Pow(a.Z - b.Z' 2)));
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,GetVectorTowards,The following statement contains a magic number: double angle = Math.Asin((a.X - b.X) / Math.Sqrt(Math.Pow(a.X - b.X' 2) + Math.Pow(a.Z - b.Z' 2)));
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,DegreesToRadians,The following statement contains a magic number: return degrees * (Math.PI / 180);
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,RadiansToDegrees,The following statement contains a magic number: return radians * (180 / Math.PI);
Magic Number,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,GetCollisionPoint,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  double value = *(ptr + i);                  if (max < Math.Abs(value))                  {                      index = i;                      max = Math.Abs(value);                  }              }
Magic Number,Craft.Net.Common,MetadataDictionary,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MetadataDictionary.cs,FromStream,The following statement contains a magic number: while (true)              {                  byte key = stream.ReadUInt8();                  if (key == 127) break;                    byte type = (byte)((key & 0xE0) >> 5);                  byte index = (byte)(key & 0x1F);                    var entry = EntryTypes[type]();                  entry.FromStream(stream);                  entry.Index = index;                    value[index] = entry;              }
Magic Number,Craft.Net.Common,MetadataDictionary,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MetadataDictionary.cs,FromStream,The following statement contains a magic number: while (true)              {                  byte key = stream.ReadUInt8();                  if (key == 127) break;                    byte type = (byte)((key & 0xE0) >> 5);                  byte index = (byte)(key & 0x1F);                    var entry = EntryTypes[type]();                  entry.FromStream(stream);                  entry.Index = index;                    value[index] = entry;              }
Magic Number,Craft.Net.Common,MetadataEntry,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MetadataEntry.cs,GetKey,The following statement contains a magic number: return (byte)((Identifier << 5) | (index & 0x1F));
Magic Number,Craft.Net.Common,MetadataString,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MetadataString.cs,MetadataString,The following statement contains a magic number: if (value.Length > 16)                  throw new ArgumentOutOfRangeException("value"' "Maximum string length is 16 characters");
Magic Number,Craft.Net.Common,MetadataString,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MetadataString.cs,MetadataString,The following statement contains a magic number: while (value.Length < 16)                  value = value + "\0";
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadVarInt,The following statement contains a magic number: while (true)              {                  byte current = ReadUInt8();                  result |= (current & 0x7Fu) << length++ * 7;                  if (length > 5)                      throw new InvalidDataException("VarInt may not be longer than 28 bits.");                  if ((current & 0x80) != 128)                      break;              }
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadVarInt,The following statement contains a magic number: while (true)              {                  byte current = ReadUInt8();                  result |= (current & 0x7Fu) << length++ * 7;                  if (length > 5)                      throw new InvalidDataException("VarInt may not be longer than 28 bits.");                  if ((current & 0x80) != 128)                      break;              }
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadVarInt,The following statement contains a magic number: while (true)              {                  byte current = ReadUInt8();                  result |= (current & 0x7Fu) << length++ * 7;                  if (length > 5)                      throw new InvalidDataException("VarInt may not be longer than 28 bits.");                  if ((current & 0x80) != 128)                      break;              }
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadVarInt,The following statement contains a magic number: while (true)              {                  byte current = ReadUInt8();                  result |= (current & 0x7Fu) << length++ * 7;                  if (length > 5)                      throw new InvalidDataException("VarInt may not be longer than 60 bits.");                  if ((current & 0x80) != 128)                      break;              }
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadVarInt,The following statement contains a magic number: while (true)              {                  byte current = ReadUInt8();                  result |= (current & 0x7Fu) << length++ * 7;                  if (length > 5)                      throw new InvalidDataException("VarInt may not be longer than 60 bits.");                  if ((current & 0x80) != 128)                      break;              }
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadVarInt,The following statement contains a magic number: while (true)              {                  byte current = ReadUInt8();                  result |= (current & 0x7Fu) << length++ * 7;                  if (length > 5)                      throw new InvalidDataException("VarInt may not be longer than 60 bits.");                  if ((current & 0x80) != 128)                      break;              }
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteVarInt,The following statement contains a magic number: while (true)              {                  if ((value & 0xFFFFFF80u) == 0)                  {                      WriteUInt8((byte)value);                      break;                  }                  WriteUInt8((byte)(value & 0x7F | 0x80));                  value >>= 7;              }
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteVarInt,The following statement contains a magic number: while (true)              {                  length++;                  if ((value & 0xFFFFFF80u) == 0)                  {                      WriteUInt8((byte)value);                      break;                  }                  WriteUInt8((byte)(value & 0x7F | 0x80));                  value >>= 7;              }
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,GetVarIntLength,The following statement contains a magic number: while (true)              {                  length++;                  if ((value & 0xFFFFFF80u) == 0)                      break;                  value >>= 7;              }
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadUInt16,The following statement contains a magic number: return (ushort)(                  (ReadUInt8() << 8) |                  ReadUInt8());
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt16,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 2);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt16,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 2);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadUInt32,The following statement contains a magic number: return (uint)(                  (ReadUInt8() << 24) |                  (ReadUInt8() << 16) |                  (ReadUInt8() << 8 ) |                   ReadUInt8());
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadUInt32,The following statement contains a magic number: return (uint)(                  (ReadUInt8() << 24) |                  (ReadUInt8() << 16) |                  (ReadUInt8() << 8 ) |                   ReadUInt8());
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadUInt32,The following statement contains a magic number: return (uint)(                  (ReadUInt8() << 24) |                  (ReadUInt8() << 16) |                  (ReadUInt8() << 8 ) |                   ReadUInt8());
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt32,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF000000) >> 24)'                  (byte)((value & 0xFF0000) >> 16)'                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 4);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt32,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF000000) >> 24)'                  (byte)((value & 0xFF0000) >> 16)'                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 4);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt32,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF000000) >> 24)'                  (byte)((value & 0xFF0000) >> 16)'                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 4);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt32,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF000000) >> 24)'                  (byte)((value & 0xFF0000) >> 16)'                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 4);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadUInt64,The following statement contains a magic number: return unchecked(                     ((ulong)ReadUInt8() << 56) |                     ((ulong)ReadUInt8() << 48) |                     ((ulong)ReadUInt8() << 40) |                     ((ulong)ReadUInt8() << 32) |                     ((ulong)ReadUInt8() << 24) |                     ((ulong)ReadUInt8() << 16) |                     ((ulong)ReadUInt8() << 8)  |                      (ulong)ReadUInt8());
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadUInt64,The following statement contains a magic number: return unchecked(                     ((ulong)ReadUInt8() << 56) |                     ((ulong)ReadUInt8() << 48) |                     ((ulong)ReadUInt8() << 40) |                     ((ulong)ReadUInt8() << 32) |                     ((ulong)ReadUInt8() << 24) |                     ((ulong)ReadUInt8() << 16) |                     ((ulong)ReadUInt8() << 8)  |                      (ulong)ReadUInt8());
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadUInt64,The following statement contains a magic number: return unchecked(                     ((ulong)ReadUInt8() << 56) |                     ((ulong)ReadUInt8() << 48) |                     ((ulong)ReadUInt8() << 40) |                     ((ulong)ReadUInt8() << 32) |                     ((ulong)ReadUInt8() << 24) |                     ((ulong)ReadUInt8() << 16) |                     ((ulong)ReadUInt8() << 8)  |                      (ulong)ReadUInt8());
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadUInt64,The following statement contains a magic number: return unchecked(                     ((ulong)ReadUInt8() << 56) |                     ((ulong)ReadUInt8() << 48) |                     ((ulong)ReadUInt8() << 40) |                     ((ulong)ReadUInt8() << 32) |                     ((ulong)ReadUInt8() << 24) |                     ((ulong)ReadUInt8() << 16) |                     ((ulong)ReadUInt8() << 8)  |                      (ulong)ReadUInt8());
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadUInt64,The following statement contains a magic number: return unchecked(                     ((ulong)ReadUInt8() << 56) |                     ((ulong)ReadUInt8() << 48) |                     ((ulong)ReadUInt8() << 40) |                     ((ulong)ReadUInt8() << 32) |                     ((ulong)ReadUInt8() << 24) |                     ((ulong)ReadUInt8() << 16) |                     ((ulong)ReadUInt8() << 8)  |                      (ulong)ReadUInt8());
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadUInt64,The following statement contains a magic number: return unchecked(                     ((ulong)ReadUInt8() << 56) |                     ((ulong)ReadUInt8() << 48) |                     ((ulong)ReadUInt8() << 40) |                     ((ulong)ReadUInt8() << 32) |                     ((ulong)ReadUInt8() << 24) |                     ((ulong)ReadUInt8() << 16) |                     ((ulong)ReadUInt8() << 8)  |                      (ulong)ReadUInt8());
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,ReadUInt64,The following statement contains a magic number: return unchecked(                     ((ulong)ReadUInt8() << 56) |                     ((ulong)ReadUInt8() << 48) |                     ((ulong)ReadUInt8() << 40) |                     ((ulong)ReadUInt8() << 32) |                     ((ulong)ReadUInt8() << 24) |                     ((ulong)ReadUInt8() << 16) |                     ((ulong)ReadUInt8() << 8)  |                      (ulong)ReadUInt8());
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt64,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF00000000000000) >> 56)'                  (byte)((value & 0xFF000000000000) >> 48)'                  (byte)((value & 0xFF0000000000) >> 40)'                  (byte)((value & 0xFF00000000) >> 32)'                  (byte)((value & 0xFF000000) >> 24)'                  (byte)((value & 0xFF0000) >> 16)'                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 8);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt64,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF00000000000000) >> 56)'                  (byte)((value & 0xFF000000000000) >> 48)'                  (byte)((value & 0xFF0000000000) >> 40)'                  (byte)((value & 0xFF00000000) >> 32)'                  (byte)((value & 0xFF000000) >> 24)'                  (byte)((value & 0xFF0000) >> 16)'                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 8);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt64,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF00000000000000) >> 56)'                  (byte)((value & 0xFF000000000000) >> 48)'                  (byte)((value & 0xFF0000000000) >> 40)'                  (byte)((value & 0xFF00000000) >> 32)'                  (byte)((value & 0xFF000000) >> 24)'                  (byte)((value & 0xFF0000) >> 16)'                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 8);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt64,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF00000000000000) >> 56)'                  (byte)((value & 0xFF000000000000) >> 48)'                  (byte)((value & 0xFF0000000000) >> 40)'                  (byte)((value & 0xFF00000000) >> 32)'                  (byte)((value & 0xFF000000) >> 24)'                  (byte)((value & 0xFF0000) >> 16)'                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 8);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt64,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF00000000000000) >> 56)'                  (byte)((value & 0xFF000000000000) >> 48)'                  (byte)((value & 0xFF0000000000) >> 40)'                  (byte)((value & 0xFF00000000) >> 32)'                  (byte)((value & 0xFF000000) >> 24)'                  (byte)((value & 0xFF0000) >> 16)'                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 8);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt64,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF00000000000000) >> 56)'                  (byte)((value & 0xFF000000000000) >> 48)'                  (byte)((value & 0xFF0000000000) >> 40)'                  (byte)((value & 0xFF00000000) >> 32)'                  (byte)((value & 0xFF000000) >> 24)'                  (byte)((value & 0xFF0000) >> 16)'                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 8);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt64,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF00000000000000) >> 56)'                  (byte)((value & 0xFF000000000000) >> 48)'                  (byte)((value & 0xFF0000000000) >> 40)'                  (byte)((value & 0xFF00000000) >> 32)'                  (byte)((value & 0xFF000000) >> 24)'                  (byte)((value & 0xFF0000) >> 16)'                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 8);
Magic Number,Craft.Net.Common,MinecraftStream,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MinecraftStream.cs,WriteUInt64,The following statement contains a magic number: Write(new[]              {                  (byte)((value & 0xFF00000000000000) >> 56)'                  (byte)((value & 0xFF000000000000) >> 48)'                  (byte)((value & 0xFF0000000000) >> 40)'                  (byte)((value & 0xFF00000000) >> 32)'                  (byte)((value & 0xFF000000) >> 24)'                  (byte)((value & 0xFF0000) >> 16)'                  (byte)((value & 0xFF00) >> 8)'                  (byte)(value & 0xFF)              }' 0' 8);
Magic Number,Craft.Net.Common,Vector3,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Vector3.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = X.GetHashCode();                  result = (result * 397) ^ Y.GetHashCode();                  result = (result * 397) ^ Z.GetHashCode();                  return result;              }
Magic Number,Craft.Net.Common,Vector3,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Vector3.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = X.GetHashCode();                  result = (result * 397) ^ Y.GetHashCode();                  result = (result * 397) ^ Z.GetHashCode();                  return result;              }
Magic Number,Craft.Net.Common,RuntimeInfo,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\RuntimeInfo.cs,RuntimeInfo,The following statement contains a magic number: IsUnix = (p == 4) || (p == 6) || (p == 128);
Magic Number,Craft.Net.Common,RuntimeInfo,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\RuntimeInfo.cs,RuntimeInfo,The following statement contains a magic number: IsUnix = (p == 4) || (p == 6) || (p == 128);
Magic Number,Craft.Net.Common,RuntimeInfo,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\RuntimeInfo.cs,RuntimeInfo,The following statement contains a magic number: IsUnix = (p == 4) || (p == 6) || (p == 128);
Magic Number,Craft.Net.Common,RuntimeInfo,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\RuntimeInfo.cs,RuntimeInfo,The following statement contains a magic number: Is32Bit = IntPtr.Size == 4;
Magic Number,Craft.Net.Common,RuntimeInfo,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\RuntimeInfo.cs,RuntimeInfo,The following statement contains a magic number: Is64Bit = IntPtr.Size == 8;
Magic Number,Craft.Net.Common,Coordinates2D,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Coordinates.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = X.GetHashCode();                  result = (result * 397) ^ Z.GetHashCode();                  return result;              }
Magic Number,Craft.Net.Common,Coordinates3D,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Coordinates.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = X.GetHashCode();                  result = (result * 397) ^ Y.GetHashCode();                  result = (result * 397) ^ Z.GetHashCode();                  return result;              }
Magic Number,Craft.Net.Common,Coordinates3D,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\Coordinates.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int result = X.GetHashCode();                  result = (result * 397) ^ Y.GetHashCode();                  result = (result * 397) ^ Z.GetHashCode();                  return result;              }
Missing Default,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,DirectionByRotationFlat,The following switch statement is missing a default case: switch (direction)                  {                      case 0: return Direction.North;                      case 1: return Direction.East;                      case 2: return Direction.South;                      case 3: return Direction.West;                  }
Missing Default,Craft.Net.Common,MathHelper,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.Common\MathHelper.cs,DirectionByRotationFlat,The following switch statement is missing a default case: switch (direction)                  {                      case 0: return Direction.South;                      case 1: return Direction.West;                      case 2: return Direction.North;                      case 3: return Direction.East;                  }
