Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,Cyclomatic complexity of the method is 19
Long Parameter List,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,Noise,The method has 5 parameters. Parameters: persistence' frequency' amplitude' octaves' randomSeed
Long Statement,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The length of the statement  "                        int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]); " is 161.
Long Statement,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The length of the statement  "                        if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4) " is 135.
Long Statement,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The length of the statement  "                                        chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18); " is 165.
Long Statement,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The length of the statement  "                                        chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor); " is 179.
Long Statement,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The length of the statement  "                                chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor); " is 122.
Long Statement,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,PerlinNoise2D,The length of the statement  "            int n = (x * WorldGenConst.NOISE_MAGIC_X + y * WorldGenConst.NOISE_MAGIC_Y * WorldGenConst.NOISE_MAGIC_SEED * seed) & 0x7fffffff; " is 129.
Long Statement,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,Smooth2D,The length of the statement  "            double corners = (PerlinNoise2D(x - 1' y - 1' seed) + PerlinNoise2D(x + 1' y - 1' seed) + PerlinNoise2D(x - 1' y + 1' seed) + PerlinNoise2D(x + 1' y + 1' seed)) / 16; " is 166.
Long Statement,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,Smooth2D,The length of the statement  "            double sides = (PerlinNoise2D(x - 1' y' seed) + PerlinNoise2D(x + 1' y' seed) + PerlinNoise2D(x' y - 1' seed) + PerlinNoise2D(x' y + 1' seed)) / 8; " is 147.
Complex Conditional,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The conditional expression  "treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4"  is complex.
Magic Number,Craft.Net.TerrainGeneration,FlatlandGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\FlatlandGenerator.cs,FlatlandGenerator,The following statement contains a magic number: SpawnPoint = new Vector3(0' 4' 0);
Magic Number,Craft.Net.TerrainGeneration,FlatlandGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\FlatlandGenerator.cs,CreateLayers,The following statement contains a magic number: Biome = (Biome)byte.Parse(parts[2]);
Magic Number,Craft.Net.TerrainGeneration,FlatlandGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\FlatlandGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int i = 0; i < Layers.Count; i++)              {                  int height = y + Layers[i].Height;                  while (y < height)                  {                      for (int x = 0; x < 16; x++)                      {                          for (int z = 0; z < 16; z++)                          {                              chunk.SetBlockId(new Coordinates3D(x' y' z)' Layers[i].BlockId);                              chunk.SetMetadata(new Coordinates3D(x' y' z)' Layers[i].Metadata);                          }                      }                      y++;                  }              }
Magic Number,Craft.Net.TerrainGeneration,FlatlandGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\FlatlandGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int i = 0; i < Layers.Count; i++)              {                  int height = y + Layers[i].Height;                  while (y < height)                  {                      for (int x = 0; x < 16; x++)                      {                          for (int z = 0; z < 16; z++)                          {                              chunk.SetBlockId(new Coordinates3D(x' y' z)' Layers[i].BlockId);                              chunk.SetMetadata(new Coordinates3D(x' y' z)' Layers[i].Metadata);                          }                      }                      y++;                  }              }
Magic Number,Craft.Net.TerrainGeneration,GeneratorLayer,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\FlatlandGenerator.cs,GeneratorLayer,The following statement contains a magic number: if (parts.Length == 2)                      idIndex++;
Magic Number,Craft.Net.TerrainGeneration,GeneratorLayer,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\FlatlandGenerator.cs,GeneratorLayer,The following statement contains a magic number: if (idParts.Length == 2)                      Metadata = (byte)(byte.Parse(idParts[1]) & 0xF);
Magic Number,Craft.Net.TerrainGeneration,GeneratorLayer,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\FlatlandGenerator.cs,GeneratorLayer,The following statement contains a magic number: if (parts.Length == 2)                      Height = int.Parse(parts[0]);
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: int trees = new Random().Next(0' 10);
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: int['] heights = new int[16' 16];
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: int['] heights = new int[16' 16];
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: int['] treeBasePositions = new int[trees' 2];
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int t = 0; t < trees; t++)              {                  treeBasePositions[t' 0] = new Random().Next(1' 16);                  treeBasePositions[t' 1] = new Random().Next(1' 16);              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int t = 0; t < trees; t++)              {                  treeBasePositions[t' 0] = new Random().Next(1' 16);                  treeBasePositions[t' 1] = new Random().Next(1' 16);              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GenerateChunk,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int z = 0; z < 16; z++)                  {                      int height = GetHeight(chunk.X * Chunk.Width + x' chunk.Z * Chunk.Depth + z);                      for (int y = 0; y < height; y++)                      {                          if (y == 0) // if at the bottom then set block to bedrock                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 7);                          else if (y < height - 1) // if not at the top set the block to dirt or stone depending on height                          {                              if (!(y < (height / 4) * 3))                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 3);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 1);                          }                          else if (y < waterLevel) // if below the water set to sand or clay                          {                              if (new Random().Next(1' 40) < 5 && y < waterLevel - 4)                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 82);                              else                                  chunk.SetBlockId(new Coordinates3D(x' y' z)' 12);                          }                          else                          {                              // otherwise set the block to grass or gravel rarely                              chunk.SetBlockId(new Coordinates3D(x' y' z)' 2);                          }                          chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHills);                          if (y < waterLevel + 17)                              chunk.SetBiome((byte)x' (byte)z' Biome.ExtremeHillsEdge);                          if (y < waterLevel + 10)                              chunk.SetBiome((byte)x' (byte)z' Biome.Beach);                      }                      heights[x' z] = height;                        //create beaches and place water                      if (height <= waterLevel)                      {                          for (int w = 0; w < waterLevel - 3; w++)                          {                              if (chunk.GetBlockId(new Coordinates3D(x' w' z)) == 0)                              {                                  chunk.SetBlockId(new Coordinates3D(x' w' z)' 8);                              }                          }                      }                        // Generate colour of the wood and leaves                      int woodColor = new Random().Next(1' 3);                      if (woodColor == 1)                          woodColor = 0;                        // Generate trees                      for (int pos = 0; pos < trees; pos++)                      {                          int random = new Random().Next(3' 4);                          int treeBase = heights[treeBasePositions[pos' 0]' treeBasePositions[pos' 1]];//chunk.GetHeight((byte)treeBasePositions[pos' 0]' (byte)treeBasePositions[pos' 1]);                          if (treeBasePositions[pos' 0] < 14 && treeBasePositions[pos' 0] > 4 && treeBasePositions[pos' 1] < 14 && treeBasePositions[pos' 1] > 4)                          {                              if (treeBase < waterLevel + 10)                                  break;                              int leafwidth = 4;                              for (int layer = 0; layer <= height; layer++)                              {                                  for (int w = 0; w <= leafwidth; w++)                                  {                                      for (int l = 0; l <= leafwidth; l++)                                      {                                          chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' 18);                                          chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0] - (leafwidth / 2) + w' treeBase + layer + random' treeBasePositions[pos' 1] - (leafwidth / 2) + l)' (byte)woodColor);                                      }                                  }                                  leafwidth -= 1;                              }                                for (int t = 0; t <= (random + 2); t++)                              {                                  chunk.SetBlockId(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' 17);                                  chunk.SetMetadata(new Coordinates3D(treeBasePositions[pos' 0]' treeBase + t' treeBasePositions[pos' 1])' (byte)woodColor);                              }                          }                      }                  }              }
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,Initialize,The following statement contains a magic number: const double persistence = 1' frequency = 0.01' amplitude = 80;
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,Initialize,The following statement contains a magic number: const double persistence = 1' frequency = 0.01' amplitude = 80;
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,Initialize,The following statement contains a magic number: int octaves = 2;
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GetHeight,The following statement contains a magic number: if (height <= 0)                  height = height * -1 + 4;
Magic Number,Craft.Net.TerrainGeneration,StandardGenerator,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\StandardGenerator.cs,GetHeight,The following statement contains a magic number: return height + 40;
Magic Number,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,Get2D,The following statement contains a magic number: for (int i = 0; i < octaves; i++)              {                  total += Gradient2D(x * tempFrequency' y * tempFrequency' randomSeed) * tempAmplitude;                  tempAmplitude *= persistence;                  tempFrequency *= 2;              }
Magic Number,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,PerlinNoise2D,The following statement contains a magic number: n = (n << 13) ^ n;
Magic Number,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,PerlinNoise2D,The following statement contains a magic number: return (1.0 - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);
Magic Number,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,PerlinNoise2D,The following statement contains a magic number: return (1.0 - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);
Magic Number,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,PerlinNoise2D,The following statement contains a magic number: return (1.0 - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);
Magic Number,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,PerlinNoise2D,The following statement contains a magic number: return (1.0 - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);
Magic Number,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,InterpolateCosine,The following statement contains a magic number: double f = (1 - Math.Cos(ft)) * 0.5;
Magic Number,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,Smooth2D,The following statement contains a magic number: double corners = (PerlinNoise2D(x - 1' y - 1' seed) + PerlinNoise2D(x + 1' y - 1' seed) + PerlinNoise2D(x - 1' y + 1' seed) + PerlinNoise2D(x + 1' y + 1' seed)) / 16;
Magic Number,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,Smooth2D,The following statement contains a magic number: double sides = (PerlinNoise2D(x - 1' y' seed) + PerlinNoise2D(x + 1' y' seed) + PerlinNoise2D(x' y - 1' seed) + PerlinNoise2D(x' y + 1' seed)) / 8;
Magic Number,Craft.Net.TerrainGeneration,Noise,C:\repos\SirCmpwn_Craft.Net\source\Craft.Net.TerrainGeneration\Noise.cs,Smooth2D,The following statement contains a magic number: double center = PerlinNoise2D(x' y' seed) / 4;
