Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MassTransit.AzureServiceBusTransport.Tests,A_serialization_exception,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ErrorQueue_Specs.cs,Should_have_the_host_machine_name,The length of the statement  "            context.ReceiveContext.TransportHeaders.Get("MT-Host-MachineName"' (string)null).ShouldBe(HostMetadataCache.Host.MachineName); " is 126.
Long Statement,MassTransit.AzureServiceBusTransport.Tests,Publishing_an_anonymous_type,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\PublishDynamicType_Specs.cs,Should_throw_a_proper_exception,The length of the statement  "            Assert.That(async () => await Bus.Publish(new {Value = "Name"})' Throws.TypeOf<ArgumentException>().With.Message.Contain("anonymous")); " is 135.
Long Statement,MassTransit.AzureServiceBusTransport.Tests,Creating_a_subscription_endpoint_from_an_existing_bus,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ReceiveEndpoint_Specs.cs,Should_be_allowed,The length of the statement  "                    Is.EqualTo(new Uri(string.Join("/"' Host.Address.GetLeftPart(UriPartial.Authority)' Host.Topology.Message<PingMessage>().EntityName' "Subscriptions"' " is 149.
Long Statement,MassTransit.AzureServiceBusTransport.Tests,Sending_a_request_to_another_scope,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\RequestClient_Specs.cs,ConfigureServiceBusReceiveEndpoint,The length of the statement  "            _handler = Handler<PingMessage>(configurator' context => context.RespondAsync(new PongMessage(context.Message.CorrelationId))); " is 127.
Long Statement,MassTransit.AzureServiceBusTransport.Tests,Scheduling_a_message_using_quartz_and_cancelling_it,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ScheduleMessage_Specs.cs,ConfigureServiceBusReceiveEndpoint,The length of the statement  "                ScheduledMessage<SecondMessage> scheduledMessage = await context.ScheduleSend(DateTime.Now + TimeSpan.FromSeconds(5)' new SecondMessage()); " is 139.
Long Statement,MassTransit.AzureServiceBusTransport.Tests,Sending_with_a_send_context,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\SendContext_Specs.cs,Should_succeed,The length of the statement  "            await InputQueueSendEndpoint.Send(new PingMessage()' context => context.SetScheduledEnqueueTime(TimeSpan.FromSeconds(10))); " is 123.
Long Statement,MassTransit.AzureServiceBusTransport.Tests,Creating_a_turnout_job,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Turnout_Specs.cs,ConfigureServiceBusBusHost,The length of the statement  "                endpoint.SetJobFactory(async context => await Task.Delay(TimeSpan.FromSeconds(context.Command.Size)).ConfigureAwait(false)); " is 124.
Long Statement,ConfiguringAzure_Specs,Configuring_a_bus_instance,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ConfiguringAzure_Specs.cs,Should_Support_NetMessaging_Protocol,The length of the statement  "                            $"Received (input_queue): {context.ReceiveContext.TransportHeaders.Get("MessageId"' "N/A")}' Types = ({string.Join("'"' context.SupportedMessageTypes)})")); " is 156.
Long Statement,ConfiguringAzure_Specs,Configuring_a_bus_instance,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ConfiguringAzure_Specs.cs,Should_support_the_new_syntax,The length of the statement  "                            $"Received (input_queue): {context.ReceiveContext.TransportHeaders.Get("MessageId"' "N/A")}' Types = ({string.Join("'"' context.SupportedMessageTypes)})")); " is 156.
Long Statement,SagaSpecs,Using_a_message_session_as_a_saga_repository,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\SagaRepository_Specs.cs,The_saga_should_be_loaded,The length of the statement  "                var created = await Bus.Request<CreateJob' JobCreated>(InputQueueAddress' new CreateJob(_jobId)' TestCancellationToken' TestTimeout' x => " is 137.
Long Statement,SagaSpecs,Using_a_message_session_as_a_saga_repository,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\SagaRepository_Specs.cs,The_saga_should_be_loaded,The length of the statement  "                var started = await Bus.Request<StartJob' JobStarted>(InputQueueAddress' new StartJob(_jobId)' TestCancellationToken' TestTimeout' x => " is 135.
Empty Catch Block,Verify_account_settings,The_account_credentials_for_unit_tests,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Verify_account_settings.cs,CreateQueue,The method has an empty catch block.
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Express_Specs,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Express_Specs.cs,ConfigureServiceBusBusHost,The following statement contains a magic number: configurator.ReceiveEndpoint(host' "input_express"' x =>              {                  x.EnableExpress = true;                  x.AutoDeleteOnIdle = TimeSpan.FromMinutes(5);                    _handled = Handled<PingMessage>(x);              });
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Renewing_a_lock_on_an_existing_message,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\LockTimeout_Specs.cs,Renewing_a_lock_on_an_existing_message,The following statement contains a magic number: TestTimeout = TimeSpan.FromMinutes(3);
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Renewing_a_lock_on_an_existing_message,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\LockTimeout_Specs.cs,ConfigureServiceBusReceiveEndpoint,The following statement contains a magic number: configurator.LockDuration = TimeSpan.FromSeconds(60);
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Renewing_a_lock_on_an_existing_message,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\LockTimeout_Specs.cs,ConfigureServiceBusReceiveEndpoint,The following statement contains a magic number: configurator.UseRenewLock(TimeSpan.FromSeconds(20));
Magic Number,MassTransit.AzureServiceBusTransport.Tests,PingConsumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\LockTimeout_Specs.cs,Consume,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMinutes(2)' context.CancellationToken).ConfigureAwait(false);
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Performance_of_the_azure_service_bus_transport,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Performance_Specs.cs,Performance_of_the_azure_service_bus_transport,The following statement contains a magic number: TestTimeout = TimeSpan.FromMinutes(5);
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Performance_of_the_azure_service_bus_transport,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Performance_Specs.cs,ConfigureServiceBusBus,The following statement contains a magic number: configurator.MaxConcurrentCalls = 16;
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Performance_of_the_azure_service_bus_transport,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Performance_Specs.cs,ConfigureServiceBusBus,The following statement contains a magic number: configurator.PrefetchCount = 64;
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Performance_of_the_azure_service_bus_transport,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Performance_Specs.cs,ConfigureServiceBusReceiveEndpoint,The following statement contains a magic number: configurator.PrefetchCount = 64;
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Performance_of_the_azure_service_bus_transport,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Performance_Specs.cs,ConfigureServiceBusReceiveEndpoint,The following statement contains a magic number: configurator.MaxConcurrentCalls = 16;
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Performance_of_the_azure_service_bus_transport,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Performance_Specs.cs,Should_be_wicked_fast,The following statement contains a magic number: int limit = 2000;
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Performance_of_the_azure_service_bus_transport,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Performance_Specs.cs,Should_be_wicked_fast,The following statement contains a magic number: Console.WriteLine("Time to process {0} messages = {1}"' count * 2' timer.ElapsedMilliseconds + "ms");
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Performance_of_the_azure_service_bus_transport,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Performance_Specs.cs,Should_be_wicked_fast,The following statement contains a magic number: Console.WriteLine("Messages per second: {0}"' count * 2 * 1000 / timer.ElapsedMilliseconds);
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Performance_of_the_azure_service_bus_transport,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Performance_Specs.cs,Should_be_wicked_fast,The following statement contains a magic number: Console.WriteLine("Messages per second: {0}"' count * 2 * 1000 / timer.ElapsedMilliseconds);
Magic Number,MassTransit.AzureServiceBusTransport.Tests,When_broker_is_not_available,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\PublishFaultCache_Specs.cs,Should_not_cache_faulted_publish_endpoint,The following statement contains a magic number: await Task.Delay(10000);
Magic Number,MassTransit.AzureServiceBusTransport.Tests,When_broker_is_not_available,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\PublishFaultCache_Specs.cs,Should_not_cache_faulted_publish_endpoint,The following statement contains a magic number: await Task.Delay(10000);
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Scheduling_a_message_using_quartz_and_cancelling_it,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ScheduleMessage_Specs.cs,Should_not_get_the_message,The following statement contains a magic number: Assert.That(async () => await _second.OrTimeout(5000)' Throws.TypeOf<TimeoutException>());
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Scheduling_a_message_using_quartz_and_cancelling_it,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ScheduleMessage_Specs.cs,ConfigureServiceBusReceiveEndpoint,The following statement contains a magic number: _first = Handler<FirstMessage>(configurator' async context =>              {                  ScheduledMessage<SecondMessage> scheduledMessage = await context.ScheduleSend(DateTime.Now + TimeSpan.FromSeconds(5)' new SecondMessage());                    await Task.Delay(1000);                    await context.CancelScheduledSend(scheduledMessage);              });
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Scheduling_a_message_using_quartz_and_cancelling_it,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ScheduleMessage_Specs.cs,ConfigureServiceBusReceiveEndpoint,The following statement contains a magic number: _first = Handler<FirstMessage>(configurator' async context =>              {                  ScheduledMessage<SecondMessage> scheduledMessage = await context.ScheduleSend(DateTime.Now + TimeSpan.FromSeconds(5)' new SecondMessage());                    await Task.Delay(1000);                    await context.CancelScheduledSend(scheduledMessage);              });
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Cancelling_a_scheduled_message,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ScheduleMessage_Specs.cs,Should_result_in_no_message_received,The following statement contains a magic number: Assert.That(async () => await _second.OrTimeout(TimeSpan.FromSeconds(8))' Throws.TypeOf<TaskCanceledException>());
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Cancelling_a_scheduled_message,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ScheduleMessage_Specs.cs,ConfigureServiceBusReceiveEndpoint,The following statement contains a magic number: _first = Handler<FirstMessage>(configurator' async context =>              {                  var scheduledMessage = await context.ScheduleSend(TimeSpan.FromSeconds(5)' new SecondMessage());                    await context.CancelScheduledSend(scheduledMessage);              });
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Sending_with_a_send_context,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\SendContext_Specs.cs,Should_succeed,The following statement contains a magic number: await InputQueueSendEndpoint.Send(new PingMessage()' context => context.SetScheduledEnqueueTime(TimeSpan.FromSeconds(10)));
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Sending_with_a_send_context,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\SendContext_Specs.cs,Should_succeed,The following statement contains a magic number: timer.Elapsed.ShouldBeGreaterThanOrEqualTo(TimeSpan.FromSeconds(10));
Magic Number,MassTransit.AzureServiceBusTransport.Tests,A_fault_on_the_receive_endpoint,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Send_Specs.cs,Setup,The following statement contains a magic number: await Task.Delay(30000);
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Sending_a_message_to_a_session,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Session_Specs.cs,Sending_a_message_to_a_session,The following statement contains a magic number: TestTimeout = TimeSpan.FromMinutes(5);
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Creating_a_turnout_job,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Turnout_Specs.cs,Should_allow_scheduling_a_job,The following statement contains a magic number: await endpoint.Send(new ProcessFile              {                  Filename = "log.txt"'                  Size = 2              });
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Creating_a_turnout_job,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Turnout_Specs.cs,ConfigureServiceBusReceiveEndpoint,The following statement contains a magic number: _completed2 = Handled<JobCompleted>(configurator' context => context.Message.GetArguments<ProcessFile>().Size == 2);
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Stopping_the_bus_before_the_job_is_done,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Turnout_Specs.cs,Should_send_the_job_canceled,The following statement contains a magic number: await endpoint.Send(new ProcessFile              {                  Filename = "log.txt"'                  Size = 10              });
Magic Number,MassTransit.AzureServiceBusTransport.Tests,Cancelling_a_job_using_the_management_address,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Turnout_Specs.cs,Should_send_the_job_canceled,The following statement contains a magic number: await endpoint.Send(new ProcessFile              {                  Filename = "log.txt"'                  Size = 10              });
Magic Number,ConfiguringAzure_Specs,Configuring_a_bus_instance,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ConfiguringAzure_Specs.cs,Should_Support_NetMessaging_Protocol,The following statement contains a magic number: IBusControl bus = Bus.Factory.CreateUsingAzureServiceBus(x =>                  {                      IServiceBusHost host = x.Host(serviceUri' h =>                      {                          h.SharedAccessSignature(s =>                          {                              s.KeyName = settings.KeyName;                              s.SharedAccessKey = settings.SharedAccessKey;                              s.TokenTimeToLive = settings.TokenTimeToLive;                              s.TokenScope = settings.TokenScope;                          });                            h.TransportType = TransportType.NetMessaging;                          h.OperationTimeout = TimeSpan.FromSeconds(30);                          h.BatchFlushInterval = TimeSpan.FromMilliseconds(50);                      });                        x.ReceiveEndpoint(host' "input_queue"' e =>                      {                          e.PrefetchCount = 16;                            e.UseExecute(context => Console.WriteLine(                              $"Received (input_queue): {context.ReceiveContext.TransportHeaders.Get("MessageId"' "N/A")}' Types = ({string.Join("'"' context.SupportedMessageTypes)})"));                            e.Handler<A>(async context => completed.TrySetResult(context.Message));                            // Add a message handler and configure the pipeline to retry the handler                          // if an exception is thrown                          e.Handler<A>(Handle' h =>                          {                              h.UseRetry(r => r.Interval(5' 100));                          });                      });                  });
Magic Number,ConfiguringAzure_Specs,Configuring_a_bus_instance,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ConfiguringAzure_Specs.cs,Should_Support_NetMessaging_Protocol,The following statement contains a magic number: IBusControl bus = Bus.Factory.CreateUsingAzureServiceBus(x =>                  {                      IServiceBusHost host = x.Host(serviceUri' h =>                      {                          h.SharedAccessSignature(s =>                          {                              s.KeyName = settings.KeyName;                              s.SharedAccessKey = settings.SharedAccessKey;                              s.TokenTimeToLive = settings.TokenTimeToLive;                              s.TokenScope = settings.TokenScope;                          });                            h.TransportType = TransportType.NetMessaging;                          h.OperationTimeout = TimeSpan.FromSeconds(30);                          h.BatchFlushInterval = TimeSpan.FromMilliseconds(50);                      });                        x.ReceiveEndpoint(host' "input_queue"' e =>                      {                          e.PrefetchCount = 16;                            e.UseExecute(context => Console.WriteLine(                              $"Received (input_queue): {context.ReceiveContext.TransportHeaders.Get("MessageId"' "N/A")}' Types = ({string.Join("'"' context.SupportedMessageTypes)})"));                            e.Handler<A>(async context => completed.TrySetResult(context.Message));                            // Add a message handler and configure the pipeline to retry the handler                          // if an exception is thrown                          e.Handler<A>(Handle' h =>                          {                              h.UseRetry(r => r.Interval(5' 100));                          });                      });                  });
Magic Number,ConfiguringAzure_Specs,Configuring_a_bus_instance,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ConfiguringAzure_Specs.cs,Should_Support_NetMessaging_Protocol,The following statement contains a magic number: IBusControl bus = Bus.Factory.CreateUsingAzureServiceBus(x =>                  {                      IServiceBusHost host = x.Host(serviceUri' h =>                      {                          h.SharedAccessSignature(s =>                          {                              s.KeyName = settings.KeyName;                              s.SharedAccessKey = settings.SharedAccessKey;                              s.TokenTimeToLive = settings.TokenTimeToLive;                              s.TokenScope = settings.TokenScope;                          });                            h.TransportType = TransportType.NetMessaging;                          h.OperationTimeout = TimeSpan.FromSeconds(30);                          h.BatchFlushInterval = TimeSpan.FromMilliseconds(50);                      });                        x.ReceiveEndpoint(host' "input_queue"' e =>                      {                          e.PrefetchCount = 16;                            e.UseExecute(context => Console.WriteLine(                              $"Received (input_queue): {context.ReceiveContext.TransportHeaders.Get("MessageId"' "N/A")}' Types = ({string.Join("'"' context.SupportedMessageTypes)})"));                            e.Handler<A>(async context => completed.TrySetResult(context.Message));                            // Add a message handler and configure the pipeline to retry the handler                          // if an exception is thrown                          e.Handler<A>(Handle' h =>                          {                              h.UseRetry(r => r.Interval(5' 100));                          });                      });                  });
Magic Number,ConfiguringAzure_Specs,Configuring_a_bus_instance,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ConfiguringAzure_Specs.cs,Should_Support_NetMessaging_Protocol,The following statement contains a magic number: IBusControl bus = Bus.Factory.CreateUsingAzureServiceBus(x =>                  {                      IServiceBusHost host = x.Host(serviceUri' h =>                      {                          h.SharedAccessSignature(s =>                          {                              s.KeyName = settings.KeyName;                              s.SharedAccessKey = settings.SharedAccessKey;                              s.TokenTimeToLive = settings.TokenTimeToLive;                              s.TokenScope = settings.TokenScope;                          });                            h.TransportType = TransportType.NetMessaging;                          h.OperationTimeout = TimeSpan.FromSeconds(30);                          h.BatchFlushInterval = TimeSpan.FromMilliseconds(50);                      });                        x.ReceiveEndpoint(host' "input_queue"' e =>                      {                          e.PrefetchCount = 16;                            e.UseExecute(context => Console.WriteLine(                              $"Received (input_queue): {context.ReceiveContext.TransportHeaders.Get("MessageId"' "N/A")}' Types = ({string.Join("'"' context.SupportedMessageTypes)})"));                            e.Handler<A>(async context => completed.TrySetResult(context.Message));                            // Add a message handler and configure the pipeline to retry the handler                          // if an exception is thrown                          e.Handler<A>(Handle' h =>                          {                              h.UseRetry(r => r.Interval(5' 100));                          });                      });                  });
Magic Number,ConfiguringAzure_Specs,Configuring_a_bus_instance,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ConfiguringAzure_Specs.cs,Should_Support_NetMessaging_Protocol,The following statement contains a magic number: IBusControl bus = Bus.Factory.CreateUsingAzureServiceBus(x =>                  {                      IServiceBusHost host = x.Host(serviceUri' h =>                      {                          h.SharedAccessSignature(s =>                          {                              s.KeyName = settings.KeyName;                              s.SharedAccessKey = settings.SharedAccessKey;                              s.TokenTimeToLive = settings.TokenTimeToLive;                              s.TokenScope = settings.TokenScope;                          });                            h.TransportType = TransportType.NetMessaging;                          h.OperationTimeout = TimeSpan.FromSeconds(30);                          h.BatchFlushInterval = TimeSpan.FromMilliseconds(50);                      });                        x.ReceiveEndpoint(host' "input_queue"' e =>                      {                          e.PrefetchCount = 16;                            e.UseExecute(context => Console.WriteLine(                              $"Received (input_queue): {context.ReceiveContext.TransportHeaders.Get("MessageId"' "N/A")}' Types = ({string.Join("'"' context.SupportedMessageTypes)})"));                            e.Handler<A>(async context => completed.TrySetResult(context.Message));                            // Add a message handler and configure the pipeline to retry the handler                          // if an exception is thrown                          e.Handler<A>(Handle' h =>                          {                              h.UseRetry(r => r.Interval(5' 100));                          });                      });                  });
Magic Number,ConfiguringAzure_Specs,Configuring_a_bus_instance,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ConfiguringAzure_Specs.cs,Should_support_the_new_syntax,The following statement contains a magic number: IBusControl bus = Bus.Factory.CreateUsingAzureServiceBus(x =>                  {                      IServiceBusHost host = x.Host(serviceUri' h =>                      {                          h.SharedAccessSignature(s =>                          {                              s.KeyName = settings.KeyName;                              s.SharedAccessKey = settings.SharedAccessKey;                              s.TokenTimeToLive = settings.TokenTimeToLive;                              s.TokenScope = settings.TokenScope;                          });                      });                        x.ReceiveEndpoint(host' "input_queue"' e =>                      {                          e.PrefetchCount = 16;                            e.UseExecute(context => Console.WriteLine(                              $"Received (input_queue): {context.ReceiveContext.TransportHeaders.Get("MessageId"' "N/A")}' Types = ({string.Join("'"' context.SupportedMessageTypes)})"));                            e.Handler<A>(async context => completed.TrySetResult(context.Message));                            // Add a message handler and configure the pipeline to retry the handler                          // if an exception is thrown                          e.Handler<A>(Handle' h =>                          {                              h.UseRetry(r => r.Interval(5' 100));                          });                      });                  });
Magic Number,ConfiguringAzure_Specs,Configuring_a_bus_instance,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ConfiguringAzure_Specs.cs,Should_support_the_new_syntax,The following statement contains a magic number: IBusControl bus = Bus.Factory.CreateUsingAzureServiceBus(x =>                  {                      IServiceBusHost host = x.Host(serviceUri' h =>                      {                          h.SharedAccessSignature(s =>                          {                              s.KeyName = settings.KeyName;                              s.SharedAccessKey = settings.SharedAccessKey;                              s.TokenTimeToLive = settings.TokenTimeToLive;                              s.TokenScope = settings.TokenScope;                          });                      });                        x.ReceiveEndpoint(host' "input_queue"' e =>                      {                          e.PrefetchCount = 16;                            e.UseExecute(context => Console.WriteLine(                              $"Received (input_queue): {context.ReceiveContext.TransportHeaders.Get("MessageId"' "N/A")}' Types = ({string.Join("'"' context.SupportedMessageTypes)})"));                            e.Handler<A>(async context => completed.TrySetResult(context.Message));                            // Add a message handler and configure the pipeline to retry the handler                          // if an exception is thrown                          e.Handler<A>(Handle' h =>                          {                              h.UseRetry(r => r.Interval(5' 100));                          });                      });                  });
Magic Number,ConfiguringAzure_Specs,Configuring_a_bus_instance,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ConfiguringAzure_Specs.cs,Should_support_the_new_syntax,The following statement contains a magic number: IBusControl bus = Bus.Factory.CreateUsingAzureServiceBus(x =>                  {                      IServiceBusHost host = x.Host(serviceUri' h =>                      {                          h.SharedAccessSignature(s =>                          {                              s.KeyName = settings.KeyName;                              s.SharedAccessKey = settings.SharedAccessKey;                              s.TokenTimeToLive = settings.TokenTimeToLive;                              s.TokenScope = settings.TokenScope;                          });                      });                        x.ReceiveEndpoint(host' "input_queue"' e =>                      {                          e.PrefetchCount = 16;                            e.UseExecute(context => Console.WriteLine(                              $"Received (input_queue): {context.ReceiveContext.TransportHeaders.Get("MessageId"' "N/A")}' Types = ({string.Join("'"' context.SupportedMessageTypes)})"));                            e.Handler<A>(async context => completed.TrySetResult(context.Message));                            // Add a message handler and configure the pipeline to retry the handler                          // if an exception is thrown                          e.Handler<A>(Handle' h =>                          {                              h.UseRetry(r => r.Interval(5' 100));                          });                      });                  });
Magic Number,ConfiguringAzure_Specs,Configuring_a_bus_instance,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ConfiguringAzure_Specs.cs,Should_not_fail_when_slash_is_missing,The following statement contains a magic number: IBusControl bus = Bus.Factory.CreateUsingAzureServiceBus(x =>                  {                      IServiceBusHost host = x.Host(serviceUri' h =>                      {                          h.SharedAccessSignature(s =>                          {                              s.KeyName = settings.KeyName;                              s.SharedAccessKey = settings.SharedAccessKey;                              s.TokenTimeToLive = settings.TokenTimeToLive;                              s.TokenScope = settings.TokenScope;                          });                      });                        x.ReceiveEndpoint(host' "test-queue"' e =>                      {                          // Add a message handler and configure the pipeline to retry the handler                          // if an exception is thrown                          e.Handler<A>(Handle' h =>                          {                              h.UseRetry(r => r.Interval(5' 100));                          });                      });                  });
Magic Number,ConfiguringAzure_Specs,Configuring_a_bus_instance,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ConfiguringAzure_Specs.cs,Should_not_fail_when_slash_is_missing,The following statement contains a magic number: IBusControl bus = Bus.Factory.CreateUsingAzureServiceBus(x =>                  {                      IServiceBusHost host = x.Host(serviceUri' h =>                      {                          h.SharedAccessSignature(s =>                          {                              s.KeyName = settings.KeyName;                              s.SharedAccessKey = settings.SharedAccessKey;                              s.TokenTimeToLive = settings.TokenTimeToLive;                              s.TokenScope = settings.TokenScope;                          });                      });                        x.ReceiveEndpoint(host' "test-queue"' e =>                      {                          // Add a message handler and configure the pipeline to retry the handler                          // if an exception is thrown                          e.Handler<A>(Handle' h =>                          {                              h.UseRetry(r => r.Interval(5' 100));                          });                      });                  });
Magic Number,ScheduleTimeout_Specs,Scheduling_a_message_from_a_state_machine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ScheduleTimeout_Specs.cs,Should_cancel_when_the_order_is_submitted,The following statement contains a magic number: await Task.Delay(3000);
Magic Number,ScheduleTimeout_Specs,TestStateMachine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ScheduleTimeout_Specs.cs,TestStateMachine,The following statement contains a magic number: Schedule(() => CartTimeout' x => x.CartTimeoutTokenId' x =>                  {                      x.Delay = TimeSpan.FromSeconds(30);                      x.Received = p => p.CorrelateBy(state => state.MemberNumber' context => context.Message.MemberNumber);                  });
Magic Number,ScheduleTimeout_Specs,TestStateMachine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\ScheduleTimeout_Specs.cs,TestStateMachine,The following statement contains a magic number: Initially(When(ItemAdded)                      .ThenAsync(context =>                      {                          context.Instance.MemberNumber = context.Data.MemberNumber;                          context.Instance.ExpiresAfterSeconds = 3;                          return Console.Out.WriteLineAsync($"Cart {context.Instance.CorrelationId} Created: {context.Data.MemberNumber}");                      })                      .Schedule(CartTimeout' context => new CartExpiredEvent(context.Instance)'                          context => TimeSpan.FromSeconds(context.Instance.ExpiresAfterSeconds))                      .TransitionTo(Active));
Magic Number,SubscriptionTests,Using_a_subscription_endpoint_that_faults,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Subscription_Specs.cs,Should_succeed,The following statement contains a magic number: await Task.Delay(3000);
Magic Number,MassTransit.AzureServiceBusTransport.Tests.TurningItOut,A_successful_job_using_turnout,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\TurningItOut\Success_Specs.cs,Should_result_in_complete_state_instance,The following statement contains a magic number: await endpoint.Send(new LongTimeJob              {                  Id = "FIRST"'                  Duration = TimeSpan.FromSeconds(10)              });
Magic Number,MassTransit.AzureServiceBusTransport.Tests.TurningItOut,A_successful_job_using_turnout,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\TurningItOut\Success_Specs.cs,ConfigureServiceBusBusHost,The following statement contains a magic number: configurator.ReceiveEndpoint(host' "service_state"' endpoint =>              {                  endpoint.RequiresSession = true;                  endpoint.MessageWaitTimeout = TimeSpan.FromHours(8);                    endpoint.StateMachineSaga(_stateMachine' _repository);              });
Magic Number,Verify_account_settings,The_account_credentials_for_unit_tests,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Verify_account_settings.cs,Should_be_configured_and_working,The following statement contains a magic number: var mfs = new MessagingFactorySettings                  {                      TokenProvider = tokenProvider'                      OperationTimeout = TimeSpan.FromSeconds(30)'                      TransportType = TransportType.Amqp'                      AmqpTransportSettings = new AmqpTransportSettings                      {                          BatchFlushInterval = TimeSpan.FromMilliseconds(50)'                      }'                  };
Magic Number,Verify_account_settings,The_account_credentials_for_unit_tests,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Verify_account_settings.cs,Should_be_configured_and_working,The following statement contains a magic number: var mfs = new MessagingFactorySettings                  {                      TokenProvider = tokenProvider'                      OperationTimeout = TimeSpan.FromSeconds(30)'                      TransportType = TransportType.Amqp'                      AmqpTransportSettings = new AmqpTransportSettings                      {                          BatchFlushInterval = TimeSpan.FromMilliseconds(50)'                      }'                  };
Magic Number,Verify_account_settings,The_account_credentials_for_unit_tests,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Verify_account_settings.cs,Should_be_configured_and_working,The following statement contains a magic number: receiver.PrefetchCount = 100;
Magic Number,Verify_account_settings,The_account_credentials_for_unit_tests,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Verify_account_settings.cs,Should_be_configured_and_working,The following statement contains a magic number: const int limit = 1000;
Magic Number,Verify_account_settings,The_account_credentials_for_unit_tests,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Verify_account_settings.cs,Should_be_configured_and_working,The following statement contains a magic number: receiver.OnMessageAsync(async message =>                  {                      await message.CompleteAsync();                        int received = Interlocked.Increment(ref count);                      if (received == limit)                          done.TrySetResult(true);                  }' new OnMessageOptions                  {                      AutoComplete = false'                      MaxConcurrentCalls = 100'                      AutoRenewTimeout = TimeSpan.FromSeconds(60)'                  });
Magic Number,Verify_account_settings,The_account_credentials_for_unit_tests,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Verify_account_settings.cs,Should_be_configured_and_working,The following statement contains a magic number: receiver.OnMessageAsync(async message =>                  {                      await message.CompleteAsync();                        int received = Interlocked.Increment(ref count);                      if (received == limit)                          done.TrySetResult(true);                  }' new OnMessageOptions                  {                      AutoComplete = false'                      MaxConcurrentCalls = 100'                      AutoRenewTimeout = TimeSpan.FromSeconds(60)'                  });
Magic Number,Verify_account_settings,The_account_credentials_for_unit_tests,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Verify_account_settings.cs,Should_be_configured_and_working,The following statement contains a magic number: Console.WriteLine("Performance: {0:F2}/s"' limit * 1000 / stopwatch.ElapsedMilliseconds);
Magic Number,Verify_account_settings,The_account_credentials_for_unit_tests,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Verify_account_settings.cs,CreateQueue,The following statement contains a magic number: var description = new QueueDescription(queueName)                  {                      DefaultMessageTimeToLive = TimeSpan.FromDays(365)'                      EnableBatchedOperations = true'                      LockDuration = TimeSpan.FromMinutes(5)'                      MaxDeliveryCount = 5'                      EnableDeadLetteringOnMessageExpiration = true'                      DuplicateDetectionHistoryTimeWindow = TimeSpan.FromMinutes(10)'                  };
Magic Number,Verify_account_settings,The_account_credentials_for_unit_tests,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Verify_account_settings.cs,CreateQueue,The following statement contains a magic number: var description = new QueueDescription(queueName)                  {                      DefaultMessageTimeToLive = TimeSpan.FromDays(365)'                      EnableBatchedOperations = true'                      LockDuration = TimeSpan.FromMinutes(5)'                      MaxDeliveryCount = 5'                      EnableDeadLetteringOnMessageExpiration = true'                      DuplicateDetectionHistoryTimeWindow = TimeSpan.FromMinutes(10)'                  };
Magic Number,Verify_account_settings,The_account_credentials_for_unit_tests,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Verify_account_settings.cs,CreateQueue,The following statement contains a magic number: var description = new QueueDescription(queueName)                  {                      DefaultMessageTimeToLive = TimeSpan.FromDays(365)'                      EnableBatchedOperations = true'                      LockDuration = TimeSpan.FromMinutes(5)'                      MaxDeliveryCount = 5'                      EnableDeadLetteringOnMessageExpiration = true'                      DuplicateDetectionHistoryTimeWindow = TimeSpan.FromMinutes(10)'                  };
Magic Number,Verify_account_settings,The_account_credentials_for_unit_tests,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.AzureServiceBusTransport.Tests\Verify_account_settings.cs,CreateQueue,The following statement contains a magic number: var description = new QueueDescription(queueName)                  {                      DefaultMessageTimeToLive = TimeSpan.FromDays(365)'                      EnableBatchedOperations = true'                      LockDuration = TimeSpan.FromMinutes(5)'                      MaxDeliveryCount = 5'                      EnableDeadLetteringOnMessageExpiration = true'                      DuplicateDetectionHistoryTimeWindow = TimeSpan.FromMinutes(10)'                  };
