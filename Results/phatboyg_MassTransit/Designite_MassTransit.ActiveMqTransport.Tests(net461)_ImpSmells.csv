Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Failover_should_take_precendence_in_uri_construction,The length of the statement  "            Assert.That(settings.BrokerAddress' Is.EqualTo(new Uri("activemq:failover:(tcp://failover1:61616/'tcp://failover2:61616/)"))); " is 126.
Long Statement,MassTransit.ActiveMqTransport.Tests,Using_the_delayed_exchange,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The length of the statement  "                Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));" is 139.
Long Statement,MassTransit.ActiveMqTransport.Tests,Using_delayed_exchange_redelivery_with_a_consumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,Should_retry_each_message_type,The length of the statement  "            var pingFault = SubscribeHandler<Fault<PingMessage>>(x => x.Message.Message.CorrelationId == pingMessage.CorrelationId);" is 120.
Long Statement,MassTransit.ActiveMqTransport.Tests,Using_delayed_exchange_redelivery_with_a_consumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,Should_retry_each_message_type,The length of the statement  "            var pongFault = SubscribeHandler<Fault<PongMessage>>(x => x.Message.Message.CorrelationId == pingMessage.CorrelationId);" is 120.
Long Statement,MassTransit.ActiveMqTransport.Tests,Using_delayed_exchange_redelivery_with_a_consumer_and_retry,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,Should_retry_and_redeliver,The length of the statement  "            var pingFault = SubscribeHandler<Fault<PingMessage>>(x => x.Message.Message.CorrelationId == pingMessage.CorrelationId);" is 120.
Long Statement,MassTransit.ActiveMqTransport.Tests,Explicitly_deferring_a_message_instead_of_throwing,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The length of the statement  "                Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));" is 139.
Long Statement,MassTransit.ActiveMqTransport.Tests,execute_callback_function_during_defer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The length of the statement  "                Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));" is 139.
Long Statement,MassTransit.ActiveMqTransport.Tests,A_serialization_exception,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\ErrorQueue_Specs.cs,Should_have_the_exception,The length of the statement  "            Assert.That(context.ReceiveContext.TransportHeaders.Get("MT-Fault-Message"' (string)null)' Is.EqualTo("This is fine' forcing death")); " is 134.
Long Statement,MassTransit.ActiveMqTransport.Tests,A_serialization_exception,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\ErrorQueue_Specs.cs,Should_have_the_host_machine_name,The length of the statement  "            Assert.That(context.ReceiveContext.TransportHeaders.Get("MT-Host-MachineName"' (string)null)' Is.EqualTo(HostMetadataCache.Host.MachineName)); " is 142.
Magic Number,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Should_succeed_and_connect_when_properly_configured,The following statement contains a magic number: var busControl = Bus.Factory.CreateUsingActiveMq(cfg =>              {                  var host = cfg.Host(TestBrokerHost' 61617' h =>                  {                      h.Username(TestUsername);                      h.Password(TestPassword);                        h.UseSsl();                  });                    cfg.ReceiveEndpoint(host' "input-queue"' x =>                  {                      x.Handler<PingMessage>(async context =>                      {                          await context.Publish(new PongMessage(context.Message.CorrelationId));                      });                        sendAddress = x.InputAddress;                  });                    cfg.ReceiveEndpoint(host' "input-queue-too"' x =>                  {                      x.Handler<PongMessage>(async context =>                      {                          received.TrySetResult(true);                      });                  });              });
Magic Number,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Should_succeed_and_connect_when_properly_configured,The following statement contains a magic number: await received.Task.OrTimeout(TimeSpan.FromSeconds(5));
Magic Number,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Should_do_a_bunch_of_requests_and_responses,The following statement contains a magic number: var bus = Bus.Factory.CreateUsingActiveMq(sbc =>              {                  var host = sbc.Host(TestBrokerHost' 61617' h =>                  {                      h.Username(TestUsername);                      h.Password(TestPassword);                        h.UseSsl();                  });                    sbc.ReceiveEndpoint(host' "test"' e =>                  {                      e.Handler<PingMessage>(async context => await context.RespondAsync(new PongMessage(context.Message.CorrelationId)));                  });              });
Magic Number,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Should_do_a_bunch_of_requests_and_responses,The following statement contains a magic number: i < 100
Magic Number,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Should_connect_locally,The following statement contains a magic number: var busControl = Bus.Factory.CreateUsingActiveMq(cfg =>              {                  cfg.Host("localhost"' 61616' h =>                  {                      h.Username("admin");                      h.Password("admin");                  });              });
Magic Number,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Should_connect_locally,The following statement contains a magic number: await busControl.StartAsync(new CancellationTokenSource(10000).Token);
Magic Number,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Should_connect_locally,The following statement contains a magic number: await busControl.StopAsync(new CancellationTokenSource(10000).Token);
Magic Number,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Should_connect_locally_with_test_harness_and_a_publisher,The following statement contains a magic number: await harness.Stop().OrTimeout(s:5);
Magic Number,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Should_succeed_when_properly_configured,The following statement contains a magic number: var busControl = Bus.Factory.CreateUsingActiveMq(cfg =>              {                  cfg.Host(TestBrokerHost' 61617' h =>                  {                      h.Username(TestUsername);                      h.Password(TestPassword);                        h.UseSsl();                  });              });
Magic Number,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Failover_should_take_precendence_in_uri_construction,The following statement contains a magic number: var settings = new ConfigurationHostSettings(new Uri("activemq://fake-host"))              {                  Port = 61616'                  FailoverHosts = new []                  {                      "failover1"'                      "failover2"                  }              };
Magic Number,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Should_do_a_bunch_of_requests_and_responses_on_failover_transport,The following statement contains a magic number: var bus = Bus.Factory.CreateUsingActiveMq(sbc =>              {                  var host = sbc.Host("activemq-cluster"' 61617' h =>                  {                      h.Username(TestUsername);                      h.Password(TestPassword);                      h.FailoverHosts(FailoverHosts);                      h.TransportOptions(new Dictionary<string' string>()                      {                          { "transport.randomize"' "true" }                      });                        h.UseSsl();                  });                    sbc.ReceiveEndpoint(host' "test"' e =>                  {                      e.Handler<PingMessage>(async context => await context.RespondAsync(new PongMessage(context.Message.CorrelationId)));                  });              });
Magic Number,MassTransit.ActiveMqTransport.Tests,Configuring_ActiveMQ,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\Configure_Specs.cs,Should_do_a_bunch_of_requests_and_responses_on_failover_transport,The following statement contains a magic number: i < 100
Magic Number,MassTransit.ActiveMqTransport.Tests,Using_the_delayed_exchange,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(context =>             {                 if (_timer == null)                     _timer = Stopwatch.StartNew();                  if (_count++ < 2)                 {                     Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                     throw new IntentionalTestException("I'm so not ready for this jelly.");                 }                  _timer.Stop();                  Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));                  // okay' ready.                 _receivedTimeSpan = _timer.Elapsed;                 _received.TrySetResult(context);                  return TaskUtil.Completed;             }' x => x.UseDelayedRedelivery(r => r.Intervals(1000' 2000)));
Magic Number,MassTransit.ActiveMqTransport.Tests,Using_the_delayed_exchange,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(context =>             {                 if (_timer == null)                     _timer = Stopwatch.StartNew();                  if (_count++ < 2)                 {                     Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                     throw new IntentionalTestException("I'm so not ready for this jelly.");                 }                  _timer.Stop();                  Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));                  // okay' ready.                 _receivedTimeSpan = _timer.Elapsed;                 _received.TrySetResult(context);                  return TaskUtil.Completed;             }' x => x.UseDelayedRedelivery(r => r.Intervals(1000' 2000)));
Magic Number,MassTransit.ActiveMqTransport.Tests,Using_the_delayed_exchange,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(context =>             {                 if (_timer == null)                     _timer = Stopwatch.StartNew();                  if (_count++ < 2)                 {                     Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                     throw new IntentionalTestException("I'm so not ready for this jelly.");                 }                  _timer.Stop();                  Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));                  // okay' ready.                 _receivedTimeSpan = _timer.Elapsed;                 _received.TrySetResult(context);                  return TaskUtil.Completed;             }' x => x.UseDelayedRedelivery(r => r.Intervals(1000' 2000)));
Magic Number,MassTransit.ActiveMqTransport.Tests,Delaying_a_message_retry_with_policy,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,Should_only_defer_up_to_the_retry_count,The following statement contains a magic number: Assert.That(_count' Is.EqualTo(3));
Magic Number,MassTransit.ActiveMqTransport.Tests,Delaying_a_message_retry_with_policy,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(context =>             {                 Interlocked.Increment(ref _count);                  throw new IntentionalTestException();             }' x => x.UseDelayedRedelivery(r => r.Intervals(100' 200)));
Magic Number,MassTransit.ActiveMqTransport.Tests,Delaying_a_message_retry_with_policy,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(context =>             {                 Interlocked.Increment(ref _count);                  throw new IntentionalTestException();             }' x => x.UseDelayedRedelivery(r => r.Intervals(100' 200)));
Magic Number,MassTransit.ActiveMqTransport.Tests,Retrying_a_message_retry_with_policy,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,Should_only_retry_up_to_the_retry_count,The following statement contains a magic number: Assert.That(_count' Is.EqualTo(3));
Magic Number,MassTransit.ActiveMqTransport.Tests,Retrying_a_message_retry_with_policy,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(context =>             {                 Interlocked.Increment(ref _count);                  throw new IntentionalTestException();             }' x => x.UseRetry(r => r.Intervals(100' 200)));
Magic Number,MassTransit.ActiveMqTransport.Tests,Retrying_a_message_retry_with_policy,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(context =>             {                 Interlocked.Increment(ref _count);                  throw new IntentionalTestException();             }' x => x.UseRetry(r => r.Intervals(100' 200)));
Magic Number,MassTransit.ActiveMqTransport.Tests,Using_delayed_exchange_redelivery_with_a_consumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,Should_retry_each_message_type,The following statement contains a magic number: Assert.That(_consumer.PingCount' Is.EqualTo(3));
Magic Number,MassTransit.ActiveMqTransport.Tests,Using_delayed_exchange_redelivery_with_a_consumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,Should_retry_each_message_type,The following statement contains a magic number: Assert.That(_consumer.PongCount' Is.EqualTo(3));
Magic Number,MassTransit.ActiveMqTransport.Tests,Using_delayed_exchange_redelivery_with_a_consumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.UseDelayedRedelivery(r => r.Intervals(100' 200));
Magic Number,MassTransit.ActiveMqTransport.Tests,Using_delayed_exchange_redelivery_with_a_consumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.UseDelayedRedelivery(r => r.Intervals(100' 200));
Magic Number,MassTransit.ActiveMqTransport.Tests,Using_delayed_exchange_redelivery_with_a_consumer_and_retry,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,Should_retry_and_redeliver,The following statement contains a magic number: Assert.That(Consumer.PingCount' Is.EqualTo(6));
Magic Number,MassTransit.ActiveMqTransport.Tests,Using_delayed_exchange_redelivery_with_a_consumer_and_retry,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.UseDelayedRedelivery(r => r.Intervals(100));
Magic Number,MassTransit.ActiveMqTransport.Tests,Using_delayed_exchange_redelivery_with_a_consumer_and_retry,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.UseMessageRetry(x => x.Immediate(2));
Magic Number,MassTransit.ActiveMqTransport.Tests,Explicitly_deferring_a_message_instead_of_throwing,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>             {                 if (_timer == null)                     _timer = Stopwatch.StartNew();                  if (_count++ < 2)                 {                     Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                      await context.Defer(TimeSpan.FromMilliseconds(1000));                     return;                 }                  _timer.Stop();                  Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));                  // okay' ready.                 _receivedTimeSpan = _timer.Elapsed;                 _received.TrySetResult(context);             });
Magic Number,MassTransit.ActiveMqTransport.Tests,Explicitly_deferring_a_message_instead_of_throwing,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>             {                 if (_timer == null)                     _timer = Stopwatch.StartNew();                  if (_count++ < 2)                 {                     Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                      await context.Defer(TimeSpan.FromMilliseconds(1000));                     return;                 }                  _timer.Stop();                  Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));                  // okay' ready.                 _receivedTimeSpan = _timer.Elapsed;                 _received.TrySetResult(context);             });
Magic Number,MassTransit.ActiveMqTransport.Tests,execute_callback_function_during_defer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>             {                 if (_timer == null)                     _timer = Stopwatch.StartNew();                  if (_count++ < 2)                 {                     Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                      await context.Defer(TimeSpan.FromMilliseconds(1000)' (consumeContext' sendContext) =>                     {                         _hit = true;                     });                      return;                 }                  _timer.Stop();                  Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));                  // okay' ready.                 _receivedTimeSpan = _timer.Elapsed;                 _received.TrySetResult(context);             });
Magic Number,MassTransit.ActiveMqTransport.Tests,execute_callback_function_during_defer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\DelayRetry_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>             {                 if (_timer == null)                     _timer = Stopwatch.StartNew();                  if (_count++ < 2)                 {                     Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                      await context.Defer(TimeSpan.FromMilliseconds(1000)' (consumeContext' sendContext) =>                     {                         _hit = true;                     });                      return;                 }                  _timer.Stop();                  Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));                  // okay' ready.                 _receivedTimeSpan = _timer.Elapsed;                 _received.TrySetResult(context);             });
Magic Number,MassTransit.ActiveMqTransport.Tests,Should_schedule_in_the_future,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\ScheduleMessage_Specs.cs,Should_get_both_messages,The following statement contains a magic number: Assert.That(timer.Elapsed' Is.GreaterThanOrEqualTo(TimeSpan.FromSeconds(2)));
Magic Number,MassTransit.ActiveMqTransport.Tests,Should_schedule_in_the_future,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.ActiveMqTransport.Tests\ScheduleMessage_Specs.cs,ConfigureActiveMqReceiveEndpoint,The following statement contains a magic number: _first = Handler<FirstMessage>(configurator' async context =>             {                 await context.ScheduleSend(TimeSpan.FromSeconds(3)' new SecondMessage());                  await context.ReceiveContext.ReceiveCompleted;             });
