Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MassTransit.NHibernateIntegration.Saga,NHibernateSagaRepository<TSaga>,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.NHibernateIntegration\Saga\NHibernateSagaRepository.cs,SendToInstance,The method has 5 parameters. Parameters: context' policy' instance' next' session
Long Statement,MassTransit.NHibernateIntegration.Saga,NHibernateSagaConsumeContext<TSaga;TMessage>,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.NHibernateIntegration\Saga\NHibernateSagaConsumeContext.cs,PopContext,The length of the statement  "                throw new ContextException($"The ConsumeContext<{TypeMetadataCache<TMessage>.ShortName}> could not be cast to {TypeMetadataCache<T>.ShortName}"); " is 145.
Long Statement,MassTransit.NHibernateIntegration.Saga,NHibernateSagaRepository<TSaga>,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.NHibernateIntegration\Saga\NHibernateSagaRepository.cs,Send,The length of the statement  "                            _log.DebugFormat("SAGA:{0}:{1} Used {2}"' TypeMetadataCache<TSaga>.ShortName' instance.CorrelationId' TypeMetadataCache<T>.ShortName); " is 134.
Long Statement,MassTransit.NHibernateIntegration.Saga,NHibernateSagaRepository<TSaga>,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.NHibernateIntegration\Saga\NHibernateSagaRepository.cs,SendQuery,The length of the statement  "                        await Task.WhenAll(instances.Select(instance => SendToInstance(context' policy' instance' next' session))).ConfigureAwait(false); " is 129.
Long Statement,MassTransit.NHibernateIntegration.Saga,NHibernateSagaRepository<TSaga>,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.NHibernateIntegration\Saga\NHibernateSagaRepository.cs,SendToInstance,The length of the statement  "                    _log.DebugFormat("SAGA:{0}:{1} Used {2}"' TypeMetadataCache<TSaga>.ShortName' instance.CorrelationId' TypeMetadataCache<T>.ShortName); " is 134.
Long Statement,MassTransit.NHibernateIntegration.Saga,MissingPipe<TMessage>,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.NHibernateIntegration\Saga\NHibernateSagaRepository.cs,Send,The length of the statement  "                SagaConsumeContext<TSaga' TMessage> proxy = new NHibernateSagaConsumeContext<TSaga' TMessage>(_session' context' context.Saga); " is 127.
Magic Number,MassTransit.NHibernateIntegration,BinaryGuidType,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.NHibernateIntegration\BinaryGuidType.cs,NullSafeGet,The following statement contains a magic number: var reorderedBytes = new byte[16];
Magic Number,MassTransit.NHibernateIntegration,BinaryGuidType,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.NHibernateIntegration\BinaryGuidType.cs,NullSafeGet,The following statement contains a magic number: for (int i = 0; i < 16; i++)                  reorderedBytes[_byteOrder[i]] = bytes[i];
Magic Number,MassTransit.NHibernateIntegration,BinaryGuidType,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.NHibernateIntegration\BinaryGuidType.cs,NullSafeSet,The following statement contains a magic number: if (null != value)              {                  byte[] bytes = ((Guid)value).ToByteArray();                  var reorderedBytes = new byte[16];                    for (int i = 0; i < 16; i++)                      reorderedBytes[i] = bytes[_byteOrder[i]];                    NHibernateUtil.Binary.NullSafeSet(cmd' reorderedBytes' index);              }              else                  NHibernateUtil.Binary.NullSafeSet(cmd' null' index);
Magic Number,MassTransit.NHibernateIntegration,BinaryGuidType,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.NHibernateIntegration\BinaryGuidType.cs,NullSafeSet,The following statement contains a magic number: if (null != value)              {                  byte[] bytes = ((Guid)value).ToByteArray();                  var reorderedBytes = new byte[16];                    for (int i = 0; i < 16; i++)                      reorderedBytes[i] = bytes[_byteOrder[i]];                    NHibernateUtil.Binary.NullSafeSet(cmd' reorderedBytes' index);              }              else                  NHibernateUtil.Binary.NullSafeSet(cmd' null' index);
Magic Number,MassTransit.NHibernateIntegration,SqlServerSessionFactoryProvider,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.NHibernateIntegration\SqlServerSessionFactoryProvider.cs,Integrate,The following statement contains a magic number: db.BatchSize = 100;
