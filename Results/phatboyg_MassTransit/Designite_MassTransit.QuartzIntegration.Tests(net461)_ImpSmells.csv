Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MassTransit.QuartzIntegration.Tests,When_using_retry_middleware_for_courier,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Courier_Specs.cs,Should_publish_the_faulted_routing_slip_event,The length of the statement  "            Task<ConsumeContext<RoutingSlipActivityCompensated>> compensated = ConnectPublishHandler<RoutingSlipActivityCompensated>(" is 121.
Long Statement,MassTransit.QuartzIntegration.Tests,Using_a_scheduled_delay_retry_mechanism,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The length of the statement  "                Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?))); " is 139.
Long Statement,MassTransit.QuartzIntegration.Tests,MyConsumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,Consume,The length of the statement  "                Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?))); " is 139.
Long Statement,MassTransit.QuartzIntegration.Tests,MyConsumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,Consume,The length of the statement  "                Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?))); " is 139.
Long Statement,MassTransit.QuartzIntegration.Tests,Specifying_an_event_in_the_past,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\PastEvent_Specs.cs,Should_be_able_to_cancel_a_future_event,The length of the statement  "            var scheduledMessage = await QuartzEndpoint.ScheduleSend(Bus.Address' DateTime.UtcNow + TimeSpan.FromSeconds(120)' new A {Name = "Joe"}); " is 137.
Long Statement,MassTransit.QuartzIntegration.Tests,SomeMessageConsumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\QuartzPublish_Specs.cs,Consume,The length of the statement  "                return Console.Out.WriteLineAsync(context.Message.GetType().Name + " - " + context.Message.SendDate + " - " + context.Message.Source); " is 134.
Long Statement,MassTransit.QuartzIntegration.Tests,Specifying_a_recurring_event,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,Should_handle_now_properly,The length of the statement  "            await QuartzEndpoint.ScheduleSend(InputQueueAddress' DateTime.UtcNow + TimeSpan.FromSeconds(20)' new Done { Name = "Joe" }); " is 124.
Long Statement,MassTransit.QuartzIntegration.Tests,Specifying_a_recurring_event,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,Should_cancel_recurring_schedule,The length of the statement  "            await QuartzEndpoint.ScheduleSend(InputQueueAddress' DateTime.UtcNow + TimeSpan.FromSeconds(10)' new Done { Name = "Joe" }); " is 124.
Long Statement,MassTransit.QuartzIntegration.Tests,Specifying_a_recurring_event,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,Should_cancel_recurring_schedule,The length of the statement  "            var scheduledRecurringMessage = await QuartzEndpoint.ScheduleRecurringSend(InputQueueAddress' new MyCancelableSchedule(scheduleId)' new Interval { Name = "Joe" }); " is 163.
Long Statement,MassTransit.QuartzIntegration.Tests,Specifying_a_recurring_event,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,Should_cancel_recurring_schedule,The length of the statement  "            await QuartzEndpoint.ScheduleSend(InputQueueAddress' DateTime.UtcNow + TimeSpan.FromSeconds(10)' new DoneAgain { Name = "Joe" }); " is 129.
Long Statement,MassTransit.QuartzIntegration.Tests,Specifying_a_recurring_event,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,Should_contain_additional_headers_that_provide_time_domain_context,The length of the statement  "            await QuartzEndpoint.ScheduleSend(InputQueueAddress' DateTime.UtcNow + TimeSpan.FromSeconds(10)' new Done { Name = "Joe" }); " is 124.
Long Statement,MassTransit.QuartzIntegration.Tests,Specifying_a_recurring_event,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,Should_contain_additional_headers_that_provide_time_domain_context,The length of the statement  "            var scheduledRecurringMessage = await QuartzEndpoint.ScheduleRecurringSend(InputQueueAddress' new MySchedule()' new Interval { Name = "Joe" }); " is 143.
Long Statement,MassTransit.QuartzIntegration.Tests,A_long_running_state_machine_initiated_by_a_request,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\RequestRequest_Specs.cs,Should_accept_that_faults_happen,The length of the statement  "                await client.GetResponse<ShortLinkCreated>(new {Link = new Uri("http://www.google.com")})' Throws.TypeOf<RequestFaultException>());" is 131.
Long Statement,MassTransit.QuartzIntegration.Tests,Sending_a_request_that_times_out,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\RequestTimeout_Specs.cs,Should_receive_the_timeout_notification,The length of the statement  "            await InputQueueSendEndpoint.Send<RegisterMember>(new { MemberNumber = memberNumber' Name = "Frank"' Address = "123 American Way"});" is 132.
Magic Number,MassTransit.QuartzIntegration.Tests,When_using_retry_middleware_for_courier,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Courier_Specs.cs,ConfigureInMemoryBus,The following statement contains a magic number: configurator.UseScheduledRedelivery(r => r.Intervals(200' 500));
Magic Number,MassTransit.QuartzIntegration.Tests,When_using_retry_middleware_for_courier,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Courier_Specs.cs,ConfigureInMemoryBus,The following statement contains a magic number: configurator.UseScheduledRedelivery(r => r.Intervals(200' 500));
Magic Number,MassTransit.QuartzIntegration.Tests,Using_a_scheduled_delay_retry_mechanism,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>              {                  if (_timer == null)                      _timer = Stopwatch.StartNew();                    if (_count++ < 2)                  {                      Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                      throw new IntentionalTestException("I'm so not ready for this jelly.");                  }                    _timer.Stop();                    Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));                    // okay' ready.                  _receivedTimeSpan = _timer.Elapsed;                  _received.TrySetResult(context);              }' x => x.UseScheduledRedelivery(r => r.Intervals(1000' 2000)));
Magic Number,MassTransit.QuartzIntegration.Tests,Using_a_scheduled_delay_retry_mechanism,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>              {                  if (_timer == null)                      _timer = Stopwatch.StartNew();                    if (_count++ < 2)                  {                      Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                      throw new IntentionalTestException("I'm so not ready for this jelly.");                  }                    _timer.Stop();                    Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));                    // okay' ready.                  _receivedTimeSpan = _timer.Elapsed;                  _received.TrySetResult(context);              }' x => x.UseScheduledRedelivery(r => r.Intervals(1000' 2000)));
Magic Number,MassTransit.QuartzIntegration.Tests,Using_a_scheduled_delay_retry_mechanism,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>              {                  if (_timer == null)                      _timer = Stopwatch.StartNew();                    if (_count++ < 2)                  {                      Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                      throw new IntentionalTestException("I'm so not ready for this jelly.");                  }                    _timer.Stop();                    Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.Headers.Get("MT-Redelivery-Count"' default(int?)));                    // okay' ready.                  _receivedTimeSpan = _timer.Elapsed;                  _received.TrySetResult(context);              }' x => x.UseScheduledRedelivery(r => r.Intervals(1000' 2000)));
Magic Number,MassTransit.QuartzIntegration.Tests,Using_a_scheduled_delay_retry_mechanism_for_consumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.Consumer(() => _consumer' x =>              {                  x.Message<PingMessage>(m => m.UseScheduledRedelivery(r => r.Intervals(1000' 2000)));              });
Magic Number,MassTransit.QuartzIntegration.Tests,Using_a_scheduled_delay_retry_mechanism_for_consumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.Consumer(() => _consumer' x =>              {                  x.Message<PingMessage>(m => m.UseScheduledRedelivery(r => r.Intervals(1000' 2000)));              });
Magic Number,MassTransit.QuartzIntegration.Tests,MyConsumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,Consume,The following statement contains a magic number: _count++ < 2
Magic Number,MassTransit.QuartzIntegration.Tests,MyConsumer,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,Consume,The following statement contains a magic number: _count++ < 2
Magic Number,MassTransit.QuartzIntegration.Tests,Using_a_scheduled_delay_retry_mechanism_for_consumer_without_message,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,Should_properly_defer_the_message_delivery,The following statement contains a magic number: Assert.That(_consumer.RedeliveryCount' Is.EqualTo(2));
Magic Number,MassTransit.QuartzIntegration.Tests,Using_a_scheduled_delay_retry_mechanism_for_consumer_without_message,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.UseScheduledRedelivery(r => r.Intervals(1000' 2000));
Magic Number,MassTransit.QuartzIntegration.Tests,Using_a_scheduled_delay_retry_mechanism_for_consumer_without_message,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.UseScheduledRedelivery(r => r.Intervals(1000' 2000));
Magic Number,MassTransit.QuartzIntegration.Tests,Using_an_explicit_retry_later_via_scheduling,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>              {                  if (_timer == null)                      _timer = Stopwatch.StartNew();                    if (_count++ < 2)                  {                      Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                      await context.Redeliver(TimeSpan.FromMilliseconds(1000));                      return;                  }                    _timer.Stop();                    Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.GetRedeliveryCount());                    // okay' ready.                  _receivedTimeSpan = _timer.Elapsed;                  _received.TrySetResult(context);              });
Magic Number,MassTransit.QuartzIntegration.Tests,Using_an_explicit_retry_later_via_scheduling,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>              {                  if (_timer == null)                      _timer = Stopwatch.StartNew();                    if (_count++ < 2)                  {                      Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                      await context.Redeliver(TimeSpan.FromMilliseconds(1000));                      return;                  }                    _timer.Stop();                    Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.GetRedeliveryCount());                    // okay' ready.                  _receivedTimeSpan = _timer.Elapsed;                  _received.TrySetResult(context);              });
Magic Number,MassTransit.QuartzIntegration.Tests,Using_an_explicit_retry_later_via_scheduling_with_custom_callback,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,callback_executed_before_defer_the_message_delivery,The following statement contains a magic number: Assert.AreEqual(2' customHeaderValue);
Magic Number,MassTransit.QuartzIntegration.Tests,Using_an_explicit_retry_later_via_scheduling_with_custom_callback,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>              {                  if (_timer == null)                      _timer = Stopwatch.StartNew();                    if (_count++ < 2)                  {                      Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                      await context.Redeliver(TimeSpan.FromMilliseconds(1000)' (consumeContext' sendContext) =>                      {                          sendContext.Headers.Set(customHeader' 2);                      });                        return;                  }                    _timer.Stop();                    Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.GetRedeliveryCount());                    // okay' ready.                  _receivedTimeSpan = _timer.Elapsed;                  _received.TrySetResult(context);              });
Magic Number,MassTransit.QuartzIntegration.Tests,Using_an_explicit_retry_later_via_scheduling_with_custom_callback,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>              {                  if (_timer == null)                      _timer = Stopwatch.StartNew();                    if (_count++ < 2)                  {                      Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                      await context.Redeliver(TimeSpan.FromMilliseconds(1000)' (consumeContext' sendContext) =>                      {                          sendContext.Headers.Set(customHeader' 2);                      });                        return;                  }                    _timer.Stop();                    Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.GetRedeliveryCount());                    // okay' ready.                  _receivedTimeSpan = _timer.Elapsed;                  _received.TrySetResult(context);              });
Magic Number,MassTransit.QuartzIntegration.Tests,Using_an_explicit_retry_later_via_scheduling_with_custom_callback,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\DelayRetry_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>              {                  if (_timer == null)                      _timer = Stopwatch.StartNew();                    if (_count++ < 2)                  {                      Console.WriteLine("{0} now is not a good time"' DateTime.UtcNow);                      await context.Redeliver(TimeSpan.FromMilliseconds(1000)' (consumeContext' sendContext) =>                      {                          sendContext.Headers.Set(customHeader' 2);                      });                        return;                  }                    _timer.Stop();                    Console.WriteLine("{0} okay' now is good (retried {1} times)"' DateTime.UtcNow' context.GetRedeliveryCount());                    // okay' ready.                  _receivedTimeSpan = _timer.Elapsed;                  _received.TrySetResult(context);              });
Magic Number,MassTransit.QuartzIntegration.Tests,When_an_existing_instance_is_not_found_and_message_is_redelivered,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\MissingInstanceRedelivery_Specs.cs,Should_schedule_the_message_and_redeliver_to_the_instance,The following statement contains a magic number: await Task.Delay(500);
Magic Number,MassTransit.QuartzIntegration.Tests,TestStateMachine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\MissingInstanceRedelivery_Specs.cs,TestStateMachine,The following statement contains a magic number: Event(() => CheckStatus' x =>                 {                     x.CorrelateBy(instance => instance.ServiceName' context => context.Message.ServiceName);                      x.OnMissingInstance(m => m.Redeliver(r =>                     {                         r.Interval(5' 1000);                         r.OnRedeliveryLimitReached(n => n.ExecuteAsync(context => context.RespondAsync(new InstanceNotFound(context.Message.ServiceName))));                     }));                 });
Magic Number,MassTransit.QuartzIntegration.Tests,TestStateMachine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\MissingInstanceRedelivery_Specs.cs,TestStateMachine,The following statement contains a magic number: Event(() => CheckStatus' x =>                 {                     x.CorrelateBy(instance => instance.ServiceName' context => context.Message.ServiceName);                      x.OnMissingInstance(m => m.Redeliver(r =>                     {                         r.Interval(5' 1000);                         r.OnRedeliveryLimitReached(n => n.ExecuteAsync(context => context.RespondAsync(new InstanceNotFound(context.Message.ServiceName))));                     }));                 });
Magic Number,MassTransit.QuartzIntegration.Tests,TestStateMachine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\MissingInstanceRedelivery_Specs.cs,TestStateMachine,The following statement contains a magic number: Schedule(() => ScheduledMessage' x => x.ScheduleId'                      x =>                      {                          x.Delay = TimeSpan.FromSeconds(2);                          x.Received = e => e.CorrelateById(context => context.Message.CorrelationId);                      });
Magic Number,MassTransit.QuartzIntegration.Tests,TestStateMachine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\MissingInstanceRedelivery_Specs.cs,TestStateMachine,The following statement contains a magic number: Schedule(() => StopSchedule' x => x.ScheduleTokenId' x => x.Delay = TimeSpan.FromMilliseconds(100));
Magic Number,MassTransit.QuartzIntegration.Tests,TestStateMachine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\MissingInstanceRedelivery_Specs.cs,TestStateMachine,The following statement contains a magic number: Schedule(() => CartTimeout' x => x.CartTimeoutTokenId' x =>                  {                      x.Delay = TimeSpan.FromSeconds(30);                      x.Received = p => p.CorrelateBy(state => state.MemberNumber' context => context.Message.MemberNumber);                  });
Magic Number,MassTransit.QuartzIntegration.Tests,TestStateMachine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\MissingInstanceRedelivery_Specs.cs,TestStateMachine,The following statement contains a magic number: Initially(When(ItemAdded)                      .ThenAsync(context =>                      {                          context.Instance.MemberNumber = context.Data.MemberNumber;                          context.Instance.ExpiresAfterSeconds = 3;                          return Console.Out.WriteLineAsync($"Cart {context.Instance.CorrelationId} Created: {context.Data.MemberNumber}");                      })                      .Schedule(CartTimeout' context => context.Init<CartExpired>(context.Instance)'                          context => TimeSpan.FromSeconds(context.Instance.ExpiresAfterSeconds))                      .TransitionTo(Active));
Magic Number,MassTransit.QuartzIntegration.Tests,Cancel_scheduled_message_through_the_outbox,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\OutboxScheduler_Specs.cs,Should_cancel_the_message,The following statement contains a magic number: Assert.That(async () => await _pongReceived.Task.OrTimeout(s:5)' Throws.TypeOf<TimeoutException>());
Magic Number,MassTransit.QuartzIntegration.Tests,Cancel_scheduled_message_through_the_outbox,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\OutboxScheduler_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>             {                 _pingReceived.TrySetResult(context);                  var scheduledMessage = await context.ScheduleSend(TimeSpan.FromSeconds(3)' new PongMessage());                  _scheduledMessage.TrySetResult(scheduledMessage);                  throw new IntentionalTestException("This time bad things happen");             });
Magic Number,MassTransit.QuartzIntegration.Tests,Not_cancel_scheduled_message_with_no_outbox,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\OutboxScheduler_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: configurator.Handler<PingMessage>(async context =>             {                 _pingReceived.TrySetResult(context);                  var scheduledMessage = await context.ScheduleSend(TimeSpan.FromSeconds(3)' new PongMessage());                  _scheduledMessage.TrySetResult(scheduledMessage);                  throw new IntentionalTestException("This time bad things happen");             });
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_an_event_in_the_past,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\PastEvent_Specs.cs,Should_be_able_to_cancel_a_future_event,The following statement contains a magic number: var scheduledMessage = await QuartzEndpoint.ScheduleSend(Bus.Address' DateTime.UtcNow + TimeSpan.FromSeconds(120)' new A {Name = "Joe"});
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_an_event_in_the_past,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\PastEvent_Specs.cs,Should_be_able_to_cancel_a_future_event,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_an_event_in_the_past,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\PastEvent_Specs.cs,Should_be_able_to_cancel_a_future_event,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_an_event_in_the_past,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\PastEvent_Specs.cs,Should_handle_slightly_in_the_future_properly,The following statement contains a magic number: await QuartzEndpoint.ScheduleSend(Bus.Address' DateTime.UtcNow + TimeSpan.FromSeconds(2)' new A {Name = "Joe"});
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_an_event_reschedule_if_exists,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\PastEvent_Specs.cs,Should_reschedule,The following statement contains a magic number: await QuartzEndpoint.ScheduleSend(Bus.Address' TimeSpan.FromSeconds(120)' new A              {                  Id = id'                  Name = "Joe"              });
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_an_event_reschedule_if_exists,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\PastEvent_Specs.cs,Should_reschedule,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_an_event_reschedule_if_exists,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\PastEvent_Specs.cs,Should_reschedule,The following statement contains a magic number: await QuartzEndpoint.ScheduleSend(Bus.Address' TimeSpan.FromSeconds(5)' new A              {                  Id = id'                  Name = expected              });
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_a_recurring_event,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,Should_handle_now_properly,The following statement contains a magic number: await QuartzEndpoint.ScheduleSend(InputQueueAddress' DateTime.UtcNow + TimeSpan.FromSeconds(20)' new Done { Name = "Joe" });
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_a_recurring_event,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,Should_handle_now_properly,The following statement contains a magic number: Assert.AreEqual(8' _count' "Expected to see 8 interval messages");
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_a_recurring_event,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,Should_cancel_recurring_schedule,The following statement contains a magic number: await QuartzEndpoint.ScheduleSend(InputQueueAddress' DateTime.UtcNow + TimeSpan.FromSeconds(10)' new Done { Name = "Joe" });
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_a_recurring_event,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,Should_cancel_recurring_schedule,The following statement contains a magic number: Assert.AreEqual(8' _count' "Expected to see 8 interval messages");
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_a_recurring_event,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,Should_cancel_recurring_schedule,The following statement contains a magic number: await QuartzEndpoint.ScheduleSend(InputQueueAddress' DateTime.UtcNow + TimeSpan.FromSeconds(10)' new DoneAgain { Name = "Joe" });
Magic Number,MassTransit.QuartzIntegration.Tests,Specifying_a_recurring_event,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,Should_contain_additional_headers_that_provide_time_domain_context,The following statement contains a magic number: await QuartzEndpoint.ScheduleSend(InputQueueAddress' DateTime.UtcNow + TimeSpan.FromSeconds(10)' new Done { Name = "Joe" });
Magic Number,MassTransit.QuartzIntegration.Tests,MySchedule,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,MySchedule,The following statement contains a magic number: StartTime = DateTime.Now + TimeSpan.FromSeconds(3);
Magic Number,MassTransit.QuartzIntegration.Tests,MySchedule,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,MySchedule,The following statement contains a magic number: EndTime = StartTime + TimeSpan.FromSeconds(7);
Magic Number,MassTransit.QuartzIntegration.Tests,MyCancelableSchedule,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,MyCancelableSchedule,The following statement contains a magic number: StartTime = DateTime.Now + TimeSpan.FromSeconds(3);
Magic Number,MassTransit.QuartzIntegration.Tests,MyCancelableSchedule,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Recurring_Specs.cs,MyCancelableSchedule,The following statement contains a magic number: EndTime = StartTime + TimeSpan.FromSeconds(20);
Magic Number,MassTransit.QuartzIntegration.Tests,A_long_running_state_machine_initiated_by_a_request,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\RequestRequest_Specs.cs,Should_complete_the_request,The following statement contains a magic number: var client = Bus.CreateRequestClient<CreateShortLink>(RequestTimeout.After(s: 30));
Magic Number,MassTransit.QuartzIntegration.Tests,A_long_running_state_machine_initiated_by_a_request,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\RequestRequest_Specs.cs,Should_accept_that_faults_happen,The following statement contains a magic number: var client = Bus.CreateRequestClient<CreateShortLink>(RequestTimeout.After(s: 30));
Magic Number,MassTransit.QuartzIntegration.Tests,A_long_running_state_machine_initiated_by_a_request,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\RequestRequest_Specs.cs,ConfigureInMemoryBus,The following statement contains a magic number: configurator.ReceiveEndpoint("request-state"' endpoint =>             {                 var partitioner = endpoint.CreatePartitioner(128);                  endpoint.StateMachineSaga(_machine' new InMemorySagaRepository<RequestState>()' x =>                 {                     x.Message<RequestStarted>(m => m.UsePartitioner(partitioner' p => p.Message.CorrelationId));                     x.Message<RequestCompleted>(m => m.UsePartitioner(partitioner' p => p.Message.CorrelationId));                     x.Message<RequestFaulted>(m => m.UsePartitioner(partitioner' p => p.Message.CorrelationId));                 });             });
Magic Number,MassTransit.QuartzIntegration.Tests,ScheduleMessage_Specs,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\ScheduleMessage_Specs.cs,ConfigureInMemoryReceiveEndpoint,The following statement contains a magic number: _first = Handler<FirstMessage>(configurator' async context =>              {                  await context.ScheduleSend(TimeSpan.FromSeconds(10)' new SecondMessage());              });
Magic Number,MassTransit.QuartzIntegration.Tests,ScheduleMessage_Specs,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\ScheduleMessage_Specs.cs,Should_get_both_messages,The following statement contains a magic number: AdvanceTime(TimeSpan.FromSeconds(10));
Magic Number,MassTransit.QuartzIntegration.Tests,When_processing_a_lot_of_saga_instances,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\SchedulerLoadInMemory_Specs.cs,Should_remove_the_saga_once_completed,The following statement contains a magic number: i < 20
Magic Number,MassTransit.QuartzIntegration.Tests,When_processing_a_lot_of_saga_instances,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\SchedulerLoadInMemory_Specs.cs,Should_remove_the_saga_once_completed,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,MassTransit.QuartzIntegration.Tests,Using_the_quartz_service_and_cancelling,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Service_Specs.cs,Should_properly_send_the_message,The following statement contains a magic number: ScheduledMessage<A> scheduledMessage =                  await Bus.ScheduleSend(Bus.Address' DateTime.UtcNow + TimeSpan.FromSeconds(3)' new A {Name = "Joe"});
Magic Number,MassTransit.QuartzIntegration.Tests,Using_the_quartz_service_and_cancelling,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Service_Specs.cs,Should_properly_send_the_message,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,MassTransit.QuartzIntegration.Tests,Using_the_quartz_service_and_cancelling,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Service_Specs.cs,Should_properly_send_the_message,The following statement contains a magic number: Assert.That(async () => await handlerA.OrTimeout(5000)' Throws.TypeOf<TimeoutException>());
Magic Number,LongRunningRequestTest,CreateLinkStateMachine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\RequestRequest_Specs.cs,CreateLinkStateMachine,The following statement contains a magic number: Request(() => LinkRequest' x => x.LinkRequestId' x => x.Timeout = TimeSpan.FromSeconds(30));
Magic Number,Reschedule_Specs,TestStateMachine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\Reschedule_Specs.cs,TestStateMachine,The following statement contains a magic number: Schedule(() => ScheduledMessage' x => x.ScheduleId'                      x =>                      {                          x.Delay = TimeSpan.FromSeconds(2);                          x.Received = e => e.CorrelateById(context => context.Message.CorrelationId);                      });
Magic Number,ScheduleTimeout_Specs,Scheduling_a_message_from_a_state_machine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\ScheduleTimeout_Specs.cs,Should_cancel_when_the_order_is_submitted,The following statement contains a magic number: await Task.Delay(3000);
Magic Number,ScheduleTimeout_Specs,TestStateMachine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\ScheduleTimeout_Specs.cs,TestStateMachine,The following statement contains a magic number: Schedule(() => CartTimeout' x => x.CartTimeoutTokenId' x =>                  {                      x.Delay = TimeSpan.FromSeconds(30);                      x.Received = p => p.CorrelateBy(state => state.MemberNumber' context => context.Message.MemberNumber);                  });
Magic Number,ScheduleTimeout_Specs,TestStateMachine,C:\research\architectureSmells\repos\phatboyg_MassTransit\src\MassTransit.QuartzIntegration.Tests\ScheduleTimeout_Specs.cs,TestStateMachine,The following statement contains a magic number: Initially(When(ItemAdded)                      .ThenAsync(context =>                      {                          context.Instance.MemberNumber = context.Data.MemberNumber;                          context.Instance.ExpiresAfterSeconds = 3;                          return Console.Out.WriteLineAsync($"Cart {context.Instance.CorrelationId} Created: {context.Data.MemberNumber}");                      })                      .Schedule(CartTimeout' context => context.Init<CartExpired>(context.Instance)'                          context => TimeSpan.FromSeconds(context.Instance.ExpiresAfterSeconds))                      .TransitionTo(Active));
