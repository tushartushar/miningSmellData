Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MassTransit.EntityFrameworkIntegration.Saga,EntityFrameworkSagaRepository<TSaga>,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.EntityFrameworkIntegration\Saga\EntityFrameworkSagaRepository.cs,SendToInstance,The method has 5 parameters. Parameters: context' dbContext' policy' instance' next
Long Statement,MassTransit.EntityFrameworkIntegration.Saga,EntityFrameworkSagaConsumeContext<TSaga;TMessage>,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.EntityFrameworkIntegration\Saga\EntityFrameworkSagaConsumeContext.cs,PopContext,The length of the statement  "                throw new ContextException($"The ConsumeContext<{TypeMetadataCache<TMessage>.ShortName}> could not be cast to {TypeMetadataCache<T>.ShortName}"); " is 145.
Long Statement,MassTransit.EntityFrameworkIntegration.Saga,EntityFrameworkSagaRepository<TSaga>,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.EntityFrameworkIntegration\Saga\EntityFrameworkSagaRepository.cs,SendQuery,The length of the statement  "                    List<TSaga> sagaInstances = await dbContext.Set<TSaga>().Where(context.Query.FilterExpression).ToListAsync().ConfigureAwait(false); " is 131.
Long Statement,MassTransit.EntityFrameworkIntegration.Saga,EntityFrameworkSagaRepository<TSaga>,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.EntityFrameworkIntegration\Saga\EntityFrameworkSagaRepository.cs,SendToInstance,The length of the statement  "                    _log.DebugFormat("SAGA:{0}:{1} Used {2}"' TypeMetadataCache<TSaga>.ShortName' instance.CorrelationId' TypeMetadataCache<T>.ShortName); " is 134.
Magic Number,MassTransit.EntityFrameworkIntegration.Saga,EntityFrameworkSagaRepository<TSaga>,C:\repos\phatboyg_MassTransit\src\Persistence\MassTransit.EntityFrameworkIntegration\Saga\EntityFrameworkSagaRepository.cs,Send,The following statement contains a magic number: using (var dbContext = _sagaDbContextFactory())              using (var transaction = dbContext.Database.BeginTransaction(_isolationLevel))              {                  var inserted = false;                    TSaga instance;                  if (policy.PreInsertInstance(context' out instance))                  {                      inserted = await PreInsertSagaInstance<T>(dbContext' instance' context.CancellationToken).ConfigureAwait(false);                  }                    try                  {                      if (instance == null)                          instance = dbContext.Set<TSaga>().SingleOrDefault(x => x.CorrelationId == sagaId);                      if (instance == null)                      {                          var missingSagaPipe = new MissingPipe<T>(dbContext' next);                            await policy.Missing(context' missingSagaPipe).ConfigureAwait(false);                      }                      else                      {                          if (_log.IsDebugEnabled)                          {                              _log.DebugFormat("SAGA:{0}:{1} Used {2}"' TypeMetadataCache<TSaga>.ShortName' instance.CorrelationId'                                  TypeMetadataCache<T>.ShortName);                          }                            var sagaConsumeContext = new EntityFrameworkSagaConsumeContext<TSaga' T>(dbContext' context' instance);                            await policy.Existing(sagaConsumeContext' next).ConfigureAwait(false);                      }                        await dbContext.SaveChangesAsync().ConfigureAwait(false);                        transaction.Commit();                  }                  catch (DbUpdateException ex)                  {                      var baseException = ex.GetBaseException() as SqlException;                      if (baseException != null && baseException.Number == 1205)                      {                          // deadlock' no need to rollback                      }                      else                      {                          try                          {                              transaction.Rollback();                          }                          catch (Exception innerException)                          {                              if (_log.IsWarnEnabled)                                  _log.Warn("The transaction rollback failed"' innerException);                          }                      }                        throw;                  }                  catch (Exception)                  {                      try                      {                          transaction.Rollback();                      }                      catch (Exception innerException)                      {                          if (_log.IsWarnEnabled)                              _log.Warn("The transaction rollback failed"' innerException);                      }                      throw;                  }              }
