Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mono.Options,Option,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,Option,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,Option,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,Mono.Options,OptionSet,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,Mono.Options,OptionSet,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,WriteDescription,The method has 5 parameters. Parameters: o' value' prefix' firstWidth' remWidth
Long Parameter List,Mono.Options,ActionOption,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,ActionOption,The method has 5 parameters. Parameters: prototype' description' count' action' hidden
Complex Conditional,Mono.Options,Option,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&                       ((names.Length == 1 && type != OptionValueType.None) ||                       (names.Length > 1 && MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&                      Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Magic Number,Mono.Options,OptionSet,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'                       delegate (OptionValueCollection v) {action (v [0]' v [1]);}' hidden);
Magic Number,Mono.Options,OptionSet,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {                  int written = 0;                    if (p.Hidden)                      continue;                    Category c = p as Category;                  if (c != null) {                      WriteDescription (o' p.Description' ""' 80' 80);                      continue;                  }                    if (!WriteOptionPrototype (o' p' ref written))                      continue;                    if (written < OptionWidth)                      o.Write (new string (' '' OptionWidth - written));                  else {                      o.WriteLine ();                      o.Write (new string (' '' OptionWidth));                  }                    WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'                          Description_FirstWidth' Description_RemWidth);              }
Magic Number,Mono.Options,OptionSet,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {                  int written = 0;                    if (p.Hidden)                      continue;                    Category c = p as Category;                  if (c != null) {                      WriteDescription (o' p.Description' ""' 80' 80);                      continue;                  }                    if (!WriteOptionPrototype (o' p' ref written))                      continue;                    if (written < OptionWidth)                      o.Write (new string (' '' OptionWidth - written));                  else {                      o.WriteLine ();                      o.Write (new string (' '' OptionWidth));                  }                    WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'                          Description_FirstWidth' Description_RemWidth);              }
Magic Number,Mono.Options,OptionSet,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {                  int written = 0;                    if (p.Hidden)                      continue;                    Category c = p as Category;                  if (c != null) {                      WriteDescription (o' p.Description' ""' 80' 80);                      continue;                  }                    if (!WriteOptionPrototype (o' p' ref written))                      continue;                    if (written < OptionWidth)                      o.Write (new string (' '' OptionWidth - written));                  else {                      o.WriteLine ();                      o.Write (new string (' '' OptionWidth));                  }                    WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'                          Description_FirstWidth' Description_RemWidth);              }
Magic Number,Mono.Options,OptionSet,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (ArgumentSource s in sources) {                  string[] names = s.GetNames ();                  if (names == null || names.Length == 0)                      continue;                    int written = 0;                    Write (o' ref written' "  ");                  Write (o' ref written' names [0]);                  for (int i = 1; i < names.Length; ++i) {                      Write (o' ref written' "' ");                      Write (o' ref written' names [i]);                  }                    if (written < OptionWidth)                      o.Write (new string (' '' OptionWidth - written));                  else {                      o.WriteLine ();                      o.Write (new string (' '' OptionWidth));                  }                    WriteDescription (o' s.Description' new string (' '' OptionWidth+2)'                          Description_FirstWidth' Description_RemWidth);              }
Magic Number,Tmx.Server.Runner,Program,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Program.cs,Main,The following statement contains a magic number: try {                  ServerControl.Port = 12340;                  ServerControl.Start(@"http://localhost:" + 12340);                    if (!Environment.UserInteractive)                  {                      var services = new ServiceBase[] { new ServiceControl() };                      ServiceBase.Run(services);                  }                  else                  {                      new ServiceControl();                      Thread.Sleep(Timeout.Infinite);                  }              }              catch (Exception ex) {                  Console.WriteLine(ex.Message);                  Console.WriteLine(ex.StackTrace);                  Console.WriteLine(ex.InnerException.Message);              }
Magic Number,Tmx.Server.Runner,Program,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Program.cs,Main,The following statement contains a magic number: try {                  ServerControl.Port = 12340;                  ServerControl.Start(@"http://localhost:" + 12340);                    if (!Environment.UserInteractive)                  {                      var services = new ServiceBase[] { new ServiceControl() };                      ServiceBase.Run(services);                  }                  else                  {                      new ServiceControl();                      Thread.Sleep(Timeout.Infinite);                  }              }              catch (Exception ex) {                  Console.WriteLine(ex.Message);                  Console.WriteLine(ex.StackTrace);                  Console.WriteLine(ex.InnerException.Message);              }
Missing Default,Mono.Options,OptionSet,C:\repos\apetrovskiy_STUPS\TMX\Tmx.Server.Runner\Mono.Options\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {                      case OptionValueType.None:                          c.OptionValues.Add (n);                          c.Option.Invoke (c);                          break;                      case OptionValueType.Optional:                      case OptionValueType.Required:                           ParseValue (v' c);                          break;                  }
