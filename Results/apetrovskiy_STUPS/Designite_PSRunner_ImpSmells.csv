Implementation smell,Namespace,Class,File,Method,Description
Complex Method,PSRunner,Runner,F:\newReposMay17\apetrovskiy_STUPS\PS\PSRunner\Runner.cs,RunPSCodeAsync,Cyclomatic complexity of the method is 10
Complex Method,PSRunner,Runner,F:\newReposMay17\apetrovskiy_STUPS\PS\PSRunner\Runner.cs,RunPSScriptAsync,Cyclomatic complexity of the method is 10
Complex Method,PSRunner,Runner,F:\newReposMay17\apetrovskiy_STUPS\PS\PSRunner\Runner.cs,pipeline_StateChanged,Cyclomatic complexity of the method is 18
Long Statement,PSRunner,UiaPSHost,F:\newReposMay17\apetrovskiy_STUPS\PS\PSRunner\UIAPSHost.cs,pipeline_StateChanged,The length of the statement  "	} else if ((e.PipelineStateInfo.State == PipelineState.Stopped) || (e.PipelineStateInfo.State == PipelineState.Failed)) { " is 121.
Long Statement,PSRunner,UiaPSHost,F:\newReposMay17\apetrovskiy_STUPS\PS\PSRunner\UIAPSHost.cs,pipeline_StateChanged,The length of the statement  "		string message = string.Format ("Command did not complete successfully. Reason: {0}"' e.PipelineStateInfo.Reason.Message); " is 122.
Empty Catch Block,PSRunner,Runner,F:\newReposMay17\apetrovskiy_STUPS\PS\PSRunner\Runner.cs,SetVariable,The method has an empty catch block.
Empty Catch Block,PSRunner,Runner,F:\newReposMay17\apetrovskiy_STUPS\PS\PSRunner\Runner.cs,GetVariable,The method has an empty catch block.
Empty Catch Block,PSRunner,Runner,F:\newReposMay17\apetrovskiy_STUPS\PS\PSRunner\Runner.cs,CloseRunspace,The method has an empty catch block.
Empty Catch Block,PSRunner,Runner,F:\newReposMay17\apetrovskiy_STUPS\PS\PSRunner\Runner.cs,CloseRunspace,The method has an empty catch block.
Magic Number,PSRunner,Runner,F:\newReposMay17\apetrovskiy_STUPS\PS\PSRunner\Runner.cs,RunPSCodeAsync,The following statement contains a magic number: try {  	pipeline = testRunSpace.CreatePipeline (codeSnippet);  	pipeline.StateChanged += new EventHandler<PipelineStateEventArgs> (pipeline_StateChanged);  	pipeline.InvokeAsync ();  	var handles = new WaitHandle[2];  	handles [0] = pipeline.Output.WaitHandle;  	handles [1] = pipeline.Error.WaitHandle;  	pipeline.Input.Close ();  	while (pipeline.PipelineStateInfo.State == PipelineState.Running) {  		switch (WaitHandle.WaitAny (handles)) {  		case 0:  			while (pipeline.Output.Count > 0) {  				//  				OnPSOutputArrived (pipeline.Output.Read ());  			}  			break;  		case 1:  			while (pipeline.Error.Count > 0) {  				//  				OnPSErrorArrived (pipeline.Error.Read ());  			}  			break;  		default:  			break;  		}  	}  	//pipeline.InvokeAsync();  	//pipeline.Output.  	//return resultObject;  	result = true;  } catch (Exception) {  	//throw(eRunspace);  	//result = null;  	return result;  }  
Magic Number,PSRunner,Runner,F:\newReposMay17\apetrovskiy_STUPS\PS\PSRunner\Runner.cs,RunPSScriptAsync,The following statement contains a magic number: try {  	pipeline = testRunSpace.CreatePipeline ();  	// 20120716  	pipeline.Commands.AddScript (scriptCode);  	//pipeline.Commands.Add(sc  	//Command script = new Command(scriptPath);  	//pipeline.Commands.Add(scriptPath);  	//pipeline.Input.Write(parameters);  	//                if (parameters != null && parameters.Length > 0) {  	//                    foreach (string param in parameters) {  	//                        //script.Parameters.Add(  	//                        CommandParameter cmdParam =   	//                            new CommandParameter(  	//                    }  	//                }  	//script.Parameters.Add  	//pipeline.Runspace.SessionStateProxy.  	//pipeline.  	pipeline.StateChanged += new EventHandler<PipelineStateEventArgs> (pipeline_StateChanged);  	pipeline.InvokeAsync ();  	var handles = new WaitHandle[2];  	handles [0] = pipeline.Output.WaitHandle;  	handles [1] = pipeline.Error.WaitHandle;  	pipeline.Input.Close ();  	while (pipeline.PipelineStateInfo.State == PipelineState.Running) {  		switch (WaitHandle.WaitAny (handles)) {  		case 0:  			while (pipeline.Output.Count > 0) {  				//  				OnPSOutputArrived (pipeline.Output.Read ());  			}  			break;  		case 1:  			while (pipeline.Error.Count > 0) {  				//  				OnPSErrorArrived (pipeline.Error.Read ());  			}  			break;  		default:  			break;  		}  	}  	//pipeline.InvokeAsync();  	//pipeline.Output.  	//return resultObject;  	result = true;  } catch (Exception) {  	//throw(eRunspace);  	//result = null;  	return result;  }  
Missing Default,PSRunner,Runner,F:\newReposMay17\apetrovskiy_STUPS\PS\PSRunner\Runner.cs,pipeline_StateChanged,The following switch statement is missing a default case: switch (e.PipelineStateInfo.State) {  case PipelineState.Failed:  	PSErrorThrown (e.PipelineStateInfo.Reason.Message);  	break;  case PipelineState.Completed:  	OnPSCodeCompleted ("");  	break;  case PipelineState.NotStarted:  	OnPSCodeNotStarted (e.PipelineStateInfo.Reason.Message);  	break;  case PipelineState.Running:  	OnPSCodeRunning ("");  	break;  case PipelineState.Stopped:  	OnPSCodeStopped (e.PipelineStateInfo.Reason.Message);  	break;  case PipelineState.Stopping:  	OnPSCodeStopping ("");  	break;  }  
