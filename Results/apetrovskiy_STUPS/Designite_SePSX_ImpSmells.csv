Implementation smell,Namespace,Class,File,Method,Description
Long Method,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,CheckInputWebDriverOrWebElement,The method has 113 lines of code.
Long Method,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,RecordActions,The method has 204 lines of code.
Long Method,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,CheckCodeSequenceNovelty,The method has 134 lines of code.
Long Method,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,RecordActionItem,The method has 100 lines of code.
Long Method,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,ConvertCodeSequenceToCode,The method has 193 lines of code.
Long Method,SePSX,WebDriverModule,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\Autofac\WebDriverModule.cs,Load,The method has 299 lines of code.
Long Method,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,StartWebDriver,The method has 147 lines of code.
Long Method,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetWebElement,The method has 203 lines of code.
Long Method,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The method has 280 lines of code.
Long Method,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetScreenshotOfCmdletInput,The method has 317 lines of code.
Long Method,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetScreenshotOfWebElement,The method has 133 lines of code.
Long Method,SePSX,WebDriverFactory,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\WebDriverFactory.cs,GetDriver,The method has 127 lines of code.
Long Method,SePSX,WebDriverFactory,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\WebDriverFactory.cs,GetDriverServer,The method has 209 lines of code.
Long Method,SePSX,Preferences,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UserSettings\Preferences.cs,Preferences,The method has 107 lines of code.
Complex Method,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,CheckCodeSequenceNovelty,Cyclomatic complexity of the method is 9
Complex Method,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetWebElement,Cyclomatic complexity of the method is 13
Complex Method,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetSelect,Cyclomatic complexity of the method is 8
Complex Method,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,SetSelect,Cyclomatic complexity of the method is 14
Complex Method,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetScreenshotOfCmdletInput,Cyclomatic complexity of the method is 12
Complex Method,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetScreenshotOfWebElement,Cyclomatic complexity of the method is 11
Complex Method,SePSX,WebDriverFactory,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\WebDriverFactory.cs,GetDriverServer,Cyclomatic complexity of the method is 13
Long Parameter List,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,ClickOnElement,The method has 8 parameters. Parameters: cmdlet' elements' clickByWebElementMethod' clickActionsOnWebElement' clickActionsDouble' clickActionsRight' clickActionsClickAndHold' clickActionsJustHere
Long Parameter List,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The method has 5 parameters. Parameters: cmdlet' element' parameterId' parameterValue' oneElement
Long Parameter List,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,ExecuteJavaScript,The method has 5 parameters. Parameters: cmdlet' drivers' scriptCode' arguments' output
Long Parameter List,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetSelect,The method has 5 parameters. Parameters: cmdlet' elements' firstSelected' selected' all
Long Parameter List,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,SetSelect,The method has 7 parameters. Parameters: cmdlet' elements' indices' values' visibleTexts' all' deselect
Long Parameter List,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetScreenshotOfCmdletInput,The method has 6 parameters. Parameters: cmdlet' description' save' relativeRect' path' format
Long Parameter List,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetScreenshotOfWebElement,The method has 7 parameters. Parameters: cmdlet' element' description' save' relativeRect' path' format
Long Identifier,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,,The length of the parameter ExceptionMessageWrongTypeWebDriver is 34.
Long Identifier,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,,The length of the parameter ExceptionMessageWrongTypeWebElement is 35.
Long Identifier,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,,The length of the parameter ExceptionMessageWrongTypeWebDriverOrWebElement is 46.
Long Identifier,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,,The length of the parameter DriverTitleComplementInternetExplorer is 37.
Long Identifier,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,,The length of the parameter DriverTitleOnStartInternetExplorer is 34.
Long Statement,SePSX.Commands,SetSeWebDriverTimeoutCommand,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Commands\Driver\SetSeWebDriverTimeoutCommand.cs,ProcessRecord,The length of the statement  "//                SeHelper.SetDriverTimeout(this' this.InputObject' DriverTimeoutTypes.ImplicitlyWait' this.ImplicitlyWaitTimeout); " is 131.
Long Statement,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,WriteLog,The length of the statement  "                WriteLog(logLevel' "Script: '" + errorRecord.InvocationInfo.ScriptName + "'' line: " + errorRecord.InvocationInfo.Line.ToString()); " is 131.
Long Statement,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,CheckInputWebDriverOrWebElement,The length of the statement  "//                            ((PSObject[])((HasWebElementInputCmdletBase)this).InputObject).BaseObject as IWebDriver[]; " is 120.
Long Statement,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,CheckInputWebDriverOrWebElement,The length of the statement  "//                                ((PSObject)((HasWebElementInputCmdletBase)this).InputObject[i]).BaseObject as IWebDriver " is 122.
Long Statement,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,CheckInputWebDriverOrWebElement,The length of the statement  "//                                ((PSObject[])((HasWebElementInputCmdletBase)this).InputObject).BaseObject as IWebElement[]; " is 125.
Long Statement,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,CheckInputWebDriverOrWebElement,The length of the statement  "//                                    ((PSObject)((HasWebElementInputCmdletBase)this).InputObject[i]).BaseObject as IWebElement); " is 129.
Long Statement,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,checkInputWebElementOnly,The length of the statement  "//                                    ((PSObject)((HasWebElementInputCmdletBase)this).InputObject[i]).BaseObject as IWebElement); " is 129.
Long Statement,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,RecordActions,The length of the statement  "////                                Dictionary<string' object> elementData2 = singleResult as Dictionary<string' object>; " is 121.
Long Statement,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,RecordActions,The length of the statement  "////    Console.WriteLine("elementDataItem[elementDataItem.Keys[]] = " + elementDataItem.Key + "\t" + elementDataItem.Value.ToString()); " is 136.
Long Statement,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,RecordActions,The length of the statement  "////                        (ReadOnlyCollection<IWebElement>)((IJavaScriptExecutor)CurrentData.CurrentWebDriver).ExecuteScript( " is 127.
Long Statement,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,CheckCodeSequenceNovelty,The length of the statement  "                                    if (eltWebToBeAdded.UserData.Keys.Any(key => eltWebToBeAdded.UserData[key] != eltWebThatAlreadyCollected.UserData[key])) " is 120.
Long Statement,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,CheckCodeSequenceNovelty,The length of the statement  "                                    if (eltActToBeAdded.UserData.Keys.Any(key => eltActToBeAdded.UserData[key] != eltActThatAlreadyCollected.UserData[key])) " is 120.
Long Statement,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,CheckCodeSequenceNovelty,The length of the statement  "                                    if (eltDataToBeAdded.UserData.Keys.Any(key => eltDataToBeAdded.UserData[key] != eltDataThatAlreadyCollected.UserData[key])) " is 123.
Long Statement,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,CheckCodeSequenceNovelty,The length of the statement  "//                                        if (actionToBeAdded.UserData[key] != actionThatAlreadyCollected.UserData[key]) { " is 122.
Long Statement,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,RecordCodeSequence,The length of the statement  "//Console.WriteLine(@"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ resultElement.GetType().Name = " + resultElement.GetType().Name); " is 134.
Long Statement,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,RecordCodeSequence,The length of the statement  "Console.WriteLine(@"////////////////////////////////////////////////////////// null != resultDataCollection " + resultDataCollection.GetType().Name); " is 149.
Long Statement,SePSX,JsRecorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\JSRecorder.cs,CleanRecordedDuringSleep,The length of the statement  "            SeHelper.ExecuteJavaScript(cmdlet' (new IWebDriver[] { CurrentData.CurrentWebDriver })' ConstRecorderCleanRecordings' (new string[] { string.Empty })' false); " is 158.
Long Statement,SePSX,JsRecorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\JSRecorder.cs,StopRecording,The length of the statement  "            SeHelper.ExecuteJavaScript(cmdlet' (new IWebDriver[] { CurrentData.CurrentWebDriver })' ConstRecorderExitRecording' (new string[] { string.Empty })' false); " is 156.
Long Statement,SePSX,JsRecorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\JSRecorder.cs,MakeJsInjection,The length of the statement  "                var result = SeHelper.ExecuteJavaScript(cmdlet' (new IWebDriver[] { CurrentData.CurrentWebDriver })' ConstRecorderCheckInjection' (new string[] { string.Empty })' false); " is 170.
Long Statement,SePSX,JsRecorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\JSRecorder.cs,MakeJsInjection,The length of the statement  "                    SeHelper.ExecuteJavaScript(cmdlet' (new IWebDriver[] { CurrentData.CurrentWebDriver })' ConstRecorderInjectScript' (new string[] { Preferences.TranscriptExcludeList })' false); " is 176.
Long Statement,SePSX,JsRecorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\JSRecorder.cs,GetRecordedResults,The length of the statement  "            var scriptResults = ((IJavaScriptExecutor)CurrentData.CurrentWebDriver).ExecuteScript(ConstRecorderGetElement' (new string[] { string.Empty })) as IEnumerable; " is 159.
Long Statement,SePSX,WebDriverModule,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\Autofac\WebDriverModule.cs,Load,The length of the statement  "            //builder.Register(ChromeDriverService.CreateDefaultService()' (new Parameter[]{ (new Autofac.Builder. Parameter(string)) })).As<ChromeDriverService>(); " is 152.
Long Statement,SePSX,WebDriverModule,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\Autofac\WebDriverModule.cs,Load,The length of the statement  "//                (c' (new Autofac.NamedParameter("driverPath"' s))) => c.Resolve<ChromeDriverService.CreateDefaultService(s)) " is 126.
Long Statement,SePSX,WebDriverModule,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\Autofac\WebDriverModule.cs,Load,The length of the statement  "            //builder.Register(InternetExplorerDriverService.CreateDefaultService((string s) => )).As<InternetExplorerDriverService>(); " is 123.
Long Statement,SePSX,WebDriverModule,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\Autofac\WebDriverModule.cs,Load,The length of the statement  "//        public InternetExplorerDriver(InternetExplorerOptions options) : this(InternetExplorerDriverService.CreateDefaultService()' options' TimeSpan.FromSeconds(60.0)) " is 170.
Long Statement,SePSX,WebDriverModule,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\Autofac\WebDriverModule.cs,Load,The length of the statement  "//        public InternetExplorerDriver(string internetExplorerDriverServerDirectory) : this(internetExplorerDriverServerDirectory' new InternetExplorerOptions()) " is 162.
Long Statement,SePSX,WebDriverModule,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\Autofac\WebDriverModule.cs,Load,The length of the statement  "//        public InternetExplorerDriver(string internetExplorerDriverServerDirectory' InternetExplorerOptions options) : this(internetExplorerDriverServerDirectory' options' TimeSpan.FromSeconds(60.0)) " is 201.
Long Statement,SePSX,WebDriverModule,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\Autofac\WebDriverModule.cs,Load,The length of the statement  "//        public InternetExplorerDriver(string internetExplorerDriverServerDirectory' InternetExplorerOptions options' TimeSpan commandTimeout) : this(InternetExplorerDriverService.CreateDefaultService(internetExplorerDriverServerDirectory)' options' commandTimeout) " is 266.
Long Statement,SePSX,WebDriverModule,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\Autofac\WebDriverModule.cs,Load,The length of the statement  "//        public InternetExplorerDriver(DriverService service' InternetExplorerOptions options' TimeSpan commandTimeout) : base(new DriverServiceCommandExecutor(service' commandTimeout)' options.ToCapabilities()) " is 212.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetDriverProcess,The length of the statement  "            var newProcesses = processArray.Where(process => !DriverProcesses.Contains(process) && process.MainWindowHandle.ToInt32() > 0).ToList(); " is 136.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,ClickOnElement,The length of the statement  "                            !(clickActionsOnWebElement || clickActionsDouble || clickActionsRight || clickActionsJustHere || clickActionsClickAndHold)) { " is 125.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,ConvertWebDriverOrWebElementToAutomationElement,The length of the statement  "//                        if (((RemoteWebElement)webDriverOrElement).Size.Height != resultElement.Current.BoundingRectangle.Height && " is 133.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,ConvertWebDriverOrWebElementToAutomationElement,The length of the statement  "//                            ((RemoteWebElement)webDriverOrElement).Size.Width != resultElement.Current.BoundingRectangle.Width) { " is 131.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The length of the statement  "//Console.WriteLine("getWebElement: 00024 fakeRemoteWebElement.GetType().Name = " + fakeRemoteWebElement.GetType().Name); " is 121.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The length of the statement  "//Console.WriteLine("getWebElement: 00024 ((RemoteWebElement)fakeRemoteWebElement).GetType().Name = " + ((RemoteWebElement)fakeRemoteWebElement).GetType().Name); " is 161.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The length of the statement  "////Console.WriteLine("getWebElement: 00024 ((RemoteWebElement)fakeRemoteWebElement).Enabled = " + ((RemoteWebElement)fakeRemoteWebElement).Enabled.ToString()); " is 160.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The length of the statement  "////Console.WriteLine("getWebElement: 00024 ((RemoteWebElement)fakeRemoteWebElement).TagName = " + ((RemoteWebElement)fakeRemoteWebElement).TagName); " is 149.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The length of the statement  "////Console.WriteLine("getWebElement: 00024 ((RemoteWebElement)result[0]).TagName = " + ((RemoteWebElement)result[0]).TagName); " is 127.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The length of the statement  "                    //cmdlet.WriteVerbose(cmdlet' "(System.DateTime.Now - startTime).TotalSeconds = " + (System.DateTime.Now - startTime).TotalSeconds); " is 132.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The length of the statement  "                    //cmdlet.WriteVerbose(cmdlet' "the decision: " + ((System.DateTime.Now - startTime).TotalSeconds - (cmdlet.Timeout / 1000)).ToString()); " is 136.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetDecoratedCollection,The length of the statement  "                    //WebDriverFactory.Container.Resolve<WebElementDecorator>(); //(new NamedParameter("realWebElement"' resultWebElement)); " is 120.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetDecoratedCollection,The length of the statement  "//Console.WriteLine("GetDecoratedCollection: 00006+: " + ((WebElementDecorator)decorator).DecoratedWebElement.ToString()); " is 122.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetScreenshotOfCmdletInput,The length of the statement  "                    //                                ((IWebDriver)(cmdlet as HasWebElementInputCmdletBase).InputObject[i]).FindElement(By.TagName("html")); " is 136.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetScreenshotOfCmdletInput,The length of the statement  "                    //                            cmdlet.WriteVerbose(cmdlet' "inputCollection.Length = " + inputCollection.Length.ToString()); " is 123.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetScreenshotOfCmdletInput,The length of the statement  "                        //                                ((IWebDriver)(cmdlet as HasWebDriverInputCmdletBase).InputObject[i]).FindElement(By.TagName("html")); " is 135.
Long Statement,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetScreenshotOfCmdletInput,The length of the statement  "                        //                            cmdlet.WriteVerbose(cmdlet' "inputCollection.Length = " + inputCollection.Length.ToString()); " is 123.
Long Statement,SePSX,WebDriverFactory,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\WebDriverFactory.cs,GetDriver,The length of the statement  "//                        OpenQA.Selenium.Chrome.ChromeDriverService chromeService = OpenQA.Selenium.Chrome.ChromeDriverService.CreateDefaultService(); " is 151.
Long Statement,SePSX,WebDriverFactory,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\WebDriverFactory.cs,GetDriver,The length of the statement  "//                        SeHelper.GetDriverProcess(Drivers.Chrome' driver.Title + SeHelper.DriverTitleComplementChrome); " is 121.
Long Statement,SePSX,WebDriverFactory,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\WebDriverFactory.cs,GetDriver,The length of the statement  "//                        OpenQA.Selenium.DriverService ieService = OpenQA.Selenium.IE.InternetExplorerDriverService.CreateDefaultService(ieSubFolder); " is 151.
Long Statement,SePSX,WebDriverFactory,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\WebDriverFactory.cs,GetDriver,The length of the statement  "//                        SeHelper.GetDriverProcess(Drivers.InternetExplorer' driver.Title + SeHelper.DriverTitleComplementInternetExplorer); " is 141.
Complex Conditional,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,IsNotFakeWebElement,The conditional expression  "resultElement.TagName != ConstAuxElementClicked &&                  resultElement.TagName != ConstAuxElementData &&                  resultElement.TagName != ConstAuxElementSelected &&                  resultElement.TagName != ConstAuxElementTypedIn"  is complex.
Complex Conditional,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,ClickOnElement,The conditional expression  "clickByWebElementMethod ||                              !(clickActionsOnWebElement || clickActionsDouble || clickActionsRight || clickActionsJustHere || clickActionsClickAndHold)"  is complex.
Complex Conditional,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetElementAncestors,The conditional expression  "currentChildElement.Location == resultElement.Location &&                                  currentChildElement.TagName == resultElement.TagName &&                                  currentChildElement.Size == resultElement.Size &&                                  currentChildElement.Text == resultElement.Text"  is complex.
Empty Catch Block,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,WriteObjectMethod060OutputResult,The method has an empty catch block.
Empty Catch Block,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,CloseLogFile,The method has an empty catch block.
Empty Catch Block,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,RecordDataItem,The method has an empty catch block.
Empty Catch Block,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,RecordDataItem,The method has an empty catch block.
Empty Catch Block,SePSX,WebDriverModule,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\Autofac\WebDriverModule.cs,Load,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,Highlight,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,Highlight,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,Highlight,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,Highlight,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetSquare,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetSquare,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,StartWebDriver,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,AddDriverToCollection,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,AddDriverToCollection,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetParentWebElement,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetWebElement,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetWebElement,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetWebElement,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetElementAncestors,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetScreenshotOfCmdletInput,The method has an empty catch block.
Empty Catch Block,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetScreenshotOfCmdletInput,The method has an empty catch block.
Empty Catch Block,SePSX,CurrentData,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UserSettings\CurrentData.cs,ResetData,The method has an empty catch block.
Magic Number,SePSX,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\CommonCmdletBase.cs,WriteObjectMethod050OnSuccessDelay,The following statement contains a magic number: WriteVerbose(this' (Preferences.OnSuccessDelay / 1000).ToString() + " seconds");
Magic Number,SePSX,GetElementByTypeCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\GetElementByTypeCmdletBase.cs,GetElementByTypeCmdletBase,The following statement contains a magic number: Seconds = Timeout / 1000;
Magic Number,SePSX,GetCmdletBase,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Inheritance\GetCmdletBase.cs,GetCmdletBase,The following statement contains a magic number: Seconds = Timeout / 1000;
Magic Number,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,RecordActions,The following statement contains a magic number: do {                    jsRecorder.MakeJsInjection(cmdlet);                    try {                        var scriptResults = jsRecorder.GetRecordedResults();                                                if (null != scriptResults) { // && scriptResults is object[] && 0 < ((object[])scriptResults).Length) {                          foreach (var singleResult in scriptResults) {                                codeSequence =                                  RecordCodeSequence(                                      cmdlet'                                      RecordingCollection'                                      singleResult'                                      codeSequence);                                if (CodeSequenceCompleted) {                                    NotifyCodeGathered();                                                                    codeString =                                      ConvertCodeSequenceToCode(                                          codeSequence'                                          SelectLanguage(languageCode)'                                          codeString);  Console.WriteLine("codeString:");  Console.WriteLine(codeString);                                  CodeSequenceCompleted = false;                              }                                                            if (null != (singleResult as IWebElement)) {                                    var resultElement =                                       singleResult as IWebElement;                                    if (IsNotFakeWebElement(resultElement)) {                                      cmdlet.WriteVerbose(cmdlet' "element is not a fake");                                        if (cmdlet.PassThru) {                                            cmdlet.WriteVerbose(cmdlet' "outputting the object");                                          cmdlet.WriteObject(cmdlet' resultElement);                                                                                } else if (Preferences.Highlight) {                                            cmdlet.WriteVerbose(cmdlet' "highlighting the object");                                          SeHelper.Highlight(resultElement);                                                                                }                                  }                               }   #region commented 20101031  //                            else if (null != (singleResult as ReadOnlyCollection<object>)){  ////Console.WriteLine("0010: singleResult type is " + singleResult.GetType().Name);  //                                RecordedData recData = new RecordedData();  //                                ReadOnlyCollection<object> elementData = singleResult as ReadOnlyCollection<object>;  ////Console.WriteLine("0012: Count = " + elementData.Count.ToString());  //  ////try { Console.WriteLine("000001: " + elementData); } catch {}  ////try { cmdlet.WriteObject(cmdlet' "000002: " + elementData); } catch {}  ////try { Console.WriteLine("000003: " + elementData[0]); } catch {}  ////try { cmdlet.WriteObject("000004: " + elementData[0]); } catch {}  ////if (0 < elementData.Count) {  ////    foreach (var item1 in elementData) {  ////        cmdlet.WriteObject(cmdlet' item1.GetType().Name);  ////        cmdlet.WriteObject(cmdlet' item1);  ////    }  ////}  //  ////                                Dictionary<string' object> elementData2 = singleResult as Dictionary<string' object>;  ////if (null != elementData2) {  ////    Console.WriteLine("0012-2: Count = " + elementData2.Keys.Count.ToString());  ////                                foreach (KeyValuePair<string' object> elementDataItem in elementData) {  ////    Console.WriteLine("elementDataItem[elementDataItem.Keys[]] = " + elementDataItem.Key + "\t" + elementDataItem.Value.ToString());  ////                                }  ////}  ////                                foreach (var elementDataItem in elementData) {  ////Console.WriteLine("0015");  ////                                        //recData.UserData.Add(elementData.  ////                                    Console.WriteLine(elementDataItem);  ////                                }  //                                //}  //                            }   #endregion commented 20101031                              else {                                    cmdlet.WriteObject(cmdlet' "singleResult is not IWebElement");                                  cmdlet.WriteObject(cmdlet' "else: " + singleResult);                                  //cmdlet.WriteObject(cmdlet' singleResult);                                                                                                  }                          } // foreach (var singleResult in scriptResults) {                      } // if (null != scriptResults) {                  }                  catch (Exception eRec) {                      Console.WriteLine(eRec.Message);                  }                    #region commented - the previous version  //                ReadOnlyCollection<IWebElement> scriptResult = null;  //                //System.Collections.ArrayList scriptResultOther = null;  //                object[] scriptResultOther = null;  //                  //                try {  //                    var scriptResultUndefined =   //                        ((IJavaScriptExecutor)CurrentData.CurrentWebDriver).ExecuteScript(  //                            JSRecorder.constRecorderGetElement'  //                            (new string[] { string.Empty } ));  ////                        (ReadOnlyCollection<IWebElement>)((IJavaScriptExecutor)CurrentData.CurrentWebDriver).ExecuteScript(  ////                            JSRecorder.constRecorderGetElement'  ////                            (new string[] { string.Empty } ));  //                      //                    scriptResult = scriptResultUndefined as ReadOnlyCollection<IWebElement>;  //                    scriptResultOther = scriptResultUndefined as object[];  //                      //                    if (null == scriptResult && null == scriptResultOther ) {  //                        cmdlet.WriteVerbose(cmdlet' "scriptResult == null");  //                    } else {  //                        cmdlet.WriteVerbose(cmdlet' "scriptResult != null");  //                        if (null != scriptResult && 0 == scriptResult.Count) {  //                            cmdlet.WriteVerbose(cmdlet' "scriptResult.Count == 0");  //                        } else if (null != scriptResultOther && 0 == scriptResultOther.Length) {  //                            cmdlet.WriteVerbose(cmdlet' "scriptResultOther.Count == 0");  //                        } else {  //                            cmdlet.WriteVerbose(cmdlet' "scriptResult.Count == " + scriptResult.Count.ToString());  //                              //                            foreach (IWebElement resultElement in scriptResult) {  //                                codeSequence =  //                                    Recorder.RecordCodeSequence(  //                                        cmdlet'  //                                        recordingCollection'  //                                        resultElement'  //                                        codeSequence);  //  //                                if (Recorder.isNotFakeWebElement(resultElement)) {  //                                    cmdlet.WriteVerbose(cmdlet' "element is not a fake");  //  //                                    if (cmdlet.PassThru) {  //                                          //                                        cmdlet.WriteVerbose(cmdlet' "outputting the object");  //                                        cmdlet.WriteObject(cmdlet' resultElement);  //                                          //                                    } else if (Preferences.Highlight) {  //                                          //                                        cmdlet.WriteVerbose(cmdlet' "highlighting the object");  //                                        SeHelper.Highlight(resultElement);  //                                          //                                    }  //                                }   //                            }  //                              //                            // 20121012  //                            scriptResult = null; // ??  //                        }  //                    }  //                }  //                catch (Exception eRecording) {  //Console.WriteLine("eRecording: " + eRecording.Message);  //                    if (eRecording.Message.Contains("Element does not exist in cache")) {  //                        CurrentData.CurrentWebDriver.Navigate().Refresh();  //                    }  //                }  //                //  //                //  //                //  //                //  #endregion commented - the previous version                                    cmdlet.WriteVerbose(cmdlet' "startTime = " + startTime.ToString());                                    if ((DateTime.Now - startTime).TotalSeconds >                       (cmdlet.Timeout / 1000) &&                      cmdlet.Wait) {                      cmdlet.WriteVerbose(cmdlet' "Time spent: " + (DateTime.Now - startTime).TotalSeconds + " seconds");                                            cmdlet.Wait = false;                  }                                    SleepAndRunScriptBlocks(cmdlet);                                    /*                  if (Preferences.TranscriptCleanRecordedDuringSleep) {                      SeHelper.CleanRecordedDuringSleep(cmdlet);                  }                  */                                  GoToNewlyOpenedWindowhandle(currentWindowHandles);                                 } while (cmdlet.Wait);
Magic Number,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetWebElementCoordinates,The following statement contains a magic number: var driverCoordinates = new int[2];
Magic Number,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetWebElement,The following statement contains a magic number: foreach (var inputObject in cmdletGet.InputObject) {  //Console.WriteLine("GetWebElement: 00004");  //Console.WriteLine("GetWebElement: inputObject = " + inputObject.GetType().Name);                  var errorReport = string.Empty;                  try {  //Console.WriteLine("GetWebElement: 00005");                      if (!string.IsNullOrEmpty(cmdletGet.Id) && cmdletGet.Id.Length > 0) {  //Console.WriteLine("GetWebElement: 00006 id");                          errorReport = "Id = \"" + cmdletGet.Id + "\"";                          result =                              getWebElement(                                  cmdletGet'                                  inputObject'                                  FindElementParameters.ById'                                  cmdletGet.Id'                                  firstVsAll); //true);  //Console.WriteLine("GetWebElement: 00007 id");                      } //else                                            if (!string.IsNullOrEmpty(cmdletGet.ClassName) && cmdletGet.ClassName.Length > 0) {  //Console.WriteLine("GetWebElement: 00008 cl");                          errorReport = "ClassName = \"" + cmdletGet.ClassName + "\"";                          result =                              getWebElement(                                  cmdletGet'                                  inputObject'                                  FindElementParameters.ByClassName'                                  cmdletGet.ClassName'                                  firstVsAll); //true);  //Console.WriteLine("GetWebElement: 00009 cl");                      } //else                                            if (!string.IsNullOrEmpty(cmdletGet.TagName) && cmdletGet.TagName.Length > 0) {  //Console.WriteLine("GetWebElement: 00010 tag");                          errorReport = "TagName = \"" + cmdletGet.TagName + "\"";  //Console.WriteLine("GetWebElement: 00010-1 tag");                          result =                              getWebElement(                                  cmdletGet'                                  inputObject'                                  FindElementParameters.ByTagName'                                  cmdletGet.TagName'                                  firstVsAll); //true);  //Console.WriteLine("GetWebElement: 00011 tag");                      } //else                                            if (!string.IsNullOrEmpty(cmdletGet.Name) && cmdletGet.Name.Length > 0) {  //Console.WriteLine("GetWebElement: 00012 name");                          errorReport = "Name = \"" + cmdletGet.Name + "\"";                          result =                              getWebElement(                                  cmdletGet'                                  inputObject'                                  FindElementParameters.ByName'                                  cmdletGet.Name'                                  firstVsAll); //true);  //Console.WriteLine("GetWebElement: 00013 name");                      } //else                                            if (!string.IsNullOrEmpty(cmdletGet.LinkText) && cmdletGet.LinkText.Length > 0) {  //Console.WriteLine("GetWebElement: 00014 link");                          errorReport = "LinkText = \"" + cmdletGet.LinkText + "\"";                          result =                              getWebElement(                                  cmdletGet'                                  inputObject'                                  FindElementParameters.ByLinkText'                                  cmdletGet.LinkText'                                  firstVsAll); //true);  //Console.WriteLine("GetWebElement: 00015 link");                      } //else                                            if (!string.IsNullOrEmpty(cmdletGet.PartialLinkText) && cmdletGet.PartialLinkText.Length > 0) {  //Console.WriteLine("GetWebElement: 00016 partlink");                          errorReport = "PartialLinkText = \"" + cmdletGet.PartialLinkText + "\"";                          result =                              getWebElement(                                  cmdletGet'                                  inputObject'                                  FindElementParameters.ByPartialLinkText'                                  cmdletGet.PartialLinkText'                                  firstVsAll); //true);  //Console.WriteLine("GetWebElement: 00017 partlink");                      } //else                                            if (!string.IsNullOrEmpty(cmdletGet.CssSelector) && cmdletGet.CssSelector.Length > 0) {  //Console.WriteLine("GetWebElement: 00018 css");                          errorReport = "CSS = \"" + cmdletGet.CssSelector + "\"";                          result =                              getWebElement(                                  cmdletGet'                                  inputObject'                                  FindElementParameters.ByCss'                                  cmdletGet.CssSelector'                                  firstVsAll); //true);  //Console.WriteLine("GetWebElement: 00019 css");                      } //else                                            if (!string.IsNullOrEmpty(cmdletGet.XPath) && cmdletGet.XPath.Length > 0) {  //Console.WriteLine("GetWebElement: 00020 xpath");                          errorReport = "XPath = \"" + cmdletGet.XPath + "\"";                          result =                              getWebElement(                                  cmdletGet'                                  inputObject'                                  FindElementParameters.ByXPath'                                  cmdletGet.XPath'                                  firstVsAll); //true);  //Console.WriteLine("GetWebElement: 00021 xpath");                      }                                            if (!string.IsNullOrEmpty(cmdletGet.JavaScript) && cmdletGet.JavaScript.Length > 0) {  //Console.WriteLine("GetWebElement: 00022 JS");                          errorReport = "JavaScript = \"" + cmdletGet.JavaScript.Substring(0' 10) + "...\"";                          result =                              getWebElement(                                  cmdletGet'                                  inputObject'                                  FindElementParameters.ByJavaScript'                                  cmdletGet.JavaScript'                                  firstVsAll); //true);  //Console.WriteLine("GetWebElement: 00023 JS");                      }                                            //                else {                      //                    errorReport = "All = \"\"";                      //                    result =                      //                        getWebElement(                      //                            cmdletGet.InputObject'                      //                            FindElementParameters.All'                      //                            cmdletGet.XPath'                      //                            true);                      //                }                                            cmdletGet.WriteVerbose(cmdletGet' "returning results");                      try { cmdletGet.WriteVerbose(cmdletGet' result.Count.ToString()); } catch {}                      try { cmdletGet.WriteVerbose(cmdletGet' result.ToString()); } catch {}                      try { cmdletGet.WriteVerbose(cmdletGet' result[0].ToString()); } catch {}                      if (result.Count > 0) {  //Console.WriteLine("GetWebElement: 00025: result.Count > 0");                          cmdletGet.WriteVerbose(cmdletGet' "The result is a set of " + result.Count.ToString() + " elements");                          //WriteObject(cmdletGet' result[0]);                          //WriteObject(cmdletGet' result);  //if (null == result) {  //    Console.WriteLine("(null == result)");  //} else {  //    Console.WriteLine("(null != result)");  //    Console.WriteLine(result.GetType().Name);  //    Console.WriteLine(result.Count);  //}                          foreach (var elementOfTheResult in result) {  //Console.WriteLine("GetWebElement: 00026");  //Console.WriteLine("elementOfTheResult.GetType().Name = " + elementOfTheResult.GetType().Name);  //Console.WriteLine("GetWebElement: 00026-2");  //Console.WriteLine(elementOfTheResult.Text);  //if (null == cmdletGet) {  //    Console.WriteLine("null == cmdletGet");  //} else {  //    Console.WriteLine("null != cmdletGet");  //}  //if (null == elementOfTheResult) {  //    Console.WriteLine("null == elementOfTheResult");  //} else {  //    Console.WriteLine("null != elementOfTheResult");  //}  Console.WriteLine("GetSeWebElement 0001");                              cmdletGet.WriteObject(cmdletGet' elementOfTheResult);  Console.WriteLine("GetSeWebElement 0002");  //Console.WriteLine("GetWebElement: 00027");                          }                      } else {  //Console.WriteLine("GetWebElement: 00028");                          cmdletGet.WriteVerbose(cmdletGet' "The result is an empty collection");                          cmdletGet.WriteObject(cmdletGet' (object)null);  //Console.WriteLine("GetWebElement: 00029");                      }                  }                  catch (Exception eFindByException) {  //Console.WriteLine("GetWebElement: 00030");                      cmdletGet.WriteError(                          cmdletGet'                          "Could not find an element by its " +                          errorReport +                          "\r\n" +                          eFindByException.Message'                          "FailedToFindElement"'                          ErrorCategory.InvalidArgument'                          true);                  }              }
Magic Number,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The following statement contains a magic number: if (parameterId == FindElementParameters.ByJavaScript) {                  errorReport += " = \"" + parameterValue.Substring(0' 10) + "\"";              } else {                  errorReport += " = \"" + parameterValue + "\"";              }
Magic Number,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The following statement contains a magic number: do {                                    try {  //Console.WriteLine("getWebElement: 00015");                      if (webDriver != null) {                          cmdlet.WriteVerbose(cmdlet' "IWebDriver as input");  //Console.WriteLine("getWebElement: 00016");                          if (oneElement) {                              cmdlet.WriteVerbose(cmdlet' "one element' IWebDriver as input");  //Console.WriteLine("getWebElement: 00017");                              if (by != null) {  //Console.WriteLine("getWebElement: 00018");                                  listOfResults.Add((webDriver.FindElement(by)));                              } else {  //Console.WriteLine("getWebElement: 00019");                                  listOfResults.Add(                                      ((IWebElement)((IJavaScriptExecutor)webDriver).ExecuteScript(                                          parameterValue'                                          (new string[] { string.Empty })                                         )));                              }  //Console.WriteLine("getWebElement: 00020");                              result =                                  new ReadOnlyCollection<IWebElement>(listOfResults);  //Console.WriteLine("getWebElement: 00021");                          } else {  //Console.WriteLine("getWebElement: 00022");                              cmdlet.WriteVerbose(cmdlet' "a set of elements' IWebDriver as input");                              if (by != null) {  //Console.WriteLine("getWebElement: 00023: webDriver.GetType().Name = " + webDriver.GetType().Name);  //Console.WriteLine(webDriver.Url);  //Console.WriteLine("webDriver.Elements.Count = " + webDriver.Elements.Count.ToString());                                  cmdlet.WriteVerbose(cmdlet' "finding a set of elements' with by");                                  result = webDriver.FindElements(by);  //Console.WriteLine("getWebElement: 00024");  //Console.WriteLine("getWebElement: 00024 Count = " + result.Count.ToString());  //Console.WriteLine("getWebElement: 00024 type = " + result[0].GetType().Name);  //try {  //Console.WriteLine("getWebElement: 00024 ((RemoteWebElement)result[0]) = " + ((RemoteWebElement)result[0]));  //var fakeRemoteWebElement =  //    result[0];  //Console.WriteLine("getWebElement: 00024 fakeRemoteWebElement.GetType().Name = " + fakeRemoteWebElement.GetType().Name);  //Console.WriteLine("getWebElement: 00024 ((RemoteWebElement)fakeRemoteWebElement).GetType().Name = " + ((RemoteWebElement)fakeRemoteWebElement).GetType().Name);  //  ////Console.WriteLine("getWebElement: 00024 ((RemoteWebElement)fakeRemoteWebElement).Enabled = " + ((RemoteWebElement)fakeRemoteWebElement).Enabled.ToString());  ////Console.WriteLine("getWebElement: 00024 ((RemoteWebElement)fakeRemoteWebElement).TagName = " + ((RemoteWebElement)fakeRemoteWebElement).TagName);  ////Console.WriteLine("getWebElement: 00024 fakeRemoteWebElement.TagName = " + fakeRemoteWebElement.TagName);  ////Console.WriteLine("getWebElement: 00024 ((RemoteWebElement)result[0]).TagName = " + ((RemoteWebElement)result[0]).TagName);  //} catch (Exception e00024) {  //    Console.WriteLine(e00024.Message);  //    Console.WriteLine(e00024.GetType().Name);  //}                              } else {  //Console.WriteLine("getWebElement: 00025");                                  //listOfResults =                                  cmdlet.WriteVerbose(cmdlet' "finding a set of elements' without by' with JS");                                  var scriptResults =                                      //(IList<IWebElement>)((IJavaScriptExecutor)webDriver).ExecuteScript(parameterValue);                                      //(IList<IWebElement>)                                      ((IJavaScriptExecutor)webDriver).ExecuteScript(                                          parameterValue'                                          (new string[] { string.Empty })                                         );  //Console.WriteLine("getWebElement: 00026");                                  result =                                      new ReadOnlyCollection<IWebElement>((IList<IWebElement>)scriptResults);  //Console.WriteLine("getWebElement: 00027");                              }                          }                      }                                            if (webElement != null) {                          cmdlet.WriteVerbose(cmdlet' "IWebElement as input");                          if (oneElement) {  //Console.WriteLine("getWebElement: 00028");                              cmdlet.WriteVerbose(cmdlet' "one element' IWebElement as input");                              if (by != null) {  //Console.WriteLine("getWebElement: 00029");                                  listOfResults.Add((webElement.FindElement(by)));                              } else {  //Console.WriteLine("getWebElement: 00030");                                  listOfResults.Add(                                      ((IWebElement)((IJavaScriptExecutor)webElement).ExecuteScript(                                          parameterValue'                                          (new string[] { string.Empty })                                         )));  //Console.WriteLine("getWebElement: 00031");                              }                              result =                                  new ReadOnlyCollection<IWebElement>(listOfResults);  //Console.WriteLine("getWebElement: 00032");                          } else {  //Console.WriteLine("getWebElement: 00033");                              cmdlet.WriteVerbose(cmdlet' "a set of elements' IWebElement as input");                              if (by != null) {  //Console.WriteLine("getWebElement: 00034");                                  result = webElement.FindElements(by);                              } else {  //Console.WriteLine("getWebElement: 00035");                                  //listOfResults =                                  var scriptResults =                                      //(IList<IWebElement>)((IJavaScriptExecutor)webElement).ExecuteScript(parameterValue);                                      //(IList<IWebElement>)                                      ((IJavaScriptExecutor)webElement).ExecuteScript(                                          parameterValue'                                          (new string[] { string.Empty })                                         );  //Console.WriteLine("getWebElement: 00036");                                  result =                                      new ReadOnlyCollection<IWebElement>((IList<IWebElement>)scriptResults);  //Console.WriteLine("getWebElement: 00037");                              }                          }                      }                  }                  catch {}                                    //cmdlet.WriteVerbose(cmdlet' "further");                  if (result.Count > 0) {  //Console.WriteLine("getWebElement: 00038");                      //cmdlet.WriteVerbose(cmdlet' "(result.Count > 0");                      //cmdlet.Wait = false;                      //wait = false;                      WaitForElement = false;                  }                                    cmdlet.WriteVerbose(cmdlet' "startTime = " + startTime.ToString());                  if ((DateTime.Now - startTime).TotalSeconds >                      (cmdlet.Timeout / 1000) &&                      //cmdlet.Wait) {                      //wait) {                      WaitForElement) {  //Console.WriteLine("getWebElement: 00039");                      //cmdlet.Wait = false;                      cmdlet.WriteVerbose(cmdlet' "Time spent: " + (DateTime.Now - startTime).TotalSeconds + " seconds");                      //cmdlet.WriteVerbose(cmdlet' "(System.DateTime.Now - startTime).TotalSeconds = " + (System.DateTime.Now - startTime).TotalSeconds);                      //cmdlet.WriteVerbose(cmdlet' "cmdlet.Wait = " + cmdlet.Wait.ToString());                      //cmdlet.WriteVerbose(cmdlet' "the Timeout = " + (cmdlet.Timeout / 1000).ToString());                      //cmdlet.WriteVerbose(cmdlet' "the decision: " + ((System.DateTime.Now - startTime).TotalSeconds - (cmdlet.Timeout / 1000)).ToString());                                            cmdlet.WriteError(                          cmdlet'                          "The timeout expired for WebElement with " +                          errorReport'                          "TimeoutExpired"'                          ErrorCategory.OperationTimeout'                          true);                  }  //Console.WriteLine("getWebElement: 00040");                  System.Threading.Thread.Sleep(Preferences.OnSleepDelay);  //Console.WriteLine("getWebElement: 00041");              } while (WaitForElement);
Magic Number,SePSX,WebDriverFactory,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\WebDriverFactory.cs,GetDriver,The following statement contains a magic number: try {                    // enumerate driver processes before creating new one                  SeHelper.CollectDriverProcesses(driverType);                    switch (driverType) {  //                    case Drivers.Chrome:  //                        //SeHelper.CollectDriverProcesses(Drivers.Chrome);  ////                    ChromeOptions optCh =   ////                        new ChromeOptions();  //  //                        ChromeOptions optCh = //OptionsFactory.GetChromeOptions();  //                        // resolve ChromeOptions  //                        WebDriverFactory.Container.Resolve<ChromeOptions>();  //  //                        // 20121003  //                        //driver = new ChromeDriver(optCh);  //  //                        // 20121003  //                        OpenQA.Selenium.Chrome.ChromeDriverService chromeService = OpenQA.Selenium.Chrome.ChromeDriverService.CreateDefaultService();  //                        //cmdlet.WriteObject(cmdlet' chromeService.ServiceUrl);  //                        //cmdlet.WriteObject(cmdlet' chromeService);  //                        //chromeService.Start();  //  //                        driver = new ChromeDriver(chromeService' optCh' TimeSpan.FromSeconds(60));  //  //                        SeHelper.GetDriverProcess(Drivers.Chrome' driver.Title + SeHelper.DriverTitleComplementChrome);  //                        break;                      case Drivers.Firefox:                          //SeHelper.CollectDriverProcesses(Drivers.Firefox);                            // 20121003                          //FirefoxProfile ffProfile = new FirefoxProfile();                          //ffProfile.AcceptUntrustedCertificates = true;                          //ffProfile.EnableNativeEvents = true;                          ////driver = new FirefoxDriver();                          //driver = new FirefoxDriver(ffProfile);                              // 20121003  //                            ICapabilities ffCapabilities =  //                                new OpenQA.Selenium.Support.Events.WebElementEventArgs  //                    ICapabilities ffCapabilities =  //                        new DesiredCapabilities();                            var ffCapabilities = CapabilitiesFactory.GetCapabilities();                            _driver = new FirefoxDriver(ffCapabilities);                              SeHelper.GetDriverProcess(Drivers.Firefox' _driver.Title + SeHelper.DriverTitleComplementFirefox.Substring(3));                            _driver.Manage().Timeouts().SetScriptTimeout(TimeSpan.FromSeconds(60));                          break;  //                    case Drivers.InternetExplorer:  //                        //OpenQA.Selenium.IE.InternetExplorerOptions optIE =  //                        //    new InternetExplorerOptions();  //                        //optIE.  ////                    InternetExplorerOptions optIE =  ////                        new InternetExplorerOptions();  //  //                        //InternetExplorerOptions optIE = OptionsFactory.GetIEOptions();  //                        InternetExplorerOptions optIE =  //                          WebDriverFactory.Container.Resolve<InternetExplorerOptions>();  //  //                        optIE.EnableNativeEvents = true;  //                        optIE.IgnoreZoomLevel = true;  //                        optIE.IntroduceInstabilityByIgnoringProtectedModeSettings = true;  //  //  //                        //SeHelper.CollectDriverProcesses(Drivers.InternetExplorer);  //  //                        //string ieSubFolder = string.Empty;  //                        // 20120901  //                        //System.Reflection.Assembly[] assms =   //                        //    System.AppDomain.CurrentDomain.GetAssemblies();  //                        //foreach (System.Reflection.Assembly assm in assms) {  //                        //    if (assm.FullName.Contains("SePSX")) {  //                        //        ieSubFolder =   //                        //            assm.Location.Substring(0' assm.Location.LastIndexOf('\\'));  //                        //        break;  //                        //    }  //                        //}  //  //                        string ieSubFolder = System.IO.Path.GetDirectoryName(cmdlet.GetType().Assembly.Location);  //  //                        if (cmdlet.Architecture == InternetExplorer.x86) {  //                            ieSubFolder += "\\32\\";  //                        }  //                        if (cmdlet.Architecture == InternetExplorer.x64) {  //                            ieSubFolder += "\\64\\";  //                        }  //  //  //                        //driver = new InternetExplorerDriver(  //  //                        // 20121003  //                        OpenQA.Selenium.DriverService ieService = OpenQA.Selenium.IE.InternetExplorerDriverService.CreateDefaultService(ieSubFolder);  //  //                        ieService.Start();  //  //  //                        driver = new InternetExplorerDriver(ieService' optIE' TimeSpan.FromSeconds(10));  //  //                        // 20121003  //                        //driver = new InternetExplorerDriver(ieSubFolder' optIE);  //  //                        SeHelper.GetDriverProcess(Drivers.InternetExplorer' driver.Title + SeHelper.DriverTitleComplementInternetExplorer);  //                        break;                      case Drivers.Safari:                          //SeHelper.CollectDriverProcesses(Drivers.Safari);                            //driver = new SafariDriver();                          //driver = WebDriverFactory.GetNativeDriver(driverType);                            _driver = GetNativeDriver(driverType);                            SeHelper.GetDriverProcess(Drivers.Safari' _driver.Title + SeHelper.DriverTitleComplementSafari);                          break;                      case Drivers.Html:                          _driver = new RemoteWebDriver(DesiredCapabilities.HtmlUnit());                          break;                      default:                          throw new Exception("Invalid value for Drivers");                  }                        //                  //                  //return (new FirefoxDriver());                  return _driver;                  //                  //                } catch (Exception ee) {                  Console.WriteLine(ee.Message);                  return null;              }
Magic Number,SePSX,WebDriverFactory,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\WebDriverFactory.cs,GetDriver,The following statement contains a magic number: try {                    // enumerate driver processes before creating new one                  SeHelper.CollectDriverProcesses(driverType);                    switch (driverType) {  //                    case Drivers.Chrome:  //                        //SeHelper.CollectDriverProcesses(Drivers.Chrome);  ////                    ChromeOptions optCh =   ////                        new ChromeOptions();  //  //                        ChromeOptions optCh = //OptionsFactory.GetChromeOptions();  //                        // resolve ChromeOptions  //                        WebDriverFactory.Container.Resolve<ChromeOptions>();  //  //                        // 20121003  //                        //driver = new ChromeDriver(optCh);  //  //                        // 20121003  //                        OpenQA.Selenium.Chrome.ChromeDriverService chromeService = OpenQA.Selenium.Chrome.ChromeDriverService.CreateDefaultService();  //                        //cmdlet.WriteObject(cmdlet' chromeService.ServiceUrl);  //                        //cmdlet.WriteObject(cmdlet' chromeService);  //                        //chromeService.Start();  //  //                        driver = new ChromeDriver(chromeService' optCh' TimeSpan.FromSeconds(60));  //  //                        SeHelper.GetDriverProcess(Drivers.Chrome' driver.Title + SeHelper.DriverTitleComplementChrome);  //                        break;                      case Drivers.Firefox:                          //SeHelper.CollectDriverProcesses(Drivers.Firefox);                            // 20121003                          //FirefoxProfile ffProfile = new FirefoxProfile();                          //ffProfile.AcceptUntrustedCertificates = true;                          //ffProfile.EnableNativeEvents = true;                          ////driver = new FirefoxDriver();                          //driver = new FirefoxDriver(ffProfile);                              // 20121003  //                            ICapabilities ffCapabilities =  //                                new OpenQA.Selenium.Support.Events.WebElementEventArgs  //                    ICapabilities ffCapabilities =  //                        new DesiredCapabilities();                            var ffCapabilities = CapabilitiesFactory.GetCapabilities();                            _driver = new FirefoxDriver(ffCapabilities);                              SeHelper.GetDriverProcess(Drivers.Firefox' _driver.Title + SeHelper.DriverTitleComplementFirefox.Substring(3));                            _driver.Manage().Timeouts().SetScriptTimeout(TimeSpan.FromSeconds(60));                          break;  //                    case Drivers.InternetExplorer:  //                        //OpenQA.Selenium.IE.InternetExplorerOptions optIE =  //                        //    new InternetExplorerOptions();  //                        //optIE.  ////                    InternetExplorerOptions optIE =  ////                        new InternetExplorerOptions();  //  //                        //InternetExplorerOptions optIE = OptionsFactory.GetIEOptions();  //                        InternetExplorerOptions optIE =  //                          WebDriverFactory.Container.Resolve<InternetExplorerOptions>();  //  //                        optIE.EnableNativeEvents = true;  //                        optIE.IgnoreZoomLevel = true;  //                        optIE.IntroduceInstabilityByIgnoringProtectedModeSettings = true;  //  //  //                        //SeHelper.CollectDriverProcesses(Drivers.InternetExplorer);  //  //                        //string ieSubFolder = string.Empty;  //                        // 20120901  //                        //System.Reflection.Assembly[] assms =   //                        //    System.AppDomain.CurrentDomain.GetAssemblies();  //                        //foreach (System.Reflection.Assembly assm in assms) {  //                        //    if (assm.FullName.Contains("SePSX")) {  //                        //        ieSubFolder =   //                        //            assm.Location.Substring(0' assm.Location.LastIndexOf('\\'));  //                        //        break;  //                        //    }  //                        //}  //  //                        string ieSubFolder = System.IO.Path.GetDirectoryName(cmdlet.GetType().Assembly.Location);  //  //                        if (cmdlet.Architecture == InternetExplorer.x86) {  //                            ieSubFolder += "\\32\\";  //                        }  //                        if (cmdlet.Architecture == InternetExplorer.x64) {  //                            ieSubFolder += "\\64\\";  //                        }  //  //  //                        //driver = new InternetExplorerDriver(  //  //                        // 20121003  //                        OpenQA.Selenium.DriverService ieService = OpenQA.Selenium.IE.InternetExplorerDriverService.CreateDefaultService(ieSubFolder);  //  //                        ieService.Start();  //  //  //                        driver = new InternetExplorerDriver(ieService' optIE' TimeSpan.FromSeconds(10));  //  //                        // 20121003  //                        //driver = new InternetExplorerDriver(ieSubFolder' optIE);  //  //                        SeHelper.GetDriverProcess(Drivers.InternetExplorer' driver.Title + SeHelper.DriverTitleComplementInternetExplorer);  //                        break;                      case Drivers.Safari:                          //SeHelper.CollectDriverProcesses(Drivers.Safari);                            //driver = new SafariDriver();                          //driver = WebDriverFactory.GetNativeDriver(driverType);                            _driver = GetNativeDriver(driverType);                            SeHelper.GetDriverProcess(Drivers.Safari' _driver.Title + SeHelper.DriverTitleComplementSafari);                          break;                      case Drivers.Html:                          _driver = new RemoteWebDriver(DesiredCapabilities.HtmlUnit());                          break;                      default:                          throw new Exception("Invalid value for Drivers");                  }                        //                  //                  //return (new FirefoxDriver());                  return _driver;                  //                  //                } catch (Exception ee) {                  Console.WriteLine(ee.Message);                  return null;              }
Magic Number,SePSX,WebDriverFactory,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\WebDriverFactory.cs,GetDriverServer,The following statement contains a magic number: var commandTimeout = TimeSpan.FromSeconds(60.0);
Magic Number,SePSX,Preferences,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: HighlighterBorder = 3;
Magic Number,SePSX,Preferences,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: HighlighterBorderParent = 5;
Magic Number,SePSX,Preferences,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: Timeout = 5000;
Magic Number,SePSX,Preferences,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: TranscriptInterval = 200;
Magic Number,SePSX,Preferences,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: OnSleepDelay = 50;
Magic Number,SePSX,Preferences,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: MaximumErrorCount = 256;
Magic Number,SePSX,Preferences,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: MaximumEventCount = 256;
Missing Default,SePSX,Recorder,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\Recording\Recorder.cs,RecordActionItem,The following switch statement is missing a default case: switch (resultWebElement.TagName) {                      case ConstAuxElementClicked:                          actionItem.UserData.Add("code"' CodeGenElementClick);                          break;                            #region temporaly commented  //                            case Recorder.constAuxElementData:  //                                try { elementId = resultWebElement.GetAttribute("id"); } catch {}  //                                try { elementName = resultWebElement.GetAttribute("name"); } catch {}  //                                try { elementClass = resultWebElement.GetAttribute("class"); } catch {}  //                                try { elementTagName = resultWebElement.TagName; } catch {}  //                                try { elementText = resultWebElement.Text; } catch {}  //                                if (string.Empty != elementId && "null" != elementId) {  //                                    actionItem.UserData.Add("code"' codeGenIdParameter + elementId + "'");  //                                    actionItem.UserData.Add("comment1"' codeGenNameComment + elementName + "'");  //                                    actionItem.UserData.Add("comment2"' codeGenClassComment + elementClass + "'");  //                                    actionItem.UserData.Add("comment3"' codeGenTagParameter + elementTagName + "'");  ////    Console.WriteLine("\"code\" added 2");  //                                } else if (string.Empty != elementName && "null" != elementName) {  //                                    actionItem.UserData.Add("code"' codeGenNameParameter + elementName + "'");  //                                    actionItem.UserData.Add("comment1"' codeGenClassComment + elementClass + "'");  //                                    actionItem.UserData.Add("comment2"' codeGenTagParameter + elementTagName + "'");  ////    Console.WriteLine("\"code\" added 3");  //                                } else if (string.Empty != elementClass && "null" != elementClass) {  //                                    actionItem.UserData.Add("code"' codeGenClassParameter + elementClass + "'");  //                                    actionItem.UserData.Add("comment1"' codeGenTagParameter + elementTagName + "'");  ////    Console.WriteLine("\"code\" added 4");  //                                } else if (string.Empty != elementTagName && "null" != elementTagName) {  //                                    actionItem.UserData.Add("code"' codeGenTagParameter + elementTagName + "'");  //                                }  //                                break;  //                    case Recorder.constAuxElementSelected:  //                        actionItem.UserData.Add(@"code"' @" | Invoke-SeWebElementClick");  //                        break;  #endregion temporaly commented                        case ConstAuxElementTypedIn:                          var typedInData = string.Empty;                          if (null != (typedInData = resultWebElement.GetAttribute("text"))) {                                                            // ??                                                        } else if (null != (typedInData = resultWebElement.GetAttribute("value"))) {                                                            // ??                          }                          actionItem.UserData.Add("code"' @" | Set-SeWebElementKeys '" + typedInData + "'");                          break;                      case ConstAuxElementSelected:                          // TBD                          break;                      case ConstAuxElementData:                          // nothing to do                          break;                  }
Missing Default,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,GetWebElementCoordinates,The following switch statement is missing a default case: switch (DriverProcess.ProcessName) {                      case ProcessNameChrome:                      case ProcessNameFirefox:                      case ProcessNameOpera:                          internalPaneCondition =                              new PropertyCondition(                                  AutomationElement.ControlTypeProperty'                                  ControlType.Document);                          break;                      case ProcessNameIe:                          internalPaneCondition =                              new PropertyCondition(                                  AutomationElement.ControlTypeProperty'                                  ControlType.Pane);                          break;                      case ProcessNameSafari:                          internalPaneCondition =                              new PropertyCondition(                                  AutomationElement.ControlTypeProperty'                                  ControlType.Pane);                          break;                          //                            case SeHelper.ProcessNameOpera:                          //                                internalPanec =                          //                                    new PropertyCondition(                          //                                        AutomationElement.ControlTypeProperty'                          //                                        ControlType.Pane);                          //                                break;                  }
Missing Default,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,SetDriverTimeout,The following switch statement is missing a default case: switch (timeoutType) {                          case DriverTimeoutTypes.ImplicitlyWait:                              cmdlet.WriteVerbose(cmdlet' "ImplicitlyWaitTimeout");                              driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromMilliseconds(timeoutValue));                              break;                          case DriverTimeoutTypes.PageLoad:                              cmdlet.WriteVerbose(cmdlet' "PageLoadTimeout");                              driver.Manage().Timeouts().SetPageLoadTimeout(TimeSpan.FromMilliseconds(timeoutValue));                              break;                          case DriverTimeoutTypes.Script:                              cmdlet.WriteVerbose(cmdlet' "ScriptTimeout");                              driver.Manage().Timeouts().SetScriptTimeout(TimeSpan.FromMilliseconds(timeoutValue));                              break;                              //default:                              //    throw new Exception("Invalid value for DriverTimeoutTypes");                      }
Missing Default,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,getWebElement,The following switch statement is missing a default case: switch (parameterId) {                  case FindElementParameters.ByClassName:                      errorReport = "ClassName";                      by = By.ClassName(parameterValue);                      break;                  case FindElementParameters.ByCss:                      errorReport = "CSS";                      by = By.CssSelector(parameterValue);                      break;                  case FindElementParameters.ById:                      errorReport = "Id";                      by = By.Id(parameterValue);                      break;                  case FindElementParameters.ByLinkText:                      errorReport = "LinkText";                      by = By.LinkText(parameterValue);                      break;                  case FindElementParameters.ByName:                      errorReport = "Name";                      by = By.Name(parameterValue);                      break;                  case FindElementParameters.ByPartialLinkText:                      errorReport = "PartialLinkText";                      by = By.PartialLinkText(parameterValue);                      break;                  case FindElementParameters.ByTagName:                      errorReport = "TagName";                      by = By.TagName(parameterValue);                      break;                  case FindElementParameters.ByXPath:                      errorReport = "XPath";                      by = By.XPath(parameterValue);                      break;                  case FindElementParameters.ByJavaScript:                      errorReport = "JavaScript";                      by = null;                      break;                      //                case FindElementParameters.All:                      //                    by = null;                      //                    break;              }
Missing Default,SePSX,SeHelper,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\SeHelper.cs,SwitchToFrame,The following switch statement is missing a default case: switch (selector) {                          case SwitchToFrameWays.FrameElement:                              errorReport = "FrameElement = " + ((SwitchToFrameCmdletBase)cmdlet).FrameElement.ToString();                              cmdlet.WriteVerbose(errorReport);                              cmdlet.WriteObject(cmdlet' (driver as IWebDriver).SwitchTo().Frame(((SwitchToFrameCmdletBase)cmdlet).FrameElement));                              break;                          case SwitchToFrameWays.FrameIndex:                              errorReport = "FrameIndex = " + ((SwitchToFrameCmdletBase)cmdlet).FrameIndex.ToString();                              cmdlet.WriteVerbose(errorReport);                              cmdlet.WriteObject(cmdlet' (driver as IWebDriver).SwitchTo().Frame(((SwitchToFrameCmdletBase)cmdlet).FrameIndex));                              break;                          case SwitchToFrameWays.FrameName:                              errorReport = "FrameName = " + ((SwitchToFrameCmdletBase)cmdlet).FrameName;                              cmdlet.WriteVerbose(errorReport);                              cmdlet.WriteObject(cmdlet' (driver as IWebDriver).SwitchTo().Frame(((SwitchToFrameCmdletBase)cmdlet).FrameName));                              break;                      }
Missing Default,SePSX,WebDriverFactory,C:\repos\apetrovskiy_STUPS\SePSX\SePSX\Helpers\UnderlyingCode\WebDriverFactory.cs,GetDriverServer,The following switch statement is missing a default case: switch (cmdlet.DriverType) {                  case Drivers.Chrome:                      //SeHelper.GetDriverProcess(Drivers.Chrome' driver.Title + SeHelper.DriverTitleComplementChrome);                      //SeHelper.GetDriverProcess(driverType' driver.Title + SeHelper.DriverTitleComplementChrome);                      SeHelper.GetDriverProcess(cmdlet.DriverType' driver.Title + SeHelper.DriverTitleComplementChrome);                      break;  //                case Drivers.Firefox:  //                      //                    break;                  case Drivers.InternetExplorer:                      //SeHelper.GetDriverProcess(Drivers.InternetExplorer' driver.Title + SeHelper.DriverTitleComplementInternetExplorer);                      //SeHelper.GetDriverProcess(driverType' driver.Title + SeHelper.DriverTitleComplementInternetExplorer);                      SeHelper.GetDriverProcess(cmdlet.DriverType' driver.Title + SeHelper.DriverTitleComplementInternetExplorer);                      break;  //                case Drivers.Safari:  //                      //                    break;  //                case Drivers.HTML:  //                      //                    break;  //                default:  //                    throw new Exception("Invalid value for Drivers");              }
