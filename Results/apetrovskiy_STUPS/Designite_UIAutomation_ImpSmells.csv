Implementation smell,Namespace,Class,File,Method,Description
Long Method,UIAutomation.Commands,StartUiaCachedModeCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Cache\StartUiaCachedModeCommand.cs,BeginProcessing,The method has 232 lines of code.
Long Method,UIAutomation.Commands,ConvertFromUiaDataGridCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Convert\ConvertFromUIADataGridCommand.cs,ProcessRecord,The method has 207 lines of code.
Long Method,UIAutomation.Commands,ConvertFromUiaTableCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Convert\ConvertFromUIATableCommand.cs,ProcessRecord,The method has 220 lines of code.
Long Method,UIAutomation.Commands,ConvertToUiaSearchCriteriaCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Convert\ConvertToUiaSearchCriteriaCommand.cs,GetPropertyCompleteString,The method has 173 lines of code.
Long Method,UIAutomation.Commands,InvokeUiaHotKeyCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Hotkey\InvokeUIAHotKeyCommand.cs,BeginProcessing,The method has 259 lines of code.
Long Method,UIAutomation.Commands,StartUiaTranscriptCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\StartUIATranscriptCommand.cs,EndProcessing,The method has 204 lines of code.
Long Method,UIAutomation.Commands,StepUiaWizardCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Wizard\StepUIAWizardCommand.cs,ProcessRecord,The method has 103 lines of code.
Long Method,UIAutomation.Helpers.Commands,GetWindowCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Get\GetWindowCommand.cs,Execute,The method has 156 lines of code.
Long Method,UIAutomation.Helpers.Commands,PatternCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Pattern\PatternCommand.cs,Execute,The method has 187 lines of code.
Long Method,UIAutomation,MethodSelectorAspect,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Aspects\MethodSelectorAspect.cs,Intercept,The method has 923 lines of code.
Long Method,UIAutomation,ExtensionsMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethods.cs,TestControlByPropertiesFromDictionary,The method has 189 lines of code.
Long Method,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,CollectAncestors,The method has 119 lines of code.
Long Method,UIAutomation,RdpHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\RDPHelper.cs,CreateRdpFile,The method has 179 lines of code.
Long Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetScreenshotOfCmdletInput,The method has 107 lines of code.
Long Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetScreenshotOfAutomationElement,The method has 109 lines of code.
Long Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetScreenshotOfSquare,The method has 104 lines of code.
Long Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,ProcessingElement,The method has 352 lines of code.
Long Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,SubscribeToEventsDuringRecording,The method has 186 lines of code.
Long Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetOutputStringUsingItemsValuePattern,The method has 123 lines of code.
Long Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetSheridanTreeItemFromTreeNode,The method has 137 lines of code.
Long Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,EnumChildWindowsFromHandle,The method has 119 lines of code.
Long Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetSupportedInterfaces,The method has 145 lines of code.
Long Method,UIAutomation,WizardHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\WizardHelper.cs,StepWizardStep,The method has 141 lines of code.
Long Method,UIAutomation,ChildKernelModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ChildKernelModule.cs,Load,The method has 416 lines of code.
Long Method,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The method has 879 lines of code.
Long Method,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,SearchForElements,The method has 123 lines of code.
Long Method,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,GetWindowCollectionByName,The method has 107 lines of code.
Long Method,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,GetWindowCollectionByPid,The method has 172 lines of code.
Long Method,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,ReturnOnlyRightElements,The method has 138 lines of code.
Long Method,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,WriteObjectMethod070Report,The method has 110 lines of code.
Long Method,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,ProcessAutomationElement,The method has 107 lines of code.
Long Method,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The method has 278 lines of code.
Long Method,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,CheckAndPrepareInput,The method has 100 lines of code.
Long Method,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,SubscribeToEvents,The method has 159 lines of code.
Long Method,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIRecordingAutomationEvent,The method has 169 lines of code.
Long Method,UIAutomation,ReadCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ReadCmdletBase.cs,ProcessRecord,The method has 152 lines of code.
Long Method,UIAutomation,TranscriptCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\TranscriptCmdletBase.cs,WritingRecord,The method has 102 lines of code.
Long Method,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,The method has 347 lines of code.
Long Method,UIAutomation,WizardRunCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Wizard\WizardRunCmdletBase.cs,RunWizardInAutomaticMode,The method has 109 lines of code.
Long Method,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The method has 109 lines of code.
Complex Method,UIAutomation.Commands,ConvertFromUiaDataGridCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Convert\ConvertFromUIADataGridCommand.cs,ProcessRecord,Cyclomatic complexity of the method is 8
Complex Method,UIAutomation.Commands,ConvertFromUiaTableCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Convert\ConvertFromUIATableCommand.cs,ProcessRecord,Cyclomatic complexity of the method is 8
Complex Method,UIAutomation.Commands,InvokeUiaHotKeyCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Hotkey\InvokeUIAHotKeyCommand.cs,BeginProcessing,Cyclomatic complexity of the method is 11
Complex Method,UIAutomation.Commands,StartUiaTranscriptCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\StartUIATranscriptCommand.cs,EndProcessing,Cyclomatic complexity of the method is 11
Complex Method,UIAutomation,LogHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\LogHelper.cs,ConvertHashtableToString,Cyclomatic complexity of the method is 8
Complex Method,UIAutomation,RdpHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\RDPHelper.cs,CreateRdpFile,Cyclomatic complexity of the method is 9
Complex Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetScreenshotOfCmdletInput,Cyclomatic complexity of the method is 12
Complex Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetScreenshotOfAutomationElement,Cyclomatic complexity of the method is 11
Complex Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,ProcessingElement,Cyclomatic complexity of the method is 16
Complex Method,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetSupportedInterfaces,Cyclomatic complexity of the method is 42
Complex Method,UIAutomation,DataProtector,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\RDP\DataProtector.cs,Encrypt,Cyclomatic complexity of the method is 8
Complex Method,UIAutomation,DataProtector,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\RDP\DataProtector.cs,Decrypt,Cyclomatic complexity of the method is 8
Complex Method,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,SearchForElements,Cyclomatic complexity of the method is 19
Complex Method,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,AfterSearchHook,Cyclomatic complexity of the method is 8
Complex Method,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,GetWindowCollectionByPid,Cyclomatic complexity of the method is 9
Complex Method,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,WriteObjectMethod020Highlight,Cyclomatic complexity of the method is 9
Complex Method,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,ProcessAutomationElement,Cyclomatic complexity of the method is 9
Complex Method,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElements,Cyclomatic complexity of the method is 8
Complex Method,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,Cyclomatic complexity of the method is 22
Complex Method,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIRecordingAutomationEvent,Cyclomatic complexity of the method is 24
Complex Method,UIAutomation,ReadCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ReadCmdletBase.cs,ProcessRecord,Cyclomatic complexity of the method is 26
Complex Method,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallScrollPattern,Cyclomatic complexity of the method is 8
Complex Method,UIAutomation,TranscriptCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\TranscriptCmdletBase.cs,WritingRecord,Cyclomatic complexity of the method is 9
Complex Method,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,Cyclomatic complexity of the method is 9
Long Parameter List,UIAutomation,ExtensionMethodsCollection,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsCollection.cs,GetElementsByWildcard,The method has 6 parameters. Parameters: collection' name' automationId' className' txtValue' caseSensitive
Long Parameter List,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,GetElementPropertyString,The method has 5 parameters. Parameters: element' cmdlet' propertyName' pattern' hasName
Long Parameter List,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,CompareElementValueAndValueParameter,The method has 5 parameters. Parameters: element' textValue' viaWildcardOrRegex' wildcardValue' regexOptions
Long Parameter List,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,Highlighter,The method has 7 parameters. Parameters: height' width' X' Y' intHandle' control' color
Long Parameter List,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,Highlighter,The method has 8 parameters. Parameters: height' width' X' Y' intHandle' control' highlighterNumber' highlighterData
Long Parameter List,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,createHighlighter,The method has 7 parameters. Parameters: height' width' X' Y' intHandle' control' color
Long Parameter List,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,paintLeftSide,The method has 6 parameters. Parameters: control' border' p' height' width' color
Long Parameter List,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,paintTopSide,The method has 6 parameters. Parameters: control' border' p' height' width' color
Long Parameter List,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,paintRightSide,The method has 6 parameters. Parameters: control' border' p' height' width' color
Long Parameter List,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,paintBottomSide,The method has 6 parameters. Parameters: control' border' p' height' width' color
Long Parameter List,UIAutomation,Banner,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,Banner,The method has 5 parameters. Parameters: left' top' width' height' message
Long Parameter List,UIAutomation,Side,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,Side,The method has 6 parameters. Parameters: left' top' width' height' control' color
Long Parameter List,UIAutomation,LabelForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,LabelForm,The method has 7 parameters. Parameters: left' top' width' height' highlighterNumber' foreColor' tooltipText
Long Parameter List,UIAutomation,NativeMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\NativeMethods.cs,BitBlt,The method has 9 parameters. Parameters: hDestDC' x' y' nWidth' nHeight' hSrcDC' xSrc' ySrc' dwRop
Long Parameter List,UIAutomation,NativeMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\NativeMethods.cs,WriteProcessMemory,The method has 5 parameters. Parameters: hProcess' lpBaseAddress' lpBuffer' nSize' lpNumberOfBytesWritten
Long Parameter List,UIAutomation,NativeMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\NativeMethods.cs,VirtualAllocEx,The method has 5 parameters. Parameters: hProcess' lpAddress' dwSize' flAllocationType' flProtect
Long Parameter List,UIAutomation,NativeMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\NativeMethods.cs,CryptProtectData,The method has 7 parameters. Parameters: pPlainText' szDescription' pEntropy' pReserved' pPrompt' dwFlags' pCipherText
Long Parameter List,UIAutomation,NativeMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\NativeMethods.cs,CryptUnprotectData,The method has 7 parameters. Parameters: pCipherText' pszDescription' pEntropy' pReserved' pPrompt' dwFlags' pPlainText
Long Parameter List,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetScreenshotOfCmdletInput,The method has 6 parameters. Parameters: cmdlet' description' save' relativeRect' path' format
Long Parameter List,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetScreenshotOfAutomationElement,The method has 7 parameters. Parameters: cmdlet' element' description' save' relativeRect' path' format
Long Parameter List,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetScreenshotOfSquare,The method has 6 parameters. Parameters: cmdlet' description' save' absRect' path' format
Long Parameter List,UIAutomation,DataProtector,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\RDP\DataProtector.cs,CryptProtectData,The method has 7 parameters. Parameters: pDataIn' szDataDescr' pOptionalEntropy' pvReserved' pPromptStruct' dwFlags' pDataOut
Long Parameter List,UIAutomation,DataProtector,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\RDP\DataProtector.cs,CryptUnprotectData,The method has 7 parameters. Parameters: pDataIn' szDataDescr' pOptionalEntropy' pvReserved' pPromptStruct' dwFlags' pDataOut
Long Parameter List,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsViaWildcards_FindAll,The method has 7 parameters. Parameters: data' inputObject' conditions' caseSensitive' onlyOneResult' onlyTopLevel' viaWildcardOrRegex
Long Parameter List,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsWithWalker,The method has 8 parameters. Parameters: element' name' automationId' className' controlType' caseSensitive' onlyOneResult' onlyTopLevel
Long Parameter List,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsWithFindAll,The method has 7 parameters. Parameters: element' data' conditions' caseSensitiveParam' onlyOneResult' onlyTopLevel' viaWildcardOrRegex
Long Parameter List,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,ProcessAutomationElement,The method has 8 parameters. Parameters: element' name' automationId' className' controlType' caseSensitive' onlyOneResult' onlyTopLevel
Long Parameter List,AVG.Automation.Cmdlets.NativeTypes,NativeMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\pull requests\NativeMethods.cs,WriteProcessMemory,The method has 5 parameters. Parameters: hProcess' lpBaseAddress' lpBuffer' nSize' lpNumberOfBytesWritten
Long Parameter List,AVG.Automation.Cmdlets.NativeTypes,NativeMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\pull requests\NativeMethods.cs,VirtualAllocEx,The method has 5 parameters. Parameters: hProcess' lpAddress' dwSize' flAllocationType' flProtect
Long Parameter List,AVG.Automation.Cmdlets,NativeMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\pull requests\NativeMethods.cs,WriteProcessMemory,The method has 5 parameters. Parameters: hProcess' lpBaseAddress' lpBuffer' nSize' lpNumberOfBytesWritten
Long Parameter List,AVG.Automation.Cmdlets,NativeMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\pull requests\NativeMethods.cs,VirtualAllocEx,The method has 5 parameters. Parameters: hProcess' lpAddress' dwSize' flAllocationType' flProtect
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsDockPatternAvailableProperty is 30.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsExpandCollapsePatternAvailableProperty is 40.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsGridItemPatternAvailableProperty is 34.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsGridPatternAvailableProperty is 30.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsInvokePatternAvailableProperty is 32.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsMultipleViewPatternAvailableProperty is 38.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsRangeValuePatternAvailableProperty is 36.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsSelectionItemPatternAvailableProperty is 39.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsSelectionPatternAvailableProperty is 35.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsScrollPatternAvailableProperty is 32.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsScrollItemPatternAvailableProperty is 36.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsTablePatternAvailableProperty is 31.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsTableItemPatternAvailableProperty is 35.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsTextPatternAvailableProperty is 30.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsTogglePatternAvailableProperty is 32.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsTransformPatternAvailableProperty is 35.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsValuePatternAvailableProperty is 31.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter IsWindowPatternAvailableProperty is 32.
Long Identifier,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,,The length of the parameter AutomationPropertyChangedEvent is 30.
Long Identifier,UIAutomation,UiaScrollPattern,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaScrollPattern.cs,,The length of the parameter HorizontalScrollPercentProperty is 31.
Long Identifier,UIAutomation,UiaScrollPattern,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaScrollPattern.cs,,The length of the parameter HorizontallyScrollableProperty is 30.
Long Identifier,UIAutomation,UiaSelectionItemPattern,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaSelectionItemPattern.cs,,The length of the parameter ElementRemovedFromSelectionEvent is 32.
Long Identifier,UIAutomation,UiaTextPattern,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTextPattern.cs,,The length of the parameter HorizontalTextAlignmentAttribute is 32.
Long Identifier,UIAutomation,UiaWindowPattern,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaWindowPattern.cs,,The length of the parameter WindowInteractionStateProperty is 30.
Long Identifier,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,,The length of the parameter _errorMessageInTheGatheringCycle is 32.
Long Identifier,UIAutomation,ContextMenuSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ContextMenuSearcher.cs,,The length of the parameter conditionsForContextMenuSearch is 30.
Long Identifier,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,SubscribeToEvents,The length of the parameter uiaPropertyChangedEventHandler is 30.
Long Identifier,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,SubscribeToEvents,The length of the parameter uiaStructureChangedEventHandler is 31.
Long Identifier,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,TestControlByPropertiesFromHashtable,The length of the parameter theCurrentHashtableMatchesAtLeastOneElement is 43.
Long Identifier,UIAutomation,Resource,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Resources\Resource.cs,,The length of the parameter GetWindowCommand_Error_Timeout is 30.
Long Identifier,UIAutomation,Resource,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Resources\Resource.cs,,The length of the parameter GetWindowCommand_Error_Unknown_error is 36.
Long Identifier,UIAutomation,Resource,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Resources\Resource.cs,,The length of the parameter GetWindowCommand_Error_wrong_input is 34.
Long Identifier,UIAutomation,Resource,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Resources\Resource.cs,,The length of the parameter GetWindowCommand_Verbose_no_processName__name__processid_or_process_was_supplied is 80.
Long Statement,UIAutomation.Commands,ConvertToUiaSearchCriteriaCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Convert\ConvertToUiaSearchCriteriaCommand.cs,GetPropertyCompleteString,The length of the statement  "//                        result += PropertyToString(currentElement.Current.ControlType.ProgrammaticName.Substring(12)); " is 120.
Long Statement,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The length of the statement  "            // this.btnStart.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 161.
Long Statement,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The length of the statement  "            // this.btnPause.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 161.
Long Statement,UIAutomation.Commands,RecorderFrom,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderFrom.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/UIAutomation;component/commands/transcript/recorderfrom.xaml"' System.UriKind.Relative); " is 134.
Long Statement,UIAutomation.Commands,StartUiaTranscriptCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\StartUIATranscriptCommand.cs,WriteHeader,The length of the statement  "            fileWriter.WriteLine("#\t\t\tIf you are especially interested in a control of specific type' issue the command like this:"); " is 124.
Long Statement,UIAutomation.Commands,StartUiaTranscriptCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\StartUIATranscriptCommand.cs,WriteHeader,The length of the statement  "            fileWriter.WriteLine("#\t\t\tGet-Command -Module UIA* *Edit* #(or' what's equal to the previous' Get-Command -Module UIA* *TextBox*)"); " is 135.
Long Statement,UIAutomation.Commands,StartUiaTranscriptCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\StartUIATranscriptCommand.cs,WriteHeader,The length of the statement  "            fileWriter.WriteLine("#\t\t\tSimilarly' you can filter cmdlets by an action you are planning to perform with the control"); " is 123.
Long Statement,UIAutomation.Commands,StartUiaTranscriptCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\StartUIATranscriptCommand.cs,WriteHeader,The length of the statement  "            fileWriter.WriteLine(@"# the following lines are not necessary for script to be working' they're for your information only"); " is 125.
Long Statement,UIAutomation.Commands,StartUiaTranscriptCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\StartUIATranscriptCommand.cs,EndProcessing,The length of the statement  "                         DateTime.Now.ToShortTimeString()).Replace(":"' "_")).Replace("/"' "_")).Replace(";"' "_")).Replace(@"\"' "_")).Replace(" "' "_"); " is 129.
Long Statement,UIAutomation.Commands,StartUiaTranscriptCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\StartUIATranscriptCommand.cs,EndProcessing,The length of the statement  "                            System.DateTime.Now.ToShortTimeString()).Replace(":"' "_")).Replace("/"' "_")).Replace(";"' "_")).Replace(@"\"' "_")).Replace(" "' "_"); " is 136.
Long Statement,UIAutomation.Commands,Window1,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\Window1.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/UIAutomation;component/commands/transcript/window1.xaml"' System.UriKind.Relative); " is 129.
Long Statement,UIAutomation.Commands,InvokeUiaWizardCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Wizard\InvokeUIAWizardCommand.cs,BeginProcessing,The length of the statement  "                foreach (Dictionary<string' object> dictParameters in Parameters.Select(parameterHashtable => parameterHashtable.ConvertHashtableToDictionary())) " is 145.
Long Statement,UIAutomation.Commands,InvokeUiaWizardCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Wizard\InvokeUIAWizardCommand.cs,BeginProcessing,The length of the statement  "                foreach (Dictionary<string' object> dictDirections in Directions.Select(directionHashtable => directionHashtable.ConvertHashtableToDictionary())) " is 145.
Long Statement,UIAutomation.Helpers.Commands,GetWindowCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Get\GetWindowCommand.cs,Execute,The length of the statement  "                                string.Format(Resource.GetWindowCommand_Error_Timeout' cmdlet.Timeout' procName' procId' name' cmdlet.AutomationId' cmdlet.Class)' " is 130.
Long Statement,UIAutomation,UiaAutomation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaAutomation.cs,Compare,The length of the statement  "            return classic.Automation.Compare(el1.GetSourceElement() as classic.AutomationElement' el2.GetSourceElement() as classic.AutomationElement); " is 140.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPropertyValue,The length of the statement  "                    return Preferences.FromCache ? _elementHolderNet.GetCachedPropertyValue(property) : _elementHolderNet.GetCurrentPropertyValue(property); " is 136.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPropertyValue,The length of the statement  "                    return Preferences.FromCache ? _elementHolderAdapter.GetCachedPropertyValue(property) : _elementHolderAdapter.GetCurrentPropertyValue(property); " is 144.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPropertyValue,The length of the statement  "                    return Preferences.FromCache ? _elementHolderNet.GetCachedPropertyValue(property) : _elementHolderNet.GetCurrentPropertyValue(property); " is 136.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPropertyValue,The length of the statement  "                    return Preferences.FromCache ? _elementHolderNet.GetCachedPropertyValue(property' ignoreDefaultValue) : _elementHolderNet.GetCurrentPropertyValue(property' ignoreDefaultValue); " is 176.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPropertyValue,The length of the statement  "                    return Preferences.FromCache ? _elementHolderAdapter.GetCachedPropertyValue(property' ignoreDefaultValue) : _elementHolderAdapter.GetCurrentPropertyValue(property' ignoreDefaultValue); " is 184.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPropertyValue,The length of the statement  "                    return Preferences.FromCache ? _elementHolderNet.GetCachedPropertyValue(property' ignoreDefaultValue) : _elementHolderNet.GetCurrentPropertyValue(property' ignoreDefaultValue); " is 176.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPattern,The length of the statement  "                        return (TPatternInterface)AutomationFactory.GetPatternAdapter<TPatternInterface>(this' _elementHolderNet.GetCachedPattern(pattern)); " is 132.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPattern,The length of the statement  "                        return (TPatternInterface)AutomationFactory.GetPatternAdapter<TPatternInterface>(this' _elementHolderNet.GetCurrentPattern(pattern)); " is 133.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPattern,The length of the statement  "                    // return Preferences.FromCache ? _elementHolderAdapter.GetCachedPattern(pattern) : _elementHolderAdapter.GetCurrentPattern(pattern); " is 133.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPattern,The length of the statement  "                    return Preferences.FromCache ? default(TPatternInterface) : _elementHolderAdapter.GetCurrentPattern<TPatternInterface>(pattern); " is 128.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPattern,The length of the statement  "                    //    return Preferences.FromCache ? _elementHolderNet.GetCachedPattern(pattern) : _elementHolderNet.GetCurrentPattern(pattern); " is 128.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPattern,The length of the statement  "                        return (TPatternInterface)AutomationFactory.GetPatternAdapter<TPatternInterface>(this' _elementHolderNet.GetCachedPattern(pattern)); " is 132.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPattern,The length of the statement  "                        return (TPatternInterface)AutomationFactory.GetPatternAdapter<TPatternInterface>(this' _elementHolderNet.GetCurrentPattern(pattern)); " is 133.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,GetCurrentPattern,The length of the statement  "                    return Preferences.FromCache ? _elementHolderNet.GetCachedPattern(pattern) : _elementHolderNet.GetCurrentPattern(pattern); " is 122.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,TryGetCurrentPattern,The length of the statement  "                    return Preferences.FromCache ? _elementHolderNet.TryGetCachedPattern(pattern' out patternObject) : _elementHolderNet.TryGetCurrentPattern(pattern' out patternObject); " is 166.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,TryGetCurrentPattern,The length of the statement  "                    return Preferences.FromCache ? _elementHolderAdapter.TryGetCachedPattern(pattern' out patternObject) : _elementHolderAdapter.TryGetCurrentPattern(pattern' out patternObject); " is 174.
Long Statement,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,TryGetCurrentPattern,The length of the statement  "                    return Preferences.FromCache ? _elementHolderNet.TryGetCachedPattern(pattern' out patternObject) : _elementHolderNet.TryGetCurrentPattern(pattern' out patternObject); " is 166.
Long Statement,UIAutomation,UiaRangeValuePattern,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaRangeValuePattern.cs,SetValue,The length of the statement  "//            object currentPropertyValue = this._el.GetCurrentPropertyValue(AutomationElementIdentifiers.IsEnabledProperty); " is 125.
Long Statement,UIAutomation,SelectionPatternInformation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaSelectionPattern.cs,GetSelection,The length of the statement  "                // AutomationElement[] nativeElements = (AutomationElement[])this._selectionPattern.GetParentElement().GetPatternPropertyValue(SelectionPattern.SelectionProperty' this._useCache); " is 179.
Long Statement,UIAutomation,SelectionPatternInformation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaSelectionPattern.cs,GetSelection,The length of the statement  "                var nativeElements = (classic.AutomationElement[])_selectionPattern.GetParentElement().GetPatternPropertyValue(classic.SelectionPattern.SelectionProperty' _useCache); " is 166.
Long Statement,UIAutomation,TableItemPatternInformation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTableItemPattern.cs,GetRowHeaderItems,The length of the statement  "                // return (AutomationElement[])this._el.GetPatternPropertyValue(TableItemPattern.RowHeaderItemsProperty' this._useCache); " is 121.
Long Statement,UIAutomation,TableItemPatternInformation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTableItemPattern.cs,GetRowHeaderItems,The length of the statement  "                // AutomationElement[] nativeElements = (AutomationElement[])this._tableItemPattern.GetParentElement().GetPatternPropertyValue(TableItemPattern.RowHeaderItemsProperty' this._useCache); " is 184.
Long Statement,UIAutomation,TableItemPatternInformation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTableItemPattern.cs,GetRowHeaderItems,The length of the statement  "                var nativeElements = (classic.AutomationElement[])_tableItemPattern.GetParentElement().GetPatternPropertyValue(classic.TableItemPattern.RowHeaderItemsProperty' _useCache); " is 171.
Long Statement,UIAutomation,TableItemPatternInformation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTableItemPattern.cs,GetColumnHeaderItems,The length of the statement  "                // return (AutomationElement[])this._el.GetPatternPropertyValue(TableItemPattern.ColumnHeaderItemsProperty' this._useCache); " is 124.
Long Statement,UIAutomation,TableItemPatternInformation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTableItemPattern.cs,GetColumnHeaderItems,The length of the statement  "                // AutomationElement[] nativeElements = (AutomationElement[])this._tableItemPattern.GetParentElement().GetPatternPropertyValue(TableItemPattern.ColumnHeaderItemsProperty' this._useCache); " is 187.
Long Statement,UIAutomation,TableItemPatternInformation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTableItemPattern.cs,GetColumnHeaderItems,The length of the statement  "                var nativeElements = (classic.AutomationElement[])_tableItemPattern.GetParentElement().GetPatternPropertyValue(classic.TableItemPattern.ColumnHeaderItemsProperty' _useCache); " is 174.
Long Statement,UIAutomation,TablePatternInformation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTablePattern.cs,GetRowHeaders,The length of the statement  "                // AutomationElement[] nativeElements = (AutomationElement[])this._tablePattern.GetParentElement().GetPatternPropertyValue(TablePattern.RowHeadersProperty' this._useCache); " is 172.
Long Statement,UIAutomation,TablePatternInformation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTablePattern.cs,GetRowHeaders,The length of the statement  "                var nativeElements = (classic.AutomationElement[])_tablePattern.GetParentElement().GetPatternPropertyValue(classic.TablePattern.RowHeadersProperty' _useCache); " is 159.
Long Statement,UIAutomation,TablePatternInformation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTablePattern.cs,GetColumnHeaders,The length of the statement  "                // AutomationElement[] nativeElements = (AutomationElement[])this._tablePattern.GetParentElement().GetPatternPropertyValue(TablePattern.ColumnHeadersProperty' this._useCache); " is 175.
Long Statement,UIAutomation,TablePatternInformation,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTablePattern.cs,GetColumnHeaders,The length of the statement  "                var nativeElements = (classic.AutomationElement[])_tablePattern.GetParentElement().GetPatternPropertyValue(classic.TablePattern.ColumnHeadersProperty' _useCache); " is 162.
Long Statement,UIAutomation,UiaTextPattern,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTextPattern.cs,RangeFromChild,The length of the statement  "//            SafeTextRangeHandle hTextRange = UiaCoreApi.TextPattern_RangeFromChild(this._hPattern' childElement.RawNode); " is 123.
Long Statement,UIAutomation,UiaTextPattern,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiaTextPattern.cs,RangeFromPoint,The length of the statement  "//            if (screenLocation.X < rect.Left || screenLocation.X >= rect.Right || screenLocation.Y < rect.Top || screenLocation.Y >= rect.Bottom) { " is 149.
Long Statement,UIAutomation,ErrorHandlingAspect,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Aspects\ErrorHandlingAspect.cs,Intercept,The length of the statement  "                    new Exception("Class " + invocation.TargetType.Name + "' method " + invocation.Method.Name + ": " + eOnInvocation.Message); " is 123.
Long Statement,UIAutomation,HighlighterAspect,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Aspects\HighlighterAspect.cs,Intercept,The length of the statement  "            // if (invocation.TargetType.IsSubclassOf(typeof(UiaCommand)) && null != (invocation.ReturnValue as IUiElement)) { // taboo " is 123.
Long Statement,UIAutomation,HighlighterAspect,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Aspects\HighlighterAspect.cs,Intercept,The length of the statement  "//                if (null != cmdlet.MyInvocation.MyCommand.OutputType && 0 < cmdlet.MyInvocation.MyCommand.OutputType.Count) { " is 127.
Long Statement,UIAutomation,ControlFromWin32Provider,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ControlProviders\ControlFromWin32Provider.cs,LoadElements,The length of the statement  "            return HandleCollector.GetElementsFromHandles(HandleCollector.CollectRecursively(controlSearcherData.InputObject' controlSearcherData.Name' 1)); " is 144.
Long Statement,UIAutomation,ExtensionMethodsCollection,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsCollection.cs,GetElementsByWildcard,The length of the statement  "                      // wildcardValue.IsMatch((collectionItem.GetCurrentPattern(classic.ValuePattern.Pattern) as IValuePattern).Current.Value) : " is 123.
Long Statement,UIAutomation,ExtensionMethodsCollection,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsCollection.cs,GetElementsByWildcard,The length of the statement  "                      // wildcardValue.IsMatch((collectionItem.GetCurrentPattern<IValuePattern' ValuePattern>(classic.ValuePattern.Pattern) as IValuePattern).Current.Value) : " is 152.
Long Statement,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,GetAncestorWithHandle,The length of the statement  "                IUiElement testparent = AutomationFactory.GetUiElement(walker.GetParent(element.GetSourceElement() as classic.AutomationElement)); " is 130.
Long Statement,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,GetParentOrAncestor,The length of the statement  "                IUiElement testParent = AutomationFactory.GetUiElement(walker.GetParent(element.GetSourceElement() as classic.AutomationElement)); " is 130.
Long Statement,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,CollectAncestors,The length of the statement  "                            if (AutomationFactory.GetUiElement(walker.GetParent(testParent.GetSourceElement() as classic.AutomationElement)) == cmdlet.OddRootElement) { " is 140.
Long Statement,UIAutomation,ExtensionMethodsElementExtended,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementExtended.cs,PerformInvokeContextMenu,The length of the statement  "            return holder.GetParentElement().InvokeContextMenu(cmdlet' Preferences.ClickOnControlByCoordX' Preferences.ClickOnControlByCoordY); " is 131.
Long Statement,UIAutomation,ExtensionMethodsElementExtended,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementExtended.cs,MoveCursorToControlPosition,The length of the statement  "                (element.GetCurrent().BoundingRectangle.X + Preferences.ClickOnControlByCoordX) / Screen.PrimaryScreen.Bounds.Width * 65535' " is 124.
Long Statement,UIAutomation,ExtensionMethodsElementExtended,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementExtended.cs,MoveCursorToControlPosition,The length of the statement  "                (element.GetCurrent().BoundingRectangle.Y + Preferences.ClickOnControlByCoordY) / Screen.PrimaryScreen.Bounds.Height * 65535); " is 126.
Long Statement,UIAutomation,ExtensionMethodsElementCommon,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementCommon.cs,PerformNavigateToNextSibling,The length of the statement  "                result = AutomationFactory.GetUiElement(walker.GetNextSibling(element.GetSourceElement() as classic.AutomationElement)); " is 120.
Long Statement,UIAutomation,ExtensionMethodsElementCommon,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementCommon.cs,PerformNavigateToPreviousSibling,The length of the statement  "                result = AutomationFactory.GetUiElement(walker.GetPreviousSibling(element.GetSourceElement() as classic.AutomationElement)); " is 124.
Long Statement,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetExpandCollapseState,The length of the statement  "                return element.GetCurrentPattern<IExpandCollapsePattern>(classic.ExpandCollapsePattern.Pattern).Current.ExpandCollapseState; " is 124.
Long Statement,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetContainingGridGridItemPattern,The length of the statement  "                // return AutomationFactory.GetUiElement(element.GetCurrentPattern<IGridItemPattern>(classic.GridItemPattern.Pattern).Current.ContainingGrid.GetSourceElement()); " is 161.
Long Statement,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetContainingGridGridItemPattern,The length of the statement  "                return AutomationFactory.GetUiElement(element.GetCurrentPattern<IGridItemPattern>(classic.GridItemPattern.Pattern).Current.ContainingGrid.GetSourceElement() as classic.AutomationElement); " is 187.
Long Statement,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformGetItem,The length of the statement  "                return AutomationFactory.GetUiElement(element.GetCurrentPattern<IGridPattern>(classic.GridPattern.Pattern).GetItem(row' column).GetSourceElement()); " is 148.
Long Statement,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformGetItem,The length of the statement  "                // IUiElement eltInExtMethod = AutomationFactory.GetUiElement(element.GetCurrentPattern<IGridPattern>(classic.GridPattern.Pattern).GetItem(row' column).GetSourceElement()); " is 172.
Long Statement,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformGetItem,The length of the statement  "                // IUiElement eltInExtMethod = AutomationFactory.GetUiElement(element.GetCurrentPattern<IGridPattern>(classic.GridPattern.Pattern).GetItem(row' column).GetSourceElement()); // as AutomationElement); " is 198.
Long Statement,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformSetScrollPercent,The length of the statement  "                element.GetCurrentPattern<IScrollPattern>(classic.ScrollPattern.Pattern).SetScrollPercent(horizontalPercent' verticalPercent); " is 126.
Long Statement,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetSelectionContainer,The length of the statement  "                return element.GetCurrentPattern<ISelectionItemPattern>(classic.SelectionItemPattern.Pattern).Current.SelectionContainer; " is 121.
Long Statement,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetContainingGridTableItemPattern,The length of the statement  "                // return AutomationFactory.GetUiElement(element.GetCurrentPattern<ITableItemPattern>(classic.TableItemPattern.Pattern).Current.ContainingGrid.GetSourceElement()); " is 163.
Long Statement,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetContainingGridTableItemPattern,The length of the statement  "                return AutomationFactory.GetUiElement(element.GetCurrentPattern<ITableItemPattern>(classic.TableItemPattern.Pattern).Current.ContainingGrid.GetSourceElement() as classic.AutomationElement); " is 189.
Long Statement,UIAutomation,ExSpyCode,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\ExSpyCode.cs,WritingAvailablePatterns,The length of the statement  "                        // (supportedPatterns[i].GetSourcePattern() as AutomationPattern).ProgrammaticName.Replace("Identifiers.Pattern"' string.Empty); " is 128.
Long Statement,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,ProcessingElement,The length of the statement  "                                    // switch ((ptrn.GetSourcePattern() as AutomationPattern).ProgrammaticName.Replace("Identifiers.Pattern"' string.Empty)) { " is 122.
Long Statement,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetCurrentPattern,The length of the statement  "                foreach (AutomationPattern ptrn in supportedPatterns.Where(ptrn => patternType.ProgrammaticName == ptrn.ProgrammaticName || " is 123.
Long Statement,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetCurrentPattern,The length of the statement  "                // foreach (AutomationPattern ptrn in supportedPatterns.Where(ptrn => patternType.ProgrammaticName == ptrn.ProgrammaticName || " is 126.
Long Statement,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetCurrentPattern,The length of the statement  "                // foreach (IBasePattern ptrn in supportedPatterns.Where(ptrn => patternType.ProgrammaticName == (ptrn as AutomationPattern).ProgrammaticName || " is 144.
Long Statement,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetCurrentPattern,The length of the statement  "                foreach (IBasePattern ptrn in supportedPatterns.Where(ptrn => patternType.ProgrammaticName == (ptrn.GetSourcePattern() as classic.AutomationPattern).ProgrammaticName || " is 168.
Long Statement,UIAutomation,WizardHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\WizardHelper.cs,AddWizardStep,The length of the statement  "                cmdlet.WriteError(cmdlet' "The wizard object you provided is not valid"' "WrongWizardObject"' ErrorCategory.InvalidArgument' true); " is 131.
Long Statement,UIAutomation,WizardHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\WizardHelper.cs,InvokeWizard,The length of the statement  "                cmdlet.WriteError(cmdlet' "Couldn't get the wizard you asked for"' "NoSuchWizard"' ErrorCategory.InvalidArgument' true); " is 120.
Long Statement,UIAutomation,WizardHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\WizardHelper.cs,InvokeWizard,The length of the statement  "//                    System.Management.Automation.Runspaces.Runspace.DefaultRunspace.SessionStateProxy.GetVariable(".SessionStateProxy.PSVariable.Set( " is 151.
Long Statement,UIAutomation,ChildKernelModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ChildKernelModule.cs,Load,The length of the statement  "//            Bind<IExpandCollapsePatternInformation>().To<UiaExpandCollapsePattern.ExpandCollapsePatternInformation>().InCallScope(); " is 134.
Long Statement,UIAutomation,ChildKernelModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ChildKernelModule.cs,Load,The length of the statement  "//            Bind<IRangeValuePatternInformation>().To<UiaRangeValuePattern.RangeValuePatternInformation>().InCallScope(); " is 122.
Long Statement,UIAutomation,ChildKernelModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ChildKernelModule.cs,Load,The length of the statement  "//            // Bind<IScrollItemPatternInformation>().To<UiaScrollItemPattern.ScrollItemPatternInformation>().InCallScope(); " is 125.
Long Statement,UIAutomation,ChildKernelModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ChildKernelModule.cs,Load,The length of the statement  "//            // Bind<ISelectionItemPatternInformation>().To<UiaSelectionItemPattern.SelectionItemPatternInformation>().InCallScope(); " is 134.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "//            Bind<IExpandCollapsePatternInformation>().To<UiaExpandCollapsePattern.ExpandCollapsePatternInformation>().InCallScope(); " is 134.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "//            Bind<IRangeValuePatternInformation>().To<UiaRangeValuePattern.RangeValuePatternInformation>().InCallScope(); " is 122.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "//            // Bind<IScrollItemPatternInformation>().To<UiaScrollItemPattern.ScrollItemPatternInformation>().InCallScope(); " is 125.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "//            // Bind<ISelectionItemPatternInformation>().To<UiaSelectionItemPattern.SelectionItemPatternInformation>().InCallScope(); " is 134.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "// ============================================================================================================================= " is 128.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<IDockPatternInformation>().To<UiaDockPattern.DockPatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 126.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<IExpandCollapsePatternInformation>().To<UiaExpandCollapsePattern.ExpandCollapsePatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 156.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<IGridItemPatternInformation>().To<UiaGridItemPattern.GridItemPatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 138.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<IGridPatternInformation>().To<UiaGridPattern.GridPatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 126.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<IRangeValuePatternInformation>().To<UiaRangeValuePattern.RangeValuePatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 144.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            // Bind<IScrollItemPatternInformation>().To<UiaScrollItemPattern.ScrollItemPatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 147.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<IScrollPatternInformation>().To<UiaScrollPattern.ScrollPatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 132.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            // Bind<ISelectionItemPatternInformation>().To<UiaSelectionItemPattern.SelectionItemPatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 156.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<ISelectionPatternInformation>().To<UiaSelectionPattern.SelectionPatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 141.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<ITableItemPatternInformation>().To<UiaTableItemPattern.TableItemPatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 141.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<ITablePatternInformation>().To<UiaTablePattern.TablePatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 129.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<ITogglePatternInformation>().To<UiaTogglePattern.TogglePatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 132.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<ITransformPatternInformation>().To<UiaTransformPattern.TransformPatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 141.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<IValuePatternInformation>().To<UiaValuePattern.ValuePatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 129.
Long Statement,UIAutomation,ObjectLifecycleModule,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\ObjectLifecycleModule.cs,Load,The length of the statement  "            Bind<IWindowPatternInformation>().To<UiaWindowPattern.WindowPatternInformation>().InScope(ctx => AutomationFactory.ScopeChangeFlag); " is 132.
Long Statement,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,ConvertToProxiedCommand,The length of the statement  "                        // new LoggingAspect()' new InputValidationAspect()' new ErrorHandlingAspect()' new HighlighterAspect()' new TestResultAspect()); " is 129.
Long Statement,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,ConvertToProxiedCommand,The length of the statement  "                        new LoggingAspect()' new InputValidationAspect()' new ErrorHandlingAspect()' new HighlighterAspect()' new TestResultAspect()' new FaultInjectionAspect()); " is 154.
Long Statement,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,GetUiElement,The length of the statement  "                // if (Preferences.UseElementsPatternObjectModel || Preferences.UseElementsSearchObjectModel || Preferences.UseElementsCached || Preferences.UseElementsCurrent) { " is 162.
Long Statement,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,GetUiElement,The length of the statement  "                // if (Preferences.UseElementsPatternObjectModel || Preferences.UseElementsSearchObjectModel || Preferences.UseElementsCached || Preferences.UseElementsCurrent) { " is 162.
Long Statement,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,GetUiElement,The length of the statement  "                // if (Preferences.UseElementsPatternObjectModel || Preferences.UseElementsSearchObjectModel || Preferences.UseElementsCached || Preferences.UseElementsCurrent) { " is 162.
Long Statement,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,GetUiEltCollection,The length of the statement  "//                      adapterCollection = Kernel.Get<IUiEltCollection>("AutomationElementCollection.NET"' manyElements); " is 122.
Long Statement,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,SearchByContainsTextViaWin32,The length of the statement  "                        // if (!String.Equals(elementToChoose.Current.ControlType.ProgrammaticName.Substring(12)' controlTypeName' StringComparison.CurrentCultureIgnoreCase)) { " is 152.
Long Statement,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,SearchByContainsTextViaWin32,The length of the statement  "                        if (!String.Equals(elementToChoose.GetCurrent().ControlType.ProgrammaticName.Substring(12)' controlTypeName' StringComparison.CurrentCultureIgnoreCase)) { " is 154.
Long Statement,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,SearchByExactConditionsViaUia,The length of the statement  "            return tempCollection.ToArray().Where(element => TestControlWithAllSearchCriteria(searchCriteria' element)).ToList<IUiElement>(); " is 129.
Long Statement,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,SearchByWildcardOrRegexViaUia,The length of the statement  "                        foreach (IUiElement tempElement2 in tempList.Where(elt => TestControlWithAllSearchCriteria(data.SearchCriteria' elt))) { " is 120.
Long Statement,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,SearchByWildcardViaWin32,The length of the statement  "                    // goFurther &= !data.ControlType.Any(controlTypeName => String.Equals(tempElement3.Current.ControlType.ProgrammaticName.Substring(12)' controlTypeName' StringComparison.CurrentCultureIgnoreCase)); " is 197.
Long Statement,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,SearchByWildcardViaWin32,The length of the statement  "                    goFurther &= !data.ControlType.Any(controlTypeName => String.Equals(tempElement3.GetCurrent().ControlType.ProgrammaticName.Substring(12)' controlTypeName' StringComparison.CurrentCultureIgnoreCase)); " is 199.
Long Statement,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,GetControlTypeCondition,The length of the statement  "                // controlTypeNames.Select(controlTypeName => new PropertyCondition(AutomationElement.ControlTypeProperty' UiaHelper.GetControlTypeByTypeName(controlTypeName))).ToList(); " is 170.
Long Statement,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,GetControlTypeCondition,The length of the statement  "                controlTypeNames.Select(controlTypeName => new classic.PropertyCondition(classic.AutomationElement.ControlTypeProperty' UiaHelper.GetControlTypeByTypeName(controlTypeName))).ToList<classic.PropertyCondition>(); " is 210.
Long Statement,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,GetControlTypeCondition,The length of the statement  "            return 1 == controlTypeCollection.Count ? (classic.Condition)controlTypeCollection[0] : (classic.Condition)GetOrCondition(controlTypeCollection); " is 145.
Long Statement,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,AfterSearchHook,The length of the statement  "                if (null != (SearcherData as WindowSearcherData).SearchCriteria && 0 < (SearcherData as WindowSearcherData).SearchCriteria.Length) { " is 132.
Long Statement,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,AfterSearchHook,The length of the statement  "                if (null != (SearcherData as WindowSearcherData).WithControl && 0 < (SearcherData as WindowSearcherData).WithControl.Length) { " is 126.
Long Statement,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,AfterSearchHook,The length of the statement  "            Wait &= !(SearcherData as WindowSearcherData).WaitNoWindow || !wasFound || (null != ResultCollection && 0 != ResultCollection.Count); " is 133.
Long Statement,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,AfterSearchHook,The length of the statement  "            if ((SearcherData as WindowSearcherData).WaitNoWindow && !wasFound && null != ResultCollection && 0 != ResultCollection.Count) { " is 128.
Long Statement,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,GetWindowCollectionFromProcess,The length of the statement  "            data.ProcessIds = (from process in data.InputObject where null != process && 0 != process.Id select process.Id).ToList().ToArray(); " is 131.
Long Statement,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,GetWindowCollectionByProcessName,The length of the statement  "            data.InputObject = data.ProcessNames.SelectMany(processName => Process.GetProcessesByName(processName)).ToList().ToArray(); " is 123.
Long Statement,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,ReturnOnlyRightElements,The length of the statement  "                                         (item.GetSupportedPatterns().AsQueryable<IBasePattern>().Any(pattern => null != pattern && null != (pattern as IValuePattern)) ? " is 128.
Long Statement,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,WriteLog,The length of the statement  "            WriteLog(logLevel' "Script: '" + errorRecord.InvocationInfo.ScriptName + "'' line: " + errorRecord.InvocationInfo.Line); " is 120.
Long Statement,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,WriteObjectMethod020Highlight,The length of the statement  "            // if (element == null || !(element is IUiElement) || null == element.Current || (int) element.Current.ProcessId <= 0) return; " is 126.
Long Statement,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,WriteObjectMethod020Highlight,The length of the statement  "            if (element == null || !(element is IUiElement) || null == element.GetCurrent() || (int) element.GetCurrent().ProcessId <= 0) return; " is 133.
Long Statement,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsWithWalker,The length of the statement  "                IUiElement oneMoreElement = AutomationFactory.GetUiElement(walker.GetFirstChild(element.GetSourceElement() as classic.AutomationElement)); " is 138.
Long Statement,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsWithWalker,The length of the statement  "                    oneMoreElement = AutomationFactory.GetUiElement(walker.GetNextSibling(oneMoreElement.GetSourceElement() as classic.AutomationElement)); " is 135.
Long Statement,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,ElementOfPossibleControlType,The length of the statement  "            foreach (string controlTypeName in controlType.Where(controlTypeName => String.Equals(controlTypeName' elementControlType' StringComparison.CurrentCultureIgnoreCase))) " is 167.
Long Statement,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsSiblings,The length of the statement  "            foreach (IUiElement sibling in from inputObject in InputObject let sibling = null select nextSibling ? ObjectsFactory.GetUiElement(walker.GetNextSibling(inputObject.GetSourceElement())) : ObjectsFactory.GetUiElement(walker.GetPreviousSibling(inputObject.GetSourceElement()))) " is 275.
Long Statement,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsSiblings,The length of the statement  "            // foreach (IUiElement sibling in from inputObject in InputObject let sibling = null select nextSibling ? AutomationFactory.GetUiElement(walker.GetNextSibling(inputObject.GetSourceElement() as AutomationElement)) : AutomationFactory.GetUiElement(walker.GetPreviousSibling(inputObject.GetSourceElement() as AutomationElement))) " is 326.
Long Statement,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsSiblings,The length of the statement  "                // sibling = nextSibling ? AutomationFactory.GetUiElement(walker.GetNextSibling(inputObject.GetSourceElement())) : AutomationFactory.GetUiElement(walker.GetPreviousSibling(inputObject.GetSourceElement())); " is 205.
Long Statement,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsSiblings,The length of the statement  "                sibling = nextSibling ? AutomationFactory.GetUiElement(walker.GetNextSibling(inputObject.GetSourceElement() as classic.AutomationElement)) : AutomationFactory.GetUiElement(walker.GetPreviousSibling(inputObject.GetSourceElement() as classic.AutomationElement)); " is 260.
Long Statement,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsSiblings,The length of the statement  "                //sibling = nextSibling ? (new UiElement(walker.GetNextSibling(inputObject.SourceElement))) : (new UiElement(walker.GetPreviousSibling(inputObject.SourceElement))); " is 164.
Long Statement,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsSiblings,The length of the statement  "                sibling = nextSibling ? ObjectsFactory.GetUiElement(walker.GetNextSibling(inputObject.SourceElement)) : ObjectsFactory.GetUiElement(walker.GetPreviousSibling(inputObject.SourceElement)); " is 186.
Long Statement,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The length of the statement  "                    NativeMethods.keybd_event((byte)NativeMethods.VK_LCONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0); " is 137.
Long Statement,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The length of the statement  "                    NativeMethods.keybd_event((byte)NativeMethods.VK_LSHIFT' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0); " is 135.
Long Statement,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,SubscribeToEvents,The length of the statement  "                            if (cmdlet.PassThru) { cmdlet.WriteObject(cmdlet' uiaPropertyChangedEventHandler); } else { cmdlet.WriteObject(cmdlet' true); } " is 127.
Long Statement,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,SubscribeToEvents,The length of the statement  "                        if (cmdlet.PassThru) { cmdlet.WriteObject(cmdlet' uiaStructureChangedEventHandler); } else { cmdlet.WriteObject(cmdlet' true); } " is 128.
Long Statement,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,SubscribeToEvents,The length of the statement  "                        if (cmdlet.PassThru) { cmdlet.WriteObject(cmdlet' uiaFocusChangedEventHandler); } else { cmdlet.WriteObject(cmdlet' true); } " is 124.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallDockPatternForGet,The length of the statement  "//                // DockPattern dockPattern = control.GetCurrentPattern<IDockPattern' DockPattern>(classic.DockPattern.Pattern) as DockPattern; " is 144.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallDockPatternForSet,The length of the statement  "//                // DockPattern dockPattern = control.GetCurrentPattern<IDockPattern' DockPattern>(classic.DockPattern.Pattern) as DockPattern; " is 144.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallWindowPattern,The length of the statement  "                // WindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern' WindowPattern>(classic.WindowPattern.Pattern) as WindowPattern; " is 138.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallValuePatternForSet,The length of the statement  "//                // IValuePattern valuePatternSet = control.GetCurrentPattern<IValuePattern' ValuePattern>(); //ValuePattern.Pattern); " is 135.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallValuePatternForSet,The length of the statement  "//                IValuePattern valuePatternSet = control.GetCurrentPattern<IValuePattern>(classic.ValuePattern.Pattern); " is 121.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallValuePatternForGet,The length of the statement  "//                IValuePattern valuePatternGet = control.GetCurrentPattern<IValuePattern>(classic.ValuePattern.Pattern); " is 121.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForRotate,The length of the statement  "//                // TransformPattern transformRotatePattern = control.GetCurrentPattern(classic.TransformPattern.Pattern) as TransformPattern; " is 143.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForRotate,The length of the statement  "//                // TransformPattern transformRotatePattern = control.GetCurrentPattern<ITransformPattern' TransformPattern>(classic.TransformPattern.Pattern) as TransformPattern; " is 180.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForRotate,The length of the statement  "//                ITransformPattern transformRotatePattern = control.GetCurrentPattern<ITransformPattern>(classic.TransformPattern.Pattern); " is 140.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForRotate,The length of the statement  "//                    transformRotatePattern.Rotate(((InvokeUiaTransformPatternRotateCommand)Child).TransformRotateDegrees); " is 124.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForResize,The length of the statement  "                control.PerformResize(((InvokeUiaTransformPatternResizeCommand)Child).TransformResizeWidth' ((InvokeUiaTransformPatternResizeCommand)Child).TransformResizeHeight); " is 163.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForResize,The length of the statement  "//                // TransformPattern transformResizePattern = control.GetCurrentPattern(classic.TransformPattern.Pattern) as TransformPattern; " is 143.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForResize,The length of the statement  "//                // TransformPattern transformResizePattern = control.GetCurrentPattern<ITransformPattern' TransformPattern>(classic.TransformPattern.Pattern) as TransformPattern; " is 180.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForResize,The length of the statement  "//                ITransformPattern transformResizePattern = control.GetCurrentPattern<ITransformPattern>(classic.TransformPattern.Pattern); " is 140.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForResize,The length of the statement  "//                    transformResizePattern.Resize(((InvokeUiaTransformPatternResizeCommand)Child).TransformResizeWidth' ((InvokeUiaTransformPatternResizeCommand)Child).TransformResizeHeight); " is 193.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForMove,The length of the statement  "                control.PerformMove(((InvokeUiaTransformPatternMoveCommand)Child).TransformMoveX' ((InvokeUiaTransformPatternMoveCommand)Child).TransformMoveY); " is 144.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForMove,The length of the statement  "//                // TransformPattern transformMovePattern = control.GetCurrentPattern(classic.TransformPattern.Pattern) as TransformPattern; " is 141.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForMove,The length of the statement  "//                // TransformPattern transformMovePattern = control.GetCurrentPattern<ITransformPattern' TransformPattern>(classic.TransformPattern.Pattern) as TransformPattern; " is 178.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForMove,The length of the statement  "//                ITransformPattern transformMovePattern = control.GetCurrentPattern<ITransformPattern>(classic.TransformPattern.Pattern); " is 138.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTransformPatternForMove,The length of the statement  "//                    transformMovePattern.Move(((InvokeUiaTransformPatternMoveCommand)Child).TransformMoveX' ((InvokeUiaTransformPatternMoveCommand)Child).TransformMoveY); " is 172.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTogglePatternForGet,The length of the statement  "//                ITogglePattern togglePattern = control.GetCurrentPattern<ITogglePattern>(classic.TogglePattern.Pattern); " is 122.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTextPatternForSet,The length of the statement  "                // TextPattern textPatternSet = control.GetCurrentPattern<ITextPattern' TextPattern>(classic.TextPattern.Pattern) as TextPattern; " is 129.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTextPatternForGet,The length of the statement  "                // TextPattern textPatternGet = control.GetCurrentPattern<ITextPattern' TextPattern>(classic.TextPattern.Pattern) as TextPattern; " is 129.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTablePattern,The length of the statement  "                // TablePattern tablePattern = control.GetCurrentPattern<ITablePattern' TablePattern>(classic.TablePattern.Pattern) as TablePattern; " is 132.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTableItemPattern,The length of the statement  "                // TableItemPattern tableItemPattern = control.GetCurrentPattern<ITableItemPattern' TableItemPattern>(classic.TableItemPattern.Pattern) as TableItemPattern; " is 156.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallSelectionPattern,The length of the statement  "                    IUiElement[] selection = AutomationFactory.GetUiEltCollection(selPattern.Current.GetSelection()).Cast<UiElement>().ToArray(); " is 125.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallSelectedItemPattern,The length of the statement  "                ISelectionItemPattern selItemPattern = control.GetCurrentPattern<ISelectionItemPattern>(classic.SelectionItemPattern.Pattern); " is 126.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallSelectionItemPatternForState,The length of the statement  "                ISelectionItemPattern selItemPattern = control.GetCurrentPattern<ISelectionItemPattern>(classic.SelectionItemPattern.Pattern); " is 126.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallSelectionItemPattern,The length of the statement  "                ISelectionItemPattern selItemPattern = control.GetCurrentPattern<ISelectionItemPattern>(classic.SelectionItemPattern.Pattern); " is 126.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallSelectionItemPattern,The length of the statement  "                            // SelectionPattern selPatternTemp = control.GetCurrentPattern<ISelectionItemPattern' SelectionItemPattern>(classic.SelectionPattern.Pattern) as SelectionPattern; " is 162.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallSelectionItemPattern,The length of the statement  "                                // IUiElement[] selection = AutomationFactory.GetUiEltCollection(selPatternTemp.Current.GetSelection()).Cast<UiElement>().ToArray(); " is 132.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallScrollPattern,The length of the statement  "                // ScrollPattern scPattern = control.GetCurrentPattern<IScrollPattern' ScrollPattern>(classic.ScrollPattern.Pattern) as ScrollPattern; " is 134.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallScrollItemPattern,The length of the statement  "//                // ScrollItemPattern sciPattern = control.GetCurrentPattern(classic.ScrollItemPattern.Pattern) as ScrollItemPattern; " is 134.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallScrollItemPattern,The length of the statement  "//                // ScrollItemPattern sciPattern = control.GetCurrentPattern<IScrollItemPattern' ScrollItemPattern>(classic.ScrollItemPattern.Pattern) as ScrollItemPattern; " is 173.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallScrollItemPattern,The length of the statement  "//                // IScrollItemPattern sciPattern = control.GetCurrentPattern<IScrollItemPattern' ScrollItemPattern>(); " is 120.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallScrollItemPattern,The length of the statement  "//                IScrollItemPattern sciPattern = control.GetCurrentPattern<IScrollItemPattern>(classic.ScrollItemPattern.Pattern); " is 131.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallRangeValuePatternForSet,The length of the statement  "                // RangeValuePattern rvPatternSet = control.GetCurrentPattern<IRangeValuePattern' RangeValuePattern>(classic.RangeValuePattern.Pattern) as RangeValuePattern; " is 157.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallRangeValuePatternForGet,The length of the statement  "                // RangeValuePattern rvPatternGet = control.GetCurrentPattern<IRangeValuePattern' RangeValuePattern>(classic.RangeValuePattern.Pattern) as RangeValuePattern; " is 157.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallGridPattern,The length of the statement  "                // GridPattern gridPattern = control.GetCurrentPattern<IGridPattern' GridPattern>(classic.GridPattern.Pattern) as GridPattern; " is 126.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallGridItemPattern,The length of the statement  "                // GridItemPattern gridItemPattern = control.GetCurrentPattern<IGridItemPattern' GridItemPattern>(classic.GridItemPattern.Pattern) as GridItemPattern; " is 150.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallCollapsePattern,The length of the statement  "//                // IExpandCollapsePattern collapsePattern = control.GetCurrentPattern<IExpandCollapsePattern' ExpandCollapsePattern>(); " is 137.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallCollapsePattern,The length of the statement  "//                IExpandCollapsePattern collapsePattern = control.GetCurrentPattern<IExpandCollapsePattern>(classic.ExpandCollapsePattern.Pattern); " is 148.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallExpandPattern,The length of the statement  "//                // IExpandCollapsePattern expandPattern = control.GetCurrentPattern<IExpandCollapsePattern' ExpandCollapsePattern>(); " is 135.
Long Statement,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallExpandPattern,The length of the statement  "//                IExpandCollapsePattern expandPattern = control.GetCurrentPattern<IExpandCollapsePattern>(classic.ExpandCollapsePattern.Pattern); " is 146.
Long Statement,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,The length of the statement  "//                foreach (AutomationElementCollection tableItems in ((IAutomationElementCollection)this.InputObject).Select(inputObject => inputObject.FindAll( " is 160.
Long Statement,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,The length of the statement  "                                                NativeMethods.keybd_event(NativeMethods.VK_LCONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0); " is 131.
Long Statement,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,The length of the statement  "                                                NativeMethods.keybd_event((byte)NativeMethods.VK_LCONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0); " is 137.
Long Statement,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,The length of the statement  "                                                NativeMethods.keybd_event(NativeMethods.VK_RCONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0); " is 131.
Long Statement,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,The length of the statement  "                                                NativeMethods.keybd_event((byte)NativeMethods.VK_RCONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0); " is 137.
Long Statement,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,The length of the statement  "                                                NativeMethods.keybd_event(NativeMethods.VK_CONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0); " is 130.
Long Statement,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,The length of the statement  "                                                NativeMethods.keybd_event((byte)NativeMethods.VK_CONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0); " is 136.
Long Statement,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,The length of the statement  "                                                        NativeMethods.keybd_event((byte)NativeMethods.VK_LCONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0); " is 137.
Long Statement,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,The length of the statement  "                                                        NativeMethods.keybd_event((byte)NativeMethods.VK_RCONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0); " is 137.
Long Statement,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,The length of the statement  "                                                        NativeMethods.keybd_event((byte)NativeMethods.VK_CONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0); " is 136.
Long Statement,UIAutomation,WaitCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\WaitCmdletBase.cs,WaitIfCondition,The length of the statement  "                    // tempIsReport = isEnabledOrIsVisible ? _control.Current.IsEnabled.ToString() : _control.Current.IsOffscreen.ToString(); " is 121.
Long Statement,UIAutomation,WaitCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\WaitCmdletBase.cs,WaitIfCondition,The length of the statement  "                    tempIsReport = isEnabledOrIsVisible ? _control.GetCurrent().IsEnabled.ToString() : _control.GetCurrent().IsOffscreen.ToString(); " is 128.
Long Statement,UIAutomation,SetUiaDateTimePickerDate,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\pull requests\UIAutomation.cs,injectMemory,The length of the statement  "                NativeMethods.AllocationType.Commit | NativeMethods.AllocationType.Reserve' NativeMethods.MemoryProtection.ExecuteReadWrite); " is 125.
Complex Conditional,UIAutomation.Commands,ConvertToUiaSearchCriteriaCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Convert\ConvertToUiaSearchCriteriaCommand.cs,GetPropertyCompleteString,The conditional expression  "(Full) ||                  // (IsIncluded(propertyName) &&                  // (IsInArray(Include' propertyName) &&                  // !IsExcluded(propertyName))) {                  // !IsInArray(Exclude' propertyName))) {                                    (!IsInArray(Exclude' propertyName) &&                  (0 == Include.Length || IsInArray(Include' propertyName)))"  is complex.
Complex Conditional,UIAutomation.Commands,StartUiaTranscriptCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\StartUIATranscriptCommand.cs,GetControlTypeNameOfAutomationElement,The conditional expression  "element != null && (int)element.GetCurrent().ProcessId > 0 &&                   element2 != null && (int)element2.GetCurrent().ProcessId > 0"  is complex.
Complex Conditional,UIAutomation.Helpers.Commands,GetWindowCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Get\GetWindowCommand.cs,Execute,The conditional expression  "null == cmdlet.ProcessName &&                          (null == cmdlet.Name && null == cmdlet.AutomationId && null == cmdlet.Class) &&                          null == cmdlet.ProcessId &&                          null == cmdlet.InputObject"  is complex.
Complex Conditional,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformToggle,The conditional expression  "(on && classic.ToggleState.Off == togglePattern.Current.ToggleState) ||                     !on && classic.ToggleState.On == togglePattern.Current.ToggleState"  is complex.
Complex Conditional,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,SearchForElements,The conditional expression  "(null != data.Name && data.Name.Length > 0) ||                             !string.IsNullOrEmpty(data.AutomationId) ||                             !string.IsNullOrEmpty(data.Class)"  is complex.
Complex Conditional,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,AfterSearchHook,The conditional expression  "(SearcherData as WindowSearcherData).WaitNoWindow && !wasFound && null != ResultCollection && 0 != ResultCollection.Count"  is complex.
Complex Conditional,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,GetWindowCollectionByPid,The conditional expression  "(null != data.Name && data.Name.Any()) ||                  !string.IsNullOrEmpty(data.AutomationId) ||                  !string.IsNullOrEmpty(data.Class)"  is complex.
Complex Conditional,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,GetWindowCollectionByPid,The conditional expression  "!data.Recurse ||                  // 20141001                  // ((null == data.Name || 0 == data.Name.Count()) && string.IsNullOrEmpty(data.AutomationId) &&                  ((null == data.Name || !data.Name.Any()) && string.IsNullOrEmpty(data.AutomationId) &&                   string.IsNullOrEmpty(data.Class))"  is complex.
Complex Conditional,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,WriteObjectMethod020Highlight,The conditional expression  "element == null || !(element is IUiElement) || null == element.GetCurrent() || (int) element.GetCurrent().ProcessId <= 0"  is complex.
Complex Conditional,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,WriteErrorMethod030ChangeTimeoutSettings,The conditional expression  "!terminating ||                  ((null != CurrentData.LastResult || null != CurrentData.CurrentWindow) &&                   (null != CurrentData.LastResult || !((HasTimeoutCmdletBase) cmdlet).IsCritical))"  is complex.
Complex Conditional,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsWithWalker,The conditional expression  "(onlyTopLevel || onlyOneResult) && (null != resultCollection) && resultCollection.Count > 0"  is complex.
Complex Conditional,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsWithWalker,The conditional expression  "(onlyTopLevel || onlyOneResult) && (null != resultCollection) && resultCollection.Count > 0"  is complex.
Complex Conditional,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,ProcessAutomationElement,The conditional expression  "(controlType != null &&                   controlType.Length > 0 &&                   ElementOfPossibleControlType(                      controlType'                      // 20140312                      // element.Current.ControlType.ProgrammaticName)) ||                      element.GetCurrent().ControlType.ProgrammaticName)) ||                  (controlType == null) ||                  (controlType.Length == 0)"  is complex.
Complex Conditional,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIStructureChangedEvent,The conditional expression  "(e.StructureChangeType == classic.StructureChangeType.ChildAdded && Child.ChildAdded) ||                  (e.StructureChangeType == classic.StructureChangeType.ChildRemoved && Child.ChildRemoved) ||                  (e.StructureChangeType == classic.StructureChangeType.ChildrenBulkAdded && Child.ChildrenBulkAdded) ||                  (e.StructureChangeType == classic.StructureChangeType.ChildrenBulkRemoved && Child.ChildrenBulkRemoved) ||                  (e.StructureChangeType == classic.StructureChangeType.ChildrenInvalidated && Child.ChildrenInvalidated) ||                  (e.StructureChangeType == classic.StructureChangeType.ChildrenReordered && Child.ChildrenReordered)"  is complex.
Complex Conditional,UIAutomation,TranscriptCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\TranscriptCmdletBase.cs,WritingRecord,The conditional expression  "i != (recordList.Count - 1) && i != 0 && !tempString.Contains("Get-UiaChildWindow") && i != 1 &&                          !tempString.Contains("Tree") && !tempString.Contains("Menu") && !tempString.Contains("Tool") &&                          !tempString.Contains("Tab") && !tempString.Contains("Table") && !tempString.Contains("List") &&                          !tempString.Contains("Grid") && !tempString.Contains("Button") && !tempString.Contains("Combo")"  is complex.
Virtual Method Call from Constructor,UIAutomation,LogHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\LogHelper.cs,LogHelper,The constructor "LogHelper" calls a virtual method "Init".
Virtual Method Call from Constructor,UIAutomation,LogHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\LogHelper.cs,LogHelper,The constructor "LogHelper" calls a virtual method "Init".
Empty Catch Block,UIAutomation.Commands,UnregisterUiaEventCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Event\UnregisterUIAEventCommand.cs,ProcessRecord,The method has an empty catch block.
Empty Catch Block,UIAutomation.Commands,ShowUiaCurrentDataCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Settings\ShowUIACurrentDataCommand.cs,BeginProcessing,The method has an empty catch block.
Empty Catch Block,UIAutomation.Commands,StartUiaTranscriptCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\StartUIATranscriptCommand.cs,BeginProcessing,The method has an empty catch block.
Empty Catch Block,UIAutomation.Helpers.Commands,GetWindowCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Get\GetWindowCommand.cs,Execute,The method has an empty catch block.
Empty Catch Block,UIAutomation.Helpers.Commands,GetWindowCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Get\GetWindowCommand.cs,Execute,The method has an empty catch block.
Empty Catch Block,UIAutomation.Helpers.Commands,GetWindowCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Get\GetWindowCommand.cs,Execute,The method has an empty catch block.
Empty Catch Block,UIAutomation.Helpers.Commands,GetWindowCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Get\GetWindowCommand.cs,Execute,The method has an empty catch block.
Empty Catch Block,UIAutomation.Helpers.Commands,WaitEventRaisedCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Wait\WaitEventRaisedCommand.cs,Execute,The method has an empty catch block.
Empty Catch Block,UIAutomation.Helpers.Commands,WaitEventRaisedCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Wait\WaitEventRaisedCommand.cs,Execute,The method has an empty catch block.
Empty Catch Block,UIAutomation.Helpers.Commands,WaitEventRaisedCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Wait\WaitEventRaisedCommand.cs,Execute,The method has an empty catch block.
Empty Catch Block,UIAutomation.Helpers.Commands,WaitEventRaisedCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Wait\WaitEventRaisedCommand.cs,Execute,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Adapters\UiElement.cs,SetFocus,The method has an empty catch block.
Empty Catch Block,UIAutomation,LoggingAspect,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Aspects\LoggingAspect.cs,Intercept,The method has an empty catch block.
Empty Catch Block,UIAutomation,ControlFromWin32Provider,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ControlProviders\ControlFromWin32Provider.cs,FilterElements,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionsMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethods.cs,ConvertAutomationPatternToBasePattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,GetParent,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,CollectAncestors,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,CollectAncestors,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,CollectAncestors,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,GetElementPropertyString,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,GetElementPropertyString,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,GetIsValid,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElement,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElement.cs,CompareElementValueAndValueParameter,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementCommon,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementCommon.cs,PerformNavigateToParent,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementCommon,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementCommon.cs,PerformNavigateToFirstChild,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementCommon,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementCommon.cs,PerformNavigateToLastChild,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementCommon,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementCommon.cs,PerformNavigateToNextSibling,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementCommon,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementCommon.cs,PerformNavigateToPreviousSibling,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementCommon,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementCommon.cs,PerformConvertToSearchCriteria,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetDockPosition,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetExpandCollapseState,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetRowGridItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetColumnGridItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetRowSpanGridItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetColumnSpanGridItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetContainingGridGridItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformGetItem,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetRowCountGridPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetColumnCountGridPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformSetValueRangeValuePattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformGetValueRangeValuePattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetIsReadOnlyRangeValuePattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetMaximum,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetMinimum,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetLargeChange,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetSmallChange,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformSetScrollPercent,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformScroll,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformScrollHorizontal,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformScrollVertical,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetHorizontalScrollPercent,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetVerticalScrollPercent,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetHorizontalViewSize,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetVerticalViewSize,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetHorizontallyScrollable,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetVerticallyScrollable,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformSelect,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformAddToSelection,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformRemoveFromSelection,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetIsSelected,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetSelectionContainer,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformGetSelectionSelectionPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetCanSelectMultiple,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetIsSelectionRequired,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformGetRowHeaderItems,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformGetColumnHeaderItems,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetRowTableItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetColumnTableItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetRowSpanTableItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetColumnSpanTableItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetContainingGridTableItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformGetRowHeaders,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformGetColumnHeaders,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetRowCountTablePattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetColumnCountTablePattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetRowOrColumnMajor,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformGetSelectionTextPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformGetVisibleRanges,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformRangeFromChild,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformRangeFromPoint,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetDocumentRange,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetSupportedTextSelection,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformToggle,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformToggle,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetToggleState,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformMove,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformResize,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformRotate,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetCanMove,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetCanResize,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetCanRotate,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetIsReadOnlyValuePattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformSetWindowVisualState,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformClose,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,PerformWaitForInputIdle,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetCanMaximize,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetCanMinimize,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetIsModal,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetIsTopmost,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetWindowInteractionState,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExtensionMethodsElementPatterns,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementPatterns.cs,GetWindowVisualState,The method has an empty catch block.
Empty Catch Block,UIAutomation,ExecutionPlan,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\ExecutionPlan.cs,DisposeHighlighers,The method has an empty catch block.
Empty Catch Block,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,disposeSides,The method has an empty catch block.
Empty Catch Block,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,disposeSides,The method has an empty catch block.
Empty Catch Block,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,createHighlighter,The method has an empty catch block.
Empty Catch Block,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,getPoint,The method has an empty catch block.
Empty Catch Block,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,Show,The method has an empty catch block.
Empty Catch Block,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,Hide,The method has an empty catch block.
Empty Catch Block,UIAutomation,LabelForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,labelNumberMouseMove,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,Highlight,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,Highlight,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,HighlightCheckedControl,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,HideHighlighters,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,ShowBanner,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,HideBanner,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetScreenshotOfCmdletInput,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetScreenshotOfAutomationElement,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetScreenshotOfAutomationElement,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,ProcessingElement,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,ProcessingElement,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,ProcessingElement,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,ProcessingElement,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,ProcessingElement,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,ProcessingElement,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetAutomationElementFromHandle,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetAutomationElementFromPoint,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetCurrentPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetOutputStringUsingItemsValuePattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetSheridanTreeItemFromTreeNode,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,EnumChildWindowsFromHandle,The method has an empty catch block.
Empty Catch Block,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,Init,The method has an empty catch block.
Empty Catch Block,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,InitUnitTests,The method has an empty catch block.
Empty Catch Block,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,Reset,The method has an empty catch block.
Empty Catch Block,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,Reset,The method has an empty catch block.
Empty Catch Block,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,ConvertToProxiedElement,The method has an empty catch block.
Empty Catch Block,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,ConvertToProxiedObject,The method has an empty catch block.
Empty Catch Block,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,ConvertToProxiedCommand,The method has an empty catch block.
Empty Catch Block,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,SearchForElements,The method has an empty catch block.
Empty Catch Block,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,SearchForElements,The method has an empty catch block.
Empty Catch Block,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,GetWindowCollectionByName,The method has an empty catch block.
Empty Catch Block,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,GetWindowCollectionByPid,The method has an empty catch block.
Empty Catch Block,UIAutomation,WindowSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\WindowSearcher.cs,ReturnOnlyRightElements,The method has an empty catch block.
Empty Catch Block,UIAutomation,Wizard,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Types\Wizard.cs,GetActiveStep,The method has an empty catch block.
Empty Catch Block,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,EndProcessing,The method has an empty catch block.
Empty Catch Block,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,WriteObjectMethod020Highlight,The method has an empty catch block.
Empty Catch Block,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,WriteObjectMethod030RunScriptBlocks,The method has an empty catch block.
Empty Catch Block,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,WriteObjectMethod070Report,The method has an empty catch block.
Empty Catch Block,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,WriteObjectMethod070Report,The method has an empty catch block.
Empty Catch Block,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,RunWizardGetWindowScriptBlocks,The method has an empty catch block.
Empty Catch Block,UIAutomation,CommonCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\CommonCmdletBase.cs,SaveEventInput,The method has an empty catch block.
Empty Catch Block,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsWithWalker,The method has an empty catch block.
Empty Catch Block,UIAutomation,GetControlCollectionCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Get\GetControlCollectionCmdletBase.cs,GetAutomationElementsWithFindAll,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIAutomationEvent,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIAutomationPropertyChangedEvent,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIAutomationPropertyChangedEvent,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIStructureChangedEvent,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIWindowClosedEvent,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIRecordingAutomationEvent,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIRecordingAutomationEvent,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIRecordingAutomationEvent,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIRecordingAutomationEvent,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,OnUIRecordingAutomationEvent,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,TestControlByPropertiesFromHashtable,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,TestControlByPropertiesFromHashtable,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,TestControlByPropertiesFromHashtable,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,TestControlByPropertiesFromHashtable,The method has an empty catch block.
Empty Catch Block,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,TestControlByPropertiesFromHashtable,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallWindowPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTogglePatternMethod,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTextPatternForSet,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTextPatternForGet,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTablePattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallTableItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallSelectionPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallSelectedItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallSelectionItemPatternForState,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallSelectionItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallSelectionItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallRangeValuePatternForSet,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallRangeValuePatternForGet,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallGridPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallGridItemPattern,The method has an empty catch block.
Empty Catch Block,UIAutomation,WaitCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\WaitCmdletBase.cs,WaitIfCondition,The method has an empty catch block.
Empty Catch Block,UIAutomation,CurrentData,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\CurrentData.cs,ResetData,The method has an empty catch block.
Empty Catch Block,UIAutomation,UiaDriveInfo,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Provider\UIAProvider.cs,UiaDriveInfo,The method has an empty catch block.
Magic Number,UIAutomation.Commands,InvokeUiaControlClickCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Common\InvokeUIAControlClickCommand.cs,InvokeUiaControlClickCommand,The following statement contains a magic number: X = -1000000;
Magic Number,UIAutomation.Commands,InvokeUiaControlClickCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Common\InvokeUIAControlClickCommand.cs,InvokeUiaControlClickCommand,The following statement contains a magic number: Y = -1000000;
Magic Number,UIAutomation.Commands,SetUiaControlTextCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Common\SetUIAControlTextCommand.cs,ProcessRecord,The following statement contains a magic number: foreach (IUiElement inputObject in InputObject) {                                    // 20140312                  // if (0 == inputObject.Current.NativeWindowHandle) {                  if (0 == inputObject.GetCurrent().NativeWindowHandle) {                                            WriteError(                          this'                          "The handle of this control equals to zero"'                          "ZeroHandle"'                          ErrorCategory.InvalidArgument'                          true);                  }                                    // 20140312  //                IntPtr handle =  //                    new IntPtr(inputObject.Current.NativeWindowHandle);                  var handle =                      new IntPtr(inputObject.GetCurrent().NativeWindowHandle);                                    // 20130208                  // clean up the box                  NativeMethods.SendMessage3(handle' NativeMethods.WM_SETTEXT' IntPtr.Zero' "");                    foreach (char c in Text) {      // if (c  > = 65 && c <= 122) {      // c1 = c. - System.Char. (char)32;      // } else {                      char c1 = c;      // }                      NativeMethods.SendMessage1(handle'                                    NativeMethods.WM_KEYDOWN'                                    c1'                                   0);                      NativeMethods.SendMessage1(handle'                                    NativeMethods.WM_CHAR'                                    c1'                                   1);                      // System.Threading.Thread.Sleep(200);                      NativeMethods.SendMessage1(handle'                                    NativeMethods.WM_KEYUP'                                    c1'                                   65539);                  }                                    // 20130208                  if (PassThru) {                      WriteObject(                          this'                          inputObject);                  }              }
Magic Number,UIAutomation.Commands,ConvertToUiaSearchCriteriaCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Convert\ConvertToUiaSearchCriteriaCommand.cs,GetPatternStrings,The following statement contains a magic number: foreach (IBasePattern pattern in supportedPatterns) {                                    result += ";Has";                  result +=                      // (pattern.GetSourcePattern() as AutomationPattern).ProgrammaticName.Replace("Identifiers.Pattern"' string.Empty);                      pattern.GetType().Name.Substring(2);                  result += "=$true";              }
Magic Number,UIAutomation.Commands,ConvertToUiaSearchCriteriaCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Convert\ConvertToUiaSearchCriteriaCommand.cs,GetPropertyCompleteString,The following statement contains a magic number: if ((Full) ||                  // (IsIncluded(propertyName) &&                  // (IsInArray(Include' propertyName) &&                  // !IsExcluded(propertyName))) {                  // !IsInArray(Exclude' propertyName))) {                                    (!IsInArray(Exclude' propertyName) &&                  (0 == Include.Length || IsInArray(Include' propertyName)))) {                                    result = propertyName;                  result += "=";                                    // 20140312  //                switch (propertyName) {  //                    case "Name":  //                        result += PropertyToString(currentElement.Current.Name);  //                        break;  //                    case "AutomationId":  //                        result += PropertyToString(currentElement.Current.AutomationId);  //                        break;  //                    case "ControlType":  //                        result += PropertyToString(currentElement.Current.ControlType.ProgrammaticName.Substring(12));  //                        break;  //                    case "Class":  //                        result += PropertyToString(currentElement.Current.ClassName);  //                        break;  //                    case "AcceleratorKey":  //                        result += PropertyToString(currentElement.Current.AcceleratorKey);  //                        break;  //                    case "AccessKey":  //                        result += PropertyToString(currentElement.Current.AccessKey);  //                        break;  //                    case "BoundingRectangle":  //                        result += PropertyToString(currentElement.Current.BoundingRectangle.ToString());  //                        break;  //                    case "FrameworkId":  //                        result += PropertyToString(currentElement.Current.FrameworkId);  //                        break;  //                    case "HasKeyboardFocus":  //                        result += PropertyToString(currentElement.Current.HasKeyboardFocus.ToString());  //                        break;  //                    case "HelpText":  //                        result += PropertyToString(currentElement.Current.HelpText);  //                        break;  //                    case "IsContentElement":  //                        result += PropertyToString(currentElement.Current.IsContentElement.ToString());  //                        break;  //                    case "IsControlElement":  //                        result += PropertyToString(currentElement.Current.IsControlElement.ToString());  //                        break;  //                    case "IsEnabled":  //                        result += PropertyToString(currentElement.Current.IsEnabled.ToString());  //                        break;  //                    case "IsKeyboardFocusable":  //                        result += PropertyToString(currentElement.Current.IsKeyboardFocusable.ToString());  //                        break;  //                    case "IsOffscreen":  //                        result += PropertyToString(currentElement.Current.IsOffscreen.ToString());  //                        break;  //                    case "IsPassword":  //                        result += PropertyToString(currentElement.Current.IsPassword.ToString());  //                        break;  //                    case "IsRequiredForForm":  //                        result += PropertyToString(currentElement.Current.IsRequiredForForm.ToString());  //                        break;  //                    case "ItemStatus":  //                        result += PropertyToString(currentElement.Current.ItemStatus);  //                        break;  //                    case "ItemType":  //                        result += PropertyToString(currentElement.Current.ItemType);  //                        break;  //                        //case "LabeledBy":  //                        //    result +=  //                        //    break;  //                    case "LocalizedControlType":  //                        result += PropertyToString(currentElement.Current.LocalizedControlType);  //                        break;  //                    case "NativeWindowHandle":  //                        result += PropertyToString(currentElement.Current.NativeWindowHandle.ToString());  //                        break;  //                    case "Orientation":  //                        result += PropertyToString(currentElement.Current.Orientation.ToString());  //                        break;  //                    case "ProcessId":  //                        result += PropertyToString(currentElement.Current.ProcessId.ToString());  //                        break;  //                }                  switch (propertyName) {                      case "Name":                          result += PropertyToString(currentElement.GetCurrent().Name);                          break;                      case "AutomationId":                          result += PropertyToString(currentElement.GetCurrent().AutomationId);                          break;                      case "ControlType":                          result += PropertyToString(currentElement.GetCurrent().ControlType.ProgrammaticName.Substring(12));                          break;                      case "Class":                          result += PropertyToString(currentElement.GetCurrent().ClassName);                          break;                      case "AcceleratorKey":                          result += PropertyToString(currentElement.GetCurrent().AcceleratorKey);                          break;                      case "AccessKey":                          result += PropertyToString(currentElement.GetCurrent().AccessKey);                          break;                      case "BoundingRectangle":                          result += PropertyToString(currentElement.GetCurrent().BoundingRectangle.ToString());                          break;                      case "FrameworkId":                          result += PropertyToString(currentElement.GetCurrent().FrameworkId);                          break;                      case "HasKeyboardFocus":                          result += PropertyToString(currentElement.GetCurrent().HasKeyboardFocus.ToString());                          break;                      case "HelpText":                          result += PropertyToString(currentElement.GetCurrent().HelpText);                          break;                      case "IsContentElement":                          result += PropertyToString(currentElement.GetCurrent().IsContentElement.ToString());                          break;                      case "IsControlElement":                          result += PropertyToString(currentElement.GetCurrent().IsControlElement.ToString());                          break;                      case "IsEnabled":                          result += PropertyToString(currentElement.GetCurrent().IsEnabled.ToString());                          break;                      case "IsKeyboardFocusable":                          result += PropertyToString(currentElement.GetCurrent().IsKeyboardFocusable.ToString());                          break;                      case "IsOffscreen":                          result += PropertyToString(currentElement.GetCurrent().IsOffscreen.ToString());                          break;                      case "IsPassword":                          result += PropertyToString(currentElement.GetCurrent().IsPassword.ToString());                          break;                      case "IsRequiredForForm":                          result += PropertyToString(currentElement.GetCurrent().IsRequiredForForm.ToString());                          break;                      case "ItemStatus":                          result += PropertyToString(currentElement.GetCurrent().ItemStatus);                          break;                      case "ItemType":                          result += PropertyToString(currentElement.GetCurrent().ItemType);                          break;                          //case "LabeledBy":                          //    result +=                          //    break;                      case "LocalizedControlType":                          result += PropertyToString(currentElement.GetCurrent().LocalizedControlType);                          break;                      case "NativeWindowHandle":                          result += PropertyToString(currentElement.GetCurrent().NativeWindowHandle.ToString());                          break;                      case "Orientation":                          result += PropertyToString(currentElement.GetCurrent().Orientation.ToString());                          break;                      case "ProcessId":                          result += PropertyToString(currentElement.GetCurrent().ProcessId.ToString());                          break;                  }              }
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.Location = new System.Drawing.Point(15' 15);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.Location = new System.Drawing.Point(15' 15);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.Size = new System.Drawing.Size(45' 45);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.Size = new System.Drawing.Size(45' 45);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPause.Location = new System.Drawing.Point(75' 15);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPause.Location = new System.Drawing.Point(75' 15);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPause.Size = new System.Drawing.Size(45' 45);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPause.Size = new System.Drawing.Size(45' 45);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Size = new System.Drawing.Size(45' 45);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.Size = new System.Drawing.Size(45' 45);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStop.TabIndex = 2;
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnWatch.Size = new System.Drawing.Size(75' 45);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnWatch.Size = new System.Drawing.Size(75' 45);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnWatch.TabIndex = 3;
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnEdit.Size = new System.Drawing.Size(75' 45);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnEdit.Size = new System.Drawing.Size(75' 45);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.btnEdit.TabIndex = 4;
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(195' 140);
Magic Number,UIAutomation.Commands,RecorderForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(195' 140);
Magic Number,UIAutomation.Commands,RecorderFrom,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderFrom.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.btnStart = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnStart.Click += new System.Windows.RoutedEventHandler(this.BtnStartClick);                            #line default              #line hidden              return;              case 2:              this.btnPause = ((System.Windows.Controls.Button)(target));                            #line 23 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnPause.Click += new System.Windows.RoutedEventHandler(this.BtnPauseClick);                            #line default              #line hidden              return;              case 3:              this.btnStop = ((System.Windows.Controls.Button)(target));                            #line 34 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnStop.Click += new System.Windows.RoutedEventHandler(this.BtnStopClick);                            #line default              #line hidden              return;              case 4:              this.btnWatch = ((System.Windows.Controls.Button)(target));                            #line 45 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnWatch.Click += new System.Windows.RoutedEventHandler(this.BtnWatchClick);                            #line default              #line hidden              return;              case 5:              this.btnEdit = ((System.Windows.Controls.Button)(target));                            #line 56 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnEdit.Click += new System.Windows.RoutedEventHandler(this.BtnEditClick);                            #line default              #line hidden              return;              }
Magic Number,UIAutomation.Commands,RecorderFrom,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderFrom.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.btnStart = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnStart.Click += new System.Windows.RoutedEventHandler(this.BtnStartClick);                            #line default              #line hidden              return;              case 2:              this.btnPause = ((System.Windows.Controls.Button)(target));                            #line 23 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnPause.Click += new System.Windows.RoutedEventHandler(this.BtnPauseClick);                            #line default              #line hidden              return;              case 3:              this.btnStop = ((System.Windows.Controls.Button)(target));                            #line 34 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnStop.Click += new System.Windows.RoutedEventHandler(this.BtnStopClick);                            #line default              #line hidden              return;              case 4:              this.btnWatch = ((System.Windows.Controls.Button)(target));                            #line 45 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnWatch.Click += new System.Windows.RoutedEventHandler(this.BtnWatchClick);                            #line default              #line hidden              return;              case 5:              this.btnEdit = ((System.Windows.Controls.Button)(target));                            #line 56 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnEdit.Click += new System.Windows.RoutedEventHandler(this.BtnEditClick);                            #line default              #line hidden              return;              }
Magic Number,UIAutomation.Commands,RecorderFrom,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderFrom.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.btnStart = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnStart.Click += new System.Windows.RoutedEventHandler(this.BtnStartClick);                            #line default              #line hidden              return;              case 2:              this.btnPause = ((System.Windows.Controls.Button)(target));                            #line 23 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnPause.Click += new System.Windows.RoutedEventHandler(this.BtnPauseClick);                            #line default              #line hidden              return;              case 3:              this.btnStop = ((System.Windows.Controls.Button)(target));                            #line 34 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnStop.Click += new System.Windows.RoutedEventHandler(this.BtnStopClick);                            #line default              #line hidden              return;              case 4:              this.btnWatch = ((System.Windows.Controls.Button)(target));                            #line 45 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnWatch.Click += new System.Windows.RoutedEventHandler(this.BtnWatchClick);                            #line default              #line hidden              return;              case 5:              this.btnEdit = ((System.Windows.Controls.Button)(target));                            #line 56 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnEdit.Click += new System.Windows.RoutedEventHandler(this.BtnEditClick);                            #line default              #line hidden              return;              }
Magic Number,UIAutomation.Commands,RecorderFrom,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderFrom.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.btnStart = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnStart.Click += new System.Windows.RoutedEventHandler(this.BtnStartClick);                            #line default              #line hidden              return;              case 2:              this.btnPause = ((System.Windows.Controls.Button)(target));                            #line 23 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnPause.Click += new System.Windows.RoutedEventHandler(this.BtnPauseClick);                            #line default              #line hidden              return;              case 3:              this.btnStop = ((System.Windows.Controls.Button)(target));                            #line 34 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnStop.Click += new System.Windows.RoutedEventHandler(this.BtnStopClick);                            #line default              #line hidden              return;              case 4:              this.btnWatch = ((System.Windows.Controls.Button)(target));                            #line 45 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnWatch.Click += new System.Windows.RoutedEventHandler(this.BtnWatchClick);                            #line default              #line hidden              return;              case 5:              this.btnEdit = ((System.Windows.Controls.Button)(target));                            #line 56 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnEdit.Click += new System.Windows.RoutedEventHandler(this.BtnEditClick);                            #line default              #line hidden              return;              }
Magic Number,UIAutomation.Commands,StartUiaTranscriptCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\StartUIATranscriptCommand.cs,BeginProcessing,The following statement contains a magic number: if (!NoUI) {                  Timeout = 604800000;                  // frmRecorder formRecorder =                   CurrentData.formRecorder =                       new RecorderForm(this);                  // formRecorder.ShowDialog();                  CurrentData.formRecorder.Show();                  CurrentData.formRecorder.Hide();                  try {                  Events.SubscribeEvent((object)CurrentData.formRecorder.btnStop'                                             "BtnStopClick"'                                             "formRecorder"'                                             new PSObject()'                                             ScriptBlock.Create("")' // CurrentData.formRecorder.BtnStopClick'                                             true'                                             false);                  } catch { }                  CurrentData.formRecorder.ShowDialog();                  return;              } else {                  UiaHelper.ProcessingTranscript(this);              }
Magic Number,UIAutomation.Commands.Win32,Interop,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Win32\CProbe.cs,TreeView_SetCheckState,The following statement contains a magic number: return TreeView_SetItemState(hwndTV' hti' INDEXTOSTATEIMAGEMASK((fCheck) ? 2 : 1)' (uint)TVIS.TVIS_STATEIMAGEMASK);
Magic Number,UIAutomation.Commands.Win32,Interop,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Win32\CProbe.cs,INDEXTOSTATEIMAGEMASK,The following statement contains a magic number: return ((uint)(i) << 12);
Magic Number,UIAutomation.Helpers.Commands,WaitEventRaisedCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Wait\WaitEventRaisedCommand.cs,Execute,The following statement contains a magic number: do {  cmdlet.WriteTrace(cmdlet' "do");                  if (CurrentData.LastEventInfoAdded) {  cmdlet.WriteTrace(cmdlet' "if (CurrentData.LastEventInfoAdded)");                      string name = string.Empty;                      string automationId = string.Empty;                      string controlType = string.Empty;                      string eventId = string.Empty;                        try {  cmdlet.WriteTrace(cmdlet' "name 1");                          // 20140312                          // name = CurrentData.LastEventSource.Cached.Name;                          // name = (CurrentData.LastEventSource as ISupportsCached).Cached.Name;                          name = CurrentData.LastEventSource.GetCached().Name;  cmdlet.WriteTrace(cmdlet' "name 2");                      }                      catch {}                        try {  cmdlet.WriteTrace(cmdlet' "auId 1");                          // 20140312                          // automationId = CurrentData.LastEventSource.Cached.AutomationId;                          // automationId = (CurrentData.LastEventSource as ISupportsCached).Cached.AutomationId;                          automationId = CurrentData.LastEventSource.GetCached().AutomationId;  cmdlet.WriteTrace(cmdlet' "auId 2");                      }                      catch {}                                            try {  cmdlet.WriteTrace(cmdlet' "type 1");                          // 20140312                          // controlType = CurrentData.LastEventSource.Cached.ControlType.ProgrammaticName;                          // controlType = (CurrentData.LastEventSource as ISupportsCached).Cached.ControlType.ProgrammaticName;                          controlType = CurrentData.LastEventSource.GetCached().ControlType.ProgrammaticName;  cmdlet.WriteTrace(cmdlet' "type 2");                          controlType = controlType.Substring(12);  cmdlet.WriteTrace(cmdlet' "type 3");                      }                      catch {}                        try {  cmdlet.WriteTrace(cmdlet' "eventId 1");                          eventId = CurrentData.LastEventType;  cmdlet.WriteTrace(cmdlet' eventId);  cmdlet.WriteTrace(cmdlet' "eventId 2");                      }                      catch {}                      //System.Windows.Automation.Peers.AutomationEvents.                      //System.Windows.Automation.Peers.PatternInterface.Dock                      if (cmdlet.Name != null &&                          cmdlet.Name.Length > 0) {  cmdlet.WriteTrace(cmdlet' "name 001");                          notFoundYet = !IsInArray(name' cmdlet.Name);  cmdlet.WriteTrace(cmdlet' "name 002");                      }                                            if (cmdlet.AutomationId != null &&                          cmdlet.AutomationId.Length > 0) {  cmdlet.WriteTrace(cmdlet' "auId 001");                          notFoundYet = !IsInArray(automationId' cmdlet.AutomationId);  cmdlet.WriteTrace(cmdlet' "auId 002");                      }                                            if (cmdlet.ControlType != null &&                          cmdlet.ControlType.Length > 0) {  cmdlet.WriteTrace(cmdlet' "type 001");                          notFoundYet = !IsInArray(controlType' cmdlet.ControlType);  cmdlet.WriteTrace(cmdlet' "type 002");                      }                                            if (cmdlet.EventId != null &&                          cmdlet.EventId.Length > 0) {  cmdlet.WriteTrace(cmdlet' "eventId 001");                          notFoundYet = !IsInArray(eventId' cmdlet.EventId);  cmdlet.WriteTrace(cmdlet' "eventId 002");                      }                  }                                    //System.Threading.Thread.Sleep(100);                  cmdlet.SleepAndRunScriptBlocks(cmdlet);                  DateTime nowDate = DateTime.Now;                    if ((nowDate - cmdlet.StartDate).TotalSeconds > cmdlet.Timeout / 1000)                  {                      cmdlet.WriteError(                          cmdlet'                          "Failed to catch the event"'                          "NoEventFound"'                          ErrorCategory.ObjectNotFound'                          true);                  }                    if (notFoundYet) continue;                  CurrentData.LastEventInfoAdded = false;                  cmdlet.WriteObject(cmdlet' CurrentData.LastEventSource);                } while (notFoundYet);
Magic Number,UIAutomation.Helpers.Commands,WaitEventRaisedCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Wait\WaitEventRaisedCommand.cs,Execute,The following statement contains a magic number: do {  cmdlet.WriteTrace(cmdlet' "do");                  if (CurrentData.LastEventInfoAdded) {  cmdlet.WriteTrace(cmdlet' "if (CurrentData.LastEventInfoAdded)");                      string name = string.Empty;                      string automationId = string.Empty;                      string controlType = string.Empty;                      string eventId = string.Empty;                        try {  cmdlet.WriteTrace(cmdlet' "name 1");                          // 20140312                          // name = CurrentData.LastEventSource.Cached.Name;                          // name = (CurrentData.LastEventSource as ISupportsCached).Cached.Name;                          name = CurrentData.LastEventSource.GetCached().Name;  cmdlet.WriteTrace(cmdlet' "name 2");                      }                      catch {}                        try {  cmdlet.WriteTrace(cmdlet' "auId 1");                          // 20140312                          // automationId = CurrentData.LastEventSource.Cached.AutomationId;                          // automationId = (CurrentData.LastEventSource as ISupportsCached).Cached.AutomationId;                          automationId = CurrentData.LastEventSource.GetCached().AutomationId;  cmdlet.WriteTrace(cmdlet' "auId 2");                      }                      catch {}                                            try {  cmdlet.WriteTrace(cmdlet' "type 1");                          // 20140312                          // controlType = CurrentData.LastEventSource.Cached.ControlType.ProgrammaticName;                          // controlType = (CurrentData.LastEventSource as ISupportsCached).Cached.ControlType.ProgrammaticName;                          controlType = CurrentData.LastEventSource.GetCached().ControlType.ProgrammaticName;  cmdlet.WriteTrace(cmdlet' "type 2");                          controlType = controlType.Substring(12);  cmdlet.WriteTrace(cmdlet' "type 3");                      }                      catch {}                        try {  cmdlet.WriteTrace(cmdlet' "eventId 1");                          eventId = CurrentData.LastEventType;  cmdlet.WriteTrace(cmdlet' eventId);  cmdlet.WriteTrace(cmdlet' "eventId 2");                      }                      catch {}                      //System.Windows.Automation.Peers.AutomationEvents.                      //System.Windows.Automation.Peers.PatternInterface.Dock                      if (cmdlet.Name != null &&                          cmdlet.Name.Length > 0) {  cmdlet.WriteTrace(cmdlet' "name 001");                          notFoundYet = !IsInArray(name' cmdlet.Name);  cmdlet.WriteTrace(cmdlet' "name 002");                      }                                            if (cmdlet.AutomationId != null &&                          cmdlet.AutomationId.Length > 0) {  cmdlet.WriteTrace(cmdlet' "auId 001");                          notFoundYet = !IsInArray(automationId' cmdlet.AutomationId);  cmdlet.WriteTrace(cmdlet' "auId 002");                      }                                            if (cmdlet.ControlType != null &&                          cmdlet.ControlType.Length > 0) {  cmdlet.WriteTrace(cmdlet' "type 001");                          notFoundYet = !IsInArray(controlType' cmdlet.ControlType);  cmdlet.WriteTrace(cmdlet' "type 002");                      }                                            if (cmdlet.EventId != null &&                          cmdlet.EventId.Length > 0) {  cmdlet.WriteTrace(cmdlet' "eventId 001");                          notFoundYet = !IsInArray(eventId' cmdlet.EventId);  cmdlet.WriteTrace(cmdlet' "eventId 002");                      }                  }                                    //System.Threading.Thread.Sleep(100);                  cmdlet.SleepAndRunScriptBlocks(cmdlet);                  DateTime nowDate = DateTime.Now;                    if ((nowDate - cmdlet.StartDate).TotalSeconds > cmdlet.Timeout / 1000)                  {                      cmdlet.WriteError(                          cmdlet'                          "Failed to catch the event"'                          "NoEventFound"'                          ErrorCategory.ObjectNotFound'                          true);                  }                    if (notFoundYet) continue;                  CurrentData.LastEventInfoAdded = false;                  cmdlet.WriteObject(cmdlet' CurrentData.LastEventSource);                } while (notFoundYet);
Magic Number,UIAutomation,ExtensionsMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethods.cs,TestControlByPropertiesFromDictionary,The following statement contains a magic number: foreach (string key in dict.Keys) {                    string keyValue = dict[key].ToString();                                    const WildcardOptions options = WildcardOptions.IgnoreCase |                                                  WildcardOptions.Compiled;                                    switch (key) {                      case "ACCELERATORKEY":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().AcceleratorKey))) {                                  return result;                          }                          break;                      case "ACCESSKEY":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().AccessKey))) {                                  return result;                          }                          break;                      case "AUTOMATIONID":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().AutomationId))) {                                  return result;                          }                          break;                      case "CLASS":                      case "CLASSNAME":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().ClassName))) {                                  return result;                          }                          break;                      case "CONTROLTYPE":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().ControlType.ProgrammaticName.Substring(12)))) {                                  return result;                          }                          break;                      case "FRAMEWORKID":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().FrameworkId))) {                                  return result;                          }                          break;                      case "HASKEYBOARDFOCUS":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().HasKeyboardFocus.ToString()))) {                                  return result;                          }                          break;                      case "HELPTEXT":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().HelpText))) {                                  return result;                          }                          break;                      case "ISCONTENTELEMENT":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().IsContentElement.ToString()))) {                                  return result;                          }                          break;                      case "ISCONTROLELEMENT":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().IsControlElement.ToString()))) {                                  return result;                          }                          break;                      case "ISENABLED":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().IsEnabled.ToString()))) {                                  return result;                          }                          break;                      case "ISKEYBOARDFOCUSABLE":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().IsKeyboardFocusable.ToString()))) {                                  return result;                          }                          break;                      case "ISOFFSCREEN":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().IsOffscreen.ToString()))) {                                  return result;                          }                          break;                      case "ISPASSWORD":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().IsPassword.ToString()))) {                                  return result;                          }                          break;                      case "ISREQUIREDFORFORM":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().IsRequiredForForm.ToString()))) {                                  return result;                          }                          break;                      case "ITEMSTATUS":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().ItemStatus))) {                                  return result;                          }                          break;                      case "ITEMTYPE":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().ItemType))) {                                  return result;                          }                          break;                      case "LABELEDBY":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().LabeledBy.Current.Name))) {                                  return result;                          }                          break;                      case "LOCALIZEDCONTROLTYPE":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().LocalizedControlType))) {                                  return result;                          }                          break;                      case "NAME":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().Name))) {                                  return result;                          }                          break;                      case "NATIVEWINDOWHANDLE":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().NativeWindowHandle.ToString()))) {                                  return result;                          }                          break;                      case "ORIENTATION":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().Orientation.ToString()))) {                                  return result;                          }                          break;                      case "PROCESSID":                          if ( !(new WildcardPattern(                              keyValue'                              options).IsMatch(element.GetCurrent().ProcessId.ToString()))) {                                  return result;                          }                          break;                      default:                          (new CommonCmdletBase()).WriteError(                              // this'                              new CommonCmdletBase()'                              "Wrong AutomationElement parameter is provided: " + key'                              "WrongParameter"'                              ErrorCategory.InvalidArgument'                              true);                          break;                  }              }
Magic Number,UIAutomation,ExtensionsMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethods.cs,ConvertControlTypeToStringArray,The following statement contains a magic number: return controlTypes.Select(                  ct =>                  null != ct ? ct.ProgrammaticName.Substring(12) : string.Empty).ToArray();
Magic Number,UIAutomation,ExtensionsMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethods.cs,ConvertControlTypeToStringArray,The following statement contains a magic number: return null == controlType ? new string[] {                } : new string[] {                  controlType.ProgrammaticName.Substring(12)              };
Magic Number,UIAutomation,ExtensionMethodsElementExtended,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementExtended.cs,PerformDoubleClick,The following statement contains a magic number: cmdlet.ClickControl(                  cmdlet'                  holder.GetParentElement()'                  new ClickSettings() {                      DoubleClick = true'                      DoubleClickInterval = 50'                      RelativeX = Preferences.ClickOnControlByCoordX'                      RelativeY = Preferences.ClickOnControlByCoordY                  });
Magic Number,UIAutomation,ExtensionMethodsElementExtended,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementExtended.cs,PerformCoordinatedDoubleClick,The following statement contains a magic number: cmdlet.ClickControl(                  cmdlet'                  holder.GetParentElement()'                  new ClickSettings() {                      DoubleClick = true'                      DoubleClickInterval = 50'                      RelativeX = X'                      RelativeY = Y                  });
Magic Number,UIAutomation,ExtensionMethodsElementExtended,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementExtended.cs,MoveCursorToControlPosition,The following statement contains a magic number: InputSimulator.Mouse.MoveMouseTo(                  (element.GetCurrent().BoundingRectangle.X + Preferences.ClickOnControlByCoordX) / Screen.PrimaryScreen.Bounds.Width * 65535'                  (element.GetCurrent().BoundingRectangle.Y + Preferences.ClickOnControlByCoordY) / Screen.PrimaryScreen.Bounds.Height * 65535);
Magic Number,UIAutomation,ExtensionMethodsElementExtended,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethodsElementExtended.cs,MoveCursorToControlPosition,The following statement contains a magic number: InputSimulator.Mouse.MoveMouseTo(                  (element.GetCurrent().BoundingRectangle.X + Preferences.ClickOnControlByCoordX) / Screen.PrimaryScreen.Bounds.Width * 65535'                  (element.GetCurrent().BoundingRectangle.Y + Preferences.ClickOnControlByCoordY) / Screen.PrimaryScreen.Bounds.Height * 65535);
Magic Number,UIAutomation,ExecutionPlan,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\ExecutionPlan.cs,Init,The following statement contains a magic number: HighlightersMaxCount = 100;
Magic Number,UIAutomation,ExecutionPlan,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\ExecutionPlan.cs,Enqueue,The following statement contains a magic number: var highlighter = new Highlighter(                  // 20140312  //                elementToHighlight.Current.BoundingRectangle.Height'  //                elementToHighlight.Current.BoundingRectangle.Width'  //                elementToHighlight.Current.BoundingRectangle.X'  //                elementToHighlight.Current.BoundingRectangle.Y'  //                elementToHighlight.Current.NativeWindowHandle'                  elementToHighlight.GetCurrent().BoundingRectangle.Height'                  elementToHighlight.GetCurrent().BoundingRectangle.Width'                  elementToHighlight.GetCurrent().BoundingRectangle.X'                  elementToHighlight.GetCurrent().BoundingRectangle.Y'                  elementToHighlight.GetCurrent().NativeWindowHandle'                  // 20131204                  // (Highlighters)(HighlighterNumber % 10)'                  (Highlighters)(CommonCmdletBase.HighlighterGeneration % 10)'                  // 20131204                  // HighlighterNumber'                  CommonCmdletBase.HighlighterGeneration'                  highlighterData);
Magic Number,UIAutomation,ExSpyCode,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\ExSpyCode.cs,WritingAvailablePatterns,The following statement contains a magic number: try {                  resultString = "available patterns";                  resultString += "\r\n";                                    // 20120618 UiaCOMWrapper                  // 20131209                  // AutomationPattern[] supportedPatterns =                  //     element.GetSupportedPatterns();                                    IBasePattern[] supportedPatterns =                      element.GetSupportedPatterns();                  //UiaCOM::System.Windows.Automation.AutomationPattern[] supportedPatterns =                  //    element.GetSupportedPatterns();                                                        if (supportedPatterns == null || supportedPatterns.Length <= 0) return resultString;                                    for (int i = 0; i < supportedPatterns.Length; i++) {                      if (i > 0) {                          resultString += "\r\n";                      }                                            resultString +=                          // 20131209                          // supportedPatterns[i].ProgrammaticName.Replace("Identifiers.Pattern"' "");                          // 20131210                          // (supportedPatterns[i] as AutomationPattern).ProgrammaticName.Replace("Identifiers.Pattern"' "");                          // (supportedPatterns[i].SourcePattern as AutomationPattern).ProgrammaticName.Replace("Identifiers.Pattern"' "");                          // 20140112                          // (supportedPatterns[i].GetSourcePattern() as AutomationPattern).ProgrammaticName.Replace("Identifiers.Pattern"' string.Empty);                          supportedPatterns[i].GetType().Name.Substring(3);                  }                    /*                  if (supportedPatterns != null &&                      supportedPatterns.Length > 0) {                      for (int i = 0; i < supportedPatterns.Length; i++) {                          if (i > 0) {                              this.richPatterns.Text += "\r\n";                          }                          this.richPatterns.Text +=                               supportedPatterns[i].ProgrammaticName.Replace("Identifiers.Pattern"' "");                      }                  }                  */                 return resultString;              }              catch {                  return resultString;              }
Magic Number,UIAutomation,ExSpyCode,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\ExSpyCode.cs,CreateTranscriptingCmdlet,The following statement contains a magic number: var cmdlet =                   new TranscriptCmdletBase                  {                      NoClassInformation = false'                      NoScriptHeader = true'                      NoUI = true'                      WriteCurrentPattern = true'                      Timeout = 600000000'                      Highlight = true'                      HighlightParent = true'                      PassThru = false                  };
Magic Number,UIAutomation,ExSpyCode,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\ExSpyCode.cs,CreateTranscriptingCmdlet,The following statement contains a magic number: Preferences.TranscriptInterval = 500;
Magic Number,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,PaintLabel,The following statement contains a magic number: int left =                  rightSide.Left - 20;
Magic Number,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,PaintLabel,The following statement contains a magic number: int top =                  bottomSide.Top - 15;
Magic Number,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,paintLeftSide,The following statement contains a magic number: leftSide = new Side(p.X - (border / 2)'                                  p.Y'                                  border'                                  height'                                  control'                                  color);
Magic Number,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,paintTopSide,The following statement contains a magic number: topSide = new Side(p.X'                                 p.Y - (border / 2)'                                 width'                                 border'                                 control'                                 color);
Magic Number,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,paintRightSide,The following statement contains a magic number: rightSide = new Side(p.X +                                   width -                                       (border / 2)'                                   p.Y'                                   border'                                   height'                                   control'                                   color);
Magic Number,UIAutomation,Highlighter,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,paintBottomSide,The following statement contains a magic number: bottomSide = new Side(p.X'                                    p.Y +                                    height -                                        (border / 2)'                                    width'                                    border'                                    control'                                    color);
Magic Number,UIAutomation,Side,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,Side,The following statement contains a magic number: Opacity = 0.5;
Magic Number,UIAutomation,LabelForm,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\Highligher.cs,LabelForm,The following statement contains a magic number: Opacity = 0.5;
Magic Number,UIAutomation,LogHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\LogHelper.cs,Init,The following statement contains a magic number: fileTarget.ConcurrentWriteAttempts = 3;
Magic Number,UIAutomation,LogHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\LogHelper.cs,Init,The following statement contains a magic number: fileTarget.ConcurrentWriteAttemptDelay = 2;
Magic Number,UIAutomation,NativeMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\NativeMethods.cs,MakeLong,The following statement contains a magic number: return (HiWord << 16) | (LoWord & 0xffff);
Magic Number,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetScreenshotOfSquare,The following statement contains a magic number: NativeMethods.BitBlt(                  dc1'                  0'                  0'                  absRect.Width'                  absRect.Height'                  dc2'                  absRect.Left'                  absRect.Top'                  13369376);
Magic Number,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,ProcessingTranscriptOnce,The following statement contains a magic number: return !((nowDate - cmdlet.StartDate).TotalSeconds > cmdlet.Timeout / 1000);
Magic Number,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetPatternByName,The following statement contains a magic number: patternName =                  patternName.Substring(0' patternName.Length - 7) +                  "Pattern";
Magic Number,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetOutputStringUsingItemsValuePattern,The following statement contains a magic number: if (rows.Count > 0) {                                    foreach(IUiElement row in rows) {                                            IUiEltCollection rowItems =                          row.FindAll(classic.TreeScope.Children'                                      new classic.PropertyCondition(                                          classic.AutomationElement.ControlTypeProperty'                                          classic.ControlType.Custom));                      if (rowItems.Count <= 0) continue;                      string onerow = String.Empty;                                            int rowCounter = 0;                      foreach (IUiElement rowItem in rowItems) {                                                    rowCounter++;                          string strValue = String.Empty;                          strValue += '"';                          try                          {                              IValuePattern valPattern = rowItem.GetCurrentPattern<IValuePattern>(classic.ValuePattern.Pattern);                              strValue += valPattern.Current.Value;                          }                          catch {                              // nothing to do                          }                          strValue += '"';                          onerow += strValue;                          if (rowCounter < rowItems.Count) {                              onerow += delimiter;                          }                      }  //                    for (int i = 0; i < rowItems.Count; i++) {  //                        ValuePattern valPattern = null;  //                        string strValue = String.Empty;  //                        strValue += '"';  //                        try {  //                            valPattern =  //                                rowItems[i].GetCurrentPattern(classic.ValuePattern.Pattern)  //                                    as ValuePattern;  //                            strValue += valPattern.Current.Value;  //                        } catch {  //                            // nothing to do  //                        }  //                        strValue += '"';  //                        onerow += strValue;  //                        if (i < (rowItems.Count - 1)) {  //                            onerow += delimiter;  //                        }  //                    }                                            /*                      // my refactoring                      for (int i = 0; i < rowItems.Count; i++) {                          ValuePattern valPattern = null;                          string strValue = String.Empty;                          strValue += '"';                          try {                              valPattern =                                  rowItems[i].GetCurrentPattern(classic.ValuePattern.Pattern)                                      as ValuePattern;                              strValue += valPattern.Current.Value;                          } catch {                              // nothing to do                          }                          strValue += '"';                          onerow += strValue;                          if (i < (rowItems.Count - 1)) {                              onerow += delimiter;                          }                      }                      */                      if (onerow.Length > 2) {                          rowsCollection.Add(onerow);                      }                      // WriteObject(onerow);                        /*                      if (rowItems.Count > 0) {                          string onerow = String.Empty;                          for (int i = 0; i < rowItems.Count; i++) {                              ValuePattern valPattern = null;                              string strValue = String.Empty;                              strValue += '"';                              try {                                  valPattern =                                      rowItems[i].GetCurrentPattern(classic.ValuePattern.Pattern)                                      as ValuePattern;                                  strValue += valPattern.Current.Value;                              } catch {                                  // nothing to do                              }                              strValue += '"';                              onerow += strValue;                              if (i < (rowItems.Count - 1)) {                                  onerow += delimiter;                              }                          }                          if (onerow.Length > 2) {                              rowsCollection.Add(onerow);                          }                          // WriteObject(onerow);                      }                      */                  }              } else {                  return rowsCollection;              }
Magic Number,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,getSheridanTreeItemName,The following statement contains a magic number: NativeMethods.GetWindowText(hwndTreeItem' textBuffer' 255);
Magic Number,UIAutomation,WizardHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\WizardHelper.cs,StepWizardStep,The following statement contains a magic number: if (cmdlet.InputObject != null && null != cmdlet.InputObject) {                                    WizardStep stepToRun = null;                                    cmdlet.WriteVerbose(cmdlet' "searching for a step");                                    foreach (WizardStep step in cmdlet.InputObject.Steps) {                                            cmdlet.WriteVerbose(cmdlet' "found step: " + step.Name);                                            if (step.Name != cmdlet.Name) continue;                                            cmdlet.WriteVerbose(cmdlet' "found the step we've been searching for");                      stepToRun = step;                      break;                        /*                      if (step.Name == cmdlet.Name) {                          //WriteVerbose(this' "found the step we've been searching for");                          cmdlet.WriteVerbose(cmdlet' "found the step we've been searching for");                          stepToRun = step;                          break;                      }                      */                  }                  if (stepToRun == null) {                      //                    ErrorRecord err =                      //                        new ErrorRecord(                      //                            new Exception("Couldn't find the step")'                      //                            "StepNotFound"'                      //                            ErrorCategory.InvalidArgument'                      //                            stepToRun.Name);                      //                    err.ErrorDetails =                      //                        new ErrorDetails(                      //                            "Failed to find the step");                      //                    WriteError(this' err' true);                                            cmdlet.WriteError(                          cmdlet'                          "Couldn't find the step"'                          "StepNotFound"'                          ErrorCategory.InvalidArgument'                          true);                  }                                    bool result = false;                  do {                      cmdlet.WriteVerbose(cmdlet' "checking controls' properties");                                            // if there is no SearchCriteria' for example' there's at least one @{}                      if (stepToRun.SearchCriteria.Length == 0 ||                          Regex.IsMatch(                              stepToRun.SearchCriteria.ToString()'                              @"[\@][\{]\s+?[\}]")) {                          result = true;                      } else {                          result =                              //testControlByPropertiesFromHashtable(                              cmdlet.TestControlByPropertiesFromHashtable(                                  // 20130315                                  null'                                  stepToRun.SearchCriteria'                                  //this.Timeout);                                  cmdlet.Timeout);                      }                      if (result) {                                                    cmdlet.WriteVerbose(cmdlet' "there are no SearchCriteria");                          cmdlet.WriteVerbose(cmdlet' "thus' control state is confirmed");                      } else {                          cmdlet.WriteVerbose(cmdlet' "control state is not yet confirmed. Checking the timeout");                          cmdlet.SleepAndRunScriptBlocks(cmdlet);                          // wait until timeout expires or the state will be confirmed as valid                          DateTime nowDate =                              DateTime.Now;                                                    if ((nowDate - cmdlet.StartDate).TotalSeconds > cmdlet.Timeout / 1000) {                              //WriteObject(this' false);                              //result = true;                              //return;                              //                            WriteVerbose(this' "the timeout has already expired");                              //                            ErrorRecord err =                              //                                new ErrorRecord(                              //                                    new Exception("Timeout expired")'                              //                                    "TimeoutExpired"'                              //                                    ErrorCategory.OperationTimeout'                              //                                    this.InputObject);                              //                            err.ErrorDetails =                              //                                new ErrorDetails(                              //                                    "Timeout expired");                              //                            WriteError(this' err' true);                                                            cmdlet.WriteError(                                  cmdlet'                                  "Timeout expired"'                                  "TimeoutExpired"'                                  ErrorCategory.OperationTimeout'                                  true);                          }                      }                  } while (!result);                                    //WriteVerbose(this' "running script blocks");                  // 20130319                  //cmdlet.WriteVerbose(cmdlet' "running ForwardAction' BackwardAction' CancelAction scriptblocks");                  cmdlet.WriteVerbose(cmdlet' "running ForwardAction or BackwardAction scriptblocks");                  //RunWizardStepScriptBlocks(this' stepToRun' Forward);                  // 20130318                  //cmdlet.RunWizardStepScriptBlocks(cmdlet' stepToRun' cmdlet.Forward);                  // 20130321                  //cmdlet.RunWizardStepScriptBlocks(cmdlet' stepToRun' cmdlet.Forward' null);                  cmdlet.RunWizardStepScriptBlocks(cmdlet' stepToRun' stepToRun.ToDo' null);                    //if (PassThru) {                  if (cmdlet.PassThru) {                        //WriteObject(this' InputObject);                      cmdlet.WriteObject(cmdlet' cmdlet.InputObject);                  } else {                        //WriteObject(this' true);                      cmdlet.WriteObject(cmdlet' true);                  }              } else {                    //                ErrorRecord err =                  //                    new ErrorRecord(                  //                        new Exception("The wizard object you provided is not valid")'                  //                        "WrongWizardObject"'                  //                        ErrorCategory.InvalidArgument'                  //                        InputObject);                  //                err.ErrorDetails =                  //                    new ErrorDetails(                  //                        "The wizard object you provided is not valid");                  //                WriteError(this' err' true);                                    cmdlet.WriteError(                      cmdlet'                      "The wizard object you provided is not valid"'                      "WrongWizardObject"'                      ErrorCategory.InvalidArgument'                      true);              }
Magic Number,UIAutomation,TimeoutManager,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\NewModel\TimeoutManager.cs,CalculateAdaptiveDelay,The following statement contains a magic number: if (0 == delay) {                  delay = Preferences.OnSleepDelay;              } else if (delay <= 5000) {                  delay /= 20;              } else if (delay <= 20000) {                  delay /= 40;              } else if (delay <= 60000) {                  delay /= 60;              } else if (delay <= 600000) {                  delay /= 100;              } else {                  delay /= 200;              }
Magic Number,UIAutomation,TimeoutManager,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\NewModel\TimeoutManager.cs,CalculateAdaptiveDelay,The following statement contains a magic number: if (0 == delay) {                  delay = Preferences.OnSleepDelay;              } else if (delay <= 5000) {                  delay /= 20;              } else if (delay <= 20000) {                  delay /= 40;              } else if (delay <= 60000) {                  delay /= 60;              } else if (delay <= 600000) {                  delay /= 100;              } else {                  delay /= 200;              }
Magic Number,UIAutomation,TimeoutManager,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\NewModel\TimeoutManager.cs,CalculateAdaptiveDelay,The following statement contains a magic number: if (0 == delay) {                  delay = Preferences.OnSleepDelay;              } else if (delay <= 5000) {                  delay /= 20;              } else if (delay <= 20000) {                  delay /= 40;              } else if (delay <= 60000) {                  delay /= 60;              } else if (delay <= 600000) {                  delay /= 100;              } else {                  delay /= 200;              }
Magic Number,UIAutomation,TimeoutManager,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\NewModel\TimeoutManager.cs,CalculateAdaptiveDelay,The following statement contains a magic number: if (0 == delay) {                  delay = Preferences.OnSleepDelay;              } else if (delay <= 5000) {                  delay /= 20;              } else if (delay <= 20000) {                  delay /= 40;              } else if (delay <= 60000) {                  delay /= 60;              } else if (delay <= 600000) {                  delay /= 100;              } else {                  delay /= 200;              }
Magic Number,UIAutomation,TimeoutManager,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\NewModel\TimeoutManager.cs,CalculateAdaptiveDelay,The following statement contains a magic number: if (0 == delay) {                  delay = Preferences.OnSleepDelay;              } else if (delay <= 5000) {                  delay /= 20;              } else if (delay <= 20000) {                  delay /= 40;              } else if (delay <= 60000) {                  delay /= 60;              } else if (delay <= 600000) {                  delay /= 100;              } else {                  delay /= 200;              }
Magic Number,UIAutomation,TimeoutManager,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\NewModel\TimeoutManager.cs,CalculateAdaptiveDelay,The following statement contains a magic number: if (0 == delay) {                  delay = Preferences.OnSleepDelay;              } else if (delay <= 5000) {                  delay /= 20;              } else if (delay <= 20000) {                  delay /= 40;              } else if (delay <= 60000) {                  delay /= 60;              } else if (delay <= 600000) {                  delay /= 100;              } else {                  delay /= 200;              }
Magic Number,UIAutomation,TimeoutManager,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\NewModel\TimeoutManager.cs,CalculateAdaptiveDelay,The following statement contains a magic number: if (0 == delay) {                  delay = Preferences.OnSleepDelay;              } else if (delay <= 5000) {                  delay /= 20;              } else if (delay <= 20000) {                  delay /= 40;              } else if (delay <= 60000) {                  delay /= 60;              } else if (delay <= 600000) {                  delay /= 100;              } else {                  delay /= 200;              }
Magic Number,UIAutomation,TimeoutManager,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\NewModel\TimeoutManager.cs,CalculateAdaptiveDelay,The following statement contains a magic number: if (0 == delay) {                  delay = Preferences.OnSleepDelay;              } else if (delay <= 5000) {                  delay /= 20;              } else if (delay <= 20000) {                  delay /= 40;              } else if (delay <= 60000) {                  delay /= 60;              } else if (delay <= 600000) {                  delay /= 100;              } else {                  delay /= 200;              }
Magic Number,UIAutomation,TimeoutManager,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\NewModel\TimeoutManager.cs,CalculateAdaptiveDelay,The following statement contains a magic number: if (0 == delay) {                  delay = Preferences.OnSleepDelay;              } else if (delay <= 5000) {                  delay /= 20;              } else if (delay <= 20000) {                  delay /= 40;              } else if (delay <= 60000) {                  delay /= 60;              } else if (delay <= 600000) {                  delay /= 100;              } else {                  delay /= 200;              }
Magic Number,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,InitializeChildKernel,The following statement contains a magic number: if (null != ChildKernel && 5 == ChildKernelCreationCounter) {                  ChildKernel.Dispose();                  ChildKernel = null;                  ChildKernelCreationCounter = 0;              }
Magic Number,UIAutomation,DataProtectionForRDPWrapper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\RDP\DataProtectionForRDPWrapper.cs,GetHex,The following statement contains a magic number: return byt_text.Aggregate(string.Empty' (current' t) => current + Convert.ToString(t' 16).PadLeft(2' '0').ToUpper());
Magic Number,UIAutomation,DataProtectionForRDPWrapper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\RDP\DataProtectionForRDPWrapper.cs,GetHex,The following statement contains a magic number: return byt_text.Aggregate(string.Empty' (current' t) => current + Convert.ToString(t' 16).PadLeft(2' '0').ToUpper());
Magic Number,UIAutomation,DataProtectionForRDPWrapper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\RDP\DataProtectionForRDPWrapper.cs,ToByteArray,The following statement contains a magic number: try              {                  int NumberChars = HexString.Length;                  byte[] bytes = new byte[NumberChars / 2];                  for (int i = 0; i < NumberChars; i += 2)                  {                      bytes[i / 2] = Convert.ToByte(HexString.Substring(i' 2)' 16);                  }                  return bytes;              }              catch (Exception ex)              {                  // this occures everytime we decrypt MSTSC generated password.                  // so let's just throw an exception for now                  throw new Exception("Problem converting Hex to Bytes"' ex);              }
Magic Number,UIAutomation,DataProtectionForRDPWrapper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\RDP\DataProtectionForRDPWrapper.cs,ToByteArray,The following statement contains a magic number: try              {                  int NumberChars = HexString.Length;                  byte[] bytes = new byte[NumberChars / 2];                  for (int i = 0; i < NumberChars; i += 2)                  {                      bytes[i / 2] = Convert.ToByte(HexString.Substring(i' 2)' 16);                  }                  return bytes;              }              catch (Exception ex)              {                  // this occures everytime we decrypt MSTSC generated password.                  // so let's just throw an exception for now                  throw new Exception("Problem converting Hex to Bytes"' ex);              }
Magic Number,UIAutomation,DataProtectionForRDPWrapper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\RDP\DataProtectionForRDPWrapper.cs,ToByteArray,The following statement contains a magic number: try              {                  int NumberChars = HexString.Length;                  byte[] bytes = new byte[NumberChars / 2];                  for (int i = 0; i < NumberChars; i += 2)                  {                      bytes[i / 2] = Convert.ToByte(HexString.Substring(i' 2)' 16);                  }                  return bytes;              }              catch (Exception ex)              {                  // this occures everytime we decrypt MSTSC generated password.                  // so let's just throw an exception for now                  throw new Exception("Problem converting Hex to Bytes"' ex);              }
Magic Number,UIAutomation,DataProtectionForRDPWrapper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\RDP\DataProtectionForRDPWrapper.cs,ToByteArray,The following statement contains a magic number: try              {                  int NumberChars = HexString.Length;                  byte[] bytes = new byte[NumberChars / 2];                  for (int i = 0; i < NumberChars; i += 2)                  {                      bytes[i / 2] = Convert.ToByte(HexString.Substring(i' 2)' 16);                  }                  return bytes;              }              catch (Exception ex)              {                  // this occures everytime we decrypt MSTSC generated password.                  // so let's just throw an exception for now                  throw new Exception("Problem converting Hex to Bytes"' ex);              }
Magic Number,UIAutomation,DataProtectionForRDPWrapper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\RDP\DataProtectionForRDPWrapper.cs,ToByteArray,The following statement contains a magic number: try              {                  int NumberChars = HexString.Length;                  byte[] bytes = new byte[NumberChars / 2];                  for (int i = 0; i < NumberChars; i += 2)                  {                      bytes[i / 2] = Convert.ToByte(HexString.Substring(i' 2)' 16);                  }                  return bytes;              }              catch (Exception ex)              {                  // this occures everytime we decrypt MSTSC generated password.                  // so let's just throw an exception for now                  throw new Exception("Problem converting Hex to Bytes"' ex);              }
Magic Number,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,SearchByContainsTextViaWin32,The following statement contains a magic number: foreach (IUiElement elementToChoose in controlProvider.GetElements(null)) {                                    if (null != controlProvider.SearchData.ControlType && 0 < controlProvider.SearchData.ControlType.Length) {                                            foreach (string controlTypeName in controlProvider.SearchData.ControlType) {                                                    // 20140312                          // if (!String.Equals(elementToChoose.Current.ControlType.ProgrammaticName.Substring(12)' controlTypeName' StringComparison.CurrentCultureIgnoreCase)) {                          if (!String.Equals(elementToChoose.GetCurrent().ControlType.ProgrammaticName.Substring(12)' controlTypeName' StringComparison.CurrentCultureIgnoreCase)) {                              continue;                          } else {                              resultList.Add(elementToChoose);                              break;                          }                                                }                                        } else {                      resultList.Add(elementToChoose);                  }              }
Magic Number,UIAutomation,ControlSearcher,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\ControlSearcher.cs,SearchByWildcardViaWin32,The following statement contains a magic number: foreach (IUiElement tempElement3 in tempListWin32) {                                    bool goFurther = true;                                    if (null != data.ControlType && 0 < data.ControlType.Length) {                                            // 20140312                      // goFurther &= !data.ControlType.Any(controlTypeName => String.Equals(tempElement3.Current.ControlType.ProgrammaticName.Substring(12)' controlTypeName' StringComparison.CurrentCultureIgnoreCase));                      goFurther &= !data.ControlType.Any(controlTypeName => String.Equals(tempElement3.GetCurrent().ControlType.ProgrammaticName.Substring(12)' controlTypeName' StringComparison.CurrentCultureIgnoreCase));                                        } else {                      goFurther = false;                  }                                    if (goFurther) continue;                                    if (null == data.SearchCriteria || 0 == data.SearchCriteria.Length) {                                            resultList.Add(tempElement3);                  } else {                                            if (!TestControlWithAllSearchCriteria(data.SearchCriteria' tempElement3)) continue;                      resultList.Add(tempElement3);                  }              }
Magic Number,UIAutomation,SearcherTemplate,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Searchers\SearcherTemplate.cs,ContinueSearch,The following statement contains a magic number: if ((null == ResultCollection || 0 == ResultCollection.Count) &&                  (DateTime.Now - startTime).TotalSeconds <= timeout / 1000) return true;
Magic Number,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The following statement contains a magic number: if (-1000000 == settings.RelativeX) {                  settings.RelativeX = Preferences.ClickOnControlByCoordX;              }
Magic Number,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The following statement contains a magic number: if (-1000000 == settings.RelativeY) {                  settings.RelativeY = Preferences.ClickOnControlByCoordY;              }
Magic Number,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The following statement contains a magic number: if (settings.RelativeX != 0 && settings.RelativeY != 0) {                  // 20140312  //                x = settings.RelativeX + (int)whereToClick.Current.BoundingRectangle.X;  //                y = settings.RelativeY + (int)whereToClick.Current.BoundingRectangle.Y;                  x = settings.RelativeX + (int)whereToClick.GetCurrent().BoundingRectangle.X;                  y = settings.RelativeY + (int)whereToClick.GetCurrent().BoundingRectangle.Y;              } else {                  // these x and y are for the SetCursorPos call                  // they are screen coordinates                  // 20140312  //                x = (int)whereToClick.Current.BoundingRectangle.X +   //                    ((int)whereToClick.Current.BoundingRectangle.Width / 2); // + 3;  //                y = (int)whereToClick.Current.BoundingRectangle.Y +   //                    ((int)whereToClick.Current.BoundingRectangle.Height / 2); // + 3;                  x = (int)whereToClick.GetCurrent().BoundingRectangle.X +                       ((int)whereToClick.GetCurrent().BoundingRectangle.Width / 2); // + 3;                  y = (int)whereToClick.GetCurrent().BoundingRectangle.Y +                       ((int)whereToClick.GetCurrent().BoundingRectangle.Height / 2); // + 3;              }
Magic Number,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The following statement contains a magic number: if (settings.RelativeX != 0 && settings.RelativeY != 0) {                  // 20140312  //                x = settings.RelativeX + (int)whereToClick.Current.BoundingRectangle.X;  //                y = settings.RelativeY + (int)whereToClick.Current.BoundingRectangle.Y;                  x = settings.RelativeX + (int)whereToClick.GetCurrent().BoundingRectangle.X;                  y = settings.RelativeY + (int)whereToClick.GetCurrent().BoundingRectangle.Y;              } else {                  // these x and y are for the SetCursorPos call                  // they are screen coordinates                  // 20140312  //                x = (int)whereToClick.Current.BoundingRectangle.X +   //                    ((int)whereToClick.Current.BoundingRectangle.Width / 2); // + 3;  //                y = (int)whereToClick.Current.BoundingRectangle.Y +   //                    ((int)whereToClick.Current.BoundingRectangle.Height / 2); // + 3;                  x = (int)whereToClick.GetCurrent().BoundingRectangle.X +                       ((int)whereToClick.GetCurrent().BoundingRectangle.Width / 2); // + 3;                  y = (int)whereToClick.GetCurrent().BoundingRectangle.Y +                       ((int)whereToClick.GetCurrent().BoundingRectangle.Height / 2); // + 3;              }
Magic Number,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The following statement contains a magic number: var lParam =                  new IntPtr(((new IntPtr(settings.RelativeX)).ToInt32() & 0xFFFF) +                             (((new IntPtr(settings.RelativeY)).ToInt32() & 0xFFFF) << 16));
Magic Number,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The following statement contains a magic number: if (settings.Ctrl) {                  lParamKeyDown =                       new IntPtr(((new IntPtr(0x0001)).ToInt32() & 0xFFFF) +                                 (((new IntPtr(uCtrlDown)).ToInt32() & 0xFFFF) << 16));                  lParamKeyUp =                       new IntPtr(((new IntPtr(0x0001)).ToInt32() & 0xFFFF) +                                 (((new IntPtr(uCtrlUp)).ToInt32() & 0xFFFF) << 16));              }
Magic Number,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The following statement contains a magic number: if (settings.Ctrl) {                  lParamKeyDown =                       new IntPtr(((new IntPtr(0x0001)).ToInt32() & 0xFFFF) +                                 (((new IntPtr(uCtrlDown)).ToInt32() & 0xFFFF) << 16));                  lParamKeyUp =                       new IntPtr(((new IntPtr(0x0001)).ToInt32() & 0xFFFF) +                                 (((new IntPtr(uCtrlUp)).ToInt32() & 0xFFFF) << 16));              }
Magic Number,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The following statement contains a magic number: if (settings.Shift) {                  lParamKeyDown =                       new IntPtr(((new IntPtr(0x0001)).ToInt32() & 0xFFFF) +                                 (((new IntPtr(uShiftDown)).ToInt32() & 0xFFFF) << 16));                  lParamKeyUp =                       new IntPtr(((new IntPtr(0x0001)).ToInt32() & 0xFFFF) +                                 (((new IntPtr(uShiftUp)).ToInt32() & 0xFFFF) << 16));              }
Magic Number,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The following statement contains a magic number: if (settings.Shift) {                  lParamKeyDown =                       new IntPtr(((new IntPtr(0x0001)).ToInt32() & 0xFFFF) +                                 (((new IntPtr(uShiftDown)).ToInt32() & 0xFFFF) << 16));                  lParamKeyUp =                       new IntPtr(((new IntPtr(0x0001)).ToInt32() & 0xFFFF) +                                 (((new IntPtr(uShiftUp)).ToInt32() & 0xFFFF) << 16));              }
Magic Number,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The following statement contains a magic number: if (windowProcess != null) {                  IntPtr mainWindow =                       windowProcess.MainWindowHandle;                  if (mainWindow != IntPtr.Zero) {                                            var lParam2 =                           new IntPtr(((new IntPtr(ulAct)).ToInt32() & 0xFFFF) +                                     (((new IntPtr(uhAct)).ToInt32() & 0xFFFF) << 16));                      /*                      IntPtr lParam2 =                           new IntPtr(((new IntPtr(ulAct)).ToInt32() & 0xFFFF) +                                     (((new IntPtr(uhAct)).ToInt32() & 0xFFFF) << 16));                      */                      bool res0 =                           NativeMethods.PostMessage1(handle' NativeMethods.WM_MOUSEACTIVATE'                                        mainWindow' lParam2);  //                    WriteVerbose(this' "WM_MOUSEACTIVATE is sent");                  }              }
Magic Number,UIAutomation,HasControlInputCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasControlInputCmdletBase.cs,ClickControl,The following statement contains a magic number: int interval = settings.DoubleClickInterval / 2;
Magic Number,UIAutomation,HasTimeoutCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasTimeoutCmdletBase.cs,HasTimeoutCmdletBase,The following statement contains a magic number: Seconds = Timeout / 1000;
Magic Number,UIAutomation,HasTimeoutCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\HasTimeoutCmdletBase.cs,CheckTimeout,The following statement contains a magic number: try {                  if ((null == aeWindowList || aeWindowList.Count <= 0) &&                      !((nowDate - StartDate).TotalSeconds > Timeout/1000)) return;                  if (null == aeWindowList) {                      Wait = false;                      var eReturn =                      // Exception eReturn =                          new Exception(                              CmdletName(this) + ": timeout expired for process: " +                              cmdlet.ProcessName + "' title: " + cmdlet.Name);                      throw(eReturn);                  } // else{ // OK                  // }                                        Wait &= cmdlet.WaitNoWindow;                  /*                  if (!cmdlet.WaitNoWindow) {                      Wait = false;                  }                  */                  // break;                                } catch (Exception eEvaluatingWindowOrMeasuringTimeout) {                  WriteDebug(this' "exception: " +                             eEvaluatingWindowOrMeasuringTimeout.Message);                                    cmdlet.WriteError(                      cmdlet'                      "An error raised during checking the timeout. " +                      eEvaluatingWindowOrMeasuringTimeout.Message'                      "CheckingTimeout"'                      ErrorCategory.InvalidOperation'                      true);              }
Magic Number,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallWindowPattern,The following statement contains a magic number: try {                  // 20131208                  // WindowPattern windowPattern = control.GetCurrentPattern(classic.WindowPattern.Pattern) as WindowPattern;                  // WindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern' WindowPattern>(classic.WindowPattern.Pattern) as WindowPattern;                  // IWindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern' WindowPattern>(); //WindowPattern.Pattern);                  IWindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern>(classic.WindowPattern.Pattern);                  if (windowPattern != null) {                        // Close windowPattern.Close                      // get windowPattern.Current.CanMaximize                      // get windowPattern.Current.CanMinimize                      // get windowPattern.Current.IsModal                      // get windowPattern.Current.IsTopmost                      // get windowPattern.Current.WindowInteractionState                      // get windowPattern.Current.WindowVisualState                      // set windowPattern.SetWindowVisualState(WindowVisualState.Maximized                      // set windowPattern.SetWindowVisualState(WindowVisualState.Mini                      // set windowPattern.SetWindowVisualState(WindowVisualState.Normal                      // invoke windowPattern.WaitForInputIdle(int ms)                                            windowPattern.SetWindowVisualState(classic.WindowVisualState.Minimized);                      Thread.Sleep(1000);                      windowPattern.SetWindowVisualState(classic.WindowVisualState.Normal);                      windowPattern.WaitForInputIdle(1000);                      Thread.Sleep(1000);                      windowPattern.SetWindowVisualState(classic.WindowVisualState.Minimized);                      Thread.Sleep(1000);                      windowPattern.SetWindowVisualState(classic.WindowVisualState.Normal);                                            if (PassThru && null != (inputObject as IUiElement)) {                          WriteObject(this' inputObject);                      } else {                          WriteObject(this' true);                      }                  } else {                      WriteVerbose(this' "couldn't get WindowPattern");                      WriteObject(this' false);                  }              } catch (Exception) {              }
Magic Number,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallWindowPattern,The following statement contains a magic number: try {                  // 20131208                  // WindowPattern windowPattern = control.GetCurrentPattern(classic.WindowPattern.Pattern) as WindowPattern;                  // WindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern' WindowPattern>(classic.WindowPattern.Pattern) as WindowPattern;                  // IWindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern' WindowPattern>(); //WindowPattern.Pattern);                  IWindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern>(classic.WindowPattern.Pattern);                  if (windowPattern != null) {                        // Close windowPattern.Close                      // get windowPattern.Current.CanMaximize                      // get windowPattern.Current.CanMinimize                      // get windowPattern.Current.IsModal                      // get windowPattern.Current.IsTopmost                      // get windowPattern.Current.WindowInteractionState                      // get windowPattern.Current.WindowVisualState                      // set windowPattern.SetWindowVisualState(WindowVisualState.Maximized                      // set windowPattern.SetWindowVisualState(WindowVisualState.Mini                      // set windowPattern.SetWindowVisualState(WindowVisualState.Normal                      // invoke windowPattern.WaitForInputIdle(int ms)                                            windowPattern.SetWindowVisualState(classic.WindowVisualState.Minimized);                      Thread.Sleep(1000);                      windowPattern.SetWindowVisualState(classic.WindowVisualState.Normal);                      windowPattern.WaitForInputIdle(1000);                      Thread.Sleep(1000);                      windowPattern.SetWindowVisualState(classic.WindowVisualState.Minimized);                      Thread.Sleep(1000);                      windowPattern.SetWindowVisualState(classic.WindowVisualState.Normal);                                            if (PassThru && null != (inputObject as IUiElement)) {                          WriteObject(this' inputObject);                      } else {                          WriteObject(this' true);                      }                  } else {                      WriteVerbose(this' "couldn't get WindowPattern");                      WriteObject(this' false);                  }              } catch (Exception) {              }
Magic Number,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallWindowPattern,The following statement contains a magic number: try {                  // 20131208                  // WindowPattern windowPattern = control.GetCurrentPattern(classic.WindowPattern.Pattern) as WindowPattern;                  // WindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern' WindowPattern>(classic.WindowPattern.Pattern) as WindowPattern;                  // IWindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern' WindowPattern>(); //WindowPattern.Pattern);                  IWindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern>(classic.WindowPattern.Pattern);                  if (windowPattern != null) {                        // Close windowPattern.Close                      // get windowPattern.Current.CanMaximize                      // get windowPattern.Current.CanMinimize                      // get windowPattern.Current.IsModal                      // get windowPattern.Current.IsTopmost                      // get windowPattern.Current.WindowInteractionState                      // get windowPattern.Current.WindowVisualState                      // set windowPattern.SetWindowVisualState(WindowVisualState.Maximized                      // set windowPattern.SetWindowVisualState(WindowVisualState.Mini                      // set windowPattern.SetWindowVisualState(WindowVisualState.Normal                      // invoke windowPattern.WaitForInputIdle(int ms)                                            windowPattern.SetWindowVisualState(classic.WindowVisualState.Minimized);                      Thread.Sleep(1000);                      windowPattern.SetWindowVisualState(classic.WindowVisualState.Normal);                      windowPattern.WaitForInputIdle(1000);                      Thread.Sleep(1000);                      windowPattern.SetWindowVisualState(classic.WindowVisualState.Minimized);                      Thread.Sleep(1000);                      windowPattern.SetWindowVisualState(classic.WindowVisualState.Normal);                                            if (PassThru && null != (inputObject as IUiElement)) {                          WriteObject(this' inputObject);                      } else {                          WriteObject(this' true);                      }                  } else {                      WriteVerbose(this' "couldn't get WindowPattern");                      WriteObject(this' false);                  }              } catch (Exception) {              }
Magic Number,UIAutomation,PatternCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\PatternCmdletBase.cs,CallWindowPattern,The following statement contains a magic number: try {                  // 20131208                  // WindowPattern windowPattern = control.GetCurrentPattern(classic.WindowPattern.Pattern) as WindowPattern;                  // WindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern' WindowPattern>(classic.WindowPattern.Pattern) as WindowPattern;                  // IWindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern' WindowPattern>(); //WindowPattern.Pattern);                  IWindowPattern windowPattern = control.GetCurrentPattern<IWindowPattern>(classic.WindowPattern.Pattern);                  if (windowPattern != null) {                        // Close windowPattern.Close                      // get windowPattern.Current.CanMaximize                      // get windowPattern.Current.CanMinimize                      // get windowPattern.Current.IsModal                      // get windowPattern.Current.IsTopmost                      // get windowPattern.Current.WindowInteractionState                      // get windowPattern.Current.WindowVisualState                      // set windowPattern.SetWindowVisualState(WindowVisualState.Maximized                      // set windowPattern.SetWindowVisualState(WindowVisualState.Mini                      // set windowPattern.SetWindowVisualState(WindowVisualState.Normal                      // invoke windowPattern.WaitForInputIdle(int ms)                                            windowPattern.SetWindowVisualState(classic.WindowVisualState.Minimized);                      Thread.Sleep(1000);                      windowPattern.SetWindowVisualState(classic.WindowVisualState.Normal);                      windowPattern.WaitForInputIdle(1000);                      Thread.Sleep(1000);                      windowPattern.SetWindowVisualState(classic.WindowVisualState.Minimized);                      Thread.Sleep(1000);                      windowPattern.SetWindowVisualState(classic.WindowVisualState.Normal);                                            if (PassThru && null != (inputObject as IUiElement)) {                          WriteObject(this' inputObject);                      } else {                          WriteObject(this' true);                      }                  } else {                      WriteVerbose(this' "couldn't get WindowPattern");                      WriteObject(this' false);                  }              } catch (Exception) {              }
Magic Number,UIAutomation,WaitCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\WaitCmdletBase.cs,WaitIfCondition,The following statement contains a magic number: do              {                  SleepAndRunScriptBlocks(this);                                    DateTime nowDate = DateTime.Now;                  try {                      string tempIsReport = string.Empty;                      // 20140312                      // tempIsReport = isEnabledOrIsVisible ? _control.Current.IsEnabled.ToString() : _control.Current.IsOffscreen.ToString();                      tempIsReport = isEnabledOrIsVisible ? _control.GetCurrent().IsEnabled.ToString() : _control.GetCurrent().IsOffscreen.ToString();                                        } catch { }                  if (!CheckAndPrepareInput(this))                  {                      WriteObject(this' false);                                            WriteError(                          this'                          "An unknown error while checking the control."'                          "CheckingControl"'                          ErrorCategory.InvalidResult'                          true);                                            return;                  }                                    // 20140312  //                if (isEnabledOrIsVisible) {  //                    Wait = !(_control.Current).IsEnabled;  //                } else {  //                    Wait = (_control.Current).IsOffscreen;  //                }                  Wait = isEnabledOrIsVisible ? !(_control.GetCurrent()).IsEnabled : (_control.GetCurrent()).IsOffscreen;                  if ((nowDate - StartDate).TotalSeconds > Timeout / 1000)                  {                      // 20140312  //                    WriteVerbose(this' "timeout expired for AutomationId: " +   //                                 _control.Current.AutomationId +  //                                "' title: " +  //                                 _control.Current.Name);                      // 20140312  //                    WriteError(  //                        this'  //                        CmdletName(this) + ": timeout expired for AutomationId: " +   //                        _control.Current.AutomationId +  //                        "' title: " +  //                        _control.Current.Name'  //                        "TimeoutExpired"'  //                        ErrorCategory.OperationTimeout'  //                        true);                      WriteError(                          this'                          CmdletName(this) + ": timeout expired for AutomationId: " +                           _control.GetCurrent().AutomationId +                          "' title: " +                          _control.GetCurrent().Name'                          "TimeoutExpired"'                          ErrorCategory.OperationTimeout'                          true);                  }                  if (_control != null) continue;                                } while (Wait);
Magic Number,UIAutomation,WizardRunCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\Wizard\WizardRunCmdletBase.cs,InterruptOnTimeoutExpiration,The following statement contains a magic number: if (!((nowDate - cmdlet.StartDate).TotalSeconds > Preferences.Timeout/1000)) return interrupt;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: HighlighterBorder = 3;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: HighlighterBorderParent = 5;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: HighlighterBorderCheckedControl = 3;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: Timeout = 5000;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: AfterFailTurboTimeout = 2000;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: TranscriptInterval = 200;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: OnSuccessDelay = 500;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: OnErrorDelay = 500;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: MaximumErrorCount = 256;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: MaximumEventCount = 256;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: OnSleepDelay = 50;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: ClickOnControlByCoordX = 5;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: ClickOnControlByCoordY = 5;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: OnSelectWizardStepDelay = 100;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: BannerLeft = 100;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: BannerTop = 100;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: BannerWidth = 600;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: BannerHeight = 100;
Magic Number,UIAutomation,Preferences,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UserSettings\Preferences.cs,Preferences,The following statement contains a magic number: BannerFontSize = 20;
Magic Number,AVG.Automation.Cmdlets.NativeTypes,NativeMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\pull requests\NativeMethods.cs,MakeLong,The following statement contains a magic number: return (HiWord << 16) | (LoWord & 0xffff);
Magic Number,AVG.Automation.Cmdlets,NativeMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\pull requests\NativeMethods.cs,MakeLong,The following statement contains a magic number: return (HiWord << 16) | (LoWord & 0xffff);
Duplicate Code,UIAutomation.Commands,InvokeUiaHotKeyCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Hotkey\InvokeUIAHotKeyCommand.cs,BeginProcessing,The method contains a code clone-set at the following line numbers (starting from the method definition): ((176' 195)' (180' 199)' (184' 203)' (188' 207)' (192' 211)' (196' 215))
Duplicate Code,UIAutomation.Commands,InvokeUiaHotKeyCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Hotkey\InvokeUIAHotKeyCommand.cs,BeginProcessing,The method contains a code clone-set at the following line numbers (starting from the method definition): ((176' 210)' (180' 214))
Duplicate Code,UIAutomation.Commands,InvokeUiaHotKeyCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Hotkey\InvokeUIAHotKeyCommand.cs,BeginProcessing,The method contains a code clone-set at the following line numbers (starting from the method definition): ((176' 195)' (184' 203)' (188' 207)' (192' 211)' (196' 215))
Duplicate Code,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetSheridanTreeItemFromTreeNode,The method contains a code clone-set at the following line numbers (starting from the method definition): ((65' 86)' (109' 130))
Missing Default,UIAutomation.Commands,StartUiaCachedModeCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Cache\StartUiaCachedModeCommand.cs,BeginProcessing,The following switch statement is missing a default case: switch (propertyName.ToUpper()) {                              case "NAME":                                  CurrentData.CacheRequest.Add(classic.AutomationElement.NameProperty);                                  break;                              case "AUTOMATIONID":                                  CurrentData.CacheRequest.Add(classic.AutomationElement.AutomationIdProperty);                                  break;                              case "CLASSNAME":                              case "CLASS":                                  CurrentData.CacheRequest.Add(classic.AutomationElement.ClassNameProperty);                                  break;                              case "CONTROLTYPE":                                  CurrentData.CacheRequest.Add(classic.AutomationElement.ControlTypeProperty);                                  break;                              case "NATIVEWINDOWHANDLE":                                  CurrentData.CacheRequest.Add(classic.AutomationElement.NativeWindowHandleProperty);                                  break;                              case "BOUNDINGRECTANGLE":  //                            case "RECTANGLE":  //                            case "BOUNDING":                                  CurrentData.CacheRequest.Add(classic.AutomationElement.BoundingRectangleProperty);                                  break;                              case "CLICKABLEPOINT":  //                            case "POINT":  //                            case "CLICKABLE":                                  CurrentData.CacheRequest.Add(classic.AutomationElement.ClickablePointProperty);                                  break;                              case "ISENABLED":                              case "ENABLED":                                  CurrentData.CacheRequest.Add(classic.AutomationElement.IsEnabledProperty);                                  break;                              case "ISOFFSCREEN":                              case "ISVISIBLE":                              case "VISIBLE":                                  CurrentData.CacheRequest.Add(classic.AutomationElement.IsOffscreenProperty);                                  break;                              // 20140208                              case "PROCESSID":                                  CurrentData.CacheRequest.Add(classic.AutomationElement.ProcessIdProperty);                                  break;                              case "VALUE":                                  CurrentData.CacheRequest.Add(classic.RangeValuePattern.ValueProperty);                                  CurrentData.CacheRequest.Add(classic.ValuePattern.ValueProperty);                                  break;  //                            default:  //                                CurrentData.CacheRequest.Add(AutomationElement.NameProperty);  //                                CurrentData.CacheRequest.Add(AutomationElement.AutomationIdProperty);  //                                CurrentData.CacheRequest.Add(AutomationElement.ClassNameProperty);  //                                CurrentData.CacheRequest.Add(AutomationElement.ControlTypeProperty);  //                                CurrentData.CacheRequest.Add(AutomationElement.NativeWindowHandleProperty);  //                                CurrentData.CacheRequest.Add(AutomationElement.BoundingRectangleProperty);  //                                CurrentData.CacheRequest.Add(AutomationElement.ClickablePointProperty);  //                                CurrentData.CacheRequest.Add(AutomationElement.IsEnabledProperty);  //                                CurrentData.CacheRequest.Add(AutomationElement.IsOffscreenProperty);  //                                break;                          }
Missing Default,UIAutomation.Commands,StartUiaCachedModeCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Cache\StartUiaCachedModeCommand.cs,BeginProcessing,The following switch statement is missing a default case: switch (patternName.ToUpper()) {                              case "DOCK":                              case "DOCKPATTERN":                                  CurrentData.CacheRequest.Add(classic.DockPattern.Pattern);                                  break;                              case "EXPAND":                              case "COLLAPSE":                              case "EXPANDPATTERN":                              case "COLLAPSEPATTERN":                              case "EXPANDCOLLAPSEPATTERN":                                  CurrentData.CacheRequest.Add(classic.ExpandCollapsePattern.Pattern);                                  break;                              case "GRIDITEM":                              case "GRIDITEMPATTERN":                                  CurrentData.CacheRequest.Add(classic.GridItemPattern.Pattern);                                  break;                              case "GRID":                              case "GRIDPATTERN":                                  CurrentData.CacheRequest.Add(classic.GridPattern.Pattern);                                  break;                              case "INVOKE":                              case "INVOKEPATTERN":                                  CurrentData.CacheRequest.Add(classic.InvokePattern.Pattern);                                  break;                              case "MULTIPLEVIEW":                              case "MULTIPLEVIEWPATTERN":                                  CurrentData.CacheRequest.Add(classic.MultipleViewPattern.Pattern);                                  break;                              case "RANGEVALUE":                              case "RANGEVALUEPATTERN":                                  CurrentData.CacheRequest.Add(classic.RangeValuePattern.Pattern);                                  break;                              case "SCROLLITEM":                              case "SCROLLITEMPATTERN":                                  CurrentData.CacheRequest.Add(classic.ScrollItemPattern.Pattern);                                  break;                              case "SCROLL":                              case "SCROLLPATTERN":                                  CurrentData.CacheRequest.Add(classic.ScrollPattern.Pattern);                                  break;                              case "SELECTIONITEM":                              case "SELECTIONITEMPATTERN":                                  CurrentData.CacheRequest.Add(classic.SelectionItemPattern.Pattern);                                  break;                              case "SELECTION":                              case "SELECTIONPATTERN":                                  CurrentData.CacheRequest.Add(classic.SelectionPattern.Pattern);                                  break;                              case "TABLEITEM":                              case "TABLEITEMPATTERN":                                  CurrentData.CacheRequest.Add(classic.TableItemPattern.Pattern);                                  break;                              case "TABLE":                              case "TABLEPATTERN":                                  CurrentData.CacheRequest.Add(classic.TablePattern.Pattern);                                  break;                              case "TEXT":                              case "TEXTPATTERN":                                  CurrentData.CacheRequest.Add(classic.TextPattern.Pattern);                                  break;                              case "TOGGLE":                              case "TOGGLEPATTERN":                                  CurrentData.CacheRequest.Add(classic.TogglePattern.Pattern);                                  break;                              case "TRANSFORM":                              case "TRANSFORMPATTERN":                                  CurrentData.CacheRequest.Add(classic.TransformPattern.Pattern);                                  break;                              case "VALUE":                              case "VALUEPATTERN":                                  CurrentData.CacheRequest.Add(classic.ValuePattern.Pattern);                                  break;                              case "WINDOW":                              case "WINDOWPATTERN":                                  CurrentData.CacheRequest.Add(classic.WindowPattern.Pattern);                                  break;  //                            default:  //                                CurrentData.CacheRequest.Add(classic.DockPattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.ExpandCollapsePattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.GridItemPattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.GridPattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.InvokePattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.MultipleViewPattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.RangeValuePattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.ScrollItemPattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.ScrollPattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.SelectionItemPattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.SelectionPattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.TableItemPattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.TablePattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.TextPattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.TogglePattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.TransformPattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.ValuePattern.Pattern);  //                                CurrentData.CacheRequest.Add(classic.WindowPattern.Pattern);  //                                break;                          }
Missing Default,UIAutomation.Commands,ConvertToUiaSearchCriteriaCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Convert\ConvertToUiaSearchCriteriaCommand.cs,GetPropertyCompleteString,The following switch statement is missing a default case: switch (propertyName) {                      case "Name":                          result += PropertyToString(currentElement.GetCurrent().Name);                          break;                      case "AutomationId":                          result += PropertyToString(currentElement.GetCurrent().AutomationId);                          break;                      case "ControlType":                          result += PropertyToString(currentElement.GetCurrent().ControlType.ProgrammaticName.Substring(12));                          break;                      case "Class":                          result += PropertyToString(currentElement.GetCurrent().ClassName);                          break;                      case "AcceleratorKey":                          result += PropertyToString(currentElement.GetCurrent().AcceleratorKey);                          break;                      case "AccessKey":                          result += PropertyToString(currentElement.GetCurrent().AccessKey);                          break;                      case "BoundingRectangle":                          result += PropertyToString(currentElement.GetCurrent().BoundingRectangle.ToString());                          break;                      case "FrameworkId":                          result += PropertyToString(currentElement.GetCurrent().FrameworkId);                          break;                      case "HasKeyboardFocus":                          result += PropertyToString(currentElement.GetCurrent().HasKeyboardFocus.ToString());                          break;                      case "HelpText":                          result += PropertyToString(currentElement.GetCurrent().HelpText);                          break;                      case "IsContentElement":                          result += PropertyToString(currentElement.GetCurrent().IsContentElement.ToString());                          break;                      case "IsControlElement":                          result += PropertyToString(currentElement.GetCurrent().IsControlElement.ToString());                          break;                      case "IsEnabled":                          result += PropertyToString(currentElement.GetCurrent().IsEnabled.ToString());                          break;                      case "IsKeyboardFocusable":                          result += PropertyToString(currentElement.GetCurrent().IsKeyboardFocusable.ToString());                          break;                      case "IsOffscreen":                          result += PropertyToString(currentElement.GetCurrent().IsOffscreen.ToString());                          break;                      case "IsPassword":                          result += PropertyToString(currentElement.GetCurrent().IsPassword.ToString());                          break;                      case "IsRequiredForForm":                          result += PropertyToString(currentElement.GetCurrent().IsRequiredForForm.ToString());                          break;                      case "ItemStatus":                          result += PropertyToString(currentElement.GetCurrent().ItemStatus);                          break;                      case "ItemType":                          result += PropertyToString(currentElement.GetCurrent().ItemType);                          break;                          //case "LabeledBy":                          //    result +=                          //    break;                      case "LocalizedControlType":                          result += PropertyToString(currentElement.GetCurrent().LocalizedControlType);                          break;                      case "NativeWindowHandle":                          result += PropertyToString(currentElement.GetCurrent().NativeWindowHandle.ToString());                          break;                      case "Orientation":                          result += PropertyToString(currentElement.GetCurrent().Orientation.ToString());                          break;                      case "ProcessId":                          result += PropertyToString(currentElement.GetCurrent().ProcessId.ToString());                          break;                  }
Missing Default,UIAutomation.Commands,InvokeUiaHotKeyCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Hotkey\InvokeUIAHotKeyCommand.cs,BeginProcessing,The following switch statement is missing a default case: switch (Key) {                      case "a":                      case "A":                          keys3 = NativeMethods.VK_0x41;                          break;                      case "b":                      case "B":                          keys3 = NativeMethods.VK_0x42;                          break;                      case "c":                      case "C":                          keys3 = NativeMethods.VK_0x43;                          break;                      case "d":                      case "D":                          keys3 = NativeMethods.VK_0x44;                          break;                      case "e":                      case "E":                          keys3 = NativeMethods.VK_0x45;                          break;                      case "f":                      case "F":                          keys3 = NativeMethods.VK_0x46;                          break;                      case "g":                      case "G":                          keys3 = NativeMethods.VK_0x47;                          break;                      case "h":                      case "H":                          keys3 = NativeMethods.VK_0x48;                          break;                      case "i":                      case "I":                          keys3 = NativeMethods.VK_0x49;                          break;                      case "j":                      case "J":                          keys3 = NativeMethods.VK_0x4A;                          break;                      case "k":                      case "K":                          keys3 = NativeMethods.VK_0x4B;                          break;                      case "l":                      case "L":                          keys3 = NativeMethods.VK_0x4C;                          break;                      case "m":                      case "M":                          keys3 = NativeMethods.VK_0x4D;                          break;                      case "n":                      case "N":                          keys3 = NativeMethods.VK_0x4E;                          break;                      case "o":                      case "O":                          keys3 = NativeMethods.VK_0x4F;                          break;                      case "p":                      case "P":                          keys3 = NativeMethods.VK_0x50;                          break;                      case "q":                      case "Q":                          keys3 = NativeMethods.VK_0x51;                          break;                      case "r":                      case "R":                          keys3 = NativeMethods.VK_0x52;                          break;                      case "s":                      case "S":                          keys3 = NativeMethods.VK_0x53;                          break;                      case "t":                      case "T":                          keys3 = NativeMethods.VK_0x54;                          break;                      case "u":                      case "U":                          keys3 = NativeMethods.VK_0x55;                          break;                      case "v":                      case "V":                          keys3 = NativeMethods.VK_0x56;                          break;                      case "w":                      case "W":                          keys3 = NativeMethods.VK_0x57;                          break;                      case "x":                      case "X":                          keys3 = NativeMethods.VK_0x58;                          break;                      case "y":                      case "Y":                          keys3 = NativeMethods.VK_0x59;                          break;                      case "z":                      case "Z":                          keys3 = NativeMethods.VK_0x5A;                          break;                      case "0":                          keys3 = NativeMethods.VK_0x30;                          break;                      case "1":                          keys3 = NativeMethods.VK_0x31;                          break;                      case "2":                          keys3 = NativeMethods.VK_0x32;                          break;                      case "3":                          keys3 = NativeMethods.VK_0x33;                          break;                      case "4":                          keys3 = NativeMethods.VK_0x34;                          break;                      case "5":                          keys3 = NativeMethods.VK_0x35;                          break;                      case "6":                          keys3 = NativeMethods.VK_0x36;                          break;                      case "7":                          keys3 = NativeMethods.VK_0x37;                          break;                      case "8":                          keys3 = NativeMethods.VK_0x38;                          break;                      case "9":                          keys3 = NativeMethods.VK_0x39;                          break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                          //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;  //                    case "a":  //                    case "A":  //                        keys3 = NativeMethods.VK_0x41;  //                        break;                                            }
Missing Default,UIAutomation.Commands,RecorderFrom,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Commands\Transcript\RecorderFrom.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.btnStart = ((System.Windows.Controls.Button)(target));                            #line 12 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnStart.Click += new System.Windows.RoutedEventHandler(this.BtnStartClick);                            #line default              #line hidden              return;              case 2:              this.btnPause = ((System.Windows.Controls.Button)(target));                            #line 23 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnPause.Click += new System.Windows.RoutedEventHandler(this.BtnPauseClick);                            #line default              #line hidden              return;              case 3:              this.btnStop = ((System.Windows.Controls.Button)(target));                            #line 34 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnStop.Click += new System.Windows.RoutedEventHandler(this.BtnStopClick);                            #line default              #line hidden              return;              case 4:              this.btnWatch = ((System.Windows.Controls.Button)(target));                            #line 45 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnWatch.Click += new System.Windows.RoutedEventHandler(this.BtnWatchClick);                            #line default              #line hidden              return;              case 5:              this.btnEdit = ((System.Windows.Controls.Button)(target));                            #line 56 "..\..\..\..\Commands\Transcript\RecorderFrom.xaml"              this.btnEdit.Click += new System.Windows.RoutedEventHandler(this.BtnEditClick);                            #line default              #line hidden              return;              }
Missing Default,UIAutomation.Helpers.Commands,PatternCommand,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Commands\Pattern\PatternCommand.cs,Execute,The following switch statement is missing a default case: switch (cmdlet.WhatToDo)                  {                      case "DockSet":                          cmdlet.CallDockPatternForSet(cmdlet' control' inputObject' ((InvokeUiaDockPatternSetCommand)cmdlet).DockPosition);                          break;                      case "DockGet":                          cmdlet.CallDockPatternForGet(cmdlet' control' inputObject);                          break;                      case "Expand":                          cmdlet.CallExpandPattern(cmdlet' control' inputObject);                          break;                      case "Collapse":                          cmdlet.CallCollapsePattern(cmdlet' control' inputObject);                          break;                      case "GridItem":                          cmdlet.CallGridItemPattern(cmdlet' control' inputObject);                          break;                          // not yet implemented                      case "Grid":                          cmdlet.CallGridPattern(cmdlet' control' inputObject);                          break;                      case "Invoke":                          cmdlet.CallInvokePattern(cmdlet' control' inputObject);                          break;                          // not yet implemented                          // case "MultipleView":                          // pattern =                          // (System.Windows.Automation.MultipleViewPattern)pt;                          // break;                      case "RangeValueGet":                          cmdlet.CallRangeValuePatternForGet(cmdlet' control' inputObject);                          break;                      case "RangeValueSet":                          cmdlet.CallRangeValuePatternForSet(cmdlet' control' inputObject);                          break;                      case "ScrollItem":                          cmdlet.CallScrollItemPattern(cmdlet' control' inputObject);                          break;                      case "Scroll":                          cmdlet.CallScrollPattern(cmdlet' control' inputObject);                          break;                      case "SelectionItem":                          cmdlet.CallSelectionItemPattern(cmdlet' control' inputObject);                          break;                      case "SelectionItemState":                          cmdlet.CallSelectionItemPatternForState(cmdlet' control' inputObject);                          break;                      case "SelectedItem": // return only elements that are selected                          cmdlet.CallSelectedItemPattern(cmdlet' control' inputObject);                          break;                      case "Selection":                          cmdlet.CallSelectionPattern(cmdlet' control' inputObject);                          break;                          // not yet implemented                      case "TableItem":                          cmdlet.CallTableItemPattern(cmdlet' control' inputObject);                          break;                          // not yet implemented                      case "Table":                          cmdlet.CallTablePattern(cmdlet' control' inputObject);                          // pattern =                          // (System.Windows.Automation.TablePattern)pt;                          break;                          // not yet implemented                          //case "Text":                      case "TextGet":                          // pattern =                          // (System.Windows.Automation.TextPattern)pt;                          // break;                          cmdlet.CallTextPatternForGet(cmdlet' control' inputObject);                          break;                      case "TextSet":                          cmdlet.CallTextPatternForSet(cmdlet' control' inputObject);                          break;                      case "Toggle":                          cmdlet.CallTogglePatternMethod(cmdlet' control' inputObject);                          break;                      case "ToggleStateGet":                          cmdlet.CallTogglePatternForGet(cmdlet' control' inputObject);                          break;                      case "ToggleStateSet":                          cmdlet.CallTogglePatternForSet(cmdlet' control' inputObject' ((InvokeUiaToggleStateSetCommand)cmdlet).On);                          break;                      case "TransformMove":                          cmdlet.CallTransformPatternForMove(cmdlet' control' inputObject);                          break;                      case "TransformResize":                          cmdlet.CallTransformPatternForResize(cmdlet' control' inputObject);                          break;                      case "TransformRotate":                          cmdlet.CallTransformPatternForRotate(cmdlet' control' inputObject);                          break;                      case "ValueGet":                          cmdlet.CallValuePatternForGet(cmdlet' control' inputObject);                          break;                      case "ValueSet":                          cmdlet.CallValuePatternForSet(cmdlet' control' inputObject);                          break;                      case "Window":                          cmdlet.CallWindowPattern(cmdlet' control' inputObject);                          break;                      case "Annotation":                          cmdlet.WriteVerbose(cmdlet' "Annotation");                          break;                      case "Drag":                          cmdlet.WriteVerbose(cmdlet' "Drag");                          break;                      case "DropTarget":                          cmdlet.WriteVerbose(cmdlet' "DropTarget");                          break;                      case "ItemContainer":                          cmdlet.WriteVerbose(cmdlet' "ItemContainer");                          break;                      case "LegacyIAccessible":                          cmdlet.WriteVerbose(cmdlet' "LegacyIAccessible");                          break;                      case "ObjectModel":                          cmdlet.WriteVerbose(cmdlet' "ObjectModel");                          break;                      case "Spreadsheet":                          cmdlet.WriteVerbose(cmdlet' "Spreadsheet");                          break;                      case "SpreadsheetItem":                          cmdlet.WriteVerbose(cmdlet' "SpreadsheetItem");                          break;                      case "Styles":                          cmdlet.WriteVerbose(cmdlet' "Styles");                          break;                      case "SynchronizedInput":                          cmdlet.WriteVerbose(cmdlet' "SynchronizedInput");                          break;                      case "TextChild":                          cmdlet.WriteVerbose(cmdlet' "TextChild");                          break;                      case "VirtualizedItem":                          cmdlet.WriteVerbose(cmdlet' "VirtualizedItem");                          break;                  }
Missing Default,UIAutomation,ExtensionsMethods,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\ExtensionMethods\ExtensionMethods.cs,ConvertAutomationPatternToBasePattern,The following switch statement is missing a default case: switch (pattern.ProgrammaticName.Replace("Identifiers.Pattern"' string.Empty)) {                          case "DockPattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<IDockPattern>(element' pattern));                              break;                          case "ExpandCollapsePattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<IExpandCollapsePattern>(element' pattern));                              break;                          case "GridItemPattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<IGridItemPattern>(element' pattern));                              break;                          case "GridPattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<IGridPattern>(element' pattern));                              break;                          case "InvokePattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<IInvokePattern>(element' pattern));                              break;                          case "RangeValuePattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<IRangeValuePattern>(element' pattern));                              break;                          case "ScrollItemPattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<IScrollItemPattern>(element' pattern));                              break;                          case "ScrollPattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<IScrollPattern>(element' pattern));                              break;                          case "SelectionItemPattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<ISelectionItemPattern>(element' pattern));                              break;                          case "SelectionPattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<ISelectionPattern>(element' pattern));                              break;                          case "TableItemPattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<ITableItemPattern>(element' pattern));                              break;                          case "TablePattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<ITablePattern>(element' pattern));                              break;                          case "TextPattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<ITextPattern>(element' pattern));                              break;                          case "TogglePattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<ITogglePattern>(element' pattern));                              break;                          case "TransformPattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<ITransformPattern>(element' pattern));                              break;                          case "ValuePattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<IValuePattern>(element' pattern));                              break;                          case "WindowPattern":                              resultList.Add(AutomationFactory.GetPatternAdapter<IWindowPattern>(element' pattern));                              break;                          // default:                          //                               //     break;                      }
Missing Default,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,GetFileExtensionByImageType,The following switch statement is missing a default case: switch (format.ToString().ToUpper()) {                  case "BMP":                      result = ".bmp";                      break;                  case "EMF":                      result = ".emf";                      break;                  case "EXIF":                      result = ".exif";                      break;                  case "GIF":                      result = ".gif";                      break;                  case "ICON":                      result = ".ico";                      break;                  case "JPEG":                      result = ".jpg";                      break;                  case "MEMORYBMP":                      result = ".mbmp";                      break;                  case "PNG":                      result = ".png";                      break;                  case "TIFF":                      result = ".tif";                      break;                  case "WMF":                      result = ".wmf";                      break;                      //default:                      //                      //    break;              }
Missing Default,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,ProcessingElement,The following switch statement is missing a default case: switch (ptrn.GetType().Name.Replace("Uia"' string.Empty)) {                                          case "InvokePattern":                                              strElementPatterns +=                                                  "Invoke" + tempControlNameForCmdlet + "Click";                                              break;                                          case "ValuePattern":                                              strElementPatterns +=                                                  "Set" + tempControlNameForCmdlet + "Text' Get" + tempControlNameForCmdlet + "Text";                                              break;                                          case "RangeValuePattern":                                              strElementPatterns +=                                                  "Set" + tempControlNameForCmdlet + "RangeValue' Get" + tempControlNameForCmdlet + "RangeValue";                                              break;                                          case "SelectionItemPattern":                                              string tempName = string.Empty;                                              try {                                                  // 20140312  //                                                if (element.Current.Name.Length > 0) {  //                                                    tempName = element.Current.Name;                                                  if (element.GetCurrent().Name.Length > 0) {                                                      tempName = element.GetCurrent().Name;                                                  }                                              }                                              catch {                                                  // 20140312                                                  // if (element.Cached.Name.Length > 0) {                                                  // if ((element as ISupportsCached).Cached.Name.Length > 0) {                                                  if (element.GetCached().Name.Length > 0) {                                                      // tempName = element.Cached.Name;                                                      // tempName = (element as ISupportsCached).Cached.Name;                                                      tempName = element.GetCached().Name;                                                  }                                              }                                              strElementPatterns +=                                                  "Invoke" +                                                  tempControlNameForCmdlet +                                                  "SelectItem -ItemName '" +                                                  tempName +                                                  "'' Get" +                                                  tempControlNameForCmdlet +                                                  "SelectionItemState";                                              break;                                          case "SelectionPattern":                                              strElementPatterns +=                                                  "Get" + tempControlNameForCmdlet + "Selection";                                              break;                                          case "ExpandCollapsePattern":                                              strElementPatterns +=                                                  "Invoke" +                                                  tempControlNameForCmdlet +                                                  "Expand' Invoke" +                                                  tempControlNameForCmdlet +                                                  "Collapse";                                              break;                                          case "TogglePattern":                                              strElementPatterns +=                                                  "Invoke" +                                                  tempControlNameForCmdlet +                                                  "Toggle' Get" +                                                  tempControlNameForCmdlet +                                                  "ToggleState";                                              break;                                          case "TransformPattern":                                              strElementPatterns +=                                                  "Invoke" +                                                  tempControlNameForCmdlet +                                                  "TransformMove' Invoke" +                                                  tempControlNameForCmdlet +                                                  "TransformResize' Invoke" +                                                  tempControlNameForCmdlet +                                                  "TransformRotate";                                              break;                                          case "WindowPattern":                                              strElementPatterns +=                                                  "Invoke" + tempControlNameForCmdlet + "WindowState";                                              break;                                              //                                                case "Pattern":                                              //                                                    strElementPatterns +=                                              //                                                        "Invoke" + tempControlNameForCmdlet + "Click";                                              //                                                    break;                                      }
Missing Default,UIAutomation,UiaHelper,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Internal\UIAHelper.cs,SubscribeToEventsDuringRecording,The following switch statement is missing a default case: switch ((pattern.GetSourcePattern() as classic.AutomationPattern).ProgrammaticName) {                                  case "SelectionItemPatternIdentifiers.Pattern":                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.SelectionItemPattern.ElementAddedToSelectionEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.SelectionItemPattern.ElementRemovedFromSelectionEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.SelectionItemPattern.ElementSelectedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      break;                                  case "SelectionPatternIdentifiers.Pattern":                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.SelectionPattern.InvalidatedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      break;                                  case "InvokePatternIdentifiers.Pattern":                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.InvokePattern.InvokedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      break;                                  case "AutomationElementIdentifiers.Pattern":                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.AutomationElement.AsyncContentLoadedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.AutomationElement.LayoutInvalidatedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.AutomationElement.MenuClosedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                                                            cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.AutomationElement.MenuOpenedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.AutomationElement.ToolTipClosedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.AutomationElement.ToolTipOpenedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                                                            cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.AutomationElement.AutomationFocusChangedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.AutomationElement.AutomationPropertyChangedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.AutomationElement.StructureChangedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      break;                                  case "TextPatternIdentifiers.Pattern":                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.TextPattern.TextChangedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.TextPattern.TextSelectionChangedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      break;                                  case "WindowPatternIdentifiers.Pattern":                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.WindowPattern.WindowOpenedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      cmdlet.SubscribeToEvents(cmdlet'                                                               element'                                                               classic.WindowPattern.WindowClosedEvent'                                                               null); //'                                      //cmdlet.OnUIRecordingAutomationEvent);                                      break;                              }
Missing Default,UIAutomation,AutomationFactory,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\UnderlyingCode\Ninject\AutomationFactory.cs,GetHolder,The following switch statement is missing a default case: switch (typeof(T).Name) {                      case "IControlInputHolder":                          typeOfClass = typeof(UiControlInputHolder);                          wearedInterface = typeof(IControlInput);                          break;                      case "IKeyboardInputHolder":                          typeOfClass = typeof(UiKeyboardInputHolder);                          wearedInterface = typeof(IKeyboardInput);                          break;                      case "IMouseInputHolder":                          typeOfClass = typeof(UiMouseInputHolder);                          wearedInterface = typeof(IMouseInput);                          break;                      case "ITouchInputHolder":                          typeOfClass = typeof(UiTouchInputHolder);                          wearedInterface = typeof(ITouchInput);                          break;                  }
Missing Default,UIAutomation,ULtraGridCmdletBase,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\Helpers\Inheritance\ULtraGridCmdletBase.cs,ifUltraGridProcessing,The following switch statement is missing a default case: switch (operation) {                                          case ifUltraGridOperations.SelectItems:                                              // in case of this operation is a selection of items                                              // clicks are needed                                              // otherwise' just return the set of rows found                                              if (ClickControl(this'                                                  child'                                                  new ClickSettings() {                                                      Ctrl = true'                                                      RelativeX = Preferences.ClickOnControlByCoordX'                                                      RelativeY = Preferences.ClickOnControlByCoordY                                                  })) {                                                                                                    /*                                                  false'                                                  false'                                                  false'                                                  false'                                                  true' // notTheFirstChild'                                                  false' // notTheLastChild' // true'                                                  false'                                                  // 20131125                                                  0'                                                  Preferences.ClickOnControlByCoordX'                                                  Preferences.ClickOnControlByCoordY)) {                                                  */                                                      selectedItems.Add(child);                                                      WriteVerbose(this'                                                          // 20140312                                                          // "the " + child.Current.Name +                                                          "the " + child.GetCurrent().Name +                                                           " added to the output collection");                                                  }                                                                                                const uint pressed = 0x8000;                                              // uint pressed = 0x8000;                                              if ((NativeMethods.GetKeyState(NativeMethods.VK_LCONTROL) & pressed) > 0) {                                                  NativeMethods.keybd_event(NativeMethods.VK_LCONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0);                                                  /*                                                  NativeMethods.keybd_event((byte)NativeMethods.VK_LCONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0);                                                  */                                              }                                              if ((NativeMethods.GetKeyState(NativeMethods.VK_RCONTROL) & pressed) > 0) {                                                  NativeMethods.keybd_event(NativeMethods.VK_RCONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0);                                                  /*                                                  NativeMethods.keybd_event((byte)NativeMethods.VK_RCONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0);                                                  */                                              }                                              if ((NativeMethods.GetKeyState(NativeMethods.VK_CONTROL) & pressed) > 0) {                                                  NativeMethods.keybd_event(NativeMethods.VK_CONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0);                                                  /*                                                  NativeMethods.keybd_event((byte)NativeMethods.VK_CONTROL' 0x45' NativeMethods.KEYEVENTF_EXTENDEDKEY | NativeMethods.KEYEVENTF_KEYUP' 0);                                                  */                                              }                                              break;                                          case ifUltraGridOperations.GetItems:                                              selectedItems.Add(child);                                              WriteVerbose(this'                                                  // 20140312                                                  // "the " + child.Current.Name +                                                  "the " + child.GetCurrent().Name +                                                   " added to the output collection");                                              break;                                          case ifUltraGridOperations.GetSelection:                                              if (GetColorProbe(this'                                                  child)) {                                                      selectedItems.Add(child);                                                      WriteVerbose(this'                                                          // 20140312                                                          // "the " + child.Current.Name +                                                      "the " + child.GetCurrent().Name +                                                           " added to the output collection");                                                  }                                              break;                                      }
Missing Default,UIAutomation,InvokeUiaWindowPattern,C:\repos\apetrovskiy_STUPS\UIA\UIAutomation\pull requests\UIAutomation.cs,ProcessRecord,The following switch statement is missing a default case: switch (PatternName.ToLower())                      {                          case "close":                              windowPattern.Close();                              break;                            case "maximize":                              windowPattern.SetWindowVisualState(classic.WindowVisualState.Maximized);                              break;                            case "minimize":                              windowPattern.SetWindowVisualState(classic.WindowVisualState.Minimized);                              break;                            case "restore":                              windowPattern.SetWindowVisualState(classic.WindowVisualState.Normal);                              break;                      }
