Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MoonAPNS,NotificationPayload,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\NotificationPayload.cs,ToJson,Cyclomatic complexity of the method is 9
Complex Method,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GetFeedBack,Cyclomatic complexity of the method is 8
Long Parameter List,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,SelectLocalCertificate,The method has 5 parameters. Parameters: sender' targetHost' localCertificates' remoteCertificate' acceptableIssuers
Long Statement,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,ReadResponse,The length of the statement  "          Logger.Error("An error occurred while reading Apple response for token {0} - {1}"' _notifications[payLoadIndex].DeviceToken' ex.Message); " is 137.
Complex Conditional,MoonAPNS,NotificationPayload,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\NotificationPayload.cs,ToJson,The conditional expression  "!string.IsNullOrEmpty(this.Alert.Body)  					&& string.IsNullOrEmpty(this.Alert.LocalizedKey)  					&& string.IsNullOrEmpty(this.Alert.ActionLocalizedKey)  					&& (this.Alert.LocalizedArgs == null || this.Alert.LocalizedArgs.Count <= 0)"  is complex.
Magic Number,MoonAPNS,NotificationPayload,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\NotificationPayload.cs,ToJson,The following statement contains a magic number: foreach (char c in rawString)  			{  				if ((int)c < 32 || (int)c > 127)  					encodedString.Append("\\u" + String.Format("{0:x4}"' Convert.ToUInt32(c)));  				else  					encodedString.Append(c);  			}
Magic Number,MoonAPNS,NotificationPayload,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\NotificationPayload.cs,ToJson,The following statement contains a magic number: foreach (char c in rawString)  			{  				if ((int)c < 32 || (int)c > 127)  					encodedString.Append("\\u" + String.Format("{0:x4}"' Convert.ToUInt32(c)));  				else  					encodedString.Append(c);  			}
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,PushNotification,The following statement contains a magic number: _errorList.Add(2' "Missing device token");
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,PushNotification,The following statement contains a magic number: _errorList.Add(3' "Missing topic");
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,PushNotification,The following statement contains a magic number: _errorList.Add(4' "Missing payload");
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,PushNotification,The following statement contains a magic number: _errorList.Add(5' "Invalid token size");
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,PushNotification,The following statement contains a magic number: _errorList.Add(6' "Invalid topic size");
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,PushNotification,The following statement contains a magic number: _errorList.Add(7' "Invalid payload size");
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,PushNotification,The following statement contains a magic number: _errorList.Add(8' "Invalid token");
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,PushNotification,The following statement contains a magic number: _errorList.Add(255' "None (unknown)");
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,SendToApple,The following statement contains a magic number: if (queue.Count < 8999)          {              SendQueueToapple(_notifications);          }          else          {              const int pageSize = 8999;              int numberOfPages = (queue.Count / pageSize) + (queue.Count % pageSize == 0 ? 0 : 1);              int currentPage = 0;                            while(currentPage < numberOfPages)              {                  _notifications = (queue.Skip(currentPage * pageSize).Take(pageSize)).ToList();                  SendQueueToapple(_notifications);                  currentPage++;              }          }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,SendToApple,The following statement contains a magic number: if (queue.Count < 8999)          {              SendQueueToapple(_notifications);          }          else          {              const int pageSize = 8999;              int numberOfPages = (queue.Count / pageSize) + (queue.Count % pageSize == 0 ? 0 : 1);              int currentPage = 0;                            while(currentPage < numberOfPages)              {                  _notifications = (queue.Skip(currentPage * pageSize).Take(pageSize)).ToList();                  SendQueueToapple(_notifications);                  currentPage++;              }          }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,SendQueueToapple,The following statement contains a magic number: int i = 1000;
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,SendQueueToapple,The following statement contains a magic number: foreach (var item in queue)          {              if (!_conected)              {                  Connect(_host' NotificationPort' _certificates);                  var response = new byte[6];                  _apnsStream.BeginRead(response' 0' 6' ReadResponse' new MyAsyncInfo(response' _apnsStream));              }              try              {                  if (item.DeviceToken.Length == 64) //check lenght of device token' if its shorter or longer stop generating Payload.                  {                      item.PayloadId = i;                      byte[] payload = GeneratePayload(item);                      _apnsStream.Write(payload);                      Logger.Info("Notification successfully sent to APNS server for Device Toekn : " + item.DeviceToken);                      Thread.Sleep(1000); //Wait to get the response from apple.                  }                  else                      Logger.Error("Invalid device token length' possible simulator entry: " + item.DeviceToken);              }              catch (Exception ex)              {                  Logger.Error("An error occurred on sending payload for device token {0} - {1}"' item.DeviceToken' ex.Message);                  _conected = false;              }              i++;          }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,SendQueueToapple,The following statement contains a magic number: foreach (var item in queue)          {              if (!_conected)              {                  Connect(_host' NotificationPort' _certificates);                  var response = new byte[6];                  _apnsStream.BeginRead(response' 0' 6' ReadResponse' new MyAsyncInfo(response' _apnsStream));              }              try              {                  if (item.DeviceToken.Length == 64) //check lenght of device token' if its shorter or longer stop generating Payload.                  {                      item.PayloadId = i;                      byte[] payload = GeneratePayload(item);                      _apnsStream.Write(payload);                      Logger.Info("Notification successfully sent to APNS server for Device Toekn : " + item.DeviceToken);                      Thread.Sleep(1000); //Wait to get the response from apple.                  }                  else                      Logger.Error("Invalid device token length' possible simulator entry: " + item.DeviceToken);              }              catch (Exception ex)              {                  Logger.Error("An error occurred on sending payload for device token {0} - {1}"' item.DeviceToken' ex.Message);                  _conected = false;              }              i++;          }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,SendQueueToapple,The following statement contains a magic number: foreach (var item in queue)          {              if (!_conected)              {                  Connect(_host' NotificationPort' _certificates);                  var response = new byte[6];                  _apnsStream.BeginRead(response' 0' 6' ReadResponse' new MyAsyncInfo(response' _apnsStream));              }              try              {                  if (item.DeviceToken.Length == 64) //check lenght of device token' if its shorter or longer stop generating Payload.                  {                      item.PayloadId = i;                      byte[] payload = GeneratePayload(item);                      _apnsStream.Write(payload);                      Logger.Info("Notification successfully sent to APNS server for Device Toekn : " + item.DeviceToken);                      Thread.Sleep(1000); //Wait to get the response from apple.                  }                  else                      Logger.Error("Invalid device token length' possible simulator entry: " + item.DeviceToken);              }              catch (Exception ex)              {                  Logger.Error("An error occurred on sending payload for device token {0} - {1}"' item.DeviceToken' ex.Message);                  _conected = false;              }              i++;          }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,SendQueueToapple,The following statement contains a magic number: foreach (var item in queue)          {              if (!_conected)              {                  Connect(_host' NotificationPort' _certificates);                  var response = new byte[6];                  _apnsStream.BeginRead(response' 0' 6' ReadResponse' new MyAsyncInfo(response' _apnsStream));              }              try              {                  if (item.DeviceToken.Length == 64) //check lenght of device token' if its shorter or longer stop generating Payload.                  {                      item.PayloadId = i;                      byte[] payload = GeneratePayload(item);                      _apnsStream.Write(payload);                      Logger.Info("Notification successfully sent to APNS server for Device Toekn : " + item.DeviceToken);                      Thread.Sleep(1000); //Wait to get the response from apple.                  }                  else                      Logger.Error("Invalid device token length' possible simulator entry: " + item.DeviceToken);              }              catch (Exception ex)              {                  Logger.Error("An error occurred on sending payload for device token {0} - {1}"' item.DeviceToken' ex.Message);                  _conected = false;              }              i++;          }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,ReadResponse,The following statement contains a magic number: try        {          var info = ar.AsyncState as MyAsyncInfo;          info.MyStream.ReadTimeout = 100;          if (_apnsStream.CanRead)          {            var command = Convert.ToInt16(info.ByteArray[0]);            var status = Convert.ToInt16(info.ByteArray[1]);            var ID = new byte[4];            Array.Copy(info.ByteArray' 2' ID' 0' 4);              payLoadId = Encoding.Default.GetString(ID);            payLoadIndex = ((int.Parse(payLoadId)) - 1000);            Logger.Error("Apple rejected palyload for device token : " + _notifications[payLoadIndex].DeviceToken);            Logger.Error("Apple Error code : " + _errorList[status]);            Logger.Error("Connection terminated by Apple.");            _rejected.Add(_notifications[payLoadIndex].DeviceToken);            _conected = false;          }        }        catch (Exception ex)        {            Logger.Error("An error occurred while reading Apple response for token {0} - {1}"' _notifications[payLoadIndex].DeviceToken' ex.Message);        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,ReadResponse,The following statement contains a magic number: try        {          var info = ar.AsyncState as MyAsyncInfo;          info.MyStream.ReadTimeout = 100;          if (_apnsStream.CanRead)          {            var command = Convert.ToInt16(info.ByteArray[0]);            var status = Convert.ToInt16(info.ByteArray[1]);            var ID = new byte[4];            Array.Copy(info.ByteArray' 2' ID' 0' 4);              payLoadId = Encoding.Default.GetString(ID);            payLoadIndex = ((int.Parse(payLoadId)) - 1000);            Logger.Error("Apple rejected palyload for device token : " + _notifications[payLoadIndex].DeviceToken);            Logger.Error("Apple Error code : " + _errorList[status]);            Logger.Error("Connection terminated by Apple.");            _rejected.Add(_notifications[payLoadIndex].DeviceToken);            _conected = false;          }        }        catch (Exception ex)        {            Logger.Error("An error occurred while reading Apple response for token {0} - {1}"' _notifications[payLoadIndex].DeviceToken' ex.Message);        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,ReadResponse,The following statement contains a magic number: try        {          var info = ar.AsyncState as MyAsyncInfo;          info.MyStream.ReadTimeout = 100;          if (_apnsStream.CanRead)          {            var command = Convert.ToInt16(info.ByteArray[0]);            var status = Convert.ToInt16(info.ByteArray[1]);            var ID = new byte[4];            Array.Copy(info.ByteArray' 2' ID' 0' 4);              payLoadId = Encoding.Default.GetString(ID);            payLoadIndex = ((int.Parse(payLoadId)) - 1000);            Logger.Error("Apple rejected palyload for device token : " + _notifications[payLoadIndex].DeviceToken);            Logger.Error("Apple Error code : " + _errorList[status]);            Logger.Error("Connection terminated by Apple.");            _rejected.Add(_notifications[payLoadIndex].DeviceToken);            _conected = false;          }        }        catch (Exception ex)        {            Logger.Error("An error occurred while reading Apple response for token {0} - {1}"' _notifications[payLoadIndex].DeviceToken' ex.Message);        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,ReadResponse,The following statement contains a magic number: try        {          var info = ar.AsyncState as MyAsyncInfo;          info.MyStream.ReadTimeout = 100;          if (_apnsStream.CanRead)          {            var command = Convert.ToInt16(info.ByteArray[0]);            var status = Convert.ToInt16(info.ByteArray[1]);            var ID = new byte[4];            Array.Copy(info.ByteArray' 2' ID' 0' 4);              payLoadId = Encoding.Default.GetString(ID);            payLoadIndex = ((int.Parse(payLoadId)) - 1000);            Logger.Error("Apple rejected palyload for device token : " + _notifications[payLoadIndex].DeviceToken);            Logger.Error("Apple Error code : " + _errorList[status]);            Logger.Error("Connection terminated by Apple.");            _rejected.Add(_notifications[payLoadIndex].DeviceToken);            _conected = false;          }        }        catch (Exception ex)        {            Logger.Error("An error occurred while reading Apple response for token {0} - {1}"' _notifications[payLoadIndex].DeviceToken' ex.Message);        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,ReadResponse,The following statement contains a magic number: try        {          var info = ar.AsyncState as MyAsyncInfo;          info.MyStream.ReadTimeout = 100;          if (_apnsStream.CanRead)          {            var command = Convert.ToInt16(info.ByteArray[0]);            var status = Convert.ToInt16(info.ByteArray[1]);            var ID = new byte[4];            Array.Copy(info.ByteArray' 2' ID' 0' 4);              payLoadId = Encoding.Default.GetString(ID);            payLoadIndex = ((int.Parse(payLoadId)) - 1000);            Logger.Error("Apple rejected palyload for device token : " + _notifications[payLoadIndex].DeviceToken);            Logger.Error("Apple Error code : " + _errorList[status]);            Logger.Error("Connection terminated by Apple.");            _rejected.Add(_notifications[payLoadIndex].DeviceToken);            _conected = false;          }        }        catch (Exception ex)        {            Logger.Error("An error occurred while reading Apple response for token {0} - {1}"' _notifications[payLoadIndex].DeviceToken' ex.Message);        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,Disconnect,The following statement contains a magic number: try        {          Thread.Sleep(500);          _apnsClient.Close();          _apnsStream.Close();          _apnsStream.Dispose();          _apnsStream = null;          _conected = false;          Logger.Info("Disconnected.");        }        catch (Exception ex)        {          Logger.Error("An error occurred while disconnecting. - " + ex.Message);        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GeneratePayload,The following statement contains a magic number: try        {          //convert Devide token to HEX value.          byte[] deviceToken = new byte[payload.DeviceToken.Length / 2];          for (int i = 0; i < deviceToken.Length; i++)              deviceToken[i] = byte.Parse(payload.DeviceToken.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);            var memoryStream = new MemoryStream();            // Command          memoryStream.WriteByte(1); // Changed command Type             //Adding ID to Payload          memoryStream.Write(Encoding.ASCII.GetBytes(payload.PayloadId.ToString())' 0' payload.PayloadId.ToString().Length);            //Adding ExpiryDate to Payload          int epoch = (int) (DateTime.UtcNow.AddMinutes(300) - new DateTime(1970' 1' 1)).TotalSeconds;          byte[] timeStamp = BitConverter.GetBytes(epoch);          memoryStream.Write(timeStamp' 0' timeStamp.Length);            byte[] tokenLength = BitConverter.GetBytes((Int16) 32);          Array.Reverse(tokenLength);          // device token length          memoryStream.Write(tokenLength' 0' 2);            // Token          memoryStream.Write(deviceToken' 0' 32);          // String length          string apnMessage = payload.ToJson();          Logger.Info("Payload generated for " + payload.DeviceToken + " : " + apnMessage);            byte[] apnMessageLength = BitConverter.GetBytes((Int16) apnMessage.Length);          Array.Reverse(apnMessageLength);            // message length          memoryStream.Write(apnMessageLength' 0' 2);            // Write the message          memoryStream.Write(Encoding.ASCII.GetBytes(apnMessage)' 0' apnMessage.Length);          return memoryStream.ToArray();        }        catch (Exception ex)        {          Logger.Error("Unable to generate payload - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GeneratePayload,The following statement contains a magic number: try        {          //convert Devide token to HEX value.          byte[] deviceToken = new byte[payload.DeviceToken.Length / 2];          for (int i = 0; i < deviceToken.Length; i++)              deviceToken[i] = byte.Parse(payload.DeviceToken.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);            var memoryStream = new MemoryStream();            // Command          memoryStream.WriteByte(1); // Changed command Type             //Adding ID to Payload          memoryStream.Write(Encoding.ASCII.GetBytes(payload.PayloadId.ToString())' 0' payload.PayloadId.ToString().Length);            //Adding ExpiryDate to Payload          int epoch = (int) (DateTime.UtcNow.AddMinutes(300) - new DateTime(1970' 1' 1)).TotalSeconds;          byte[] timeStamp = BitConverter.GetBytes(epoch);          memoryStream.Write(timeStamp' 0' timeStamp.Length);            byte[] tokenLength = BitConverter.GetBytes((Int16) 32);          Array.Reverse(tokenLength);          // device token length          memoryStream.Write(tokenLength' 0' 2);            // Token          memoryStream.Write(deviceToken' 0' 32);          // String length          string apnMessage = payload.ToJson();          Logger.Info("Payload generated for " + payload.DeviceToken + " : " + apnMessage);            byte[] apnMessageLength = BitConverter.GetBytes((Int16) apnMessage.Length);          Array.Reverse(apnMessageLength);            // message length          memoryStream.Write(apnMessageLength' 0' 2);            // Write the message          memoryStream.Write(Encoding.ASCII.GetBytes(apnMessage)' 0' apnMessage.Length);          return memoryStream.ToArray();        }        catch (Exception ex)        {          Logger.Error("Unable to generate payload - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GeneratePayload,The following statement contains a magic number: try        {          //convert Devide token to HEX value.          byte[] deviceToken = new byte[payload.DeviceToken.Length / 2];          for (int i = 0; i < deviceToken.Length; i++)              deviceToken[i] = byte.Parse(payload.DeviceToken.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);            var memoryStream = new MemoryStream();            // Command          memoryStream.WriteByte(1); // Changed command Type             //Adding ID to Payload          memoryStream.Write(Encoding.ASCII.GetBytes(payload.PayloadId.ToString())' 0' payload.PayloadId.ToString().Length);            //Adding ExpiryDate to Payload          int epoch = (int) (DateTime.UtcNow.AddMinutes(300) - new DateTime(1970' 1' 1)).TotalSeconds;          byte[] timeStamp = BitConverter.GetBytes(epoch);          memoryStream.Write(timeStamp' 0' timeStamp.Length);            byte[] tokenLength = BitConverter.GetBytes((Int16) 32);          Array.Reverse(tokenLength);          // device token length          memoryStream.Write(tokenLength' 0' 2);            // Token          memoryStream.Write(deviceToken' 0' 32);          // String length          string apnMessage = payload.ToJson();          Logger.Info("Payload generated for " + payload.DeviceToken + " : " + apnMessage);            byte[] apnMessageLength = BitConverter.GetBytes((Int16) apnMessage.Length);          Array.Reverse(apnMessageLength);            // message length          memoryStream.Write(apnMessageLength' 0' 2);            // Write the message          memoryStream.Write(Encoding.ASCII.GetBytes(apnMessage)' 0' apnMessage.Length);          return memoryStream.ToArray();        }        catch (Exception ex)        {          Logger.Error("Unable to generate payload - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GeneratePayload,The following statement contains a magic number: try        {          //convert Devide token to HEX value.          byte[] deviceToken = new byte[payload.DeviceToken.Length / 2];          for (int i = 0; i < deviceToken.Length; i++)              deviceToken[i] = byte.Parse(payload.DeviceToken.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);            var memoryStream = new MemoryStream();            // Command          memoryStream.WriteByte(1); // Changed command Type             //Adding ID to Payload          memoryStream.Write(Encoding.ASCII.GetBytes(payload.PayloadId.ToString())' 0' payload.PayloadId.ToString().Length);            //Adding ExpiryDate to Payload          int epoch = (int) (DateTime.UtcNow.AddMinutes(300) - new DateTime(1970' 1' 1)).TotalSeconds;          byte[] timeStamp = BitConverter.GetBytes(epoch);          memoryStream.Write(timeStamp' 0' timeStamp.Length);            byte[] tokenLength = BitConverter.GetBytes((Int16) 32);          Array.Reverse(tokenLength);          // device token length          memoryStream.Write(tokenLength' 0' 2);            // Token          memoryStream.Write(deviceToken' 0' 32);          // String length          string apnMessage = payload.ToJson();          Logger.Info("Payload generated for " + payload.DeviceToken + " : " + apnMessage);            byte[] apnMessageLength = BitConverter.GetBytes((Int16) apnMessage.Length);          Array.Reverse(apnMessageLength);            // message length          memoryStream.Write(apnMessageLength' 0' 2);            // Write the message          memoryStream.Write(Encoding.ASCII.GetBytes(apnMessage)' 0' apnMessage.Length);          return memoryStream.ToArray();        }        catch (Exception ex)        {          Logger.Error("Unable to generate payload - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GeneratePayload,The following statement contains a magic number: try        {          //convert Devide token to HEX value.          byte[] deviceToken = new byte[payload.DeviceToken.Length / 2];          for (int i = 0; i < deviceToken.Length; i++)              deviceToken[i] = byte.Parse(payload.DeviceToken.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);            var memoryStream = new MemoryStream();            // Command          memoryStream.WriteByte(1); // Changed command Type             //Adding ID to Payload          memoryStream.Write(Encoding.ASCII.GetBytes(payload.PayloadId.ToString())' 0' payload.PayloadId.ToString().Length);            //Adding ExpiryDate to Payload          int epoch = (int) (DateTime.UtcNow.AddMinutes(300) - new DateTime(1970' 1' 1)).TotalSeconds;          byte[] timeStamp = BitConverter.GetBytes(epoch);          memoryStream.Write(timeStamp' 0' timeStamp.Length);            byte[] tokenLength = BitConverter.GetBytes((Int16) 32);          Array.Reverse(tokenLength);          // device token length          memoryStream.Write(tokenLength' 0' 2);            // Token          memoryStream.Write(deviceToken' 0' 32);          // String length          string apnMessage = payload.ToJson();          Logger.Info("Payload generated for " + payload.DeviceToken + " : " + apnMessage);            byte[] apnMessageLength = BitConverter.GetBytes((Int16) apnMessage.Length);          Array.Reverse(apnMessageLength);            // message length          memoryStream.Write(apnMessageLength' 0' 2);            // Write the message          memoryStream.Write(Encoding.ASCII.GetBytes(apnMessage)' 0' apnMessage.Length);          return memoryStream.ToArray();        }        catch (Exception ex)        {          Logger.Error("Unable to generate payload - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GeneratePayload,The following statement contains a magic number: try        {          //convert Devide token to HEX value.          byte[] deviceToken = new byte[payload.DeviceToken.Length / 2];          for (int i = 0; i < deviceToken.Length; i++)              deviceToken[i] = byte.Parse(payload.DeviceToken.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);            var memoryStream = new MemoryStream();            // Command          memoryStream.WriteByte(1); // Changed command Type             //Adding ID to Payload          memoryStream.Write(Encoding.ASCII.GetBytes(payload.PayloadId.ToString())' 0' payload.PayloadId.ToString().Length);            //Adding ExpiryDate to Payload          int epoch = (int) (DateTime.UtcNow.AddMinutes(300) - new DateTime(1970' 1' 1)).TotalSeconds;          byte[] timeStamp = BitConverter.GetBytes(epoch);          memoryStream.Write(timeStamp' 0' timeStamp.Length);            byte[] tokenLength = BitConverter.GetBytes((Int16) 32);          Array.Reverse(tokenLength);          // device token length          memoryStream.Write(tokenLength' 0' 2);            // Token          memoryStream.Write(deviceToken' 0' 32);          // String length          string apnMessage = payload.ToJson();          Logger.Info("Payload generated for " + payload.DeviceToken + " : " + apnMessage);            byte[] apnMessageLength = BitConverter.GetBytes((Int16) apnMessage.Length);          Array.Reverse(apnMessageLength);            // message length          memoryStream.Write(apnMessageLength' 0' 2);            // Write the message          memoryStream.Write(Encoding.ASCII.GetBytes(apnMessage)' 0' apnMessage.Length);          return memoryStream.ToArray();        }        catch (Exception ex)        {          Logger.Error("Unable to generate payload - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GeneratePayload,The following statement contains a magic number: try        {          //convert Devide token to HEX value.          byte[] deviceToken = new byte[payload.DeviceToken.Length / 2];          for (int i = 0; i < deviceToken.Length; i++)              deviceToken[i] = byte.Parse(payload.DeviceToken.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);            var memoryStream = new MemoryStream();            // Command          memoryStream.WriteByte(1); // Changed command Type             //Adding ID to Payload          memoryStream.Write(Encoding.ASCII.GetBytes(payload.PayloadId.ToString())' 0' payload.PayloadId.ToString().Length);            //Adding ExpiryDate to Payload          int epoch = (int) (DateTime.UtcNow.AddMinutes(300) - new DateTime(1970' 1' 1)).TotalSeconds;          byte[] timeStamp = BitConverter.GetBytes(epoch);          memoryStream.Write(timeStamp' 0' timeStamp.Length);            byte[] tokenLength = BitConverter.GetBytes((Int16) 32);          Array.Reverse(tokenLength);          // device token length          memoryStream.Write(tokenLength' 0' 2);            // Token          memoryStream.Write(deviceToken' 0' 32);          // String length          string apnMessage = payload.ToJson();          Logger.Info("Payload generated for " + payload.DeviceToken + " : " + apnMessage);            byte[] apnMessageLength = BitConverter.GetBytes((Int16) apnMessage.Length);          Array.Reverse(apnMessageLength);            // message length          memoryStream.Write(apnMessageLength' 0' 2);            // Write the message          memoryStream.Write(Encoding.ASCII.GetBytes(apnMessage)' 0' apnMessage.Length);          return memoryStream.ToArray();        }        catch (Exception ex)        {          Logger.Error("Unable to generate payload - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GeneratePayload,The following statement contains a magic number: try        {          //convert Devide token to HEX value.          byte[] deviceToken = new byte[payload.DeviceToken.Length / 2];          for (int i = 0; i < deviceToken.Length; i++)              deviceToken[i] = byte.Parse(payload.DeviceToken.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);            var memoryStream = new MemoryStream();            // Command          memoryStream.WriteByte(1); // Changed command Type             //Adding ID to Payload          memoryStream.Write(Encoding.ASCII.GetBytes(payload.PayloadId.ToString())' 0' payload.PayloadId.ToString().Length);            //Adding ExpiryDate to Payload          int epoch = (int) (DateTime.UtcNow.AddMinutes(300) - new DateTime(1970' 1' 1)).TotalSeconds;          byte[] timeStamp = BitConverter.GetBytes(epoch);          memoryStream.Write(timeStamp' 0' timeStamp.Length);            byte[] tokenLength = BitConverter.GetBytes((Int16) 32);          Array.Reverse(tokenLength);          // device token length          memoryStream.Write(tokenLength' 0' 2);            // Token          memoryStream.Write(deviceToken' 0' 32);          // String length          string apnMessage = payload.ToJson();          Logger.Info("Payload generated for " + payload.DeviceToken + " : " + apnMessage);            byte[] apnMessageLength = BitConverter.GetBytes((Int16) apnMessage.Length);          Array.Reverse(apnMessageLength);            // message length          memoryStream.Write(apnMessageLength' 0' 2);            // Write the message          memoryStream.Write(Encoding.ASCII.GetBytes(apnMessage)' 0' apnMessage.Length);          return memoryStream.ToArray();        }        catch (Exception ex)        {          Logger.Error("Unable to generate payload - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GeneratePayload,The following statement contains a magic number: try        {          //convert Devide token to HEX value.          byte[] deviceToken = new byte[payload.DeviceToken.Length / 2];          for (int i = 0; i < deviceToken.Length; i++)              deviceToken[i] = byte.Parse(payload.DeviceToken.Substring(i * 2' 2)' System.Globalization.NumberStyles.HexNumber);            var memoryStream = new MemoryStream();            // Command          memoryStream.WriteByte(1); // Changed command Type             //Adding ID to Payload          memoryStream.Write(Encoding.ASCII.GetBytes(payload.PayloadId.ToString())' 0' payload.PayloadId.ToString().Length);            //Adding ExpiryDate to Payload          int epoch = (int) (DateTime.UtcNow.AddMinutes(300) - new DateTime(1970' 1' 1)).TotalSeconds;          byte[] timeStamp = BitConverter.GetBytes(epoch);          memoryStream.Write(timeStamp' 0' timeStamp.Length);            byte[] tokenLength = BitConverter.GetBytes((Int16) 32);          Array.Reverse(tokenLength);          // device token length          memoryStream.Write(tokenLength' 0' 2);            // Token          memoryStream.Write(deviceToken' 0' 32);          // String length          string apnMessage = payload.ToJson();          Logger.Info("Payload generated for " + payload.DeviceToken + " : " + apnMessage);            byte[] apnMessageLength = BitConverter.GetBytes((Int16) apnMessage.Length);          Array.Reverse(apnMessageLength);            // message length          memoryStream.Write(apnMessageLength' 0' 2);            // Write the message          memoryStream.Write(Encoding.ASCII.GetBytes(apnMessage)' 0' apnMessage.Length);          return memoryStream.ToArray();        }        catch (Exception ex)        {          Logger.Error("Unable to generate payload - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GetFeedBack,The following statement contains a magic number: try        {          var feedbacks = new List<Feedback>();          Logger.Info("Connecting to feedback service.");            if (!_conected)              Connect(_feedbackHost' FeedbackPort' _certificates);            if (_conected)          {              //Set up              byte[] buffer = new byte[38];              int recd = 0;              DateTime minTimestamp = DateTime.Now.AddYears(-1);                //Get the first feedback              recd = _apnsStream.Read(buffer' 0' buffer.Length);              Logger.Info("Feedback response received.");                if (recd == 0)                  Logger.Info("Feedback response is empty.");                //Continue while we have results and are not disposing              while (recd > 0)              {                  Logger.Info("processing feedback response");                  var fb = new Feedback();                    //Get our seconds since 1970 ?                  byte[] bSeconds = new byte[4];                  byte[] bDeviceToken = new byte[32];                    Array.Copy(buffer' 0' bSeconds' 0' 4);                    //Check endianness                  if (BitConverter.IsLittleEndian)                      Array.Reverse(bSeconds);                    int tSeconds = BitConverter.ToInt32(bSeconds' 0);                    //Add seconds since 1970 to that date' in UTC and then get it locally                  fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();                      //Now copy out the device token                  Array.Copy(buffer' 6' bDeviceToken' 0' 32);                    fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();                    //Make sure we have a good feedback tuple                  if (fb.DeviceToken.Length == 64 && fb.Timestamp > minTimestamp)                  {                      //Raise event                      //this.Feedback(this' fb);                      feedbacks.Add(fb);                  }                    //Clear our array to reuse it                  Array.Clear(buffer' 0' buffer.Length);                    //Read the next feedback                  recd = _apnsStream.Read(buffer' 0' buffer.Length);              }              //clode the connection here !              Disconnect();              if (feedbacks.Count > 0)                  Logger.Info("Total {0} feedbacks received."' feedbacks.Count);              return feedbacks;          }        }        catch (Exception ex)        {          Logger.Error("Error occurred on receiving feed back. - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GetFeedBack,The following statement contains a magic number: try        {          var feedbacks = new List<Feedback>();          Logger.Info("Connecting to feedback service.");            if (!_conected)              Connect(_feedbackHost' FeedbackPort' _certificates);            if (_conected)          {              //Set up              byte[] buffer = new byte[38];              int recd = 0;              DateTime minTimestamp = DateTime.Now.AddYears(-1);                //Get the first feedback              recd = _apnsStream.Read(buffer' 0' buffer.Length);              Logger.Info("Feedback response received.");                if (recd == 0)                  Logger.Info("Feedback response is empty.");                //Continue while we have results and are not disposing              while (recd > 0)              {                  Logger.Info("processing feedback response");                  var fb = new Feedback();                    //Get our seconds since 1970 ?                  byte[] bSeconds = new byte[4];                  byte[] bDeviceToken = new byte[32];                    Array.Copy(buffer' 0' bSeconds' 0' 4);                    //Check endianness                  if (BitConverter.IsLittleEndian)                      Array.Reverse(bSeconds);                    int tSeconds = BitConverter.ToInt32(bSeconds' 0);                    //Add seconds since 1970 to that date' in UTC and then get it locally                  fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();                      //Now copy out the device token                  Array.Copy(buffer' 6' bDeviceToken' 0' 32);                    fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();                    //Make sure we have a good feedback tuple                  if (fb.DeviceToken.Length == 64 && fb.Timestamp > minTimestamp)                  {                      //Raise event                      //this.Feedback(this' fb);                      feedbacks.Add(fb);                  }                    //Clear our array to reuse it                  Array.Clear(buffer' 0' buffer.Length);                    //Read the next feedback                  recd = _apnsStream.Read(buffer' 0' buffer.Length);              }              //clode the connection here !              Disconnect();              if (feedbacks.Count > 0)                  Logger.Info("Total {0} feedbacks received."' feedbacks.Count);              return feedbacks;          }        }        catch (Exception ex)        {          Logger.Error("Error occurred on receiving feed back. - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GetFeedBack,The following statement contains a magic number: try        {          var feedbacks = new List<Feedback>();          Logger.Info("Connecting to feedback service.");            if (!_conected)              Connect(_feedbackHost' FeedbackPort' _certificates);            if (_conected)          {              //Set up              byte[] buffer = new byte[38];              int recd = 0;              DateTime minTimestamp = DateTime.Now.AddYears(-1);                //Get the first feedback              recd = _apnsStream.Read(buffer' 0' buffer.Length);              Logger.Info("Feedback response received.");                if (recd == 0)                  Logger.Info("Feedback response is empty.");                //Continue while we have results and are not disposing              while (recd > 0)              {                  Logger.Info("processing feedback response");                  var fb = new Feedback();                    //Get our seconds since 1970 ?                  byte[] bSeconds = new byte[4];                  byte[] bDeviceToken = new byte[32];                    Array.Copy(buffer' 0' bSeconds' 0' 4);                    //Check endianness                  if (BitConverter.IsLittleEndian)                      Array.Reverse(bSeconds);                    int tSeconds = BitConverter.ToInt32(bSeconds' 0);                    //Add seconds since 1970 to that date' in UTC and then get it locally                  fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();                      //Now copy out the device token                  Array.Copy(buffer' 6' bDeviceToken' 0' 32);                    fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();                    //Make sure we have a good feedback tuple                  if (fb.DeviceToken.Length == 64 && fb.Timestamp > minTimestamp)                  {                      //Raise event                      //this.Feedback(this' fb);                      feedbacks.Add(fb);                  }                    //Clear our array to reuse it                  Array.Clear(buffer' 0' buffer.Length);                    //Read the next feedback                  recd = _apnsStream.Read(buffer' 0' buffer.Length);              }              //clode the connection here !              Disconnect();              if (feedbacks.Count > 0)                  Logger.Info("Total {0} feedbacks received."' feedbacks.Count);              return feedbacks;          }        }        catch (Exception ex)        {          Logger.Error("Error occurred on receiving feed back. - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GetFeedBack,The following statement contains a magic number: try        {          var feedbacks = new List<Feedback>();          Logger.Info("Connecting to feedback service.");            if (!_conected)              Connect(_feedbackHost' FeedbackPort' _certificates);            if (_conected)          {              //Set up              byte[] buffer = new byte[38];              int recd = 0;              DateTime minTimestamp = DateTime.Now.AddYears(-1);                //Get the first feedback              recd = _apnsStream.Read(buffer' 0' buffer.Length);              Logger.Info("Feedback response received.");                if (recd == 0)                  Logger.Info("Feedback response is empty.");                //Continue while we have results and are not disposing              while (recd > 0)              {                  Logger.Info("processing feedback response");                  var fb = new Feedback();                    //Get our seconds since 1970 ?                  byte[] bSeconds = new byte[4];                  byte[] bDeviceToken = new byte[32];                    Array.Copy(buffer' 0' bSeconds' 0' 4);                    //Check endianness                  if (BitConverter.IsLittleEndian)                      Array.Reverse(bSeconds);                    int tSeconds = BitConverter.ToInt32(bSeconds' 0);                    //Add seconds since 1970 to that date' in UTC and then get it locally                  fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();                      //Now copy out the device token                  Array.Copy(buffer' 6' bDeviceToken' 0' 32);                    fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();                    //Make sure we have a good feedback tuple                  if (fb.DeviceToken.Length == 64 && fb.Timestamp > minTimestamp)                  {                      //Raise event                      //this.Feedback(this' fb);                      feedbacks.Add(fb);                  }                    //Clear our array to reuse it                  Array.Clear(buffer' 0' buffer.Length);                    //Read the next feedback                  recd = _apnsStream.Read(buffer' 0' buffer.Length);              }              //clode the connection here !              Disconnect();              if (feedbacks.Count > 0)                  Logger.Info("Total {0} feedbacks received."' feedbacks.Count);              return feedbacks;          }        }        catch (Exception ex)        {          Logger.Error("Error occurred on receiving feed back. - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GetFeedBack,The following statement contains a magic number: try        {          var feedbacks = new List<Feedback>();          Logger.Info("Connecting to feedback service.");            if (!_conected)              Connect(_feedbackHost' FeedbackPort' _certificates);            if (_conected)          {              //Set up              byte[] buffer = new byte[38];              int recd = 0;              DateTime minTimestamp = DateTime.Now.AddYears(-1);                //Get the first feedback              recd = _apnsStream.Read(buffer' 0' buffer.Length);              Logger.Info("Feedback response received.");                if (recd == 0)                  Logger.Info("Feedback response is empty.");                //Continue while we have results and are not disposing              while (recd > 0)              {                  Logger.Info("processing feedback response");                  var fb = new Feedback();                    //Get our seconds since 1970 ?                  byte[] bSeconds = new byte[4];                  byte[] bDeviceToken = new byte[32];                    Array.Copy(buffer' 0' bSeconds' 0' 4);                    //Check endianness                  if (BitConverter.IsLittleEndian)                      Array.Reverse(bSeconds);                    int tSeconds = BitConverter.ToInt32(bSeconds' 0);                    //Add seconds since 1970 to that date' in UTC and then get it locally                  fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();                      //Now copy out the device token                  Array.Copy(buffer' 6' bDeviceToken' 0' 32);                    fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();                    //Make sure we have a good feedback tuple                  if (fb.DeviceToken.Length == 64 && fb.Timestamp > minTimestamp)                  {                      //Raise event                      //this.Feedback(this' fb);                      feedbacks.Add(fb);                  }                    //Clear our array to reuse it                  Array.Clear(buffer' 0' buffer.Length);                    //Read the next feedback                  recd = _apnsStream.Read(buffer' 0' buffer.Length);              }              //clode the connection here !              Disconnect();              if (feedbacks.Count > 0)                  Logger.Info("Total {0} feedbacks received."' feedbacks.Count);              return feedbacks;          }        }        catch (Exception ex)        {          Logger.Error("Error occurred on receiving feed back. - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GetFeedBack,The following statement contains a magic number: try        {          var feedbacks = new List<Feedback>();          Logger.Info("Connecting to feedback service.");            if (!_conected)              Connect(_feedbackHost' FeedbackPort' _certificates);            if (_conected)          {              //Set up              byte[] buffer = new byte[38];              int recd = 0;              DateTime minTimestamp = DateTime.Now.AddYears(-1);                //Get the first feedback              recd = _apnsStream.Read(buffer' 0' buffer.Length);              Logger.Info("Feedback response received.");                if (recd == 0)                  Logger.Info("Feedback response is empty.");                //Continue while we have results and are not disposing              while (recd > 0)              {                  Logger.Info("processing feedback response");                  var fb = new Feedback();                    //Get our seconds since 1970 ?                  byte[] bSeconds = new byte[4];                  byte[] bDeviceToken = new byte[32];                    Array.Copy(buffer' 0' bSeconds' 0' 4);                    //Check endianness                  if (BitConverter.IsLittleEndian)                      Array.Reverse(bSeconds);                    int tSeconds = BitConverter.ToInt32(bSeconds' 0);                    //Add seconds since 1970 to that date' in UTC and then get it locally                  fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();                      //Now copy out the device token                  Array.Copy(buffer' 6' bDeviceToken' 0' 32);                    fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();                    //Make sure we have a good feedback tuple                  if (fb.DeviceToken.Length == 64 && fb.Timestamp > minTimestamp)                  {                      //Raise event                      //this.Feedback(this' fb);                      feedbacks.Add(fb);                  }                    //Clear our array to reuse it                  Array.Clear(buffer' 0' buffer.Length);                    //Read the next feedback                  recd = _apnsStream.Read(buffer' 0' buffer.Length);              }              //clode the connection here !              Disconnect();              if (feedbacks.Count > 0)                  Logger.Info("Total {0} feedbacks received."' feedbacks.Count);              return feedbacks;          }        }        catch (Exception ex)        {          Logger.Error("Error occurred on receiving feed back. - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GetFeedBack,The following statement contains a magic number: try        {          var feedbacks = new List<Feedback>();          Logger.Info("Connecting to feedback service.");            if (!_conected)              Connect(_feedbackHost' FeedbackPort' _certificates);            if (_conected)          {              //Set up              byte[] buffer = new byte[38];              int recd = 0;              DateTime minTimestamp = DateTime.Now.AddYears(-1);                //Get the first feedback              recd = _apnsStream.Read(buffer' 0' buffer.Length);              Logger.Info("Feedback response received.");                if (recd == 0)                  Logger.Info("Feedback response is empty.");                //Continue while we have results and are not disposing              while (recd > 0)              {                  Logger.Info("processing feedback response");                  var fb = new Feedback();                    //Get our seconds since 1970 ?                  byte[] bSeconds = new byte[4];                  byte[] bDeviceToken = new byte[32];                    Array.Copy(buffer' 0' bSeconds' 0' 4);                    //Check endianness                  if (BitConverter.IsLittleEndian)                      Array.Reverse(bSeconds);                    int tSeconds = BitConverter.ToInt32(bSeconds' 0);                    //Add seconds since 1970 to that date' in UTC and then get it locally                  fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();                      //Now copy out the device token                  Array.Copy(buffer' 6' bDeviceToken' 0' 32);                    fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();                    //Make sure we have a good feedback tuple                  if (fb.DeviceToken.Length == 64 && fb.Timestamp > minTimestamp)                  {                      //Raise event                      //this.Feedback(this' fb);                      feedbacks.Add(fb);                  }                    //Clear our array to reuse it                  Array.Clear(buffer' 0' buffer.Length);                    //Read the next feedback                  recd = _apnsStream.Read(buffer' 0' buffer.Length);              }              //clode the connection here !              Disconnect();              if (feedbacks.Count > 0)                  Logger.Info("Total {0} feedbacks received."' feedbacks.Count);              return feedbacks;          }        }        catch (Exception ex)        {          Logger.Error("Error occurred on receiving feed back. - " + ex.Message);          return null;        }
Magic Number,MoonAPNS,PushNotification,C:\repos\arashnorouzi_Moon-APNS\Application\MoonApns\PushNotification.cs,GetFeedBack,The following statement contains a magic number: try        {          var feedbacks = new List<Feedback>();          Logger.Info("Connecting to feedback service.");            if (!_conected)              Connect(_feedbackHost' FeedbackPort' _certificates);            if (_conected)          {              //Set up              byte[] buffer = new byte[38];              int recd = 0;              DateTime minTimestamp = DateTime.Now.AddYears(-1);                //Get the first feedback              recd = _apnsStream.Read(buffer' 0' buffer.Length);              Logger.Info("Feedback response received.");                if (recd == 0)                  Logger.Info("Feedback response is empty.");                //Continue while we have results and are not disposing              while (recd > 0)              {                  Logger.Info("processing feedback response");                  var fb = new Feedback();                    //Get our seconds since 1970 ?                  byte[] bSeconds = new byte[4];                  byte[] bDeviceToken = new byte[32];                    Array.Copy(buffer' 0' bSeconds' 0' 4);                    //Check endianness                  if (BitConverter.IsLittleEndian)                      Array.Reverse(bSeconds);                    int tSeconds = BitConverter.ToInt32(bSeconds' 0);                    //Add seconds since 1970 to that date' in UTC and then get it locally                  fb.Timestamp = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(tSeconds).ToLocalTime();                      //Now copy out the device token                  Array.Copy(buffer' 6' bDeviceToken' 0' 32);                    fb.DeviceToken = BitConverter.ToString(bDeviceToken).Replace("-"' "").ToLower().Trim();                    //Make sure we have a good feedback tuple                  if (fb.DeviceToken.Length == 64 && fb.Timestamp > minTimestamp)                  {                      //Raise event                      //this.Feedback(this' fb);                      feedbacks.Add(fb);                  }                    //Clear our array to reuse it                  Array.Clear(buffer' 0' buffer.Length);                    //Read the next feedback                  recd = _apnsStream.Read(buffer' 0' buffer.Length);              }              //clode the connection here !              Disconnect();              if (feedbacks.Count > 0)                  Logger.Info("Total {0} feedbacks received."' feedbacks.Count);              return feedbacks;          }        }        catch (Exception ex)        {          Logger.Error("Error occurred on receiving feed back. - " + ex.Message);          return null;        }
