Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ResilientServices.Services,ConferencesService,C:\repos\RobGibbens_ResilientServices\ResilientServices\ResilientServices\Services\ConferencesService.cs,GetConference,The length of the statement  "            var cachedConference = BlobCache.LocalMachine.GetAndFetchLatest(slug' () => GetRemoteConference(priority' slug)' offset => " is 122.
Magic Number,ResilientServices.Services,ConferencesService,C:\repos\RobGibbens_ResilientServices\ResilientServices\ResilientServices\Services\ConferencesService.cs,GetConferences,The following statement contains a magic number: var cachedConferences = cache.GetAndFetchLatest("conferences"' () => GetRemoteConferencesAsync(priority)'                  offset =>                  {                      TimeSpan elapsed = DateTimeOffset.Now - offset;                      return elapsed > new TimeSpan(hours: 24' minutes: 0' seconds: 0);                  });
Magic Number,ResilientServices.Services,ConferencesService,C:\repos\RobGibbens_ResilientServices\ResilientServices\ResilientServices\Services\ConferencesService.cs,GetConference,The following statement contains a magic number: var cachedConference = BlobCache.LocalMachine.GetAndFetchLatest(slug' () => GetRemoteConference(priority' slug)' offset =>              {                  TimeSpan elapsed = DateTimeOffset.Now - offset;                  return elapsed > new TimeSpan(hours: 0' minutes: 30' seconds: 0);              });
Magic Number,ResilientServices.Services,ConferencesService,C:\repos\RobGibbens_ResilientServices\ResilientServices\ResilientServices\Services\ConferencesService.cs,GetRemoteConferencesAsync,The following statement contains a magic number: if (CrossConnectivity.Current.IsConnected)              {                  conferences = await Policy                        .Handle<WebException>()                        .WaitAndRetry                        (                          retryCount:5'                           sleepDurationProvider: retryAttempt => TimeSpan.FromSeconds(Math.Pow(2' retryAttempt))                        )                        .ExecuteAsync(async () => await getConferencesTask);              }
Magic Number,ResilientServices.Services,ConferencesService,C:\repos\RobGibbens_ResilientServices\ResilientServices\ResilientServices\Services\ConferencesService.cs,GetRemoteConferencesAsync,The following statement contains a magic number: if (CrossConnectivity.Current.IsConnected)              {                  conferences = await Policy                        .Handle<WebException>()                        .WaitAndRetry                        (                          retryCount:5'                           sleepDurationProvider: retryAttempt => TimeSpan.FromSeconds(Math.Pow(2' retryAttempt))                        )                        .ExecuteAsync(async () => await getConferencesTask);              }
Magic Number,ResilientServices.Services,ConferencesService,C:\repos\RobGibbens_ResilientServices\ResilientServices\ResilientServices\Services\ConferencesService.cs,GetRemoteConference,The following statement contains a magic number: if (CrossConnectivity.Current.IsConnected)              {                  conference = await Policy                      .Handle<Exception>()                      .RetryAsync(retryCount: 5)                      .ExecuteAsync(async () => await getConferenceTask);              }
