Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Edument.CQRS,SqlEventStore,C:\repos\2moveit_keymaster\Edument.CQRS\SqlEventStore.cs,LoadEventsFor,Cyclomatic complexity of the method is 8
Complex Method,Edument.CQRS,SqlEventStore,C:\repos\2moveit_keymaster\Edument.CQRS\SqlEventStore.cs,SaveEventsFor,Cyclomatic complexity of the method is 9
Long Statement,Edument.CQRS,Aggregate,C:\repos\2moveit_keymaster\Edument.CQRS\Aggregate.cs,ApplyOneEvent,The length of the statement  "		throw new InvalidOperationException (string.Format ("Aggregate {0} does not know how to apply event {1}"' GetType ().Name' ev.GetType ().Name)); " is 144.
Long Statement,Edument.CQRS,BDDTest,C:\repos\2moveit_keymaster\Edument.CQRS\BDDTest.cs,Then,The length of the statement  "						Assert.True (false' string.Format ("Incorrect event in results; expected a {0} but got a {1}"' expectedEvents [i].GetType ().Name' gotEvents [i].GetType ().Name)); " is 163.
Long Statement,Edument.CQRS,BDDTest,C:\repos\2moveit_keymaster\Edument.CQRS\BDDTest.cs,Then,The length of the statement  "				Assert.True (false' string.Format ("Expected event(s) missing: {0}"' string.Join ("' "' EventDiff (expectedEvents' gotEvents)))); " is 129.
Long Statement,Edument.CQRS,BDDTest,C:\repos\2moveit_keymaster\Edument.CQRS\BDDTest.cs,Then,The length of the statement  "				Assert.True (false' string.Format ("Unexpected event(s) emitted: {0}"' string.Join ("' "' EventDiff (gotEvents' expectedEvents)))); " is 131.
Long Statement,Edument.CQRS,BDDTest,C:\repos\2moveit_keymaster\Edument.CQRS\BDDTest.cs,ThenFailWith,The length of the statement  "			Assert.True (false' string.Format ("Expected exception {0}' but got exception {1}"' typeof(TException).Name' got.GetType ().Name)); " is 131.
Long Statement,Edument.CQRS,BDDTest,C:\repos\2moveit_keymaster\Edument.CQRS\BDDTest.cs,DispatchCommand,The length of the statement  "		throw new CommandHandlerNotDefinedException (string.Format ("Command handler {0} does not yet handle command {1}"' sut.GetType ().Name' c.GetType ().Name)); " is 156.
Long Statement,Edument.CQRS,MessageDispatcher,C:\repos\2moveit_keymaster\Edument.CQRS\MessageDispatcher.cs,ScanAssembly,The length of the statement  "		this.GetType ().GetMethod ("AddHandlerFor").MakeGenericMethod (h.CommandType' h.AggregateType).Invoke (this' new object[] { " is 123.
Long Statement,Edument.CQRS,MessageDispatcher,C:\repos\2moveit_keymaster\Edument.CQRS\MessageDispatcher.cs,ScanInstance,The length of the statement  "		this.GetType ().GetMethod ("AddHandlerFor").MakeGenericMethod (h.CommandType' h.AggregateType).Invoke (this' new object[] { " is 123.
Magic Number,Edument.CQRS,SqlEventStore,C:\repos\2moveit_keymaster\Edument.CQRS\SqlEventStore.cs,SaveEventsFor,The following statement contains a magic number: using (var cmd = new SqlCommand ()) {  	// Query prelude.  	var queryText = new StringBuilder (512);  	queryText.AppendLine ("BEGIN TRANSACTION;");  	queryText.AppendLine (@"IF NOT EXISTS(SELECT * FROM [dbo].[Aggregates] WHERE [Id] = @AggregateId)                           INSERT INTO [dbo].[Aggregates] ([Id]' [Type]) VALUES (@AggregateId' @AggregateType);");  	cmd.Parameters.AddWithValue ("AggregateId"' aggregateId);  	cmd.Parameters.AddWithValue ("AggregateType"' typeof(TAggregate).AssemblyQualifiedName);  	// Add saving of the events.  	cmd.Parameters.AddWithValue ("CommitDateTime"' DateTime.UtcNow);  	for (int i = 0; i < newEvents.Count; i++) {  		var e = newEvents [i];  		queryText.AppendFormat (@"INSERT INTO [dbo].[Events] ([AggregateId]' [SequenceNumber]' [Type]' [Body]' [Timestamp])                           VALUES(@AggregateId' {0}' @Type{1}' @Body{1}' @CommitDateTime);"' eventsLoaded + i' i);  		cmd.Parameters.AddWithValue ("Type" + i.ToString ()' e.GetType ().AssemblyQualifiedName);  		cmd.Parameters.AddWithValue ("Body" + i.ToString ()' SerializeEvent (e));  	}  	// Add commit.  	queryText.Append ("COMMIT;");  	// Execute the update.  	using (var con = new SqlConnection (connectionString)) {  		con.Open ();  		cmd.Connection = con;  		cmd.CommandText = queryText.ToString ();  		cmd.CommandType = CommandType.Text;  		cmd.ExecuteNonQuery ();  	}  }  
