Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SharpSwift,ArgData,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\ArgData.cs,ArgData,Cyclomatic complexity of the method is 9
Long Statement,SharpSwift,Program,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\Program.cs,ParseFile,The length of the statement  "            output = root.Usings.Aggregate(output' (current' usingDir) => current + GetImportsFromTrivia(usingDir.GetLeadingTrivia())); " is 123.
Long Statement,SharpSwift.Converters,ConvertToSwift,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\Converters\ArgumentSyntaxParser.cs,ObjectCreationExpression,The length of the statement  "            //Thanks! http://stackoverflow.com/questions/24174602/get-constructor-declaration-from-objectcreationexpressionsyntax-with-roslyn/24191494#24191494 " is 147.
Long Statement,SharpSwift.Converters,ConvertToSwift,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\Converters\ArgumentSyntaxParser.cs,ObjectCreationExpression,The length of the statement  "                var namedArgumentSyntax = SyntaxFactory.Argument(nameColonSyntax' oldArgumentSyntax.RefOrOutKeyword' oldArgumentSyntax.Expression); " is 131.
Long Statement,SharpSwift.Converters,ConvertToSwift,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\Converters\ArgumentSyntaxParser.cs,LiteralExpression,The length of the statement  "                //Swift doesn't use the same 'c' character literal syntax' instead you create a String and type annotate it as a Character " is 122.
Long Statement,SharpSwift.Converters,ConvertToSwift,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\Converters\ArgumentSyntaxParser.cs,SwitchSection,The length of the statement  "            return section.Statements.TakeWhile(statement => !(statement is BreakStatementSyntax)) // Swift doesn't use break; statements. " is 126.
Long Statement,SharpSwift.Converters,ConvertToSwift,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\Converters\ArgumentSyntaxParser.cs,SwitchSection,The length of the statement  "                .Aggregate(output' (current' statement) => current + ("    " + SyntaxNode(statement))); //TODO: Handle case/switch indenting in Indenter.cs " is 139.
Long Statement,SharpSwift.Converters,ConvertToSwift,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\Converters\ArgumentSyntaxParser.cs,ForStatement,The length of the statement  "            output += SyntaxNode(statement.Declaration) + "; " + SyntaxNode(statement.Condition) + "; " + //TODO: these semicolons should be handled in their syntaxParsers " is 159.
Long Statement,SharpSwift.Converters,ConvertToSwift,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\Converters\ArgumentSyntaxParser.cs,EnumDeclaration,The length of the statement  "            foreach (var decl in declaration.ChildNodes().OfType<EnumMemberDeclarationSyntax>().Where(decl => decl.EqualsValue != null).Select(decl => decl.EqualsValue.Value)) " is 163.
Long Statement,SharpSwift.Converters,ConvertToSwift,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\Converters\ArgumentSyntaxParser.cs,TypeParameter,The length of the statement  "            return "<" + param.Identifier.Text + ": " + string.Join("' "' constraints) + ">"; //TODO: check if this is the right syntax for multiple constraints " is 148.
Magic Number,SharpSwift,ArgData,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\ArgData.cs,ArgData,The following statement contains a magic number: switch (i)                  {                      case 0:                          InputPath = arg;                          break;                      case 1:                          OutputPath = arg;                          break;                      case 2:                          SlnPath = arg;                          break;                  }
Magic Number,SharpSwift,ArgData,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\ArgData.cs,Clean,The following statement contains a magic number: SlnPath = SlnPath ?? FindSolution(InputPath' 5);
Magic Number,SharpSwift,test,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\test.cs,test,The following statement contains a magic number: List<int> intArray = new int[] {1' 2' 3}.ToList();
Magic Number,SharpSwift,test,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\test.cs,test,The following statement contains a magic number: List<int> intArray = new int[] {1' 2' 3}.ToList();
Magic Number,SharpSwift,test,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\test.cs,test,The following statement contains a magic number: i < 10
Magic Number,SharpSwift,test,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\test.cs,test,The following statement contains a magic number: switch (constant)              {                  case "123":                      var f = 1;                      var mdf = 3;                      break;                  case "456":                  case "754":                      var d = 2;                      break;                  case "643":                      var c = 3;                      break;                  default:                      break;              }
Magic Number,SharpSwift,test,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\test.cs,test,The following statement contains a magic number: switch (constant)              {                  case "123":                      var f = 1;                      var mdf = 3;                      break;                  case "456":                  case "754":                      var d = 2;                      break;                  case "643":                      var c = 3;                      break;                  default:                      break;              }
Magic Number,SharpSwift,test,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\test.cs,test,The following statement contains a magic number: switch (constant)              {                  case "123":                      var f = 1;                      var mdf = 3;                      break;                  case "456":                  case "754":                      var d = 2;                      break;                  case "643":                      var c = 3;                      break;                  default:                      break;              }
Missing Default,SharpSwift,ArgData,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\ArgData.cs,ArgData,The following switch statement is missing a default case: switch (namedArgument)                      {                          case "input":                          case "i":                              InputPath = arg;                              break;                          case "solution":                          case "sln":                          case "s":                              SlnPath = arg;                              break;                          case "output":                          case "o":                              OutputPath = arg;                              break;                      }
Missing Default,SharpSwift,ArgData,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\ArgData.cs,ArgData,The following switch statement is missing a default case: switch (i)                  {                      case 0:                          InputPath = arg;                          break;                      case 1:                          OutputPath = arg;                          break;                      case 2:                          SlnPath = arg;                          break;                  }
Missing Default,SharpSwift.Converters,ConvertToSwift,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\Converters\ArgumentSyntaxParser.cs,GenericName,The following switch statement is missing a default case: switch (name.Identifier.Text)              {                  case "Action":                      //Action<string' int> converts to (String' Int) -> Void                      return ": (" + SyntaxNode(name.TypeArgumentList) + ") -> Void";                  case "Func":                      //Func<string' int' string> converts to (String' Int) -> String                      var output = ": (";                        //The last generic argument in Func<> is used as a return type                      var allButLastArguments = name.TypeArgumentList.Arguments.Take(name.TypeArgumentList.Arguments.Count - 1);                        output += string.Join("' "' allButLastArguments.Select(SyntaxNode));                        return output + ") -> " + SyntaxNode(name.TypeArgumentList.Arguments.Last());                  case "Unwrapped":                      return SyntaxNode(name.TypeArgumentList.Arguments.First()).TrimEnd('!') + "!";                  case "Optional":                      return SyntaxNode(name.TypeArgumentList.Arguments.First()).TrimEnd('!') + "?";                  case "AmbiguousWrapping":                      return SyntaxNode(name.TypeArgumentList.Arguments.First()).TrimEnd('!');              }
Missing Default,SharpSwift.Converters,ConvertToSwift,D:\research\architectureSmells\repos\matthewsot_SharpSwift\SharpSwift\SharpSwift\Converters\ArgumentSyntaxParser.cs,Type,The following switch statement is missing a default case: switch (typeName)              {                  case "string":                      return "String";                  case "char":                      return "Character";                  case "int":                      return "Int";                  case "void":                      return "Void";                  case "bool":                      return "Bool";              }
