Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,EasyNetQ.Tests.Tasks.Tasks,TestSimpleService,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestSimpleService.cs,,The length of the parameter customRpcRequestConventionDictionary is 36.
Long Identifier,EasyNetQ.Tests.Tasks.Tasks,TestSimpleService,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestSimpleService.cs,,The length of the parameter customRpcResponseConventionDictionary is 37.
Long Statement,EasyNetQ.Tests.Tasks.Tasks,TestSimpleService,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestSimpleService.cs,Run,The length of the statement  "            bus.Advanced.Conventions.RpcRequestExchangeNamingConvention = type => customRpcRequestConventionDictionary.ContainsKey(type) ? customRpcRequestConventionDictionary[type] : defaultRpcExchange; " is 191.
Long Statement,EasyNetQ.Tests.Tasks.Tasks,TestSimpleService,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestSimpleService.cs,Run,The length of the statement  "            bus.Advanced.Conventions.RpcResponseExchangeNamingConvention = type => customRpcResponseConventionDictionary.ContainsKey(type) ? customRpcResponseConventionDictionary[type] : defaultRpcExchange; " is 194.
Long Statement,EasyNetQ.Tests.Tasks.Tasks,TestSimpleService,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestSimpleService.cs,Run,The length of the statement  "            bus.RespondAsync<TestModifiedRequestExhangeRequestMessage' TestModifiedRequestExhangeResponseMessage>(HandleModifiedRequestExchangeRequest); " is 140.
Long Statement,EasyNetQ.Tests.Tasks.Tasks,TestSimpleService,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestSimpleService.cs,Run,The length of the statement  "            bus.RespondAsync<TestModifiedResponseExhangeRequestMessage' TestModifiedResponseExhangeResponseMessage>(HandleModifiedResponseExchangeRequest); " is 143.
Long Statement,EasyNetQ.Tests.Tasks.Tasks,TestSimpleService,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestSimpleService.cs,HandleModifiedRequestExchangeRequest,The length of the statement  "            Console.Out.WriteLine("Responding to RPC request from exchange : "+ customRpcRequestConventionDictionary[typeof (TestModifiedRequestExhangeRequestMessage)]); " is 157.
Long Statement,EasyNetQ.Tests.Tasks.Tasks,TestSimpleService,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestSimpleService.cs,HandleModifiedResponseExchangeRequest,The length of the statement  "            Console.Out.WriteLine("Responding to RPC request from exchange : " + customRpcResponseConventionDictionary[typeof(TestModifiedResponseExhangeResponseMessage)]); " is 160.
Magic Number,EasyNetQ.Tests.Performance.Consumer,TestPerformanceConsumer,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestPerformanceConsumer.cs,Run,The following statement contains a magic number: timer = new Timer(state =>              {                  Console.Out.WriteLine("messages per second = {0}"' messageCount);                  Interlocked.Exchange(ref messageCount' 0);              }' null' 1000' 1000);
Magic Number,EasyNetQ.Tests.Performance.Consumer,TestPerformanceConsumer,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestPerformanceConsumer.cs,Run,The following statement contains a magic number: timer = new Timer(state =>              {                  Console.Out.WriteLine("messages per second = {0}"' messageCount);                  Interlocked.Exchange(ref messageCount' 0);              }' null' 1000' 1000);
Magic Number,EasyNetQ.Tests.Performance.Producer,TestPerformanceParameters,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestPerformanceProducer.cs,TestPerformanceParameters,The following statement contains a magic number: MessageSize = 1000;
Magic Number,EasyNetQ.Tests.Performance.Producer,TestPerformanceProducer,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestPerformanceProducer.cs,Run,The following statement contains a magic number: messageRateTimer = new Timer(state =>              {                  Console.Out.WriteLine("messages per second = {0}"' messageCount);                  Console.Out.WriteLine("fault messages per second = {0}"' faultMessageCount);                  Interlocked.Exchange(ref messageCount' 0);                  Interlocked.Exchange(ref faultMessageCount' 0);              }' null' 1000' 1000);
Magic Number,EasyNetQ.Tests.Performance.Producer,TestPerformanceProducer,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestPerformanceProducer.cs,Run,The following statement contains a magic number: messageRateTimer = new Timer(state =>              {                  Console.Out.WriteLine("messages per second = {0}"' messageCount);                  Console.Out.WriteLine("fault messages per second = {0}"' faultMessageCount);                  Interlocked.Exchange(ref messageCount' 0);                  Interlocked.Exchange(ref faultMessageCount' 0);              }' null' 1000' 1000);
Magic Number,EasyNetQ.Tests.Performance.Producer,TestPerformanceProducer,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestPerformanceProducer.cs,Run,The following statement contains a magic number: publishThread = new Thread(state =>              {                  while (!cancelled)                  {                      var text = new string('#'' messageSize);                      var message = new TestPerformanceMessage {Text = text};                        try                      {                          bus.PublishAsync(message).ContinueWith(task =>                          {                              if (task.IsCompleted)                              {                                  Interlocked.Increment(ref messageCount);                              }                              if (task.IsFaulted)                              {                                  Interlocked.Increment(ref faultMessageCount);                              }                          });                      }                      catch (EasyNetQException easyNetQException)                      {                          Console.Out.WriteLine(easyNetQException.Message);                          Thread.Sleep(1000);                      }                  }              });
Magic Number,EasyNetQ.Tests.SimpleRequester,LatencyRecorder,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\SimpleRequester\LatencyRecorder.cs,LatencyRecorder,The following statement contains a magic number: reportInterval = TimeSpan.FromSeconds(10);
Magic Number,EasyNetQ.Tests.SimpleRequester,LatencyRecorder,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\SimpleRequester\LatencyRecorder.cs,RegisterResponse,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,EasyNetQ.Tests.SimpleRequester,LatencyRecorder,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\SimpleRequester\LatencyRecorder.cs,Report,The following statement contains a magic number: var ticksTenSecondsAgo = DateTime.Now.AddSeconds(-10).Ticks;
Magic Number,EasyNetQ.Tests.Tasks.Tasks,TestSimpleService,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestSimpleService.cs,HandleAsyncRequest,The following statement contains a magic number: return RunDelayed(1000' () =>              {                  Console.Out.WriteLine("Sending response");                  return new TestAsyncResponseMessage { Text = request.Text + " ... completed." };              });
Magic Number,EasyNetQ.Tests.Tasks.Tasks,TestSimpleService,D:\research\architectureSmells\repos\mikehadlow_EasyNetQ\Source\EasyNetQ.Tests.Tasks\Tasks\TestSimpleService.cs,HandleRequest,The following statement contains a magic number: Thread.Sleep(5000);
