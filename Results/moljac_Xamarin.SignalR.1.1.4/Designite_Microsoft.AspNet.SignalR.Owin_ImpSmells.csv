Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\..\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,ContinueWithNotComplete,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNet.SignalR.Owin,ServerRequest,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\ServerRequest.Owin.cs,TryParseHostHeader,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\..\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,Then,The method has 5 parameters.
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\..\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,RunTaskSynchronously,The method has 5 parameters.
Long Statement,Microsoft.AspNet.SignalR.Owin,OwinEnvironmentExtensions,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\OwinEnvironmentExtensions.cs,GetShutdownToken,The length of the statement  "	return env.TryGetValue (OwinConstants.HostOnAppDisposing' out value) && value is CancellationToken ? (CancellationToken)value : default(CancellationToken); " is 155.
Long Statement,Microsoft.AspNet.SignalR.Owin,OwinEnvironmentExtensions,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\OwinEnvironmentExtensions.cs,GetIsDebugEnabled,The length of the statement  "		return !String.IsNullOrWhiteSpace (stringVal) && OwinConstants.AppModeDevelopment.Equals (stringVal' StringComparison.OrdinalIgnoreCase); " is 137.
Long Statement,Microsoft.AspNet.SignalR.Owin,CallHandler,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Handlers\CallHandler.cs,Invoke,The length of the statement  "		if (!String.IsNullOrEmpty (callback) || (!String.IsNullOrEmpty (origin) && !IsSameOrigin (serverRequest.Url' origin))) { " is 120.
Long Statement,Microsoft.AspNet.SignalR.Owin,CallHandler,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Handlers\CallHandler.cs,IsSameOrigin,The length of the statement  "	return (requestUri.Scheme == originUri.Scheme) && (requestUri.Host == originUri.Host) && (requestUri.Port == originUri.Port); " is 125.
Long Statement,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,HexToInt,The length of the statement  "	return (h >= '0' && h <= '9') ? h - '0' : (h >= 'a' && h <= 'f') ? h - 'a' + 10 : (h >= 'A' && h <= 'F') ? h - 'A' + 10 : -1; " is 125.
Magic Number,Microsoft.AspNet.SignalR.Owin.Infrastructure,ParamDictionary,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\ParamDictionary.cs,ParseToEnumerable,The following statement contains a magic number: foreach (var item in items) {  	string[] pair = item.Split (ParamKeyValueSeparator' 2' StringSplitOptions.None);  	string pairKey = UrlDecoder.UrlDecode (pair [0]).TrimStart (LeadingWhitespaceChars);  	string pairValue = pair.Length < 2 ? String.Empty : UrlDecoder.UrlDecode (pair [1]);  	yield return new KeyValuePair<string' string> (pairKey' pairValue);  }  
Magic Number,Microsoft.AspNet.SignalR.Owin.Infrastructure,ParamDictionary,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\ParamDictionary.cs,ParseToEnumerable,The following statement contains a magic number: foreach (var item in items) {  	string[] pair = item.Split (ParamKeyValueSeparator' 2' StringSplitOptions.None);  	string pairKey = UrlDecoder.UrlDecode (pair [0]).TrimStart (LeadingWhitespaceChars);  	string pairValue = pair.Length < 2 ? String.Empty : UrlDecoder.UrlDecode (pair [1]);  	yield return new KeyValuePair<string' string> (pairKey' pairValue);  }  
Magic Number,Microsoft.AspNet.SignalR.Owin,CallHandler,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Handlers\CallHandler.cs,Invoke,The following statement contains a magic number: if (_configuration.EnableCrossDomain) {  	// Add CORS response headers support  	if (!String.IsNullOrEmpty (origin)) {  		serverResponse.ResponseHeaders.SetHeader ("Access-Control-Allow-Origin"' origin);  		serverResponse.ResponseHeaders.SetHeader ("Access-Control-Allow-Credentials"' "true");  	}  }  else {  	string callback = serverRequest.QueryString ["callback"];  	// If it's a JSONP request and we're not allowing cross domain requests then block it  	// If there's an origin header and it's not a same origin request then block it.  	if (!String.IsNullOrEmpty (callback) || (!String.IsNullOrEmpty (origin) && !IsSameOrigin (serverRequest.Url' origin))) {  		return EndResponse (environment' 403' Resources.Forbidden_CrossDomainIsDisabled);  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Owin,CallHandler,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Handlers\CallHandler.cs,Invoke,The following statement contains a magic number: if (!String.IsNullOrEmpty (callback) || (!String.IsNullOrEmpty (origin) && !IsSameOrigin (serverRequest.Url' origin))) {  	return EndResponse (environment' 403' Resources.Forbidden_CrossDomainIsDisabled);  }  
Magic Number,Microsoft.AspNet.SignalR.Owin,CallHandler,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Handlers\CallHandler.cs,Invoke,The following statement contains a magic number: return EndResponse (environment' 403' Resources.Forbidden_CrossDomainIsDisabled);  
Magic Number,Microsoft.AspNet.SignalR.Owin,CallHandler,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Handlers\CallHandler.cs,Invoke,The following statement contains a magic number: if (!_connection.Authorize (serverRequest)) {  	// If we failed to authorize the request then return a 403 since the request  	// can't do anything  	return EndResponse (environment' 403' "Forbidden");  }  else {  	return _connection.ProcessRequest (hostContext);  }  
Magic Number,Microsoft.AspNet.SignalR.Owin,CallHandler,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Handlers\CallHandler.cs,Invoke,The following statement contains a magic number: return EndResponse (environment' 403' "Forbidden");  
Magic Number,Microsoft.AspNet.SignalR.Owin,ServerRequest,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\ServerRequest.Owin.cs,TryParseHostHeader,The following statement contains a magic number: if (hostHeader.StartsWith ("["' StringComparison.Ordinal)) {  	var portIndex = hostHeader.LastIndexOf ("]:"' StringComparison.Ordinal);  	if (portIndex != -1 && Int32.TryParse (hostHeader.Substring (portIndex + 2)' out port)) {  		if (IPAddress.TryParse (hostHeader.Substring (1' portIndex - 1)' out address)) {  			host = null;  			return true;  		}  		host = hostHeader.Substring (0' portIndex + 1);  		return true;  	}  	if (hostHeader.EndsWith ("]"' StringComparison.Ordinal)) {  		if (IPAddress.TryParse (hostHeader.Substring (1' hostHeader.Length - 2)' out address)) {  			host = null;  			port = -1;  			return true;  		}  	}  }  else {  	// IPAddresses  	if (IPAddress.TryParse (hostHeader' out address)) {  		host = null;  		port = -1;  		return true;  	}  	var portIndex = hostHeader.LastIndexOf (':');  	if (portIndex != -1 && Int32.TryParse (hostHeader.Substring (portIndex + 1)' out port)) {  		host = hostHeader.Substring (0' portIndex);  		return true;  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Owin,ServerRequest,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\ServerRequest.Owin.cs,TryParseHostHeader,The following statement contains a magic number: if (hostHeader.StartsWith ("["' StringComparison.Ordinal)) {  	var portIndex = hostHeader.LastIndexOf ("]:"' StringComparison.Ordinal);  	if (portIndex != -1 && Int32.TryParse (hostHeader.Substring (portIndex + 2)' out port)) {  		if (IPAddress.TryParse (hostHeader.Substring (1' portIndex - 1)' out address)) {  			host = null;  			return true;  		}  		host = hostHeader.Substring (0' portIndex + 1);  		return true;  	}  	if (hostHeader.EndsWith ("]"' StringComparison.Ordinal)) {  		if (IPAddress.TryParse (hostHeader.Substring (1' hostHeader.Length - 2)' out address)) {  			host = null;  			port = -1;  			return true;  		}  	}  }  else {  	// IPAddresses  	if (IPAddress.TryParse (hostHeader' out address)) {  		host = null;  		port = -1;  		return true;  	}  	var portIndex = hostHeader.LastIndexOf (':');  	if (portIndex != -1 && Int32.TryParse (hostHeader.Substring (portIndex + 1)' out port)) {  		host = hostHeader.Substring (0' portIndex);  		return true;  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Owin,ServerRequest,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\ServerRequest.Owin.cs,TryParseHostHeader,The following statement contains a magic number: if (portIndex != -1 && Int32.TryParse (hostHeader.Substring (portIndex + 2)' out port)) {  	if (IPAddress.TryParse (hostHeader.Substring (1' portIndex - 1)' out address)) {  		host = null;  		return true;  	}  	host = hostHeader.Substring (0' portIndex + 1);  	return true;  }  
Magic Number,Microsoft.AspNet.SignalR.Owin,ServerRequest,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\ServerRequest.Owin.cs,TryParseHostHeader,The following statement contains a magic number: if (hostHeader.EndsWith ("]"' StringComparison.Ordinal)) {  	if (IPAddress.TryParse (hostHeader.Substring (1' hostHeader.Length - 2)' out address)) {  		host = null;  		port = -1;  		return true;  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Owin,ServerRequest,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\ServerRequest.Owin.cs,TryParseHostHeader,The following statement contains a magic number: if (IPAddress.TryParse (hostHeader.Substring (1' hostHeader.Length - 2)' out address)) {  	host = null;  	port = -1;  	return true;  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	}  	else if (ch == '%' && pos < count - 2) {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	}  	else if (ch == '%' && pos < count - 2) {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	}  	else if (ch == '%' && pos < count - 2) {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: for (int pos = 0; pos < count; pos++) {  	char ch = value [pos];  	if (ch == '+') {  		ch = ' ';  	}  	else if (ch == '%' && pos < count - 2) {  		int h1 = HexToInt (value [pos + 1]);  		int h2 = HexToInt (value [pos + 2]);  		if (h1 >= 0 && h2 >= 0) {  			// valid 2 hex chars  			byte b = (byte)((h1 << 4) | h2);  			pos += 2;  			// don't add as char  			helper.AddByte (b);  			continue;  		}  	}  	if ((ch & 0xFF80) == 0)  		helper.AddByte ((byte)ch);  	// 7 bit have to go as bytes because of Unicode  	else  		helper.AddChar (ch);  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  }  else if (ch == '%' && pos < count - 2) {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  }  else if (ch == '%' && pos < count - 2) {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  }  else if (ch == '%' && pos < count - 2) {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '+') {  	ch = ' ';  }  else if (ch == '%' && pos < count - 2) {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: if (ch == '%' && pos < count - 2) {  	int h1 = HexToInt (value [pos + 1]);  	int h2 = HexToInt (value [pos + 2]);  	if (h1 >= 0 && h2 >= 0) {  		// valid 2 hex chars  		byte b = (byte)((h1 << 4) | h2);  		pos += 2;  		// don't add as char  		helper.AddByte (b);  		continue;  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0) {  	// valid 2 hex chars  	byte b = (byte)((h1 << 4) | h2);  	pos += 2;  	// don't add as char  	helper.AddByte (b);  	continue;  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: if (h1 >= 0 && h2 >= 0) {  	// valid 2 hex chars  	byte b = (byte)((h1 << 4) | h2);  	pos += 2;  	// don't add as char  	helper.AddByte (b);  	continue;  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,UrlDecodeInternal,The following statement contains a magic number: pos += 2;  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,HexToInt,The following statement contains a magic number: return (h >= '0' && h <= '9') ? h - '0' : (h >= 'a' && h <= 'f') ? h - 'a' + 10 : (h >= 'A' && h <= 'F') ? h - 'A' + 10 : -1;  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlDecoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Owin\Infrastructure\UrlDecoder.cs,HexToInt,The following statement contains a magic number: return (h >= '0' && h <= '9') ? h - '0' : (h >= 'a' && h <= 'f') ? h - 'a' + 10 : (h >= 'A' && h <= 'F') ? h - 'A' + 10 : -1;  
