Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,UrlEncode,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNet.SignalR.Infrastructure,SafeCancellationTokenSource,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Core\Infrastructure\SafeCancellationTokenSource.cs,Dispose,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,ContinueWithNotComplete,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,Then,The method has 5 parameters.
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,RunTaskSynchronously,The method has 5 parameters.
Long Parameter List,Microsoft.AspNet.SignalR.Hosting.Memory,ClientStream,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\ClientStream.cs,BeginRead,The method has 6 parameters.
Long Parameter List,Microsoft.AspNet.SignalR.Hosting.Memory,MemoryHost,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\MemoryHost.cs,ProcessRequest,The method has 6 parameters.
Long Statement,Microsoft.AspNet.SignalR.Hosting.Memory,AsyncResult,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\AsyncResult.cs,SetAsCompleted,The length of the statement  "	Int32 prevState = Interlocked.Exchange (ref m_CompletedState' completedSynchronously ? c_StateCompletedSynchronously : c_StateCompletedAsynchronously); " is 151.
Complex Conditional,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,IsUrlSafeChar,The conditional expression  "ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9'"  is complex.
Empty Catch Block,Microsoft.AspNet.SignalR.Infrastructure,ProcessExtensions,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\Infrastructure\ProcessExtensions.cs,GetUniqueInstanceName,The method has an empty catch block.
Empty Catch Block,Microsoft.AspNet.SignalR.Infrastructure,ProcessExtensions,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\Infrastructure\ProcessExtensions.cs,GetUniqueInstanceName,The method has an empty catch block.
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,UrlEncode,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	byte b = bytes [offset + i];  	char ch = (char)b;  	if (IsUrlSafeChar (ch)) {  		expandedBytes [pos++] = b;  	}  	else if (ch == ' ') {  		expandedBytes [pos++] = (byte)'+';  	}  	else {  		expandedBytes [pos++] = (byte)'%';  		expandedBytes [pos++] = (byte)IntToHex ((b >> 4) & 0xf);  		expandedBytes [pos++] = (byte)IntToHex (b & 0x0f);  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,UrlEncode,The following statement contains a magic number: if (IsUrlSafeChar (ch)) {  	expandedBytes [pos++] = b;  }  else if (ch == ' ') {  	expandedBytes [pos++] = (byte)'+';  }  else {  	expandedBytes [pos++] = (byte)'%';  	expandedBytes [pos++] = (byte)IntToHex ((b >> 4) & 0xf);  	expandedBytes [pos++] = (byte)IntToHex (b & 0x0f);  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,UrlEncode,The following statement contains a magic number: if (ch == ' ') {  	expandedBytes [pos++] = (byte)'+';  }  else {  	expandedBytes [pos++] = (byte)'%';  	expandedBytes [pos++] = (byte)IntToHex ((b >> 4) & 0xf);  	expandedBytes [pos++] = (byte)IntToHex (b & 0x0f);  }  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,UrlEncode,The following statement contains a magic number: expandedBytes [pos++] = (byte)IntToHex ((b >> 4) & 0xf);  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,IntToHex,The following statement contains a magic number: if (n <= 9)  	return (char)(n + (int)'0');  else  	return (char)(n - 10 + (int)'a');  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,IntToHex,The following statement contains a magic number: if (n <= 9)  	return (char)(n + (int)'0');  else  	return (char)(n - 10 + (int)'a');  
Magic Number,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,IntToHex,The following statement contains a magic number: return (char)(n - 10 + (int)'a');  
Magic Number,Microsoft.AspNet.SignalR.Hosting.Memory,MemoryHost,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\MemoryHost.cs,ProcessRequest,The following statement contains a magic number: _appFunc (env).ContinueWith (task =>  {  	object statusCode;  	if (env.TryGetValue (OwinConstants.ResponseStatusCode' out statusCode) && (int)statusCode == 403) {  		tcs.TrySetException (new InvalidOperationException ("Forbidden"));  	}  	else if (task.IsFaulted) {  		tcs.TrySetException (task.Exception.InnerExceptions);  	}  	else if (task.IsCanceled) {  		tcs.TrySetCanceled ();  	}  	else {  		tcs.TrySetResult (response);  	}  	// Close the server stream when the request has ended  	serverStream.Close ();  	clientTokenSource.Dispose ();  });  
Magic Number,Microsoft.AspNet.SignalR.Hosting.Memory,MemoryHost,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\MemoryHost.cs,ProcessRequest,The following statement contains a magic number: if (env.TryGetValue (OwinConstants.ResponseStatusCode' out statusCode) && (int)statusCode == 403) {  	tcs.TrySetException (new InvalidOperationException ("Forbidden"));  }  else if (task.IsFaulted) {  	tcs.TrySetException (task.Exception.InnerExceptions);  }  else if (task.IsCanceled) {  	tcs.TrySetCanceled ();  }  else {  	tcs.TrySetResult (response);  }  
Missing Default,Microsoft.AspNet.SignalR.Infrastructure,UrlEncoder,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Hosting.Memory\..\Microsoft.AspNet.SignalR.Client\Infrastructure\UrlEncoder.cs,IsUrlSafeChar,The following switch statement is missing a default case: switch (ch) {  case '-':  case '_':  case '.':  case '!':  case '*':  case '(':  case ')':  	return true;  }  
