Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.AspNet.SignalR.Samples.Raw,RawConnection,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\..\..\samples\Microsoft.AspNet.SignalR.Hosting.AspNet.Samples\Raw\RawConnection.cs,OnReceived,Cyclomatic complexity of the method is 36
Complex Method,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\..\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,ContinueWithNotComplete,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,Record,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.AspNet.SignalR.Infrastructure,TaskQueue,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\..\Microsoft.AspNet.SignalR.Core\Infrastructure\TaskQueue.cs,Enqueue,The method has 5 parameters.
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\..\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,Then,The method has 5 parameters.
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\..\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,RunTaskSynchronously,The method has 5 parameters.
Long Parameter List,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,RunLoop,The method has 5 parameters.
Long Statement,Microsoft.AspNet.SignalR.Samples.Raw,RawConnection,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\..\..\samples\Microsoft.AspNet.SignalR.Hosting.AspNet.Samples\Raw\RawConnection.cs,OnConnected,The length of the statement  "	return Groups.Add (connectionId' "foo").ContinueWith (_ => Connection.Broadcast (DateTime.Now + ": " + user + " joined from " + clientIp)).Unwrap (); " is 149.
Long Statement,Microsoft.AspNet.SignalR.Stress.Performance,RedisMessageBusRun,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Performance\RedisMessageBusRun.cs,CreateMessageBus,The length of the statement  "	var configuration = new RedisScaleoutConfiguration (RunData.RedisServer' RunData.RedisPort' RunData.RedisPassword' "Stress"); " is 125.
Long Statement,Microsoft.AspNet.SignalR.Stress,ConnectionRun,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Performance\ConnectionRun.cs,CreateReceiver,The length of the statement  "	return _transportConnection.Receive (messageId: null' callback: (_' __) => TaskAsyncHelper.True' maxMessages: 10' state: null); " is 127.
Long Statement,Microsoft.AspNet.SignalR.Stress,MemoryHostRun,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Performance\MemoryHostRun.cs,ProcessRequest,The length of the statement  "	return Host.Get ("http://foo/" + Endpoint + "/connect?transport=" + Transport + "&connectionToken=" + connectionToken' disableWrites: true); " is 140.
Long Statement,Microsoft.AspNet.SignalR.Stress,MemoryHostRun,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Performance\MemoryHostRun.cs,ProcessSendRequest,The length of the statement  "	return Host.Post ("http://foo/" + Endpoint + "/send?transport=" + Transport + "&connectionToken=" + connectionToken' postData); " is 127.
Long Statement,Microsoft.AspNet.SignalR.Stress,MemoryHostRun,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Performance\MemoryHostRun.cs,Abort,The length of the statement  "	return Host.Post ("http://foo/" + Endpoint + "/abort?transport=" + Transport + "&connectionToken=" + connectionToken' null); " is 124.
Long Statement,Microsoft.AspNet.SignalR.Stress,MessageBusRun,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Performance\MessageBusRun.cs,CreateReceiver,The length of the statement  "	return _bus.Subscribe (subscriber' cursor: null' callback: (result' state) => TaskAsyncHelper.True' maxMessages: MessageBufferSize' state: null); " is 145.
Long Statement,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The length of the statement  "			Console.WriteLine ("Didn't receive " + max + " messages. Got " + (max - countDown.Count) + " missed " + String.Join ("'"' countDown.Left.Select (i => i.ToString ()))); " is 167.
Magic Number,Microsoft.AspNet.SignalR.Stress,ConnectionRun,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Performance\ConnectionRun.cs,CreateReceiver,The following statement contains a magic number: return _transportConnection.Receive (messageId: null' callback: (_' __) => TaskAsyncHelper.True' maxMessages: 10' state: null);  
Magic Number,Microsoft.AspNet.SignalR.Stress,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Program.cs,Main,The following statement contains a magic number: using (run) {  	run.Run ();  	Console.WriteLine ("Warming up: " + run.Warmup);  	Thread.Sleep (run.Warmup * 1000);  	Console.WriteLine ("Test started: " + run.Duration);  	var endTime = TimeSpan.FromSeconds (run.Duration);  	var timer = Stopwatch.StartNew ();  	do {  		run.Sample ();  		Thread.Sleep (_sampleRateMilliseconds);  	}  	while (timer.Elapsed < endTime);  	Console.WriteLine ("Test finished");  	memory = GC.GetTotalMemory (forceFullCollection: false);  	Console.WriteLine ("Before GC {0}"' Utility.FormatBytes (memory));  	memory = GC.GetTotalMemory (forceFullCollection: true);  	Console.WriteLine ("After GC and before dispose {0}"' Utility.FormatBytes (memory));  	run.Record ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (run.Warmup * 1000);  
Magic Number,Microsoft.AspNet.SignalR.Stress,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Program.cs,CreateRun,The following statement contains a magic number: ThreadPool.SetMinThreads (32' 32);  
Magic Number,Microsoft.AspNet.SignalR.Stress,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Program.cs,CreateRun,The following statement contains a magic number: ThreadPool.SetMinThreads (32' 32);  
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: if (values.Length % 2 == 0) {  	median = median + values [(values.Length / 2) - 1] / 2;  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: if (values.Length % 2 == 0) {  	median = median + values [(values.Length / 2) - 1] / 2;  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: if (values.Length % 2 == 0) {  	median = median + values [(values.Length / 2) - 1] / 2;  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: median = median + values [(values.Length / 2) - 1] / 2;  
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,RecordAggregates,The following statement contains a magic number: median = median + values [(values.Length / 2) - 1] / 2;  
Magic Number,Microsoft.AspNet.SignalR.Stress,RunBase,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\RunBase.cs,Dispose,The following statement contains a magic number: _countDown.Wait (TimeSpan.FromMilliseconds (1000 * Senders));  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The following statement contains a magic number: host.Configure (app =>  {  	var config = new HubConfiguration () {  		Resolver = new DefaultDependencyResolver ()  	};  	app.MapHubs (config);  	var configuration = config.Resolver.Resolve<IConfigurationManager> ();  	// The below effectively sets the heartbeat interval to five seconds.  	configuration.KeepAlive = TimeSpan.FromSeconds (10);  });  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The following statement contains a magic number: configuration.KeepAlive = TimeSpan.FromSeconds (10);  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The following statement contains a magic number: try {  	connection.Start (new Client.Transports.LongPollingTransport (host)).Wait ();  	proxy.Invoke ("Join"' "foo").Wait ();  	for (int i = 0; i < max; i++) {  		proxy.Invoke ("Send"' "foo"' i).Wait ();  	}  	proxy.Invoke ("Leave"' "foo").Wait ();  	for (int i = max + 1; i < max + 50; i++) {  		proxy.Invoke ("Send"' "foo"' i).Wait ();  	}  	if (!countDown.Wait (TimeSpan.FromSeconds (10))) {  		Console.WriteLine ("Didn't receive " + max + " messages. Got " + (max - countDown.Count) + " missed " + String.Join ("'"' countDown.Left.Select (i => i.ToString ())));  		Debugger.Break ();  	}  }  finally {  	connection.Stop ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The following statement contains a magic number: try {  	connection.Start (new Client.Transports.LongPollingTransport (host)).Wait ();  	proxy.Invoke ("Join"' "foo").Wait ();  	for (int i = 0; i < max; i++) {  		proxy.Invoke ("Send"' "foo"' i).Wait ();  	}  	proxy.Invoke ("Leave"' "foo").Wait ();  	for (int i = max + 1; i < max + 50; i++) {  		proxy.Invoke ("Send"' "foo"' i).Wait ();  	}  	if (!countDown.Wait (TimeSpan.FromSeconds (10))) {  		Console.WriteLine ("Didn't receive " + max + " messages. Got " + (max - countDown.Count) + " missed " + String.Join ("'"' countDown.Left.Select (i => i.ToString ())));  		Debugger.Break ();  	}  }  finally {  	connection.Stop ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The following statement contains a magic number: for (int i = max + 1; i < max + 50; i++) {  	proxy.Invoke ("Send"' "foo"' i).Wait ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,StressGroups,The following statement contains a magic number: if (!countDown.Wait (TimeSpan.FromSeconds (10))) {  	Console.WriteLine ("Didn't receive " + max + " messages. Got " + (max - countDown.Count) + " missed " + String.Join ("'"' countDown.Left.Select (i => i.ToString ())));  	Debugger.Break ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,BrodcastFromServer,The following statement contains a magic number: host.Configure (app =>  {  	var config = new HubConfiguration () {  		Resolver = new DefaultDependencyResolver ()  	};  	app.MapHubs (config);  	var configuration = config.Resolver.Resolve<IConfigurationManager> ();  	// The below effectively sets the heartbeat interval to five seconds.  	configuration.KeepAlive = TimeSpan.FromSeconds (10);  	var connectionManager = config.Resolver.Resolve<IConnectionManager> ();  	context = connectionManager.GetHubContext ("EchoHub");  });  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,BrodcastFromServer,The following statement contains a magic number: configuration.KeepAlive = TimeSpan.FromSeconds (10);  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,BrodcastFromServer,The following statement contains a magic number: try {  	connection.Start (host).Wait ();  	Thread.Sleep (1000);  }  finally {  	connection.Stop ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,BrodcastFromServer,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,RunConnectDisconnect,The following statement contains a magic number: for (int i = 0; i < connections; i++) {  	var connection = new Client.Hubs.HubConnection ("http://foo");  	var proxy = connection.CreateHubProxy ("EchoHub");  	var wh = new ManualResetEventSlim (false);  	proxy.On ("echo"' _ => wh.Set ());  	try {  		connection.Start (client).Wait ();  		proxy.Invoke ("Echo"' "foo").Wait ();  		if (!wh.Wait (TimeSpan.FromSeconds (10))) {  			Debugger.Break ();  		}  	}  	finally {  		connection.Stop ();  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,RunConnectDisconnect,The following statement contains a magic number: try {  	connection.Start (client).Wait ();  	proxy.Invoke ("Echo"' "foo").Wait ();  	if (!wh.Wait (TimeSpan.FromSeconds (10))) {  		Debugger.Break ();  	}  }  finally {  	connection.Stop ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,RunConnectDisconnect,The following statement contains a magic number: if (!wh.Wait (TimeSpan.FromSeconds (10))) {  	Debugger.Break ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,Scaleout,The following statement contains a magic number: for (var i = 0; i < nodes; ++i) {  	var host = new MemoryHost ();  	host.Configure (app =>  {  		var config = new HubConfiguration () {  			Resolver = new DefaultDependencyResolver ()  		};  		var delay = i % 2 == 0 ? TimeSpan.Zero : TimeSpan.FromSeconds (1);  		var bus = new DelayedMessageBus (host.InstanceName' eventBus' config.Resolver' delay);  		config.Resolver.Register (typeof(IMessageBus)' () => bus);  		app.MapHubs (config);  	});  	hosts [i] = host;  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,Scaleout,The following statement contains a magic number: host.Configure (app =>  {  	var config = new HubConfiguration () {  		Resolver = new DefaultDependencyResolver ()  	};  	var delay = i % 2 == 0 ? TimeSpan.Zero : TimeSpan.FromSeconds (1);  	var bus = new DelayedMessageBus (host.InstanceName' eventBus' config.Resolver' delay);  	config.Resolver.Register (typeof(IMessageBus)' () => bus);  	app.MapHubs (config);  });  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,SendLoop,The following statement contains a magic number: try {  	connection.Start (new Client.Transports.LongPollingTransport (host)).Wait ();  	while (true) {  		proxy.Invoke ("Echo"' "foo").Wait ();  		if (!wh.Wait (TimeSpan.FromSeconds (10))) {  			Debugger.Break ();  		}  		wh.Reset ();  	}  }  catch {  	connection.Stop ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,SendLoop,The following statement contains a magic number: while (true) {  	proxy.Invoke ("Echo"' "foo").Wait ();  	if (!wh.Wait (TimeSpan.FromSeconds (10))) {  		Debugger.Break ();  	}  	wh.Reset ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,SendLoop,The following statement contains a magic number: if (!wh.Wait (TimeSpan.FromSeconds (10))) {  	Debugger.Break ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,ClientGroupsSyncWithServerGroupsOnReconnectLongPolling,The following statement contains a magic number: connection.Reconnected += () =>  {  	connection.Send (new {  		type = 3'  		group = "test"'  		message = "Reconnected"  	}).Wait ();  };  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,ClientGroupsSyncWithServerGroupsOnReconnectLongPolling,The following statement contains a magic number: connection.Send (new {  	type = 3'  	group = "test"'  	message = "Reconnected"  }).Wait ();  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,ClientGroupsSyncWithServerGroupsOnReconnectLongPolling,The following statement contains a magic number: Thread.Sleep (TimeSpan.FromSeconds (10));  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,ClientGroupsSyncWithServerGroupsOnReconnectLongPolling,The following statement contains a magic number: if (!wh.Wait (TimeSpan.FromSeconds (10))) {  	Debugger.Break ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,BroadcastFive,The following statement contains a magic number: try {  	for (int i = 0; i < 5; i++) {  		var payload = new {  			type = MessageType.Broadcast'  			value = "message " + i.ToString ()  		};  		connection.Send (payload).Wait ();  	}  }  catch (Exception ex) {  	Console.Error.WriteLine ("========ERROR==========");  	Console.Error.WriteLine (ex.GetBaseException ().ToString ());  	Console.Error.WriteLine ("=======================");  }  finally {  	connection.Stop ();  }  
Magic Number,Microsoft.AspNet.SignalR.Stress,StressRuns,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Stress\Stress\StressRuns.cs,BroadcastFive,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	var payload = new {  		type = MessageType.Broadcast'  		value = "message " + i.ToString ()  	};  	connection.Send (payload).Wait ();  }  
