Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\..\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,ContinueWithNotComplete,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\..\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,Then,The method has 5 parameters.
Long Parameter List,Microsoft.AspNet.SignalR,TaskAsyncHelper,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\..\Microsoft.AspNet.SignalR.Core\TaskAsyncHelper.cs,RunTaskSynchronously,The method has 5 parameters.
Long Parameter List,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,SampleConnections,The method has 10 parameters.
Long Parameter List,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,ConnectBatches,The method has 6 parameters.
Long Parameter List,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,ConnectBatch,The method has 6 parameters.
Long Statement,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,Main,The length of the statement  "		await ConnectBatches (arguments.Url' arguments.Transport' arguments.NumClients' arguments.BatchSize' arguments.BatchInterval' connections); " is 139.
Long Statement,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,Mark,The length of the statement  "	            Microsoft.VisualStudio.Diagnostics.Measurement.MeasurementBlock.Mark(value' String.Format("{0}-{1};{2}"' arguments.Transport' arguments.NumClients' metric));" is 157.
Long Statement,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,SampleConnections,The length of the statement  "		transportState = String.Format ("' Transport={0}ws|{1}ss|{2}lp"' connections.Count (c => c.Transport.Name.Equals ("webSockets"' StringComparison.InvariantCultureIgnoreCase))' connections.Count (c => c.Transport.Name.Equals ("serverSentEvents"' StringComparison.InvariantCultureIgnoreCase))' connections.Count (c => c.Transport.Name.Equals ("longPolling"' StringComparison.InvariantCultureIgnoreCase))); " is 402.
Long Statement,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,SampleConnections,The length of the statement  "	Console.WriteLine (String.Format ("[{0}] Connections: {1}/{2}' State={3}|{4}c|{5}r|{6}d"' elapsed' connections.Count ()' arguments.NumClients' connecting' connected' reconnecting' disconnected) + transportState); " is 212.
Long Statement,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,InitializeCounters,The length of the statement  "				LoadCounter (category' name' instance' machine.Equals ("server"' StringComparison.InvariantCultureIgnoreCase) ? server : machine); " is 130.
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,Main,The following statement contains a magic number: ThreadPool.SetMinThreads (arguments.NumClients' 2);  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,InitializeCounters,The following statement contains a magic number: try {  	// Each line specifies a counter in the format: 'machine\category\counter(instance)'  	// When machine is set to 'server' the hostname portion of the URL will be used  	var server = new Uri (arguments.Url).Host;  	foreach (var line in File.ReadAllLines ("Counters.txt")) {  		var parts = line.Split ('\\');  		if (parts.Length == 3) {  			var machine = parts [0].Trim ();  			var category = parts [1].Trim ();  			var name = parts [2].Trim ();  			var instance = "";  			var i = name.IndexOf ('(');  			if (i > 0) {  				instance = name.Substring (i + 1' name.Length - i - 2);  				name = name.Substring (0' i);  			}  			LoadCounter (category' name' instance' machine.Equals ("server"' StringComparison.InvariantCultureIgnoreCase) ? server : machine);  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Failed to load counters: {0}"' e);  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,InitializeCounters,The following statement contains a magic number: try {  	// Each line specifies a counter in the format: 'machine\category\counter(instance)'  	// When machine is set to 'server' the hostname portion of the URL will be used  	var server = new Uri (arguments.Url).Host;  	foreach (var line in File.ReadAllLines ("Counters.txt")) {  		var parts = line.Split ('\\');  		if (parts.Length == 3) {  			var machine = parts [0].Trim ();  			var category = parts [1].Trim ();  			var name = parts [2].Trim ();  			var instance = "";  			var i = name.IndexOf ('(');  			if (i > 0) {  				instance = name.Substring (i + 1' name.Length - i - 2);  				name = name.Substring (0' i);  			}  			LoadCounter (category' name' instance' machine.Equals ("server"' StringComparison.InvariantCultureIgnoreCase) ? server : machine);  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Failed to load counters: {0}"' e);  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,InitializeCounters,The following statement contains a magic number: try {  	// Each line specifies a counter in the format: 'machine\category\counter(instance)'  	// When machine is set to 'server' the hostname portion of the URL will be used  	var server = new Uri (arguments.Url).Host;  	foreach (var line in File.ReadAllLines ("Counters.txt")) {  		var parts = line.Split ('\\');  		if (parts.Length == 3) {  			var machine = parts [0].Trim ();  			var category = parts [1].Trim ();  			var name = parts [2].Trim ();  			var instance = "";  			var i = name.IndexOf ('(');  			if (i > 0) {  				instance = name.Substring (i + 1' name.Length - i - 2);  				name = name.Substring (0' i);  			}  			LoadCounter (category' name' instance' machine.Equals ("server"' StringComparison.InvariantCultureIgnoreCase) ? server : machine);  		}  	}  }  catch (Exception e) {  	Console.WriteLine ("Failed to load counters: {0}"' e);  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,InitializeCounters,The following statement contains a magic number: foreach (var line in File.ReadAllLines ("Counters.txt")) {  	var parts = line.Split ('\\');  	if (parts.Length == 3) {  		var machine = parts [0].Trim ();  		var category = parts [1].Trim ();  		var name = parts [2].Trim ();  		var instance = "";  		var i = name.IndexOf ('(');  		if (i > 0) {  			instance = name.Substring (i + 1' name.Length - i - 2);  			name = name.Substring (0' i);  		}  		LoadCounter (category' name' instance' machine.Equals ("server"' StringComparison.InvariantCultureIgnoreCase) ? server : machine);  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,InitializeCounters,The following statement contains a magic number: foreach (var line in File.ReadAllLines ("Counters.txt")) {  	var parts = line.Split ('\\');  	if (parts.Length == 3) {  		var machine = parts [0].Trim ();  		var category = parts [1].Trim ();  		var name = parts [2].Trim ();  		var instance = "";  		var i = name.IndexOf ('(');  		if (i > 0) {  			instance = name.Substring (i + 1' name.Length - i - 2);  			name = name.Substring (0' i);  		}  		LoadCounter (category' name' instance' machine.Equals ("server"' StringComparison.InvariantCultureIgnoreCase) ? server : machine);  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,InitializeCounters,The following statement contains a magic number: foreach (var line in File.ReadAllLines ("Counters.txt")) {  	var parts = line.Split ('\\');  	if (parts.Length == 3) {  		var machine = parts [0].Trim ();  		var category = parts [1].Trim ();  		var name = parts [2].Trim ();  		var instance = "";  		var i = name.IndexOf ('(');  		if (i > 0) {  			instance = name.Substring (i + 1' name.Length - i - 2);  			name = name.Substring (0' i);  		}  		LoadCounter (category' name' instance' machine.Equals ("server"' StringComparison.InvariantCultureIgnoreCase) ? server : machine);  	}  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,InitializeCounters,The following statement contains a magic number: if (parts.Length == 3) {  	var machine = parts [0].Trim ();  	var category = parts [1].Trim ();  	var name = parts [2].Trim ();  	var instance = "";  	var i = name.IndexOf ('(');  	if (i > 0) {  		instance = name.Substring (i + 1' name.Length - i - 2);  		name = name.Substring (0' i);  	}  	LoadCounter (category' name' instance' machine.Equals ("server"' StringComparison.InvariantCultureIgnoreCase) ? server : machine);  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,InitializeCounters,The following statement contains a magic number: if (parts.Length == 3) {  	var machine = parts [0].Trim ();  	var category = parts [1].Trim ();  	var name = parts [2].Trim ();  	var instance = "";  	var i = name.IndexOf ('(');  	if (i > 0) {  		instance = name.Substring (i + 1' name.Length - i - 2);  		name = name.Substring (0' i);  	}  	LoadCounter (category' name' instance' machine.Equals ("server"' StringComparison.InvariantCultureIgnoreCase) ? server : machine);  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,InitializeCounters,The following statement contains a magic number: if (parts.Length == 3) {  	var machine = parts [0].Trim ();  	var category = parts [1].Trim ();  	var name = parts [2].Trim ();  	var instance = "";  	var i = name.IndexOf ('(');  	if (i > 0) {  		instance = name.Substring (i + 1' name.Length - i - 2);  		name = name.Substring (0' i);  	}  	LoadCounter (category' name' instance' machine.Equals ("server"' StringComparison.InvariantCultureIgnoreCase) ? server : machine);  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,InitializeCounters,The following statement contains a magic number: if (i > 0) {  	instance = name.Substring (i + 1' name.Length - i - 2);  	name = name.Substring (0' i);  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,InitializeCounters,The following statement contains a magic number: instance = name.Substring (i + 1' name.Length - i - 2);  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,RecordAggregates,The following statement contains a magic number: if (values.Length % 2 == 0) {  	median = median + values [(values.Length / 2) - 1] / 2;  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,RecordAggregates,The following statement contains a magic number: if (values.Length % 2 == 0) {  	median = median + values [(values.Length / 2) - 1] / 2;  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,RecordAggregates,The following statement contains a magic number: if (values.Length % 2 == 0) {  	median = median + values [(values.Length / 2) - 1] / 2;  }  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,RecordAggregates,The following statement contains a magic number: median = median + values [(values.Length / 2) - 1] / 2;  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,RecordAggregates,The following statement contains a magic number: median = median + values [(values.Length / 2) - 1] / 2;  
Magic Number,Microsoft.AspNet.SignalR.Crank,Program,C:\repos\moljac_Xamarin.SignalR.1.1.4\src\Microsoft.AspNet.SignalR.Crank\Program.cs,RecordAggregates,The following statement contains a magic number: if (average != 0) {  	var sumOfSquaresDiffs = values.Select (v => (v - average) * (v - average)).Sum ();  	var stdDevP = Math.Sqrt (sumOfSquaresDiffs / values.Length) / average * 100;  	Console.WriteLine ("{0} (STDDEV%): {1}%"' key' Math.Round (stdDevP));  }  
