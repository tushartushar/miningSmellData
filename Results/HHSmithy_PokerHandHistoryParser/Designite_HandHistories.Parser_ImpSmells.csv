Implementation smell,Namespace,Class,File,Method,Description
Long Method,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The method has 141 lines of code.
Long Method,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseHandActions,The method has 102 lines of code.
Long Method,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseHandActions,The method has 128 lines of code.
Long Method,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseHandActions,The method has 109 lines of code.
Long Method,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The method has 121 lines of code.
Long Method,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The method has 207 lines of code.
Long Method,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePlayers,The method has 130 lines of code.
Long Method,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The method has 249 lines of code.
Long Method,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseHandActions,The method has 118 lines of code.
Long Method,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The method has 121 lines of code.
Complex Method,HandHistories.Parser.Parsers.Base,HandHistoryRegexActionParserImplBase,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\RegexParser\Base\HandHistoryRegexActionParserImplBase.cs,ParseActions,Cyclomatic complexity of the method is 8
Complex Method,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseTableType,Cyclomatic complexity of the method is 10
Complex Method,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,Cyclomatic complexity of the method is 15
Complex Method,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,FixUncalledBets,Cyclomatic complexity of the method is 13
Complex Method,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseHandActions,Cyclomatic complexity of the method is 9
Complex Method,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParsePlayers,Cyclomatic complexity of the method is 17
Complex Method,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseHandActions,Cyclomatic complexity of the method is 19
Complex Method,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParsePlayers,Cyclomatic complexity of the method is 12
Complex Method,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseRunItTwice,Cyclomatic complexity of the method is 11
Complex Method,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,Cyclomatic complexity of the method is 22
Complex Method,HandHistories.Parser.Parsers.FastParser.Base,HandHistoryParserFastImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Base\HandHistoryParserFastImpl.cs,ParseFullHandHistory,Cyclomatic complexity of the method is 10
Complex Method,HandHistories.Parser.Parsers.FastParser.Base,HandHistoryParserFastImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Base\HandHistoryParserFastImpl.cs,AdjustRaiseSizes,Cyclomatic complexity of the method is 11
Complex Method,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParsePlayers,Cyclomatic complexity of the method is 10
Complex Method,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParsePlayers,Cyclomatic complexity of the method is 9
Complex Method,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePlayers,Cyclomatic complexity of the method is 13
Complex Method,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,Cyclomatic complexity of the method is 27
Complex Method,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,GetPlayerNameFromHandLine,Cyclomatic complexity of the method is 8
Complex Method,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,Cyclomatic complexity of the method is 9
Complex Method,HandHistories.Parser.Parsers.RegexParser.Base,HandHistoryRegexParserImplBase,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\RegexParser\Base\HandHistoryRegexParserImplBase.cs,ParseTableType,Cyclomatic complexity of the method is 10
Long Identifier,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,FixUncalledBets,The length of the parameter totalInvestedAmountsByOtherPlayers is 34.
Long Identifier,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,FixUncalledBets,The length of the parameter totalInvestedAmountOtherPlayer is 30.
Long Identifier,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,FixUncalledBets,The length of the parameter totalInvestedAmountOtherPlayer is 30.
Long Statement,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,SplitUpMultipleHands,The length of the statement  "            return rawHandHistories.LazyStringSplit("\n\n").Where(s => string.IsNullOrWhiteSpace(s) == false && s.Equals("\r\n") == false); " is 127.
Long Statement,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseTableType,The length of the statement  "            // furthermore if on a regular table the average stack is < 17.5' the play is just like on a push fold table and vice versa " is 123.
Long Statement,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseTableType,The length of the statement  "                if (player.StartingStack / limit.BigBlind == 5m) return TableType.FromTableTypeDescriptions(TableTypeDescription.PushFold); " is 123.
Long Statement,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,FixUncalledBets,The length of the statement  "                    var totalInvestedAmount = handActions.Where(a => a.PlayerName.Equals(lastAction.PlayerName) && !a.IsWinningsAction).Sum(a => a.Amount); " is 135.
Long Statement,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,FixUncalledBets,The length of the statement  "                    var deadMoneyAction = handActions.FirstOrDefault(a => a.PlayerName.Equals(lastAction.PlayerName) && a.HandActionType.Equals(HandActionType.POSTS)); " is 147.
Long Statement,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,FixUncalledBets,The length of the statement  "                    if (deadMoneyAction != null && deadMoneyAction.Amount < handActions.First(a => a.HandActionType.Equals(HandActionType.BIG_BLIND)).Amount) " is 137.
Long Statement,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,FixUncalledBets,The length of the statement  "                    var totalInvestedAmountsByOtherPlayers = handActions.Where(a => a.PlayerName != lastAction.PlayerName && !a.IsWinningsAction) " is 125.
Long Statement,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,FixUncalledBets,The length of the statement  "                        deadMoneyAction = handActions.FirstOrDefault(a => a.PlayerName.Equals(investedByPlayer.PlayerName) && a.HandActionType.Equals(HandActionType.POSTS)); " is 149.
Long Statement,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,FixUncalledBets,The length of the statement  "                        if (deadMoneyAction != null && deadMoneyAction.Amount < handActions.First(a => a.HandActionType.Equals(HandActionType.BIG_BLIND)).Amount) " is 137.
Long Statement,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,SplitUpMultipleHands,The length of the statement  "            return rawHandHistories.Split(new string[] { "<HISTORY " }' StringSplitOptions.None).Where(p => p.Length > 2 && p[1] != '?'); " is 125.
Long Statement,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseLimit,The length of the statement  "            Limit limit = Limit.FromSmallBlindBigBlind(decimal.Parse(smallBlind' provider)' decimal.Parse(bigBlind' provider)' Currency.USD); " is 129.
Long Statement,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseHandActions,The length of the statement  "                    //<RESULT WINTYPE="WINTYPE_HILO" PLAYER="ItalyToast" WIN="105.08" HAND="$(STR_BY_DEFAULT)" WINCARDS="" HANDEXT=" 8'7'5'2'A"> " is 124.
Long Statement,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseLimit,The length of the statement  "                throw new LimitException(handLines[0]' string.Format("Failed to parse Currency. Currency String is: {0}"' currencyString)); " is 123.
Long Statement,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseHandActions,The length of the statement  "                    amount = decimal.Parse(handLine.Substring(lastSpaceIndex + 1' handLine.Length - lastSpaceIndex - 1)' System.Globalization.CultureInfo.InvariantCulture); " is 152.
Long Statement,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseHandActions,The length of the statement  "                    amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' System.Globalization.CultureInfo.InvariantCulture); " is 152.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The length of the statement  "            // Full Tilt Poker Game #26862429938: Table Adornment (6 max' shallow) - $0.50/$1 - No Limit Hold'em - 16:07:17 ET - 2010/12/31 " is 127.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The length of the statement  "            DateTime converted = TimeZoneInfo.ConvertTimeToUtc(dateTime' TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time")); " is 123.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseHandId,The length of the statement  "            // Full Tilt Poker Game #26862468195: Table Adornment (6 max' shallow) - $0.50/$1 - No Limit Hold'em - 16:09:19 ET - 2010/12/31 " is 127.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseTableName,The length of the statement  "            // Full Tilt Poker Game #28617512574: Table Bri (6 max) - $0.25/$0.50 - $15 Cap No Limit Hold'em - 18:46:08 ET - 2011/02/28 " is 123.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseSeatType,The length of the statement  "            // Full Tilt Poker Game #26862468195: Table Adornment (6 max' shallow) - $0.50/$1 - No Limit Hold'em - 16:09:19 ET - 2010/12/31 " is 127.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseGameType,The length of the statement  "            // OLD: Full Tilt Poker Game #26862468195: Table Adornment (6 max' shallow) - $0.50/$1 - No Limit Hold'em - 16:09:19 ET - 2010/12/31 " is 132.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseGameType,The length of the statement  "            // NEW: Full Tilt Poker Game #26862468195: Table Adornment (6 max' shallow) - NL Hold'em - $0.50/$1 - 16:09:19 ET - 2010/12/31 " is 126.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseLimit,The length of the statement  "            // OLD: Full Tilt Poker Game #28617512574: Table Bri (6 max) - $0.25/$0.50 - $15 Cap No Limit Hold'em - 18:46:08 ET - 2011/02/28 " is 128.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseLimit,The length of the statement  "            // NEW: Full Tilt Poker Game #28617512574: Table Bri (6 max) - $15 Cap No Limit Hold'em - $0.25/$0.50- 18:46:08 ET - 2011/02/28 " is 127.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseLimit,The length of the statement  "            decimal small = decimal.Parse(limitSubstring.Substring(0' slashIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo); " is 145.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseShowDown,The length of the statement  "                //    decimal amount = decimal.Parse(amountString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo); " is 125.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParsePlayers,The length of the statement  "                decimal amount = decimal.Parse(stackSizeString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo); " is 122.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseExtraHandInformation,The length of the statement  "                        decimal.Parse(line.Substring(lastSpaceIndex + 1' line.Length - lastSpaceIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo); " is 158.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseExtraHandInformation,The length of the statement  "                        decimal.Parse(line.Substring(10' spaceAfterFirstNumber - 10)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo); " is 136.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,FixUncalledBets,The length of the statement  "            var realActions = handActions.Where(a => a.IsGameAction && !a.IsWinningsAction && a.HandActionType != HandActionType.FOLD).ToList(); " is 132.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,FixUncalledBets,The length of the statement  "                //if(!handActions.Any(a => a.PlayerName == lastAction.PlayerName && a.HandActionType == HandActionType.UNCALLED_BET && a.Amount == -lastAction.Amount)) " is 151.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,FixUncalledBets,The length of the statement  "                handActions.Add(new HandAction(lastAction.PlayerName' HandActionType.UNCALLED_BET' lastAction.Amount' Street.Showdown)); " is 120.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,FixUncalledBets,The length of the statement  "                var totalInvestedAmountOtherPlayer = realActions.Where(a => !a.PlayerName.Equals(lastAction.PlayerName)).GroupBy(a => a.PlayerName) " is 131.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,FixUncalledBets,The length of the statement  "                handActions.Add(new HandAction(lastAction.PlayerName' HandActionType.UNCALLED_BET' totalInvestedAmount - totalInvestedAmountOtherPlayer' Street.Showdown)); " is 155.
Long Statement,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,FixUncalledBets,The length of the statement  "                handActions.Add(new HandAction(lastAction.PlayerName' HandActionType.UNCALLED_BET' lastAction.Amount - sbAmount' Street.Showdown)); " is 131.
Long Statement,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseHandActions,The length of the statement  "                if(action != null && !action.HandActionType.Equals(HandActionType.UNKNOWN) && !action.HandActionType.Equals(HandActionType.SHOW)) " is 129.
Long Statement,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseExtraHandInformation,The length of the statement  "                    handHistory.Rake = decimal.Parse(handLine.Substring(12)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 132.
Long Statement,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseExtraHandInformation,The length of the statement  "                    handHistory.TotalPot += decimal.Parse(handLine.Substring(colonIndex + 2' wonIndex - colonIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 176.
Long Statement,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseGameType,The length of the statement  "            string gameType = substring.Substring(bettingType.Length + 1' substring.IndexOf(' '' bettingType.Length + 2) - bettingType.Length - 1); " is 135.
Long Statement,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseLimit,The length of the statement  "            decimal smallBlind = decimal.Parse(sbstring' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 120.
Long Statement,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseLimit,The length of the statement  "            decimal bigBlind = decimal.Parse(handLines[2].Substring(slashIndex + 1' commaIndex - slashIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 177.
Long Statement,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The length of the statement  "                            decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 180.
Long Statement,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The length of the statement  "                            decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 180.
Long Statement,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The length of the statement  "                    decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 184.
Long Statement,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,FixUncalledBets,The length of the statement  "                var playerToReturnTo = handActions.Where(a => a.IsGameAction && !a.HandActionType.Equals(HandActionType.POSTS) && !a.HandActionType.Equals(HandActionType.ANTE)) " is 160.
Long Statement,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,FixUncalledBets,The length of the statement  "                    && !a.HandActionType.Equals(HandActionType.POSTS) && !a.HandActionType.Equals(HandActionType.ANTE) // make sure to ignore dead money " is 132.
Long Statement,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParsePlayers,The length of the statement  "                playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber)); " is 143.
Long Statement,HandHistories.Parser.Parsers.FastParser.Base,HandHistoryParserFastImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Base\HandHistoryParserFastImpl.cs,ParseFullHandHistory,The length of the statement  "                    throw new PlayersException(string.Join("\r\n"' handLines)' "Only found " + handHistory.Players.Count + " players with actions."); " is 129.
Long Statement,HandHistories.Parser.Parsers.FastParser.Base,HandHistoryParserFastImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Base\HandHistoryParserFastImpl.cs,ParseFullHandHistory,The length of the statement  "                logger.Warn("Couldn't parse hand {0} with error {1} and trace {2}"' string.Join("\r\n"' handLines)' ex.Message' ex.StackTrace); " is 127.
Long Statement,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,SplitUpMultipleHands,The length of the statement  "                    logger.Fatal("IPokerFastParserImpl.SplitUpMultipleHands(): Encountered a weird file\r\n{0}"' rawHandHistories.Substring(0'1000)); " is 129.
Long Statement,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,FixDeadMoneyPosting,The length of the statement  "            // sort the actions' because regular SB + BB actions are always the first actions ( although might not be the first in the hand history ) " is 137.
Long Statement,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,FixDeadMoneyPosting,The length of the statement  "                        var newAction = new HandAction(action.PlayerName' HandActionType.POSTS' action.Amount' action.Street' action.ActionNumber); " is 123.
Long Statement,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetWinningAndShowCardActions,The length of the statement  "                    HandAction showCardsAction = new HandAction(player.PlayerName' HandActionType.SHOW' 0' Street.Showdown' actionNumber++);     " is 120.
Long Statement,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParsePlayers,The length of the statement  "                List<XElement> playerActions = actionElements.Where(action => action.Attribute("player").Value.Equals(player.PlayerName)).ToList(); " is 131.
Long Statement,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The length of the statement  "                    boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]); " is 141.
Long Statement,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseDecimal,The length of the statement  "            while (!decimal.TryParse(amountString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo' out amount)) " is 125.
Long Statement,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The length of the statement  "            /*<game id="53363692-2070" starttime="20120417015848" numholecards="2" gametype="2" seats="9" realmoney="true" data="20120417|Yellowstone (53363692)|53363692|53363692-2070|false"> */ " is 182.
Long Statement,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The length of the statement  "             *<game id="58318258-794" starttime="2012/07/14 12:47:39 -0700" numholecards="2" gametype="2" seats="6" realmoney="true" data="20120714|Waimea Bay|58318258|58318258-794|false"> */ " is 178.
Long Statement,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseTableName,The length of the statement  "                <game id="56067014-1756" starttime="20120529031347" numholecards="2" gametype="2" seats="9" realmoney="true" data="20120529|Baja (56067014)|56067014|56067014-1756|false">              " is 170.
Long Statement,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,GetWinningsActionFromWinnerElement,The length of the statement  "            decimal amount = decimal.Parse(winnerElement.Attribute("amount").Value' System.Globalization.CultureInfo.InvariantCulture); " is 123.
Long Statement,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParsePlayers,The length of the statement  "            IEnumerable<XElement> cardElements = gameElement.Elements("round").Elements("cards").Where(element => !element.Attribute("type").Value.StartsWith("C")).ToList(); " is 161.
Long Statement,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParsePlayers,The length of the statement  "                decimal stack = decimal.Parse(playerElement.Attribute("balance").Value.Substring(1)' System.Globalization.CultureInfo.InvariantCulture); " is 136.
Long Statement,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ConvertHandDateToUtc,The length of the statement  "            DateTime converted = TimeZoneInfo.ConvertTimeToUtc(handDate' TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time")); " is 123.
Long Statement,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The length of the statement  "            throw new UnrecognizedGameTypeException(handLines[0]' "Unrecognized game-type: " + line.Substring(startIndex' endIndex - startIndex)); " is 134.
Long Statement,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,Parse20BBLimit,The length of the statement  "            decimal bigblind = decimal.Parse(limitSubstring' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo) *0.4m; " is 129.
Long Statement,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseBuyInLimit,The length of the statement  "            decimal buyIn = decimal.Parse(limitSubstring' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo); " is 120.
Long Statement,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseHandActions,The length of the statement  "                    // in some cases chatlines don't have playername involved' so we ignore every parsing error where no playername is involved  " is 123.
Long Statement,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParsePlayers,The length of the statement  "                    // we need to find the ( before the number. players can have ( in their name so we need to go backwards and skip the last one " is 125.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseDateUtc,The length of the statement  "            DateTime dateTime = new DateTime(year' month' day' hour' minute' second); //DateTime.ParseExact(dateString' "yyyy/MM/dd H:mm:ss"' provider);//new DateTime(year' month' day' hour' minute' second); " is 195.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseExtraHandInformation,The length of the statement  "                    handHistorySummary.Rake = decimal.Parse(rake' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 121.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseExtraHandInformation,The length of the statement  "                    handHistorySummary.TotalPot = decimal.Parse(totalPot' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 129.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseHandId,The length of the statement  "            //   PokerStars Hand #121732531381: Tournament #974085159' $5.20+$1.30+$0.50 USD Hold'em No Limit - Level IV (50/100) - 2014/09/18 16:58:15 ET " is 142.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseHandId,The length of the statement  "            //   PokerStars Game #121732531381: Tournament #974085159' $5.20+$1.30+$0.50 USD Hold'em No Limit - Level IV (50/100) - 2014/09/18 16:58:15 ET " is 142.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseTournamentId,The length of the statement  "            //   PokerStars Hand #121732531381: Tournament #974085159' $5.20+$1.30+$0.50 USD Hold'em No Limit - Level IV (50/100) - 2014/09/18 16:58:15 ET " is 142.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The length of the statement  "                // PokerStars Hand #121732576120: Tournament #974090903' $13.79+$1.21 USD Hold'em No Limit - Level III (25/50) - 2014/09/18 16:59:24 ET " is 135.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseTableType,The length of the statement  "            // we could consider guessing the tabletype by taking a look at the buyin/rake/bounty/seats/gametype' but this isn't bulletproof " is 128.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseLimit,The length of the statement  "            // SNG:  PokerStars Hand #121732709812: Tournament #974092011' $55.56+$4.44 USD Hold'em No Limit - Level VI (100/200) - 2014/09/18 17:02:21 ET " is 142.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseBuyin,The length of the statement  "            // PokerStars Hand #121732709812: Tournament #974092011' $55.56+$4.44 USD Hold'em No Limit - Level VI (100/200) - 2014/09/18 17:02:21 ET " is 136.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseBuyin,The length of the statement  "                prizePoolValue = decimal.Parse(buyinSplit[0]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 121.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseBuyin,The length of the statement  "                knockoutValue = decimal.Parse(buyinSplit[1]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 120.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,TryParseCurrency,The length of the statement  "            // SNG:  PokerStars Hand #121732709812: Tournament #974092011' $55.56+$4.44 USD Hold'em No Limit - Level VI (100/200) - 2014/09/18 17:02:21 ET " is 142.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,IsValidOrCancelledHand,The length of the statement  "                        bool cancelled = (cancelledLine[0] == 'H' && cancelledLine[cancelledLine.Length - 1] == 'd' && cancelledLine[cancelledLine.Length - 2] == 'e'); " is 143.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCurrentStreet,The length of the statement  "            // both showdowns will be included in the regular hand actions' so the regular hand actions can be used for betting/pot/rake verification " is 137.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseMiscShowdownLine,The length of the statement  "            while ((gameType == GameType.PotLimitOmahaHiLo || gameType == GameType.FixedLimitOmahaHiLo || gameType == GameType.NoLimitOmahaHiLo) && " is 135.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePostingActionLine,The length of the statement  "            decimal amount = decimal.Parse(actionLine.Substring(firstDigitIndex' actionLine.Length - firstDigitIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 182.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseRegularActionLine,The length of the statement  "                    amount = decimal.Parse(actionLine.Substring(firstDigitIndex' actionLine.Length - firstDigitIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 174.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseRegularActionLine,The length of the statement  "                    amount = decimal.Parse(actionLine.Substring(firstDigitIndex' actionLine.Length - firstDigitIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 174.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseRegularActionLine,The length of the statement  "                    amount = decimal.Parse(actionLine.Substring(firstDigitIndex' actionLine.Length - firstDigitIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 174.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCollectedLine,The length of the statement  "            decimal amount = decimal.Parse(actionLine.Substring(firstAmountDigit' actionLine.Length - firstAmountDigit)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 184.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseUncalledBetLine,The length of the statement  "            decimal amount = decimal.Parse(actionLine.Substring(14' closeParenIndex - 14)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 154.
Long Statement,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePlayers,The length of the statement  "                // we need to find the ( before the number. players can have ( in their name so we need to go backwards and skip the last one " is 125.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandId,The length of the statement  "            int indexOfHandIdEnd = handLines[0].IndexOf('-'' indexOfHandIdStart+9); // this makes sure to skip the first appearance of '-' " is 126.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseLimit,The length of the statement  "            decimal smallBlind = decimal.Parse(lineSplit[5].Substring(parenIndex + 1' slashIndex - parenIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 179.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseLimit,The length of the statement  "            decimal bigBlind = decimal.Parse(lineSplit[5].Substring(slashIndex + 1' lineSplit[5].Length - slashIndex - 3)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 186.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The length of the statement  "                            decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 170.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The length of the statement  "                    var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 184.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The length of the statement  "                        amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 172.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The length of the statement  "                        amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 160.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParsePlayers,The length of the statement  "                playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber)); " is 143.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseExtraHandInformation,The length of the statement  "                        handHistorySummary.Rake = decimal.Parse(rake' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 121.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseExtraHandInformation,The length of the statement  "                    handHistorySummary.TotalPot = decimal.Parse(totalPot' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo); " is 129.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseLimit,The length of the statement  "            decimal bigBlind = decimal.Parse(limitText.Substring(splitIndex + 1)' System.Globalization.CultureInfo.InvariantCulture); " is 121.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseHandActions,The length of the statement  "                            actions.Add(new HandAction(PlayerName' HandActionType.RAISE' ParseActionAmountAfterPlayer(actionLine)' currentStreet' actionNumber++)); " is 135.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseHandActions,The length of the statement  "                                actions.Add(new HandAction(PlayerName' HandActionType.CALL' ParseActionAmountAfterPlayer(actionLine)' currentStreet' actionNumber++)); " is 134.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseHandActions,The length of the statement  "                            actions.Add(new HandAction(PlayerName' HandActionType.BET' ParseActionAmountAfterPlayer(actionLine)' currentStreet' actionNumber++)); " is 133.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseHandActions,The length of the statement  "                            actions.Add(new AllInAction(PlayerName' ParseActionAmountAfterPlayer(actionLine)' currentStreet' true' actionNumber++)); " is 120.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseHandActions,The length of the statement  "                    actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' ParseActionAmountBeforePlayer(actionLine)' currentStreet' actionNumber++)); " is 143.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseHandActions,The length of the statement  "                    string playerName = PlayerWithSpaces ? GetWinnerNameWithSpaces(actionLine' playerList) : GetWinnerNameWithoutSpaces(actionLine); " is 128.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The length of the statement  "                playerList.Add(new Player(playerName' decimal.Parse(stack' System.Globalization.CultureInfo.InvariantCulture)' SeatNumber)); " is 124.
Long Statement,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseCommunityCards,The length of the statement  "                return BoardCards.FromCards(line.Substring(firstSquareBracketEnd' lastSquareBracket - firstSquareBracketEnd).Replace("10"' "T")); " is 129.
Long Statement,HandHistories.Parser.Parsers.RegexParser.PartyPoker,PartyHandHistoryRegexParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\RegexParser\PartyPoker\PartyHandHistoryRegexParserImpl.cs,GetHoleCardsRegex,The length of the statement  "            const string regex = @"((?<={playerName} doesn't show \[ )([0-9TJKQAcdhs' ])+)|((?<={playerName} shows \[ )([0-9TJKQAcdhs' ])+)"; " is 129.
Long Statement,HandHistories.Parser.Parsers.RegexParser.PartyPoker,PartyHandHistoryRegexParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\RegexParser\PartyPoker\PartyHandHistoryRegexParserImpl.cs,ParseLimit,The length of the statement  "                        gameLimitNoSlash = (decimal.Parse(gameLimitNoSlash' System.Globalization.CultureInfo.InvariantCulture) * 100).ToString(); " is 121.
Long Statement,HandHistories.Parser.Parsers.RegexParser.PartyPoker,SiteActionRegexesBase,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\RegexParser\PartyPoker\SiteActionRegexes.cs,GetActionsDictionary,The length of the statement  "                                     {HandActionType.SECONDS_TO_RECONNECT' new HandActionTypeRegexPair(HandActionType.SECONDS_TO_RECONNECT' SecondsToReconnectRegex)}' " is 129.
Long Statement,HandHistories.Parser.Parsers.RegexParser.PartyPoker,SiteActionRegexesBase,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\RegexParser\PartyPoker\SiteActionRegexes.cs,GetActionsDictionary,The length of the statement  "                                     {HandActionType.FIFTEEN_SECONDS_LEFT' new HandActionTypeRegexPair(HandActionType.FIFTEEN_SECONDS_LEFT' SecondsLeftToActRegex)}' " is 127.
Long Statement,HandHistories.Parser.Parsers.RegexParser.PartyPoker,SiteActionRegexesBase,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\RegexParser\PartyPoker\SiteActionRegexes.cs,GetActionsDictionary,The length of the statement  "                                     {HandActionType.FIVE_SECONDS_LEFT' new HandActionTypeRegexPair(HandActionType.FIVE_SECONDS_LEFT' SecondsLeftToActRegex)}' " is 121.
Long Statement,HandHistories.Parser.Parsers.RegexParser.Base,HandHistoryRegexParserImplBase,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\RegexParser\Base\HandHistoryRegexParserImplBase.cs,ConvertHandDateToUtc,The length of the statement  "            DateTime converted = TimeZoneInfo.ConvertTimeToUtc(handDate' TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time")); " is 123.
Long Statement,HandHistories.Parser.Parsers.RegexParser.Base,HandHistoryRegexParserImplBase,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\RegexParser\Base\HandHistoryRegexParserImplBase.cs,ParsePlayers,The length of the statement  "                    decimal startingStack = decimal.Parse(Regex.Match(seat.Value' SeatInfoStartingStackRegex).Value' System.Globalization.CultureInfo.InvariantCulture); " is 148.
Complex Conditional,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,IsConnectionLost,The conditional expression  "line[0] == 'C'                   && line[line.Length - 1] == 'n' && line[line.Length -2] == 'o'                  && line[10] == ' ' && line[11] == 'L'"  is complex.
Complex Conditional,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseMiscShowdownLine,The conditional expression  "(gameType == GameType.PotLimitOmahaHiLo || gameType == GameType.FixedLimitOmahaHiLo || gameType == GameType.NoLimitOmahaHiLo) &&                  actionLine.Count(c => c == ':') > 1 &&                  actionLine.Contains("(HI:") || actionLine.Contains("; LO:")"  is complex.
Magic Number,HandHistories.Parser.Compression,HandHistoryGZipCompressorImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Compression\HandHistoryGZipCompressorImpl.cs,UncompressHandHistory,The following statement contains a magic number: byteArray = new byte[1024];
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseDealerPosition,The following statement contains a magic number: return Int32.Parse(DealerPositionRegex.Match(handLines[4]).Value);
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: string dateString = DateLineRegex.Match(handLines[2]).Value;
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseTableName,The following statement contains a magic number: var tableName = TableNameRegex.Match(handLines[3]).Value;
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseTableName,The following statement contains a magic number: tableName = tableName.Substring(0' tableName.Length - 19).TrimEnd();
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseSeatType,The following statement contains a magic number: int seatCount = Int32.Parse(NumPlayersRegex.Match(handLines[5]).Value);
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (seatCount <= 2)              {                  return SeatType.FromMaxPlayers(2);              }              else if (seatCount <= 6)              {                  return SeatType.FromMaxPlayers(6);              }              else if (seatCount <= 9)              {                  return SeatType.FromMaxPlayers(9);              }              else              {                  return SeatType.FromMaxPlayers(10);              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (seatCount <= 2)              {                  return SeatType.FromMaxPlayers(2);              }              else if (seatCount <= 6)              {                  return SeatType.FromMaxPlayers(6);              }              else if (seatCount <= 9)              {                  return SeatType.FromMaxPlayers(9);              }              else              {                  return SeatType.FromMaxPlayers(10);              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (seatCount <= 2)              {                  return SeatType.FromMaxPlayers(2);              }              else if (seatCount <= 6)              {                  return SeatType.FromMaxPlayers(6);              }              else if (seatCount <= 9)              {                  return SeatType.FromMaxPlayers(9);              }              else              {                  return SeatType.FromMaxPlayers(10);              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (seatCount <= 2)              {                  return SeatType.FromMaxPlayers(2);              }              else if (seatCount <= 6)              {                  return SeatType.FromMaxPlayers(6);              }              else if (seatCount <= 9)              {                  return SeatType.FromMaxPlayers(9);              }              else              {                  return SeatType.FromMaxPlayers(10);              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (seatCount <= 2)              {                  return SeatType.FromMaxPlayers(2);              }              else if (seatCount <= 6)              {                  return SeatType.FromMaxPlayers(6);              }              else if (seatCount <= 9)              {                  return SeatType.FromMaxPlayers(9);              }              else              {                  return SeatType.FromMaxPlayers(10);              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (seatCount <= 2)              {                  return SeatType.FromMaxPlayers(2);              }              else if (seatCount <= 6)              {                  return SeatType.FromMaxPlayers(6);              }              else if (seatCount <= 9)              {                  return SeatType.FromMaxPlayers(9);              }              else              {                  return SeatType.FromMaxPlayers(10);              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (seatCount <= 2)              {                  return SeatType.FromMaxPlayers(2);              }              else if (seatCount <= 6)              {                  return SeatType.FromMaxPlayers(6);              }              else if (seatCount <= 9)              {                  return SeatType.FromMaxPlayers(9);              }              else              {                  return SeatType.FromMaxPlayers(10);              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseGameType,The following statement contains a magic number: string gameTypeString = GameTypeRegex.Match(handLines[2]).Value;
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseTableType,The following statement contains a magic number: bool isjackPotTable = handLines[2].Contains(" Jackpot table");
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseLimit,The following statement contains a magic number: string line = handLines[2];
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,IsValidOrCancelledHand,The following statement contains a magic number: var seatedPlayersLine = handLines[5];
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (currentStreet == Street.Preflop)                  {                      if (handLine.IndexOf(':') != -1)                      {                          continue;                      }                      else if (handLine[0] == 'D' && handLine.StartsWith("Dealt "))                      {                          continue;                      }                  }                    if (handLine[0] == '*')                  {                      if (handLine[3] == 'S')                      {                          currentStreet = Street.Showdown;                          continue;                      }                        switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }                                            continue;                  }                    if (currentStreet == Street.Showdown)                  {                      // ignore lines such as:                      //  OprahTiltfre did not show his hand                      if (handLine[handLine.Length - 1] != ']')                      {                          continue;                                                  }                        int openSquareIndex = handLine.LastIndexOf('[');                        // winnings hands have numbers such as:                      //  OprahTiltfre collected [ $2'500 ]                      if (char.IsDigit(handLine[handLine.Length - 3]))                      {                                                  string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                          decimal amount = ParseAmount(amountString);                                                    string playerName = handLine.Substring(0' openSquareIndex - 11);                            handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          continue;                                              }                        string action = handLine.Substring(openSquareIndex - 6' 5);                      if (action.Equals("shows"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.SHOW' 0' currentStreet));                          continue;                      }                      else if (action.Equals("mucks"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.MUCKS' 0' currentStreet));                          continue;                      }                        throw new HandActionException(handLine' "Unparsed");                  }                    if (handLine[handLine.Length - 1] == ']')                  {                      int openSquareIndex = handLine.LastIndexOf('[');                      string amountString = handLine.Substring(openSquareIndex + 1' handLine.Length - openSquareIndex - 1 - 1);                        decimal amount = ParseAmount(amountString);                        string action = handLine.Substring(openSquareIndex - 8' 7);                        if (currentStreet == Street.Preflop)                      {                          if (action.Equals("l blind"' StringComparison.Ordinal)) // small blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 19);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          else if (action.Equals("g blind"' StringComparison.Ordinal)) // big blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 17);                              amount = ParseAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                          else if(action.Equals("d blind"' StringComparison.Ordinal))//dead blind                          {                              string playerName = handLine.Substring(0' openSquareIndex - 18);                              amount = ParseDeadBlindAmount(amountString);                              handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' currentStreet));                              continue;                          }                      }                        amount = ParseAmount(amountString);                                            if (action.EndsWith("raises"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 8);                          handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("bets"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 6);                          handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                          continue;                      }                      else if (action.EndsWith("calls"))                      {                          string playerName = handLine.Substring(0' openSquareIndex - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                          continue;                      }                  }                  else if (handLine.FastEndsWith("folds"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 6);                      handActions.Add(new HandAction(playerName' HandActionType.FOLD' currentStreet));                      continue;                  }                  else if (handLine.EndsWith("checks"))                  {                      string playerName = handLine.Substring(0' handLine.Length - 7);                      handActions.Add(new HandAction(playerName' HandActionType.CHECK' currentStreet));                      continue;                  }                                    throw new HandActionException(handLine' "Unknown handline.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: int seatCount = Int32.Parse(NumPlayersRegex.Match(handLines[5]).Value);
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < seatCount; i++)              {                  string handLine = handLines[6 + i];                    // Expected format:                  //  Seat 1: Velmonio ( $1.05 )                    int colonIndex = handLine.IndexOf(':');                  int openParenIndex = handLine.IndexOf('(');                    int seat = int.Parse(handLine.Substring(5' colonIndex - 5));                  string playerName = handLine.Substring(colonIndex + 2' openParenIndex - colonIndex - 3);                  decimal amount = ParseAmount(handLine.Substring(openParenIndex + 3' handLine.Length - openParenIndex - 3 - 2));                    playerList.Add(new Player(playerName' amount' seat));              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < seatCount; i++)              {                  string handLine = handLines[6 + i];                    // Expected format:                  //  Seat 1: Velmonio ( $1.05 )                    int colonIndex = handLine.IndexOf(':');                  int openParenIndex = handLine.IndexOf('(');                    int seat = int.Parse(handLine.Substring(5' colonIndex - 5));                  string playerName = handLine.Substring(colonIndex + 2' openParenIndex - colonIndex - 3);                  decimal amount = ParseAmount(handLine.Substring(openParenIndex + 3' handLine.Length - openParenIndex - 3 - 2));                    playerList.Add(new Player(playerName' amount' seat));              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < seatCount; i++)              {                  string handLine = handLines[6 + i];                    // Expected format:                  //  Seat 1: Velmonio ( $1.05 )                    int colonIndex = handLine.IndexOf(':');                  int openParenIndex = handLine.IndexOf('(');                    int seat = int.Parse(handLine.Substring(5' colonIndex - 5));                  string playerName = handLine.Substring(colonIndex + 2' openParenIndex - colonIndex - 3);                  decimal amount = ParseAmount(handLine.Substring(openParenIndex + 3' handLine.Length - openParenIndex - 3 - 2));                    playerList.Add(new Player(playerName' amount' seat));              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < seatCount; i++)              {                  string handLine = handLines[6 + i];                    // Expected format:                  //  Seat 1: Velmonio ( $1.05 )                    int colonIndex = handLine.IndexOf(':');                  int openParenIndex = handLine.IndexOf('(');                    int seat = int.Parse(handLine.Substring(5' colonIndex - 5));                  string playerName = handLine.Substring(colonIndex + 2' openParenIndex - colonIndex - 3);                  decimal amount = ParseAmount(handLine.Substring(openParenIndex + 3' handLine.Length - openParenIndex - 3 - 2));                    playerList.Add(new Player(playerName' amount' seat));              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < seatCount; i++)              {                  string handLine = handLines[6 + i];                    // Expected format:                  //  Seat 1: Velmonio ( $1.05 )                    int colonIndex = handLine.IndexOf(':');                  int openParenIndex = handLine.IndexOf('(');                    int seat = int.Parse(handLine.Substring(5' colonIndex - 5));                  string playerName = handLine.Substring(colonIndex + 2' openParenIndex - colonIndex - 3);                  decimal amount = ParseAmount(handLine.Substring(openParenIndex + 3' handLine.Length - openParenIndex - 3 - 2));                    playerList.Add(new Player(playerName' amount' seat));              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < seatCount; i++)              {                  string handLine = handLines[6 + i];                    // Expected format:                  //  Seat 1: Velmonio ( $1.05 )                    int colonIndex = handLine.IndexOf(':');                  int openParenIndex = handLine.IndexOf('(');                    int seat = int.Parse(handLine.Substring(5' colonIndex - 5));                  string playerName = handLine.Substring(colonIndex + 2' openParenIndex - colonIndex - 3);                  decimal amount = ParseAmount(handLine.Substring(openParenIndex + 3' handLine.Length - openParenIndex - 3 - 2));                    playerList.Add(new Player(playerName' amount' seat));              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < seatCount; i++)              {                  string handLine = handLines[6 + i];                    // Expected format:                  //  Seat 1: Velmonio ( $1.05 )                    int colonIndex = handLine.IndexOf(':');                  int openParenIndex = handLine.IndexOf('(');                    int seat = int.Parse(handLine.Substring(5' colonIndex - 5));                  string playerName = handLine.Substring(colonIndex + 2' openParenIndex - colonIndex - 3);                  decimal amount = ParseAmount(handLine.Substring(openParenIndex + 3' handLine.Length - openParenIndex - 3 - 2));                    playerList.Add(new Player(playerName' amount' seat));              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < seatCount; i++)              {                  string handLine = handLines[6 + i];                    // Expected format:                  //  Seat 1: Velmonio ( $1.05 )                    int colonIndex = handLine.IndexOf(':');                  int openParenIndex = handLine.IndexOf('(');                    int seat = int.Parse(handLine.Substring(5' colonIndex - 5));                  string playerName = handLine.Substring(colonIndex + 2' openParenIndex - colonIndex - 3);                  decimal amount = ParseAmount(handLine.Substring(openParenIndex + 3' handLine.Length - openParenIndex - 3 - 2));                    playerList.Add(new Player(playerName' amount' seat));              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 2; i >= 0; i--)              {                  string handLine = handLines[i];                    if (handLine[0] == '*')                  {                      break;                                      }                    if (handLine.EndsWith("]") &&                      char.IsDigit(handLine[handLine.Length - 3]) == false)                  {                      // lines such as:                      //  slyguyone2 shows [ Jd' As ]                        int openSquareIndex = handLine.IndexOf('[');                        string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                      HoleCards holeCards = HoleCards.FromCards(cards.Replace("'"' "").Replace(" "' ""));                        string playerName = handLine.Substring(0' openSquareIndex - 7);                        Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      player.HoleCards = holeCards;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 2; i >= 0; i--)              {                  string handLine = handLines[i];                    if (handLine[0] == '*')                  {                      break;                                      }                    if (handLine.EndsWith("]") &&                      char.IsDigit(handLine[handLine.Length - 3]) == false)                  {                      // lines such as:                      //  slyguyone2 shows [ Jd' As ]                        int openSquareIndex = handLine.IndexOf('[');                        string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                      HoleCards holeCards = HoleCards.FromCards(cards.Replace("'"' "").Replace(" "' ""));                        string playerName = handLine.Substring(0' openSquareIndex - 7);                        Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      player.HoleCards = holeCards;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 2; i >= 0; i--)              {                  string handLine = handLines[i];                    if (handLine[0] == '*')                  {                      break;                                      }                    if (handLine.EndsWith("]") &&                      char.IsDigit(handLine[handLine.Length - 3]) == false)                  {                      // lines such as:                      //  slyguyone2 shows [ Jd' As ]                        int openSquareIndex = handLine.IndexOf('[');                        string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                      HoleCards holeCards = HoleCards.FromCards(cards.Replace("'"' "").Replace(" "' ""));                        string playerName = handLine.Substring(0' openSquareIndex - 7);                        Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      player.HoleCards = holeCards;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 2; i >= 0; i--)              {                  string handLine = handLines[i];                    if (handLine[0] == '*')                  {                      break;                                      }                    if (handLine.EndsWith("]") &&                      char.IsDigit(handLine[handLine.Length - 3]) == false)                  {                      // lines such as:                      //  slyguyone2 shows [ Jd' As ]                        int openSquareIndex = handLine.IndexOf('[');                        string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                      HoleCards holeCards = HoleCards.FromCards(cards.Replace("'"' "").Replace(" "' ""));                        string playerName = handLine.Substring(0' openSquareIndex - 7);                        Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      player.HoleCards = holeCards;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 2; i >= 0; i--)              {                  string handLine = handLines[i];                    if (handLine[0] == '*')                  {                      break;                                      }                    if (handLine.EndsWith("]") &&                      char.IsDigit(handLine[handLine.Length - 3]) == false)                  {                      // lines such as:                      //  slyguyone2 shows [ Jd' As ]                        int openSquareIndex = handLine.IndexOf('[');                        string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                      HoleCards holeCards = HoleCards.FromCards(cards.Replace("'"' "").Replace(" "' ""));                        string playerName = handLine.Substring(0' openSquareIndex - 7);                        Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      player.HoleCards = holeCards;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 2; i >= 0; i--)              {                  string handLine = handLines[i];                    if (handLine[0] == '*')                  {                      break;                                      }                    if (handLine.EndsWith("]") &&                      char.IsDigit(handLine[handLine.Length - 3]) == false)                  {                      // lines such as:                      //  slyguyone2 shows [ Jd' As ]                        int openSquareIndex = handLine.IndexOf('[');                        string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                      HoleCards holeCards = HoleCards.FromCards(cards.Replace("'"' "").Replace(" "' ""));                        string playerName = handLine.Substring(0' openSquareIndex - 7);                        Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      player.HoleCards = holeCards;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine[0] != '*')                  {                      continue;                                      }                    if (handLine[3] != 'D')                  {                      continue;                  }                    int openSquareIndex;                  switch (handLine[11])                  {                      case 'r':                          openSquareIndex = 20;                          break;                      default:                          openSquareIndex = 19;                          break;                                          }                    string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                    boardCards += cards.Replace("'"' "").Replace(" "' "");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine[0] != '*')                  {                      continue;                                      }                    if (handLine[3] != 'D')                  {                      continue;                  }                    int openSquareIndex;                  switch (handLine[11])                  {                      case 'r':                          openSquareIndex = 20;                          break;                      default:                          openSquareIndex = 19;                          break;                                          }                    string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                    boardCards += cards.Replace("'"' "").Replace(" "' "");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine[0] != '*')                  {                      continue;                                      }                    if (handLine[3] != 'D')                  {                      continue;                  }                    int openSquareIndex;                  switch (handLine[11])                  {                      case 'r':                          openSquareIndex = 20;                          break;                      default:                          openSquareIndex = 19;                          break;                                          }                    string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                    boardCards += cards.Replace("'"' "").Replace(" "' "");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine[0] != '*')                  {                      continue;                                      }                    if (handLine[3] != 'D')                  {                      continue;                  }                    int openSquareIndex;                  switch (handLine[11])                  {                      case 'r':                          openSquareIndex = 20;                          break;                      default:                          openSquareIndex = 19;                          break;                                          }                    string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                    boardCards += cards.Replace("'"' "").Replace(" "' "");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine[0] != '*')                  {                      continue;                                      }                    if (handLine[3] != 'D')                  {                      continue;                  }                    int openSquareIndex;                  switch (handLine[11])                  {                      case 'r':                          openSquareIndex = 20;                          break;                      default:                          openSquareIndex = 19;                          break;                                          }                    string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                    boardCards += cards.Replace("'"' "").Replace(" "' "");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine[0] != '*')                  {                      continue;                                      }                    if (handLine[3] != 'D')                  {                      continue;                  }                    int openSquareIndex;                  switch (handLine[11])                  {                      case 'r':                          openSquareIndex = 20;                          break;                      default:                          openSquareIndex = 19;                          break;                                          }                    string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                    boardCards += cards.Replace("'"' "").Replace(" "' "");              }
Magic Number,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine[0] != '*')                  {                      continue;                                      }                    if (handLine[3] != 'D')                  {                      continue;                  }                    int openSquareIndex;                  switch (handLine[11])                  {                      case 'r':                          openSquareIndex = 20;                          break;                      default:                          openSquareIndex = 19;                          break;                                          }                    string cards = handLine.Substring(openSquareIndex + 2' handLine.Length - openSquareIndex - 2 - 2);                    boardCards += cards.Replace("'"' "").Replace(" "' "");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,SplitUpMultipleHands,The following statement contains a magic number: return rawHandHistories.Split(new string[] { "<HISTORY " }' StringSplitOptions.None).Where(p => p.Length > 2 && p[1] != '?');
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseDealerPosition,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  //<PLAYER NAME="fatima1975" SEAT="6" AMOUNT="4.27" DEALER="Y"></PLAYER>                  string Line = handLines[i + 1];                  if (Line[1] != 'P')                  {                      break;                  }                    if (GetXMLAttributeValue(Line' "DEALER") == "Y")                  {                      string dealerID = GetXMLAttributeValue(Line' "SEAT");                      return int.Parse(dealerID);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: DateTime POSIX_EPOCH = new DateTime(1970' 01' 01' 0' 0' 0' DateTimeKind.Utc);
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseGameType,The following statement contains a magic number: string game = GetXMLAttributeValue(handLines[0]' "GAME").Substring(5);
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = lineParseIndex; i < handLines.Length; i++)              {                  string Line = handLines[i];                  char firstChar = Line[1];                  //<ACTION TYPE="HAND_BLINDS" PLAYER="xxpppxx" KIND="HAND_SB" VALUE="100.00"></ACTION>                  if (firstChar == 'A')                  {                      char actionType = Line[14];                      switch (actionType)                      {                          //<ACTION TYPE="ACTION_                          case 'A':                              actions.Add(ParseAction(Line' currentStreet' actions));                              break;                            //<ACTION TYPE="HAND_                          case 'H':                               //Possible types:                              //HAND_BOARD                              //HAND_DEAL                              //HAND_BLINDS                              char handAction = Line[20]; //The 7th character is used for identification                              switch (handAction)                              {                                  //<ACTION TYPE="HAND_BOARD" VALUE="BOARD_RIVER" POT="29.26" RAKE="0.74" MAINPOT="29.26" LEFTPOT="" RIGHTPOT="">                                  case 'O':                                      currentStreet = ParseNextStreet(Line);                                      break;                                    //HAND_DEAL - this is dealt with in ParsePlayers                                  case 'E':                                      continue;                                    //HAND_BLINDS                                  case 'L':                                      actions.Add(ParseBlinds(Line));                                      break;                                  default:                                      throw new ArgumentOutOfRangeException("Unkown HAND_ action: " + handAction + " - " + Line);                              }                              break;                          default:                              throw new ArgumentOutOfRangeException("Unkown actiontype: " + actionType + " - " + Line);                      }                      continue;                  }                  //<CARD LINK="13"></CARD>                  else if (firstChar == 'C')                  {                      continue;                  }                  //<SHOWDOWN NAME="HAND_SHOWDOWN" POT="29.26" RAKE="0.74" MAINPOT="29.26" LEFTPOT="" RIGHTPOT="">                  else if (firstChar == 'S')                  {                      showdownLine = i;                      break;                  }                  else throw new NotImplementedException("Unhandled first char: " + firstChar  + " - " + handLines[i]);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = lineParseIndex; i < handLines.Length; i++)              {                  string Line = handLines[i];                  char firstChar = Line[1];                  //<ACTION TYPE="HAND_BLINDS" PLAYER="xxpppxx" KIND="HAND_SB" VALUE="100.00"></ACTION>                  if (firstChar == 'A')                  {                      char actionType = Line[14];                      switch (actionType)                      {                          //<ACTION TYPE="ACTION_                          case 'A':                              actions.Add(ParseAction(Line' currentStreet' actions));                              break;                            //<ACTION TYPE="HAND_                          case 'H':                               //Possible types:                              //HAND_BOARD                              //HAND_DEAL                              //HAND_BLINDS                              char handAction = Line[20]; //The 7th character is used for identification                              switch (handAction)                              {                                  //<ACTION TYPE="HAND_BOARD" VALUE="BOARD_RIVER" POT="29.26" RAKE="0.74" MAINPOT="29.26" LEFTPOT="" RIGHTPOT="">                                  case 'O':                                      currentStreet = ParseNextStreet(Line);                                      break;                                    //HAND_DEAL - this is dealt with in ParsePlayers                                  case 'E':                                      continue;                                    //HAND_BLINDS                                  case 'L':                                      actions.Add(ParseBlinds(Line));                                      break;                                  default:                                      throw new ArgumentOutOfRangeException("Unkown HAND_ action: " + handAction + " - " + Line);                              }                              break;                          default:                              throw new ArgumentOutOfRangeException("Unkown actiontype: " + actionType + " - " + Line);                      }                      continue;                  }                  //<CARD LINK="13"></CARD>                  else if (firstChar == 'C')                  {                      continue;                  }                  //<SHOWDOWN NAME="HAND_SHOWDOWN" POT="29.26" RAKE="0.74" MAINPOT="29.26" LEFTPOT="" RIGHTPOT="">                  else if (firstChar == 'S')                  {                      showdownLine = i;                      break;                  }                  else throw new NotImplementedException("Unhandled first char: " + firstChar  + " - " + handLines[i]);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: if (showdownLine != -1)              {                  //Parse Winners                  for (int i = showdownLine + 1; i < handLines.Length; i++)                  {                      string Line = handLines[i];                      //Normal                      //<RESULT PLAYER="ammms" WIN="3.64" HAND="$(STR_G_WIN_PAIR) $(STR_G_CARDS_NINES)">                      //OmahaHiLo                      //<RESULT WINTYPE="WINTYPE_HILO" PLAYER="ItalyToast" WIN="105.08" HAND="$(STR_BY_DEFAULT)" WINCARDS="" HANDEXT=" 8'7'5'2'A">                      if (Line[1] == 'R')                      {                          const int winTypeIndex = 8;                          string playerName;                          int playerEndIndex;                          if (Line[winTypeIndex] == 'W')                          {                              //OmahaHiLo                              const int winTypeStartIndex = 17;                              int winTypeEndIndex = Line.IndexOf('\"'' winTypeStartIndex);                              int playerStartIndex = winTypeEndIndex + 10;                              playerEndIndex = Line.IndexOf('\"'' playerStartIndex);                              playerName = Line.Substring(playerStartIndex' playerEndIndex - playerStartIndex);                          }                          else                          {                              const int playerStartIndex = 16;                              playerEndIndex = Line.IndexOf('\"'' playerStartIndex);                              playerName = Line.Substring(playerStartIndex' playerEndIndex - playerStartIndex);                          }                            int winAmountStartIndex = playerEndIndex + 7;                          decimal amount = GetActionAmount(Line' winAmountStartIndex);                            if (amount != 0)                          {                              actions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: if (showdownLine != -1)              {                  //Parse Winners                  for (int i = showdownLine + 1; i < handLines.Length; i++)                  {                      string Line = handLines[i];                      //Normal                      //<RESULT PLAYER="ammms" WIN="3.64" HAND="$(STR_G_WIN_PAIR) $(STR_G_CARDS_NINES)">                      //OmahaHiLo                      //<RESULT WINTYPE="WINTYPE_HILO" PLAYER="ItalyToast" WIN="105.08" HAND="$(STR_BY_DEFAULT)" WINCARDS="" HANDEXT=" 8'7'5'2'A">                      if (Line[1] == 'R')                      {                          const int winTypeIndex = 8;                          string playerName;                          int playerEndIndex;                          if (Line[winTypeIndex] == 'W')                          {                              //OmahaHiLo                              const int winTypeStartIndex = 17;                              int winTypeEndIndex = Line.IndexOf('\"'' winTypeStartIndex);                              int playerStartIndex = winTypeEndIndex + 10;                              playerEndIndex = Line.IndexOf('\"'' playerStartIndex);                              playerName = Line.Substring(playerStartIndex' playerEndIndex - playerStartIndex);                          }                          else                          {                              const int playerStartIndex = 16;                              playerEndIndex = Line.IndexOf('\"'' playerStartIndex);                              playerName = Line.Substring(playerStartIndex' playerEndIndex - playerStartIndex);                          }                            int winAmountStartIndex = playerEndIndex + 7;                          decimal amount = GetActionAmount(Line' winAmountStartIndex);                            if (amount != 0)                          {                              actions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: if (showdownLine != -1)              {                  //Parse Winners                  for (int i = showdownLine + 1; i < handLines.Length; i++)                  {                      string Line = handLines[i];                      //Normal                      //<RESULT PLAYER="ammms" WIN="3.64" HAND="$(STR_G_WIN_PAIR) $(STR_G_CARDS_NINES)">                      //OmahaHiLo                      //<RESULT WINTYPE="WINTYPE_HILO" PLAYER="ItalyToast" WIN="105.08" HAND="$(STR_BY_DEFAULT)" WINCARDS="" HANDEXT=" 8'7'5'2'A">                      if (Line[1] == 'R')                      {                          const int winTypeIndex = 8;                          string playerName;                          int playerEndIndex;                          if (Line[winTypeIndex] == 'W')                          {                              //OmahaHiLo                              const int winTypeStartIndex = 17;                              int winTypeEndIndex = Line.IndexOf('\"'' winTypeStartIndex);                              int playerStartIndex = winTypeEndIndex + 10;                              playerEndIndex = Line.IndexOf('\"'' playerStartIndex);                              playerName = Line.Substring(playerStartIndex' playerEndIndex - playerStartIndex);                          }                          else                          {                              const int playerStartIndex = 16;                              playerEndIndex = Line.IndexOf('\"'' playerStartIndex);                              playerName = Line.Substring(playerStartIndex' playerEndIndex - playerStartIndex);                          }                            int winAmountStartIndex = playerEndIndex + 7;                          decimal amount = GetActionAmount(Line' winAmountStartIndex);                            if (amount != 0)                          {                              actions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: if (showdownLine != -1)              {                  //Parse Winners                  for (int i = showdownLine + 1; i < handLines.Length; i++)                  {                      string Line = handLines[i];                      //Normal                      //<RESULT PLAYER="ammms" WIN="3.64" HAND="$(STR_G_WIN_PAIR) $(STR_G_CARDS_NINES)">                      //OmahaHiLo                      //<RESULT WINTYPE="WINTYPE_HILO" PLAYER="ItalyToast" WIN="105.08" HAND="$(STR_BY_DEFAULT)" WINCARDS="" HANDEXT=" 8'7'5'2'A">                      if (Line[1] == 'R')                      {                          const int winTypeIndex = 8;                          string playerName;                          int playerEndIndex;                          if (Line[winTypeIndex] == 'W')                          {                              //OmahaHiLo                              const int winTypeStartIndex = 17;                              int winTypeEndIndex = Line.IndexOf('\"'' winTypeStartIndex);                              int playerStartIndex = winTypeEndIndex + 10;                              playerEndIndex = Line.IndexOf('\"'' playerStartIndex);                              playerName = Line.Substring(playerStartIndex' playerEndIndex - playerStartIndex);                          }                          else                          {                              const int playerStartIndex = 16;                              playerEndIndex = Line.IndexOf('\"'' playerStartIndex);                              playerName = Line.Substring(playerStartIndex' playerEndIndex - playerStartIndex);                          }                            int winAmountStartIndex = playerEndIndex + 7;                          decimal amount = GetActionAmount(Line' winAmountStartIndex);                            if (amount != 0)                          {                              actions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: if (showdownLine != -1)              {                  //Parse Winners                  for (int i = showdownLine + 1; i < handLines.Length; i++)                  {                      string Line = handLines[i];                      //Normal                      //<RESULT PLAYER="ammms" WIN="3.64" HAND="$(STR_G_WIN_PAIR) $(STR_G_CARDS_NINES)">                      //OmahaHiLo                      //<RESULT WINTYPE="WINTYPE_HILO" PLAYER="ItalyToast" WIN="105.08" HAND="$(STR_BY_DEFAULT)" WINCARDS="" HANDEXT=" 8'7'5'2'A">                      if (Line[1] == 'R')                      {                          const int winTypeIndex = 8;                          string playerName;                          int playerEndIndex;                          if (Line[winTypeIndex] == 'W')                          {                              //OmahaHiLo                              const int winTypeStartIndex = 17;                              int winTypeEndIndex = Line.IndexOf('\"'' winTypeStartIndex);                              int playerStartIndex = winTypeEndIndex + 10;                              playerEndIndex = Line.IndexOf('\"'' playerStartIndex);                              playerName = Line.Substring(playerStartIndex' playerEndIndex - playerStartIndex);                          }                          else                          {                              const int playerStartIndex = 16;                              playerEndIndex = Line.IndexOf('\"'' playerStartIndex);                              playerName = Line.Substring(playerStartIndex' playerEndIndex - playerStartIndex);                          }                            int winAmountStartIndex = playerEndIndex + 7;                          decimal amount = GetActionAmount(Line' winAmountStartIndex);                            if (amount != 0)                          {                              actions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseNextStreet,The following statement contains a magic number: const int StreetIdentiFierIndex = 39;
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseBlinds,The following statement contains a magic number: const int playerNameStartIndex = 35;
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseBlinds,The following statement contains a magic number: int amountStartIndex = playerNameEndIndex + 24;
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseBlinds,The following statement contains a magic number: int blindTypeIDIndex = playerNameEndIndex + 13;
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseAction,The following statement contains a magic number: const int playerHandActionStartIndex = 21;
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseAction,The following statement contains a magic number: const int fixedAmountDistance = 9;
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseAction,The following statement contains a magic number: switch (handActionType)              {                  //<ACTION TYPE="ACTION_ALLIN" PLAYER="SAMERRRR" VALUE="15972.51"></ACTION>                  case 'A':                      playerNameStartIndex = playerHandActionStartIndex + 15;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      decimal amount = GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance);                      HandActionType allInType = AllInActionHelper.GetAllInActionType(playerName' amount' currentStreet' actions);                      if (allInType == HandActionType.CALL)                      {                          amount = AllInActionHelper.GetAdjustedCallAllInAmount(amount' actions.Player(playerName));                      }                        return new HandAction(playerName' allInType' amount' currentStreet' true);                    //<ACTION TYPE="ACTION_BET" PLAYER="ItalyToast" VALUE="600.00"></ACTION>                  case 'B':                      playerNameStartIndex = playerHandActionStartIndex + 13;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.BET'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                    //<ACTION TYPE="ACTION_CHECK" PLAYER="gasmandean"></ACTION>                  //<ACTION TYPE="ACTION_CALL" PLAYER="fatima1975" VALUE="0.04"></ACTION>                  case 'C':                      if (Line[playerHandActionStartIndex + 1] == 'H')                      {                          playerNameStartIndex = playerHandActionStartIndex + 15;                          playerName = GetActionPlayerName(Line' playerNameStartIndex);                          return new HandAction(                          playerName'                          HandActionType.CHECK'                          0'                          currentStreet                          );                      }                      else                      {                          playerNameStartIndex = playerHandActionStartIndex + 14;                          playerName = GetActionPlayerName(Line' playerNameStartIndex);                          return new HandAction(                          playerName'                          HandActionType.CALL'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                      }                    //<ACTION TYPE="ACTION_FOLD" PLAYER="Belanak"></ACTION>                  case 'F':                      playerNameStartIndex = playerHandActionStartIndex + 14;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.FOLD'                          0'                          currentStreet                          );                    //<ACTION TYPE="ACTION_RAISE" PLAYER="ItalyToast" VALUE="400.00"></ACTION>                  case 'R':                      playerNameStartIndex = playerHandActionStartIndex + 15;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.RAISE'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                    default:                      throw new ArgumentOutOfRangeException("Unkown hand action: " + handActionType + " - " + Line);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseAction,The following statement contains a magic number: switch (handActionType)              {                  //<ACTION TYPE="ACTION_ALLIN" PLAYER="SAMERRRR" VALUE="15972.51"></ACTION>                  case 'A':                      playerNameStartIndex = playerHandActionStartIndex + 15;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      decimal amount = GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance);                      HandActionType allInType = AllInActionHelper.GetAllInActionType(playerName' amount' currentStreet' actions);                      if (allInType == HandActionType.CALL)                      {                          amount = AllInActionHelper.GetAdjustedCallAllInAmount(amount' actions.Player(playerName));                      }                        return new HandAction(playerName' allInType' amount' currentStreet' true);                    //<ACTION TYPE="ACTION_BET" PLAYER="ItalyToast" VALUE="600.00"></ACTION>                  case 'B':                      playerNameStartIndex = playerHandActionStartIndex + 13;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.BET'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                    //<ACTION TYPE="ACTION_CHECK" PLAYER="gasmandean"></ACTION>                  //<ACTION TYPE="ACTION_CALL" PLAYER="fatima1975" VALUE="0.04"></ACTION>                  case 'C':                      if (Line[playerHandActionStartIndex + 1] == 'H')                      {                          playerNameStartIndex = playerHandActionStartIndex + 15;                          playerName = GetActionPlayerName(Line' playerNameStartIndex);                          return new HandAction(                          playerName'                          HandActionType.CHECK'                          0'                          currentStreet                          );                      }                      else                      {                          playerNameStartIndex = playerHandActionStartIndex + 14;                          playerName = GetActionPlayerName(Line' playerNameStartIndex);                          return new HandAction(                          playerName'                          HandActionType.CALL'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                      }                    //<ACTION TYPE="ACTION_FOLD" PLAYER="Belanak"></ACTION>                  case 'F':                      playerNameStartIndex = playerHandActionStartIndex + 14;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.FOLD'                          0'                          currentStreet                          );                    //<ACTION TYPE="ACTION_RAISE" PLAYER="ItalyToast" VALUE="400.00"></ACTION>                  case 'R':                      playerNameStartIndex = playerHandActionStartIndex + 15;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.RAISE'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                    default:                      throw new ArgumentOutOfRangeException("Unkown hand action: " + handActionType + " - " + Line);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseAction,The following statement contains a magic number: switch (handActionType)              {                  //<ACTION TYPE="ACTION_ALLIN" PLAYER="SAMERRRR" VALUE="15972.51"></ACTION>                  case 'A':                      playerNameStartIndex = playerHandActionStartIndex + 15;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      decimal amount = GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance);                      HandActionType allInType = AllInActionHelper.GetAllInActionType(playerName' amount' currentStreet' actions);                      if (allInType == HandActionType.CALL)                      {                          amount = AllInActionHelper.GetAdjustedCallAllInAmount(amount' actions.Player(playerName));                      }                        return new HandAction(playerName' allInType' amount' currentStreet' true);                    //<ACTION TYPE="ACTION_BET" PLAYER="ItalyToast" VALUE="600.00"></ACTION>                  case 'B':                      playerNameStartIndex = playerHandActionStartIndex + 13;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.BET'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                    //<ACTION TYPE="ACTION_CHECK" PLAYER="gasmandean"></ACTION>                  //<ACTION TYPE="ACTION_CALL" PLAYER="fatima1975" VALUE="0.04"></ACTION>                  case 'C':                      if (Line[playerHandActionStartIndex + 1] == 'H')                      {                          playerNameStartIndex = playerHandActionStartIndex + 15;                          playerName = GetActionPlayerName(Line' playerNameStartIndex);                          return new HandAction(                          playerName'                          HandActionType.CHECK'                          0'                          currentStreet                          );                      }                      else                      {                          playerNameStartIndex = playerHandActionStartIndex + 14;                          playerName = GetActionPlayerName(Line' playerNameStartIndex);                          return new HandAction(                          playerName'                          HandActionType.CALL'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                      }                    //<ACTION TYPE="ACTION_FOLD" PLAYER="Belanak"></ACTION>                  case 'F':                      playerNameStartIndex = playerHandActionStartIndex + 14;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.FOLD'                          0'                          currentStreet                          );                    //<ACTION TYPE="ACTION_RAISE" PLAYER="ItalyToast" VALUE="400.00"></ACTION>                  case 'R':                      playerNameStartIndex = playerHandActionStartIndex + 15;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.RAISE'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                    default:                      throw new ArgumentOutOfRangeException("Unkown hand action: " + handActionType + " - " + Line);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseAction,The following statement contains a magic number: switch (handActionType)              {                  //<ACTION TYPE="ACTION_ALLIN" PLAYER="SAMERRRR" VALUE="15972.51"></ACTION>                  case 'A':                      playerNameStartIndex = playerHandActionStartIndex + 15;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      decimal amount = GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance);                      HandActionType allInType = AllInActionHelper.GetAllInActionType(playerName' amount' currentStreet' actions);                      if (allInType == HandActionType.CALL)                      {                          amount = AllInActionHelper.GetAdjustedCallAllInAmount(amount' actions.Player(playerName));                      }                        return new HandAction(playerName' allInType' amount' currentStreet' true);                    //<ACTION TYPE="ACTION_BET" PLAYER="ItalyToast" VALUE="600.00"></ACTION>                  case 'B':                      playerNameStartIndex = playerHandActionStartIndex + 13;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.BET'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                    //<ACTION TYPE="ACTION_CHECK" PLAYER="gasmandean"></ACTION>                  //<ACTION TYPE="ACTION_CALL" PLAYER="fatima1975" VALUE="0.04"></ACTION>                  case 'C':                      if (Line[playerHandActionStartIndex + 1] == 'H')                      {                          playerNameStartIndex = playerHandActionStartIndex + 15;                          playerName = GetActionPlayerName(Line' playerNameStartIndex);                          return new HandAction(                          playerName'                          HandActionType.CHECK'                          0'                          currentStreet                          );                      }                      else                      {                          playerNameStartIndex = playerHandActionStartIndex + 14;                          playerName = GetActionPlayerName(Line' playerNameStartIndex);                          return new HandAction(                          playerName'                          HandActionType.CALL'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                      }                    //<ACTION TYPE="ACTION_FOLD" PLAYER="Belanak"></ACTION>                  case 'F':                      playerNameStartIndex = playerHandActionStartIndex + 14;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.FOLD'                          0'                          currentStreet                          );                    //<ACTION TYPE="ACTION_RAISE" PLAYER="ItalyToast" VALUE="400.00"></ACTION>                  case 'R':                      playerNameStartIndex = playerHandActionStartIndex + 15;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.RAISE'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                    default:                      throw new ArgumentOutOfRangeException("Unkown hand action: " + handActionType + " - " + Line);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseAction,The following statement contains a magic number: switch (handActionType)              {                  //<ACTION TYPE="ACTION_ALLIN" PLAYER="SAMERRRR" VALUE="15972.51"></ACTION>                  case 'A':                      playerNameStartIndex = playerHandActionStartIndex + 15;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      decimal amount = GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance);                      HandActionType allInType = AllInActionHelper.GetAllInActionType(playerName' amount' currentStreet' actions);                      if (allInType == HandActionType.CALL)                      {                          amount = AllInActionHelper.GetAdjustedCallAllInAmount(amount' actions.Player(playerName));                      }                        return new HandAction(playerName' allInType' amount' currentStreet' true);                    //<ACTION TYPE="ACTION_BET" PLAYER="ItalyToast" VALUE="600.00"></ACTION>                  case 'B':                      playerNameStartIndex = playerHandActionStartIndex + 13;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.BET'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                    //<ACTION TYPE="ACTION_CHECK" PLAYER="gasmandean"></ACTION>                  //<ACTION TYPE="ACTION_CALL" PLAYER="fatima1975" VALUE="0.04"></ACTION>                  case 'C':                      if (Line[playerHandActionStartIndex + 1] == 'H')                      {                          playerNameStartIndex = playerHandActionStartIndex + 15;                          playerName = GetActionPlayerName(Line' playerNameStartIndex);                          return new HandAction(                          playerName'                          HandActionType.CHECK'                          0'                          currentStreet                          );                      }                      else                      {                          playerNameStartIndex = playerHandActionStartIndex + 14;                          playerName = GetActionPlayerName(Line' playerNameStartIndex);                          return new HandAction(                          playerName'                          HandActionType.CALL'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                      }                    //<ACTION TYPE="ACTION_FOLD" PLAYER="Belanak"></ACTION>                  case 'F':                      playerNameStartIndex = playerHandActionStartIndex + 14;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.FOLD'                          0'                          currentStreet                          );                    //<ACTION TYPE="ACTION_RAISE" PLAYER="ItalyToast" VALUE="400.00"></ACTION>                  case 'R':                      playerNameStartIndex = playerHandActionStartIndex + 15;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.RAISE'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                    default:                      throw new ArgumentOutOfRangeException("Unkown hand action: " + handActionType + " - " + Line);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseAction,The following statement contains a magic number: switch (handActionType)              {                  //<ACTION TYPE="ACTION_ALLIN" PLAYER="SAMERRRR" VALUE="15972.51"></ACTION>                  case 'A':                      playerNameStartIndex = playerHandActionStartIndex + 15;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      decimal amount = GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance);                      HandActionType allInType = AllInActionHelper.GetAllInActionType(playerName' amount' currentStreet' actions);                      if (allInType == HandActionType.CALL)                      {                          amount = AllInActionHelper.GetAdjustedCallAllInAmount(amount' actions.Player(playerName));                      }                        return new HandAction(playerName' allInType' amount' currentStreet' true);                    //<ACTION TYPE="ACTION_BET" PLAYER="ItalyToast" VALUE="600.00"></ACTION>                  case 'B':                      playerNameStartIndex = playerHandActionStartIndex + 13;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.BET'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                    //<ACTION TYPE="ACTION_CHECK" PLAYER="gasmandean"></ACTION>                  //<ACTION TYPE="ACTION_CALL" PLAYER="fatima1975" VALUE="0.04"></ACTION>                  case 'C':                      if (Line[playerHandActionStartIndex + 1] == 'H')                      {                          playerNameStartIndex = playerHandActionStartIndex + 15;                          playerName = GetActionPlayerName(Line' playerNameStartIndex);                          return new HandAction(                          playerName'                          HandActionType.CHECK'                          0'                          currentStreet                          );                      }                      else                      {                          playerNameStartIndex = playerHandActionStartIndex + 14;                          playerName = GetActionPlayerName(Line' playerNameStartIndex);                          return new HandAction(                          playerName'                          HandActionType.CALL'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                      }                    //<ACTION TYPE="ACTION_FOLD" PLAYER="Belanak"></ACTION>                  case 'F':                      playerNameStartIndex = playerHandActionStartIndex + 14;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.FOLD'                          0'                          currentStreet                          );                    //<ACTION TYPE="ACTION_RAISE" PLAYER="ItalyToast" VALUE="400.00"></ACTION>                  case 'R':                      playerNameStartIndex = playerHandActionStartIndex + 15;                      playerName = GetActionPlayerName(Line' playerNameStartIndex);                      return new HandAction(                          playerName'                          HandActionType.RAISE'                          GetActionAmount(Line' playerNameStartIndex + playerName.Length + fixedAmountDistance)'                          currentStreet                          );                    default:                      throw new ArgumentOutOfRangeException("Unkown hand action: " + handActionType + " - " + Line);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  //<PLAYER NAME="fatima1975" SEAT="6" AMOUNT="4.27"></PLAYER>                  string Line = handLines[i + 1];                  if (Line[1] != 'P')                  {                      currentLine = i + 1;                      break;                  }                    const int playerNameStartIndex = 14;                  int playerNameEndIndex = Line.IndexOf('\"'' playerNameStartIndex);                  string playerName = Line.Substring(playerNameStartIndex' playerNameEndIndex - playerNameStartIndex);                    if (playerName == "UNKNOWN")                  {                      continue;                  }                    int seatStartIndex = playerNameEndIndex + 8;                  int seatEndIndex = Line.IndexOf('\"'' seatStartIndex);                  int seatNumber = int.Parse(Line.Substring(seatStartIndex' seatEndIndex - seatStartIndex));                    int stackStartIndex = seatEndIndex + 10;                  int stackEndIndex = Line.IndexOf('\"'' stackStartIndex);                  decimal stack = decimal.Parse(Line.Substring(stackStartIndex' stackEndIndex - stackStartIndex)' provider);                    plist.Add(new Player(playerName' stack' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  //<PLAYER NAME="fatima1975" SEAT="6" AMOUNT="4.27"></PLAYER>                  string Line = handLines[i + 1];                  if (Line[1] != 'P')                  {                      currentLine = i + 1;                      break;                  }                    const int playerNameStartIndex = 14;                  int playerNameEndIndex = Line.IndexOf('\"'' playerNameStartIndex);                  string playerName = Line.Substring(playerNameStartIndex' playerNameEndIndex - playerNameStartIndex);                    if (playerName == "UNKNOWN")                  {                      continue;                  }                    int seatStartIndex = playerNameEndIndex + 8;                  int seatEndIndex = Line.IndexOf('\"'' seatStartIndex);                  int seatNumber = int.Parse(Line.Substring(seatStartIndex' seatEndIndex - seatStartIndex));                    int stackStartIndex = seatEndIndex + 10;                  int stackEndIndex = Line.IndexOf('\"'' stackStartIndex);                  decimal stack = decimal.Parse(Line.Substring(stackStartIndex' stackEndIndex - stackStartIndex)' provider);                    plist.Add(new Player(playerName' stack' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  //<PLAYER NAME="fatima1975" SEAT="6" AMOUNT="4.27"></PLAYER>                  string Line = handLines[i + 1];                  if (Line[1] != 'P')                  {                      currentLine = i + 1;                      break;                  }                    const int playerNameStartIndex = 14;                  int playerNameEndIndex = Line.IndexOf('\"'' playerNameStartIndex);                  string playerName = Line.Substring(playerNameStartIndex' playerNameEndIndex - playerNameStartIndex);                    if (playerName == "UNKNOWN")                  {                      continue;                  }                    int seatStartIndex = playerNameEndIndex + 8;                  int seatEndIndex = Line.IndexOf('\"'' seatStartIndex);                  int seatNumber = int.Parse(Line.Substring(seatStartIndex' seatEndIndex - seatStartIndex));                    int stackStartIndex = seatEndIndex + 10;                  int stackEndIndex = Line.IndexOf('\"'' stackStartIndex);                  decimal stack = decimal.Parse(Line.Substring(stackStartIndex' stackEndIndex - stackStartIndex)' provider);                    plist.Add(new Player(playerName' stack' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  //<PLAYER NAME="fatima1975" SEAT="6" AMOUNT="4.27"></PLAYER>                  string Line = handLines[i + 1];                  if (Line[1] != 'P')                  {                      currentLine = i + 1;                      break;                  }                    const int playerNameStartIndex = 14;                  int playerNameEndIndex = Line.IndexOf('\"'' playerNameStartIndex);                  string playerName = Line.Substring(playerNameStartIndex' playerNameEndIndex - playerNameStartIndex);                    if (playerName == "UNKNOWN")                  {                      continue;                  }                    int seatStartIndex = playerNameEndIndex + 8;                  int seatEndIndex = Line.IndexOf('\"'' seatStartIndex);                  int seatNumber = int.Parse(Line.Substring(seatStartIndex' seatEndIndex - seatStartIndex));                    int stackStartIndex = seatEndIndex + 10;                  int stackEndIndex = Line.IndexOf('\"'' stackStartIndex);                  decimal stack = decimal.Parse(Line.Substring(stackStartIndex' stackEndIndex - stackStartIndex)' provider);                    plist.Add(new Player(playerName' stack' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = currentLine; i < handLines.Length; i++)              {                  string Line = handLines[i];                  char firstChar = Line[1];                  if (firstChar == 'A')                  {                      //<ACTION TYPE="HAND_BLINDS" PLAYER="ItalyToast" KIND="HAND_BB" VALUE="200.00"></ACTION>                      //<ACTION TYPE="HAND_DEAL" PLAYER="AllinAnna">                      const int actionTypeCharIndex = 19;                      char actionTypeChar = Line[actionTypeCharIndex];                      if (actionTypeChar == 'D')                      {                          string playerName = GetXMLAttributeValue(Line' "PLAYER");                          ParseDealtHand(handLines' i' plist[playerName]);                      }                  }                  if (firstChar == 'S')                  {                      currentLine = i + 1;                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 1; i > currentLine; i--)              {                  string Line = handLines[i];                  char firstChar = Line[1];                    if (firstChar == 'C')                  {                      continue;                  }                    //<RESULT PLAYER="ItalyToast" WIN="10.00" HAND="$(STR_BY_DEFAULT)" WINCARDS="14 1 50 5 14 ">                  if (firstChar == 'R')                  {                      const int playerNameStartIndex = 16;                      int playerNameEndIndex = Line.IndexOf('\"'' playerNameStartIndex);                      string playerName = Line.Substring(playerNameStartIndex' playerNameEndIndex - playerNameStartIndex);                      Player player = plist[playerName];                        if (!player.hasHoleCards)                      {                          for (int cardIndex = i + 1; cardIndex <= i + 4 && cardIndex < handLines.Length; cardIndex++)                          {                              string cardLine = handLines[cardIndex];                              if (cardLine[1] != 'C')                              {                                  break;                              }                                Card parsedCard = ParseCard(cardLine);                              if (!parsedCard.isEmpty)                              {                                  if (player.HoleCards == null)                                  {                                      player.HoleCards = HoleCards.NoHolecards();                                  }                                  player.HoleCards.AddCard(parsedCard);                              }                          }                      }                  }                    if (firstChar == 'S')                  {                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 1; i > currentLine; i--)              {                  string Line = handLines[i];                  char firstChar = Line[1];                    if (firstChar == 'C')                  {                      continue;                  }                    //<RESULT PLAYER="ItalyToast" WIN="10.00" HAND="$(STR_BY_DEFAULT)" WINCARDS="14 1 50 5 14 ">                  if (firstChar == 'R')                  {                      const int playerNameStartIndex = 16;                      int playerNameEndIndex = Line.IndexOf('\"'' playerNameStartIndex);                      string playerName = Line.Substring(playerNameStartIndex' playerNameEndIndex - playerNameStartIndex);                      Player player = plist[playerName];                        if (!player.hasHoleCards)                      {                          for (int cardIndex = i + 1; cardIndex <= i + 4 && cardIndex < handLines.Length; cardIndex++)                          {                              string cardLine = handLines[cardIndex];                              if (cardLine[1] != 'C')                              {                                  break;                              }                                Card parsedCard = ParseCard(cardLine);                              if (!parsedCard.isEmpty)                              {                                  if (player.HoleCards == null)                                  {                                      player.HoleCards = HoleCards.NoHolecards();                                  }                                  player.HoleCards.AddCard(parsedCard);                              }                          }                      }                  }                    if (firstChar == 'S')                  {                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseDealtHand,The following statement contains a magic number: const int maxCards = 4;
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = handLines.Length - 1; i > 1; i--)              {                  string Line = handLines[i];                  if (Line[1] == 'A' && Line[14] == 'H' && Line[20] == 'O')                  {                      const int maxCards = 5;                      for (int cardIndex = i + 1; cardIndex <= i + maxCards; cardIndex++)                      {                          if (handLines[cardIndex][1] != 'C')                          {                              break;                          }                          board.AddCard(ParseCard(handLines[cardIndex]));                      }                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = handLines.Length - 1; i > 1; i--)              {                  string Line = handLines[i];                  if (Line[1] == 'A' && Line[14] == 'H' && Line[20] == 'O')                  {                      const int maxCards = 5;                      for (int cardIndex = i + 1; cardIndex <= i + maxCards; cardIndex++)                      {                          if (handLines[cardIndex][1] != 'C')                          {                              break;                          }                          board.AddCard(ParseCard(handLines[cardIndex]));                      }                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = handLines.Length - 1; i > 1; i--)              {                  string Line = handLines[i];                  if (Line[1] == 'A' && Line[14] == 'H' && Line[20] == 'O')                  {                      const int maxCards = 5;                      for (int cardIndex = i + 1; cardIndex <= i + maxCards; cardIndex++)                      {                          if (handLines[cardIndex][1] != 'C')                          {                              break;                          }                          board.AddCard(ParseCard(handLines[cardIndex]));                      }                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseCard,The following statement contains a magic number: const int cardIDStartIndex = 12;
Magic Number,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseHeroName,The following statement contains a magic number: for (int i = 0; i < handlines.Length; i++)              {                  string line = handlines[i];                  if (line[1] == 'C' && line[12] != 'b')                  {                      string HeroNameLine = handlines[i - 1];                      return GetXMLAttributeValue(HeroNameLine' "PLAYER");                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseDealerPosition,The following statement contains a magic number: for (int i = 3; i < handLines.Length - 1; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Dealer:"))                  {                      string dealerName = handLine.Replace("Dealer:"' "").TrimStart(' ');                        return players.First(p => p.PlayerName.Equals(dealerName)).SeatNumber;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseHandActions,The following statement contains a magic number: for (int i = 3; i < handLines.Length - 1; i++)              {                  string handLine = handLines[i];                   string name = string.Empty;                  decimal amount = 0;                    if (string.IsNullOrWhiteSpace(handLine))                  {                      continue;                  }                    if (currentStreet == Street.Null)                  {                      if (handLine.StartsWith("Dealer:"))                      {                          currentStreet = Street.Preflop;                      }                      continue;                  }                    if (handLine.Contains(" didn't show hand"))                  {                      currentStreet = Street.Showdown;                      continue;                  }                  if (handLine.Contains(" shows: "))                  {                      int firstSpaceIndexOf = handLine.IndexOf(' ');                                          name = handLine.Substring(0' firstSpaceIndexOf);                      currentStreet = Street.Showdown;                      handActions.Add(new HandAction(name' HandActionType.SHOW' 0' currentStreet));                      continue;                  }                  if (handLine.Contains(" wins: "))                  {                      //stook wins:                 EUR 23.04                      currentStreet = Street.Showdown;                      int firstSpaceIndexOf = handLine.IndexOf(' ');                      int lastSpaceIndex = handLine.LastIndexOf(' ');                        name = handLine.Substring(0' firstSpaceIndexOf);                      amount = decimal.Parse(handLine.Substring(lastSpaceIndex + 1' handLine.Length - lastSpaceIndex - 1)' System.Globalization.CultureInfo.InvariantCulture);                        handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                      continue;                  }                    if (handLine.StartsWith("Flop "))                  {                      currentStreet = Street.Flop;                      continue;                  }                  if (handLine.StartsWith("Turn "))                  {                      currentStreet = Street.Turn;                      continue;                  }                  if (handLine.StartsWith("River "))                  {                      currentStreet = Street.River;                      continue;                  }                  if (handLine.StartsWith("Rake: "))                  {                      break;                  }                    int firstSpaceIndex = handLine.IndexOf(' ');                  int openParenIndex = handLine.IndexOf('(');                  int spaceAfterAction = handLine.IndexOf(' '' 28);                  if (spaceAfterAction == -1)                  {                      spaceAfterAction = handLine.Length;                  }                  int colonIndex = handLine.IndexOf(':');                                   if (openParenIndex != -1)                  {                      amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' System.Globalization.CultureInfo.InvariantCulture);                  }                    if (currentStreet == Street.Preflop)                  {                                          // Check for lines like:                      //  Small Blind:                wELMA       (0.50)                      //  Big Blind:                  Vrddhi      (1.00)                      if (colonIndex != -1)                      {                                                  name = handLine.Substring(28' spaceAfterAction - 28);                          if (handLine[0] == 'S')                          {                              handActions.Add(new HandAction(name' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          if (handLine[0] == 'B')                          {                              handActions.Add(new HandAction(name' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                                                    throw new HandActionException(handLine' "Unrecognized preflop action.");                      }                                     }                    string action = handLine.Substring(28' spaceAfterAction - 28);                  name = handLine.Substring(0' firstSpaceIndex);                    switch (action)                  {                      case "Raise":                          handActions.Add(new HandAction(name' HandActionType.RAISE' amount' currentStreet));                          continue;                      case "Check":                          handActions.Add(new HandAction(name' HandActionType.CHECK' amount' currentStreet));                          continue;                      case "Fold":                          handActions.Add(new HandAction(name' HandActionType.FOLD' amount' currentStreet));                          continue;                      case "Bet":                          handActions.Add(new HandAction(name' HandActionType.BET' amount' currentStreet));                          continue;                      case "Call":                          handActions.Add(new HandAction(name' HandActionType.CALL' amount' currentStreet));                          continue;                      case "Payback":                          handActions.Add(new HandAction(name' HandActionType.UNCALLED_BET' amount' currentStreet));                          continue;                      case "All-In":                                                  handActions.Add(new AllInAction(name' amount' currentStreet' false));                          continue;                  }                    throw new HandActionException(handLine' "Unrecognized preflop action.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseHandActions,The following statement contains a magic number: for (int i = 3; i < handLines.Length - 1; i++)              {                  string handLine = handLines[i];                   string name = string.Empty;                  decimal amount = 0;                    if (string.IsNullOrWhiteSpace(handLine))                  {                      continue;                  }                    if (currentStreet == Street.Null)                  {                      if (handLine.StartsWith("Dealer:"))                      {                          currentStreet = Street.Preflop;                      }                      continue;                  }                    if (handLine.Contains(" didn't show hand"))                  {                      currentStreet = Street.Showdown;                      continue;                  }                  if (handLine.Contains(" shows: "))                  {                      int firstSpaceIndexOf = handLine.IndexOf(' ');                                          name = handLine.Substring(0' firstSpaceIndexOf);                      currentStreet = Street.Showdown;                      handActions.Add(new HandAction(name' HandActionType.SHOW' 0' currentStreet));                      continue;                  }                  if (handLine.Contains(" wins: "))                  {                      //stook wins:                 EUR 23.04                      currentStreet = Street.Showdown;                      int firstSpaceIndexOf = handLine.IndexOf(' ');                      int lastSpaceIndex = handLine.LastIndexOf(' ');                        name = handLine.Substring(0' firstSpaceIndexOf);                      amount = decimal.Parse(handLine.Substring(lastSpaceIndex + 1' handLine.Length - lastSpaceIndex - 1)' System.Globalization.CultureInfo.InvariantCulture);                        handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                      continue;                  }                    if (handLine.StartsWith("Flop "))                  {                      currentStreet = Street.Flop;                      continue;                  }                  if (handLine.StartsWith("Turn "))                  {                      currentStreet = Street.Turn;                      continue;                  }                  if (handLine.StartsWith("River "))                  {                      currentStreet = Street.River;                      continue;                  }                  if (handLine.StartsWith("Rake: "))                  {                      break;                  }                    int firstSpaceIndex = handLine.IndexOf(' ');                  int openParenIndex = handLine.IndexOf('(');                  int spaceAfterAction = handLine.IndexOf(' '' 28);                  if (spaceAfterAction == -1)                  {                      spaceAfterAction = handLine.Length;                  }                  int colonIndex = handLine.IndexOf(':');                                   if (openParenIndex != -1)                  {                      amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' System.Globalization.CultureInfo.InvariantCulture);                  }                    if (currentStreet == Street.Preflop)                  {                                          // Check for lines like:                      //  Small Blind:                wELMA       (0.50)                      //  Big Blind:                  Vrddhi      (1.00)                      if (colonIndex != -1)                      {                                                  name = handLine.Substring(28' spaceAfterAction - 28);                          if (handLine[0] == 'S')                          {                              handActions.Add(new HandAction(name' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          if (handLine[0] == 'B')                          {                              handActions.Add(new HandAction(name' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                                                    throw new HandActionException(handLine' "Unrecognized preflop action.");                      }                                     }                    string action = handLine.Substring(28' spaceAfterAction - 28);                  name = handLine.Substring(0' firstSpaceIndex);                    switch (action)                  {                      case "Raise":                          handActions.Add(new HandAction(name' HandActionType.RAISE' amount' currentStreet));                          continue;                      case "Check":                          handActions.Add(new HandAction(name' HandActionType.CHECK' amount' currentStreet));                          continue;                      case "Fold":                          handActions.Add(new HandAction(name' HandActionType.FOLD' amount' currentStreet));                          continue;                      case "Bet":                          handActions.Add(new HandAction(name' HandActionType.BET' amount' currentStreet));                          continue;                      case "Call":                          handActions.Add(new HandAction(name' HandActionType.CALL' amount' currentStreet));                          continue;                      case "Payback":                          handActions.Add(new HandAction(name' HandActionType.UNCALLED_BET' amount' currentStreet));                          continue;                      case "All-In":                                                  handActions.Add(new AllInAction(name' amount' currentStreet' false));                          continue;                  }                    throw new HandActionException(handLine' "Unrecognized preflop action.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseHandActions,The following statement contains a magic number: for (int i = 3; i < handLines.Length - 1; i++)              {                  string handLine = handLines[i];                   string name = string.Empty;                  decimal amount = 0;                    if (string.IsNullOrWhiteSpace(handLine))                  {                      continue;                  }                    if (currentStreet == Street.Null)                  {                      if (handLine.StartsWith("Dealer:"))                      {                          currentStreet = Street.Preflop;                      }                      continue;                  }                    if (handLine.Contains(" didn't show hand"))                  {                      currentStreet = Street.Showdown;                      continue;                  }                  if (handLine.Contains(" shows: "))                  {                      int firstSpaceIndexOf = handLine.IndexOf(' ');                                          name = handLine.Substring(0' firstSpaceIndexOf);                      currentStreet = Street.Showdown;                      handActions.Add(new HandAction(name' HandActionType.SHOW' 0' currentStreet));                      continue;                  }                  if (handLine.Contains(" wins: "))                  {                      //stook wins:                 EUR 23.04                      currentStreet = Street.Showdown;                      int firstSpaceIndexOf = handLine.IndexOf(' ');                      int lastSpaceIndex = handLine.LastIndexOf(' ');                        name = handLine.Substring(0' firstSpaceIndexOf);                      amount = decimal.Parse(handLine.Substring(lastSpaceIndex + 1' handLine.Length - lastSpaceIndex - 1)' System.Globalization.CultureInfo.InvariantCulture);                        handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                      continue;                  }                    if (handLine.StartsWith("Flop "))                  {                      currentStreet = Street.Flop;                      continue;                  }                  if (handLine.StartsWith("Turn "))                  {                      currentStreet = Street.Turn;                      continue;                  }                  if (handLine.StartsWith("River "))                  {                      currentStreet = Street.River;                      continue;                  }                  if (handLine.StartsWith("Rake: "))                  {                      break;                  }                    int firstSpaceIndex = handLine.IndexOf(' ');                  int openParenIndex = handLine.IndexOf('(');                  int spaceAfterAction = handLine.IndexOf(' '' 28);                  if (spaceAfterAction == -1)                  {                      spaceAfterAction = handLine.Length;                  }                  int colonIndex = handLine.IndexOf(':');                                   if (openParenIndex != -1)                  {                      amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' System.Globalization.CultureInfo.InvariantCulture);                  }                    if (currentStreet == Street.Preflop)                  {                                          // Check for lines like:                      //  Small Blind:                wELMA       (0.50)                      //  Big Blind:                  Vrddhi      (1.00)                      if (colonIndex != -1)                      {                                                  name = handLine.Substring(28' spaceAfterAction - 28);                          if (handLine[0] == 'S')                          {                              handActions.Add(new HandAction(name' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          if (handLine[0] == 'B')                          {                              handActions.Add(new HandAction(name' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                                                    throw new HandActionException(handLine' "Unrecognized preflop action.");                      }                                     }                    string action = handLine.Substring(28' spaceAfterAction - 28);                  name = handLine.Substring(0' firstSpaceIndex);                    switch (action)                  {                      case "Raise":                          handActions.Add(new HandAction(name' HandActionType.RAISE' amount' currentStreet));                          continue;                      case "Check":                          handActions.Add(new HandAction(name' HandActionType.CHECK' amount' currentStreet));                          continue;                      case "Fold":                          handActions.Add(new HandAction(name' HandActionType.FOLD' amount' currentStreet));                          continue;                      case "Bet":                          handActions.Add(new HandAction(name' HandActionType.BET' amount' currentStreet));                          continue;                      case "Call":                          handActions.Add(new HandAction(name' HandActionType.CALL' amount' currentStreet));                          continue;                      case "Payback":                          handActions.Add(new HandAction(name' HandActionType.UNCALLED_BET' amount' currentStreet));                          continue;                      case "All-In":                                                  handActions.Add(new AllInAction(name' amount' currentStreet' false));                          continue;                  }                    throw new HandActionException(handLine' "Unrecognized preflop action.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseHandActions,The following statement contains a magic number: for (int i = 3; i < handLines.Length - 1; i++)              {                  string handLine = handLines[i];                   string name = string.Empty;                  decimal amount = 0;                    if (string.IsNullOrWhiteSpace(handLine))                  {                      continue;                  }                    if (currentStreet == Street.Null)                  {                      if (handLine.StartsWith("Dealer:"))                      {                          currentStreet = Street.Preflop;                      }                      continue;                  }                    if (handLine.Contains(" didn't show hand"))                  {                      currentStreet = Street.Showdown;                      continue;                  }                  if (handLine.Contains(" shows: "))                  {                      int firstSpaceIndexOf = handLine.IndexOf(' ');                                          name = handLine.Substring(0' firstSpaceIndexOf);                      currentStreet = Street.Showdown;                      handActions.Add(new HandAction(name' HandActionType.SHOW' 0' currentStreet));                      continue;                  }                  if (handLine.Contains(" wins: "))                  {                      //stook wins:                 EUR 23.04                      currentStreet = Street.Showdown;                      int firstSpaceIndexOf = handLine.IndexOf(' ');                      int lastSpaceIndex = handLine.LastIndexOf(' ');                        name = handLine.Substring(0' firstSpaceIndexOf);                      amount = decimal.Parse(handLine.Substring(lastSpaceIndex + 1' handLine.Length - lastSpaceIndex - 1)' System.Globalization.CultureInfo.InvariantCulture);                        handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                      continue;                  }                    if (handLine.StartsWith("Flop "))                  {                      currentStreet = Street.Flop;                      continue;                  }                  if (handLine.StartsWith("Turn "))                  {                      currentStreet = Street.Turn;                      continue;                  }                  if (handLine.StartsWith("River "))                  {                      currentStreet = Street.River;                      continue;                  }                  if (handLine.StartsWith("Rake: "))                  {                      break;                  }                    int firstSpaceIndex = handLine.IndexOf(' ');                  int openParenIndex = handLine.IndexOf('(');                  int spaceAfterAction = handLine.IndexOf(' '' 28);                  if (spaceAfterAction == -1)                  {                      spaceAfterAction = handLine.Length;                  }                  int colonIndex = handLine.IndexOf(':');                                   if (openParenIndex != -1)                  {                      amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' System.Globalization.CultureInfo.InvariantCulture);                  }                    if (currentStreet == Street.Preflop)                  {                                          // Check for lines like:                      //  Small Blind:                wELMA       (0.50)                      //  Big Blind:                  Vrddhi      (1.00)                      if (colonIndex != -1)                      {                                                  name = handLine.Substring(28' spaceAfterAction - 28);                          if (handLine[0] == 'S')                          {                              handActions.Add(new HandAction(name' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          if (handLine[0] == 'B')                          {                              handActions.Add(new HandAction(name' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                                                    throw new HandActionException(handLine' "Unrecognized preflop action.");                      }                                     }                    string action = handLine.Substring(28' spaceAfterAction - 28);                  name = handLine.Substring(0' firstSpaceIndex);                    switch (action)                  {                      case "Raise":                          handActions.Add(new HandAction(name' HandActionType.RAISE' amount' currentStreet));                          continue;                      case "Check":                          handActions.Add(new HandAction(name' HandActionType.CHECK' amount' currentStreet));                          continue;                      case "Fold":                          handActions.Add(new HandAction(name' HandActionType.FOLD' amount' currentStreet));                          continue;                      case "Bet":                          handActions.Add(new HandAction(name' HandActionType.BET' amount' currentStreet));                          continue;                      case "Call":                          handActions.Add(new HandAction(name' HandActionType.CALL' amount' currentStreet));                          continue;                      case "Payback":                          handActions.Add(new HandAction(name' HandActionType.UNCALLED_BET' amount' currentStreet));                          continue;                      case "All-In":                                                  handActions.Add(new AllInAction(name' amount' currentStreet' false));                          continue;                  }                    throw new HandActionException(handLine' "Unrecognized preflop action.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseHandActions,The following statement contains a magic number: for (int i = 3; i < handLines.Length - 1; i++)              {                  string handLine = handLines[i];                   string name = string.Empty;                  decimal amount = 0;                    if (string.IsNullOrWhiteSpace(handLine))                  {                      continue;                  }                    if (currentStreet == Street.Null)                  {                      if (handLine.StartsWith("Dealer:"))                      {                          currentStreet = Street.Preflop;                      }                      continue;                  }                    if (handLine.Contains(" didn't show hand"))                  {                      currentStreet = Street.Showdown;                      continue;                  }                  if (handLine.Contains(" shows: "))                  {                      int firstSpaceIndexOf = handLine.IndexOf(' ');                                          name = handLine.Substring(0' firstSpaceIndexOf);                      currentStreet = Street.Showdown;                      handActions.Add(new HandAction(name' HandActionType.SHOW' 0' currentStreet));                      continue;                  }                  if (handLine.Contains(" wins: "))                  {                      //stook wins:                 EUR 23.04                      currentStreet = Street.Showdown;                      int firstSpaceIndexOf = handLine.IndexOf(' ');                      int lastSpaceIndex = handLine.LastIndexOf(' ');                        name = handLine.Substring(0' firstSpaceIndexOf);                      amount = decimal.Parse(handLine.Substring(lastSpaceIndex + 1' handLine.Length - lastSpaceIndex - 1)' System.Globalization.CultureInfo.InvariantCulture);                        handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                      continue;                  }                    if (handLine.StartsWith("Flop "))                  {                      currentStreet = Street.Flop;                      continue;                  }                  if (handLine.StartsWith("Turn "))                  {                      currentStreet = Street.Turn;                      continue;                  }                  if (handLine.StartsWith("River "))                  {                      currentStreet = Street.River;                      continue;                  }                  if (handLine.StartsWith("Rake: "))                  {                      break;                  }                    int firstSpaceIndex = handLine.IndexOf(' ');                  int openParenIndex = handLine.IndexOf('(');                  int spaceAfterAction = handLine.IndexOf(' '' 28);                  if (spaceAfterAction == -1)                  {                      spaceAfterAction = handLine.Length;                  }                  int colonIndex = handLine.IndexOf(':');                                   if (openParenIndex != -1)                  {                      amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' System.Globalization.CultureInfo.InvariantCulture);                  }                    if (currentStreet == Street.Preflop)                  {                                          // Check for lines like:                      //  Small Blind:                wELMA       (0.50)                      //  Big Blind:                  Vrddhi      (1.00)                      if (colonIndex != -1)                      {                                                  name = handLine.Substring(28' spaceAfterAction - 28);                          if (handLine[0] == 'S')                          {                              handActions.Add(new HandAction(name' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          if (handLine[0] == 'B')                          {                              handActions.Add(new HandAction(name' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                                                    throw new HandActionException(handLine' "Unrecognized preflop action.");                      }                                     }                    string action = handLine.Substring(28' spaceAfterAction - 28);                  name = handLine.Substring(0' firstSpaceIndex);                    switch (action)                  {                      case "Raise":                          handActions.Add(new HandAction(name' HandActionType.RAISE' amount' currentStreet));                          continue;                      case "Check":                          handActions.Add(new HandAction(name' HandActionType.CHECK' amount' currentStreet));                          continue;                      case "Fold":                          handActions.Add(new HandAction(name' HandActionType.FOLD' amount' currentStreet));                          continue;                      case "Bet":                          handActions.Add(new HandAction(name' HandActionType.BET' amount' currentStreet));                          continue;                      case "Call":                          handActions.Add(new HandAction(name' HandActionType.CALL' amount' currentStreet));                          continue;                      case "Payback":                          handActions.Add(new HandAction(name' HandActionType.UNCALLED_BET' amount' currentStreet));                          continue;                      case "All-In":                                                  handActions.Add(new AllInAction(name' amount' currentStreet' false));                          continue;                  }                    throw new HandActionException(handLine' "Unrecognized preflop action.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseHandActions,The following statement contains a magic number: for (int i = 3; i < handLines.Length - 1; i++)              {                  string handLine = handLines[i];                   string name = string.Empty;                  decimal amount = 0;                    if (string.IsNullOrWhiteSpace(handLine))                  {                      continue;                  }                    if (currentStreet == Street.Null)                  {                      if (handLine.StartsWith("Dealer:"))                      {                          currentStreet = Street.Preflop;                      }                      continue;                  }                    if (handLine.Contains(" didn't show hand"))                  {                      currentStreet = Street.Showdown;                      continue;                  }                  if (handLine.Contains(" shows: "))                  {                      int firstSpaceIndexOf = handLine.IndexOf(' ');                                          name = handLine.Substring(0' firstSpaceIndexOf);                      currentStreet = Street.Showdown;                      handActions.Add(new HandAction(name' HandActionType.SHOW' 0' currentStreet));                      continue;                  }                  if (handLine.Contains(" wins: "))                  {                      //stook wins:                 EUR 23.04                      currentStreet = Street.Showdown;                      int firstSpaceIndexOf = handLine.IndexOf(' ');                      int lastSpaceIndex = handLine.LastIndexOf(' ');                        name = handLine.Substring(0' firstSpaceIndexOf);                      amount = decimal.Parse(handLine.Substring(lastSpaceIndex + 1' handLine.Length - lastSpaceIndex - 1)' System.Globalization.CultureInfo.InvariantCulture);                        handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                      continue;                  }                    if (handLine.StartsWith("Flop "))                  {                      currentStreet = Street.Flop;                      continue;                  }                  if (handLine.StartsWith("Turn "))                  {                      currentStreet = Street.Turn;                      continue;                  }                  if (handLine.StartsWith("River "))                  {                      currentStreet = Street.River;                      continue;                  }                  if (handLine.StartsWith("Rake: "))                  {                      break;                  }                    int firstSpaceIndex = handLine.IndexOf(' ');                  int openParenIndex = handLine.IndexOf('(');                  int spaceAfterAction = handLine.IndexOf(' '' 28);                  if (spaceAfterAction == -1)                  {                      spaceAfterAction = handLine.Length;                  }                  int colonIndex = handLine.IndexOf(':');                                   if (openParenIndex != -1)                  {                      amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' System.Globalization.CultureInfo.InvariantCulture);                  }                    if (currentStreet == Street.Preflop)                  {                                          // Check for lines like:                      //  Small Blind:                wELMA       (0.50)                      //  Big Blind:                  Vrddhi      (1.00)                      if (colonIndex != -1)                      {                                                  name = handLine.Substring(28' spaceAfterAction - 28);                          if (handLine[0] == 'S')                          {                              handActions.Add(new HandAction(name' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          if (handLine[0] == 'B')                          {                              handActions.Add(new HandAction(name' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                                                    throw new HandActionException(handLine' "Unrecognized preflop action.");                      }                                     }                    string action = handLine.Substring(28' spaceAfterAction - 28);                  name = handLine.Substring(0' firstSpaceIndex);                    switch (action)                  {                      case "Raise":                          handActions.Add(new HandAction(name' HandActionType.RAISE' amount' currentStreet));                          continue;                      case "Check":                          handActions.Add(new HandAction(name' HandActionType.CHECK' amount' currentStreet));                          continue;                      case "Fold":                          handActions.Add(new HandAction(name' HandActionType.FOLD' amount' currentStreet));                          continue;                      case "Bet":                          handActions.Add(new HandAction(name' HandActionType.BET' amount' currentStreet));                          continue;                      case "Call":                          handActions.Add(new HandAction(name' HandActionType.CALL' amount' currentStreet));                          continue;                      case "Payback":                          handActions.Add(new HandAction(name' HandActionType.UNCALLED_BET' amount' currentStreet));                          continue;                      case "All-In":                                                  handActions.Add(new AllInAction(name' amount' currentStreet' false));                          continue;                  }                    throw new HandActionException(handLine' "Unrecognized preflop action.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseHandActions,The following statement contains a magic number: for (int i = 3; i < handLines.Length - 1; i++)              {                  string handLine = handLines[i];                   string name = string.Empty;                  decimal amount = 0;                    if (string.IsNullOrWhiteSpace(handLine))                  {                      continue;                  }                    if (currentStreet == Street.Null)                  {                      if (handLine.StartsWith("Dealer:"))                      {                          currentStreet = Street.Preflop;                      }                      continue;                  }                    if (handLine.Contains(" didn't show hand"))                  {                      currentStreet = Street.Showdown;                      continue;                  }                  if (handLine.Contains(" shows: "))                  {                      int firstSpaceIndexOf = handLine.IndexOf(' ');                                          name = handLine.Substring(0' firstSpaceIndexOf);                      currentStreet = Street.Showdown;                      handActions.Add(new HandAction(name' HandActionType.SHOW' 0' currentStreet));                      continue;                  }                  if (handLine.Contains(" wins: "))                  {                      //stook wins:                 EUR 23.04                      currentStreet = Street.Showdown;                      int firstSpaceIndexOf = handLine.IndexOf(' ');                      int lastSpaceIndex = handLine.LastIndexOf(' ');                        name = handLine.Substring(0' firstSpaceIndexOf);                      amount = decimal.Parse(handLine.Substring(lastSpaceIndex + 1' handLine.Length - lastSpaceIndex - 1)' System.Globalization.CultureInfo.InvariantCulture);                        handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                      continue;                  }                    if (handLine.StartsWith("Flop "))                  {                      currentStreet = Street.Flop;                      continue;                  }                  if (handLine.StartsWith("Turn "))                  {                      currentStreet = Street.Turn;                      continue;                  }                  if (handLine.StartsWith("River "))                  {                      currentStreet = Street.River;                      continue;                  }                  if (handLine.StartsWith("Rake: "))                  {                      break;                  }                    int firstSpaceIndex = handLine.IndexOf(' ');                  int openParenIndex = handLine.IndexOf('(');                  int spaceAfterAction = handLine.IndexOf(' '' 28);                  if (spaceAfterAction == -1)                  {                      spaceAfterAction = handLine.Length;                  }                  int colonIndex = handLine.IndexOf(':');                                   if (openParenIndex != -1)                  {                      amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' System.Globalization.CultureInfo.InvariantCulture);                  }                    if (currentStreet == Street.Preflop)                  {                                          // Check for lines like:                      //  Small Blind:                wELMA       (0.50)                      //  Big Blind:                  Vrddhi      (1.00)                      if (colonIndex != -1)                      {                                                  name = handLine.Substring(28' spaceAfterAction - 28);                          if (handLine[0] == 'S')                          {                              handActions.Add(new HandAction(name' HandActionType.SMALL_BLIND' amount' currentStreet));                              continue;                          }                          if (handLine[0] == 'B')                          {                              handActions.Add(new HandAction(name' HandActionType.BIG_BLIND' amount' currentStreet));                              continue;                          }                                                    throw new HandActionException(handLine' "Unrecognized preflop action.");                      }                                     }                    string action = handLine.Substring(28' spaceAfterAction - 28);                  name = handLine.Substring(0' firstSpaceIndex);                    switch (action)                  {                      case "Raise":                          handActions.Add(new HandAction(name' HandActionType.RAISE' amount' currentStreet));                          continue;                      case "Check":                          handActions.Add(new HandAction(name' HandActionType.CHECK' amount' currentStreet));                          continue;                      case "Fold":                          handActions.Add(new HandAction(name' HandActionType.FOLD' amount' currentStreet));                          continue;                      case "Bet":                          handActions.Add(new HandAction(name' HandActionType.BET' amount' currentStreet));                          continue;                      case "Call":                          handActions.Add(new HandAction(name' HandActionType.CALL' amount' currentStreet));                          continue;                      case "Payback":                          handActions.Add(new HandAction(name' HandActionType.UNCALLED_BET' amount' currentStreet));                          continue;                      case "All-In":                                                  handActions.Add(new AllInAction(name' amount' currentStreet' false));                          continue;                  }                    throw new HandActionException(handLine' "Unrecognized preflop action.");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParsePlayers,The following statement contains a magic number: for (int i = 2; i <= handLines.Length - 1; i++)              {                  string handLine = handLines[i];                    if (string.IsNullOrWhiteSpace(handLine) ||                      handLine.StartsWith("Dealer:"))                  {                      break;                  }                    int firstSpaceIndex = handLine.IndexOf(' ');                  int openParenIndex = handLine.LastIndexOf('(');                    string seatInfo = handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2);                  string[] seatData = seatInfo.Split(' ');                    int seatNumber = int.Parse(seatData[seatData.Length - 1]);                  decimal amount = decimal.Parse(seatData[1]' System.Globalization.CultureInfo.InvariantCulture);                  string playerName = handLine.Substring(0' firstSpaceIndex);                    playerList.Add(new Player(playerName' amount' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParsePlayers,The following statement contains a magic number: for (int i = 2; i <= handLines.Length - 1; i++)              {                  string handLine = handLines[i];                    if (string.IsNullOrWhiteSpace(handLine) ||                      handLine.StartsWith("Dealer:"))                  {                      break;                  }                    int firstSpaceIndex = handLine.IndexOf(' ');                  int openParenIndex = handLine.LastIndexOf('(');                    string seatInfo = handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2);                  string[] seatData = seatInfo.Split(' ');                    int seatNumber = int.Parse(seatData[seatData.Length - 1]);                  decimal amount = decimal.Parse(seatData[1]' System.Globalization.CultureInfo.InvariantCulture);                  string playerName = handLine.Substring(0' firstSpaceIndex);                    playerList.Add(new Player(playerName' amount' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string handLine = handLines[i];                    if (string.IsNullOrWhiteSpace(handLine))                  {                      continue;                                      }                    if (handLine.StartsWith("Dealer:"))                  {                      break;                  }                    //IFeelFree shows:            Kh - Tc                  if (handLine.Contains("shows:"))                  {                      int colonIndex = handLine.IndexOf(':');                        string holeCards = handLine.Substring(colonIndex + 1' handLine.Length - colonIndex - 1);                      string playerName = handLine.Substring(0' handLine.IndexOf(' '));                        Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      player.HoleCards = HoleCards.FromCards(holeCards.Replace(" "' "").Replace("-"' ""));                  }                  //hellowkit didn't show hand (3h - Ad)                  else if (handLine[handLine.Length - 1] == ')' && handLine.Contains("didn't show hand"))                  {                      int openParenIndex = handLine.LastIndexOf('(');                        string holeCards = handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2);                      string playerName = handLine.Substring(0' handLine.IndexOf(' '));                        Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      player.HoleCards = HoleCards.FromCards(holeCards.Replace(" "' "").Replace("-"' ""));                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,SplitUpMultipleHands,The following statement contains a magic number: return HandSplitRegex.Split(rawHandHistories)                                   .Where(s => string.IsNullOrWhiteSpace(s) == false && s.Length > 30)                                   .Select(s => "Full Tilt Poker Game #" + s.Trim('\r'' 'n'));
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDealerPosition,The following statement contains a magic number: for (int i = 2; i < handLines.Length - 1; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("The button "))                  {                      int button = int.Parse(handLine[handLine.Length - 1].ToString());                        if (button == 0)                      {                          return 10;                      }                        return button;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDealerPosition,The following statement contains a magic number: for (int i = 2; i < handLines.Length - 1; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("The button "))                  {                      int button = int.Parse(handLine[handLine.Length - 1].ToString());                        if (button == 0)                      {                          return 10;                      }                        return button;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: string timeString = split[3];
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: string dateString = split[4];
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int year = FastInt.Parse(dateString.Substring(1' 4));
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int month = FastInt.Parse(dateString.Substring(6' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int month = FastInt.Parse(dateString.Substring(6' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int day = FastInt.Parse(dateString.Substring(9' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int day = FastInt.Parse(dateString.Substring(9' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int hour = FastInt.Parse(timeString.Substring(1' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int minute = FastInt.Parse(timeString.Substring(4' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int minute = FastInt.Parse(timeString.Substring(4' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int second = FastInt.Parse(timeString.Substring(7' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int second = FastInt.Parse(timeString.Substring(7' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseHandId,The following statement contains a magic number: int hashIndex = 21;
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (seatInfo.Length == 1)              {                  return SeatType.FromMaxPlayers(9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (seatInfo[1].StartsWith("6 max"))              {                  return SeatType.FromMaxPlayers(6);              }              else if (seatInfo[1].StartsWith("heads"))              {                  return SeatType.FromMaxPlayers(2);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (seatInfo[1].StartsWith("6 max"))              {                  return SeatType.FromMaxPlayers(6);              }              else if (seatInfo[1].StartsWith("heads"))              {                  return SeatType.FromMaxPlayers(2);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: return SeatType.FromMaxPlayers(9);
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: if (splitter[2].Contains("/"))              {                  gameTypeString = splitter[1];              }              else              {                  gameTypeString = splitter[2];              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: if (splitter[2].Contains("/"))              {                  gameTypeString = splitter[1];              }              else              {                  gameTypeString = splitter[2];              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseLimit,The following statement contains a magic number: if(splitter[2].Contains("/"))              {                  limit = splitter[2];              }              else              {                  limit = splitter[1];              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseLimit,The following statement contains a magic number: if(splitter[2].Contains("/"))              {                  limit = splitter[2];              }              else              {                  limit = splitter[1];              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,IsValidOrCancelledHand,The following statement contains a magic number: for (int i = handLines.Length - 1; i > 2; i--)              {                  var line = handLines[i];                    // we search for                   // Hand #35550557071 has been canceled                  if (line[0] == 'H' && line[5] == '#' && line[line.Length - 1] == 'd')                  {                      isCancelled = true;                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,IsValidOrCancelledHand,The following statement contains a magic number: for (int i = handLines.Length - 1; i > 2; i--)              {                  var line = handLines[i];                    // we search for                   // Hand #35550557071 has been canceled                  if (line[0] == 'H' && line[5] == '#' && line[line.Length - 1] == 'd')                  {                      isCancelled = true;                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  var line = handLines[i];                    if (IsChatLine(line))                  {                      continue;                  }                    if (IsUncalledBetLine(line))                  {                      actions.Add(ParseUncalledBet(line' currentStreet));                      ParseShowDown(handLines' ref actions' i + 1' gameType);                      return FixUncalledBets(actions' handHistory.TotalPot' handHistory.Rake);                  }                    if (line.Contains(" shows ["))                  {                      ParseShowDown(handLines' ref actions' i' GameType.Unknown);                        return FixUncalledBets(actions' handHistory.TotalPot' handHistory.Rake);                  }                    var lastChar = line[line.Length - 1];                    HandAction action;                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          action = ParseActionWithAmount(line' currentStreet);                          if (action != null)                          {                              actions.Add(action);                          }                          continue;                        //theking881 calls $138' and is all in                      //draggstar sits down                      case 'n':                          if (line.FastEndsWith("and is all in"))                          {                              action = ParseActionWithAmount(line.Remove(line.Length - 15)' currentStreet' true);//"' and is all in".Length                              if (action != null)                              {                                  actions.Add(action);                              }                          }                          continue;                        case ')':                          action = ParseWinActionOrStreet(line' ref currentStreet);                          if (action != null)                          {                              actions.Add(action);                          }                          break;                        //jobetzu checks                      //jobetzu folds                      //theking881 mucks                      case 's':                          action = ParseFoldCheckLine(line' currentStreet);                          if (action != null)                          {                              actions.Add(action);                          }                          continue;                        // 02nina20 calls $0.04' and is capped                      case 'd':                          if (line[line.Length - 3] == 'p')                          {                              action = ParseActionWithAmount(line.Remove(line.LastIndexOf('''))' currentStreet);                              if (action != null)                              {                                  actions.Add(action);                              }                          }                          continue;                        //*** SHOW DOWN ***                      //*** SUMMARY ***                      case '*':                          ParseShowDown(handLines' ref actions' i' GameType.Unknown);                            return FixUncalledBets(actions' handHistory.TotalPot' handHistory.Rake);                        //Dealt to FT_Hero [Qh 5c]                      //Postrail shows [Qs Ah]                      case ']':                          if (line.IndexOf(" shows ["' StringComparison.Ordinal) != -1)                          {                              ParseShowDown(handLines' ref actions' i' GameType.Unknown);                              return FixUncalledBets(actions' handHistory.TotalPot' handHistory.Rake);                          }                          continue;                        //Opponent3 has requested TIME                      //jobetzu has 15 seconds left to act                      default:                          continue;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  var line = handLines[i];                    if (IsChatLine(line))                  {                      continue;                  }                    if (IsUncalledBetLine(line))                  {                      actions.Add(ParseUncalledBet(line' currentStreet));                      ParseShowDown(handLines' ref actions' i + 1' gameType);                      return FixUncalledBets(actions' handHistory.TotalPot' handHistory.Rake);                  }                    if (line.Contains(" shows ["))                  {                      ParseShowDown(handLines' ref actions' i' GameType.Unknown);                        return FixUncalledBets(actions' handHistory.TotalPot' handHistory.Rake);                  }                    var lastChar = line[line.Length - 1];                    HandAction action;                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          action = ParseActionWithAmount(line' currentStreet);                          if (action != null)                          {                              actions.Add(action);                          }                          continue;                        //theking881 calls $138' and is all in                      //draggstar sits down                      case 'n':                          if (line.FastEndsWith("and is all in"))                          {                              action = ParseActionWithAmount(line.Remove(line.Length - 15)' currentStreet' true);//"' and is all in".Length                              if (action != null)                              {                                  actions.Add(action);                              }                          }                          continue;                        case ')':                          action = ParseWinActionOrStreet(line' ref currentStreet);                          if (action != null)                          {                              actions.Add(action);                          }                          break;                        //jobetzu checks                      //jobetzu folds                      //theking881 mucks                      case 's':                          action = ParseFoldCheckLine(line' currentStreet);                          if (action != null)                          {                              actions.Add(action);                          }                          continue;                        // 02nina20 calls $0.04' and is capped                      case 'd':                          if (line[line.Length - 3] == 'p')                          {                              action = ParseActionWithAmount(line.Remove(line.LastIndexOf('''))' currentStreet);                              if (action != null)                              {                                  actions.Add(action);                              }                          }                          continue;                        //*** SHOW DOWN ***                      //*** SUMMARY ***                      case '*':                          ParseShowDown(handLines' ref actions' i' GameType.Unknown);                            return FixUncalledBets(actions' handHistory.TotalPot' handHistory.Rake);                        //Dealt to FT_Hero [Qh 5c]                      //Postrail shows [Qs Ah]                      case ']':                          if (line.IndexOf(" shows ["' StringComparison.Ordinal) != -1)                          {                              ParseShowDown(handLines' ref actions' i' GameType.Unknown);                              return FixUncalledBets(actions' handHistory.TotalPot' handHistory.Rake);                          }                          continue;                        //Opponent3 has requested TIME                      //jobetzu has 15 seconds left to act                      default:                          continue;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseShowDown,The following statement contains a magic number: for (int i = lineIndex; i < handLines.Length; i++)              {                  var line = handLines[i];                    if (line.EndsWith(" mucks"))                  {                      actions.Add(new HandAction(line.Remove(line.Length - 6)' HandActionType.MUCKS' 0m' Street.Showdown));                  }                    else if (line.Contains(" wins "))                  {                      int nameEndIndex = -1;                      nameEndIndex = line.IndexOf(" wins the pot ("' StringComparison.Ordinal);                      if (nameEndIndex == -1)                      {                          nameEndIndex = line.IndexOf(" wins pot 1 ("' StringComparison.Ordinal);                      }                        if (nameEndIndex == -1)                      {                          continue;                      }                        string playerName = ObtainPlayerNameFromShowdownLine(handLines' i);                      if (string.IsNullOrWhiteSpace(playerName))                      {                          playerName = line.Remove(nameEndIndex);                      }                        int amountStartIndex = line.IndexOf('('' nameEndIndex) + 1;                      int amountEndString = line.IndexOf(')'' amountStartIndex);                        string amountString = line.Substring(amountStartIndex' amountEndString - amountStartIndex);                      decimal amount = decimal.Parse(amountString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                        actions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                  }                  else if (line.Contains(" shows ["))                  {                      int nameEndIndex = line.IndexOf(" shows ["' StringComparison.Ordinal);                      string playerName = line.Remove(nameEndIndex);                        actions.Add(new HandAction(playerName' HandActionType.SHOW' 0m' Street.Showdown));                  }    #warning duplicate parse winning actions                  //We already parse winning actions' or is this a better way to parse winning actions even though it's slower?                  //                  //else if (line.Contains(" and won "))                  //{                  //    // as it's not absolutely clear what the name is' we grab the name out of the seating list                  //    //    Seat 6: Psipsis showed [Ad 5d] and won ($0.51) with a pair of Aces                  //    //    Seat 6: Psipsis (big blind) showed [Ad 5d] and won ($0.51) with a pair of Aces                  //    // -> Seat 6: Psipsis ($0.85)                  //    string playerName = ObtainPlayerNameFromShowdownLine(handLines' i);                  //    if (string.IsNullOrWhiteSpace(playerName)) continue;                    //    int amountStartIndex = line.IndexOf('('' line.IndexOf(" and won "' StringComparison.Ordinal)) + 1;                  //    int amountEndString = line.IndexOf(')'' amountStartIndex);                    //    string amountString = line.Substring(amountStartIndex' amountEndString - amountStartIndex);                  //    decimal amount = decimal.Parse(amountString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                    //    actions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                    //}                  else if (line.Contains(" collected ("))                  {                      if (actions.Any(a => a.IsWinningsAction)) continue;                      // as it's not absolutely clear what the name is' we grab the name out of the seating list                      // Seat 2: dude6974 (small blind) collected ($0.10)' mucked                      // Seat 7: tatskie100 collected ($3.35)                      string playerName = ObtainPlayerNameFromShowdownLine(handLines' i);                      if (string.IsNullOrWhiteSpace(playerName)) continue;                        int amountStartIndex = line.LastIndexOf('(') + 1;                      int amountEndString = line.IndexOf(')'' amountStartIndex);                        string amountString = line.Substring(amountStartIndex' amountEndString - amountStartIndex);                      decimal amount = decimal.Parse(amountString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                        actions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ObtainPlayerNameFromShowdownLine,The following statement contains a magic number: string seat = line.Substring(line.LastIndexOf("Seat "' StringComparison.Ordinal)' 7);
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ObtainPlayerNameFromShowdownLine,The following statement contains a magic number: for (var k = 0; k <= 10; k++)              {                  if (handLines[k].StartsWith(seat))                  {                      int colonIndex = handLines[k].IndexOf(':'' 5);                      int parenIndex = handLines[k].IndexOf('('' colonIndex + 2);                        return handLines[k].Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ObtainPlayerNameFromShowdownLine,The following statement contains a magic number: for (var k = 0; k <= 10; k++)              {                  if (handLines[k].StartsWith(seat))                  {                      int colonIndex = handLines[k].IndexOf(':'' 5);                      int parenIndex = handLines[k].IndexOf('('' colonIndex + 2);                        return handLines[k].Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ObtainPlayerNameFromShowdownLine,The following statement contains a magic number: for (var k = 0; k <= 10; k++)              {                  if (handLines[k].StartsWith(seat))                  {                      int colonIndex = handLines[k].IndexOf(':'' 5);                      int parenIndex = handLines[k].IndexOf('('' colonIndex + 2);                        return handLines[k].Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ObtainPlayerNameFromShowdownLine,The following statement contains a magic number: for (var k = 0; k <= 10; k++)              {                  if (handLines[k].StartsWith(seat))                  {                      int colonIndex = handLines[k].IndexOf(':'' 5);                      int parenIndex = handLines[k].IndexOf('('' colonIndex + 2);                        return handLines[k].Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ObtainPlayerNameFromShowdownLine,The following statement contains a magic number: for (var k = 0; k <= 10; k++)              {                  if (handLines[k].StartsWith(seat))                  {                      int colonIndex = handLines[k].IndexOf(':'' 5);                      int parenIndex = handLines[k].IndexOf('('' colonIndex + 2);                        return handLines[k].Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseWinActionOrStreet,The following statement contains a magic number: char idChar = line[line.Length - 2];
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseWinAction,The following statement contains a magic number: string playerName = line.Remove(amountStartIndex - 15);
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseStreet,The following statement contains a magic number: char streetId = line[4];
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseUncalledBet,The following statement contains a magic number: const int amountStartIndex = 16;
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseUncalledBet,The following statement contains a magic number: string playerName = line.Substring(amountEndIndex + 13);
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseActionWithAmount,The following statement contains a magic number: char idChar = line[idIndex - 3];
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseActionWithAmount,The following statement contains a magic number: decimal amount = ParseAmount(line' idIndex + 2);
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseActionWithAmount,The following statement contains a magic number: switch (idChar)              {                  //Rene Lacoste bets $20                  case 'e':                      playerName = line.Remove(idIndex - 5);                      actionType = HandActionType.BET;                      break;                    //ElkY calls $10                  case 'l':                      playerName = line.Remove(idIndex - 6);                      actionType = HandActionType.CALL;                      break;                    //Rene Lacoste raises to $20                  case ' ':                      playerName = line.Remove(idIndex - 10);                      actionType = HandActionType.RAISE;                      break;                    //jobetzu adds $30                  case 'd':                      return null;                    default:                      throw new ArgumentException(string.Format("Unhandled IdChar: {0} : Line: {1}"'                          idChar'                          line));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseActionWithAmount,The following statement contains a magic number: switch (idChar)              {                  //Rene Lacoste bets $20                  case 'e':                      playerName = line.Remove(idIndex - 5);                      actionType = HandActionType.BET;                      break;                    //ElkY calls $10                  case 'l':                      playerName = line.Remove(idIndex - 6);                      actionType = HandActionType.CALL;                      break;                    //Rene Lacoste raises to $20                  case ' ':                      playerName = line.Remove(idIndex - 10);                      actionType = HandActionType.RAISE;                      break;                    //jobetzu adds $30                  case 'd':                      return null;                    default:                      throw new ArgumentException(string.Format("Unhandled IdChar: {0} : Line: {1}"'                          idChar'                          line));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseActionWithAmount,The following statement contains a magic number: switch (idChar)              {                  //Rene Lacoste bets $20                  case 'e':                      playerName = line.Remove(idIndex - 5);                      actionType = HandActionType.BET;                      break;                    //ElkY calls $10                  case 'l':                      playerName = line.Remove(idIndex - 6);                      actionType = HandActionType.CALL;                      break;                    //Rene Lacoste raises to $20                  case ' ':                      playerName = line.Remove(idIndex - 10);                      actionType = HandActionType.RAISE;                      break;                    //jobetzu adds $30                  case 'd':                      return null;                    default:                      throw new ArgumentException(string.Format("Unhandled IdChar: {0} : Line: {1}"'                          idChar'                          line));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseFoldCheckLine,The following statement contains a magic number: char actionId = line[line.Length - 4];
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseFoldCheckLine,The following statement contains a magic number: if (actionId == 'o')              {                  string playerName = line.Remove(line.Length - 6);                  return new HandAction(playerName' HandActionType.FOLD' 0m' currentStreet);              }              //ElkY checks              else if (actionId == 'e')              {                  string playerName = line.Remove(line.Length - 7);                  return new HandAction(playerName' HandActionType.CHECK' 0m' currentStreet);              }              //Rene Lacoste mucks              else if (actionId == 'u')              {                  string playerName = line.Remove(line.Length - 6);                  return new HandAction(playerName' HandActionType.MUCKS' 0m' currentStreet);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseFoldCheckLine,The following statement contains a magic number: if (actionId == 'o')              {                  string playerName = line.Remove(line.Length - 6);                  return new HandAction(playerName' HandActionType.FOLD' 0m' currentStreet);              }              //ElkY checks              else if (actionId == 'e')              {                  string playerName = line.Remove(line.Length - 7);                  return new HandAction(playerName' HandActionType.CHECK' 0m' currentStreet);              }              //Rene Lacoste mucks              else if (actionId == 'u')              {                  string playerName = line.Remove(line.Length - 6);                  return new HandAction(playerName' HandActionType.MUCKS' 0m' currentStreet);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseFoldCheckLine,The following statement contains a magic number: if (actionId == 'o')              {                  string playerName = line.Remove(line.Length - 6);                  return new HandAction(playerName' HandActionType.FOLD' 0m' currentStreet);              }              //ElkY checks              else if (actionId == 'e')              {                  string playerName = line.Remove(line.Length - 7);                  return new HandAction(playerName' HandActionType.CHECK' 0m' currentStreet);              }              //Rene Lacoste mucks              else if (actionId == 'u')              {                  string playerName = line.Remove(line.Length - 6);                  return new HandAction(playerName' HandActionType.MUCKS' 0m' currentStreet);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = startIndex; i < handLines.Length; i++)              {                  bool isAllIn = false;                  string playerName;                  decimal amount;                    var line = handLines[i];                    if (IsChatLine(line))                      continue;                    // Ante of $0.01 returned to balr1                  if (line[0] == 'A' && line[5] == 'o')                  {                      var index = line.IndexOf(" returned to "' StringComparison.Ordinal);                      if (index > -1)                      {                          playerName = line.Substring(index + 13);                            line = line.Remove(index);                            amount = ParseAmount(line' line.IndexOf(NumberFormatInfo.CurrencySymbol' StringComparison.Ordinal) + 1);                            actions.Add(new HandAction(playerName' HandActionType.UNCALLED_BET' amount' Street.Preflop));                          continue;                      }                  }                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          // ignore 'bulka adds $1'                          if (line.Contains("adds $"))                              continue;                            break;                        // dude6974 sits down                      // milkman 046 posts the big blind of $0.05' and is all in                                         case 'n':                          if (line[line.Length - 2] == 'i')                          {                              isAllIn = true;                              line = line.Remove(line.LastIndexOf('''));                              break;                          }                          continue;                        //*** HOLE CARDS ***                      case '*':                          if (line[4] == 'H')                          {                              return i + 1;                          }                          return i;                        default:                          continue;                  }                    int idIndex = line.LastIndexOf(' ');                  char idChar = line[idIndex - 2];                    amount = ParseAmount(line' idIndex + 2);                  HandActionType actionType;                    switch (idChar)                  {                      //Rene Lacoste posts the small blind of $5                      //  Rene Lacoste posts the big blind of $5                      //  IiIyMuK posts a dead small blind of $0.02                      case 'o':                          if (line[idIndex - 10] == 'l')                          {                              if (idIndex - 25 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                // dead small blind                              if (line[idIndex - 16] == 'd')                              {                                  actionType = HandActionType.POSTS;                                  playerName = line.Remove(idIndex - 28);//" posts a dead small blind of".Length                                }                              else                              {                                  actionType = HandActionType.SMALL_BLIND;                                  playerName = line.Remove(idIndex - 25);//" posts the small blind of".Length                               }                          }                          else if (line[idIndex - 10] == 'g')                          {                              if (idIndex - 23 < 0)                                  throw new InvalidHandException(string.Join("\r\n"' handLines));                                actionType = HandActionType.BIG_BLIND;                              playerName = line.Remove(idIndex - 23);//" posts the big blind of".Length                              }                          else                          {                              throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                               idChar'                               line));                          }                          break;                        //The button is in seat #3                      case 'a':                          continue;                        //iason07 antes $0.30                      case 'e':                          actionType = HandActionType.ANTE;                          playerName = line.Remove(idIndex - 6);                          break;                        // scrub52 posts $0.05                      case 't':                          actionType = HandActionType.POSTS;                          playerName = line.Remove(idIndex - 6);//" posts".Length                          break;                        default:                          throw new ArgumentException(string.Format("Unhandled idChar: '{0}' Line: {1}"'                              idChar'                              line));                  }                    actions.Add(new HandAction(playerName' actionType' amount' Street.Preflop' isAllIn));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 1; i < 12; i++)              {                  string handLine = handLines[i];                  var sittingOut = false;                    if (handLine.StartsWith("Seat ") == false)                  {                      break;                  }                    if (handLine.EndsWith(")") == false)                  {                      // handline is like Seat 6: ffbigfoot ($0.90)' is sitting out                      handLine = handLine.Substring(0' handLine.Length - 16);                      sittingOut = true;                  }                    //Seat 1: CardBluff ($109.65)                  int colonIndex = handLine.IndexOf(':'' 5);                  int parenIndex = handLine.IndexOf('('' colonIndex + 2);                    int seat = Int32.Parse(handLine.Substring(colonIndex - 2' 2));                  string name = handLine.Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  string stackSizeString = handLine.Substring(parenIndex + 1' handLine.Length - 1 - parenIndex - 1);                  decimal amount = decimal.Parse(stackSizeString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                    playerList.Add(new Player(name' amount' seat)                      {                          IsSittingOut = sittingOut                      });              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 1; i < 12; i++)              {                  string handLine = handLines[i];                  var sittingOut = false;                    if (handLine.StartsWith("Seat ") == false)                  {                      break;                  }                    if (handLine.EndsWith(")") == false)                  {                      // handline is like Seat 6: ffbigfoot ($0.90)' is sitting out                      handLine = handLine.Substring(0' handLine.Length - 16);                      sittingOut = true;                  }                    //Seat 1: CardBluff ($109.65)                  int colonIndex = handLine.IndexOf(':'' 5);                  int parenIndex = handLine.IndexOf('('' colonIndex + 2);                    int seat = Int32.Parse(handLine.Substring(colonIndex - 2' 2));                  string name = handLine.Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  string stackSizeString = handLine.Substring(parenIndex + 1' handLine.Length - 1 - parenIndex - 1);                  decimal amount = decimal.Parse(stackSizeString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                    playerList.Add(new Player(name' amount' seat)                      {                          IsSittingOut = sittingOut                      });              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 1; i < 12; i++)              {                  string handLine = handLines[i];                  var sittingOut = false;                    if (handLine.StartsWith("Seat ") == false)                  {                      break;                  }                    if (handLine.EndsWith(")") == false)                  {                      // handline is like Seat 6: ffbigfoot ($0.90)' is sitting out                      handLine = handLine.Substring(0' handLine.Length - 16);                      sittingOut = true;                  }                    //Seat 1: CardBluff ($109.65)                  int colonIndex = handLine.IndexOf(':'' 5);                  int parenIndex = handLine.IndexOf('('' colonIndex + 2);                    int seat = Int32.Parse(handLine.Substring(colonIndex - 2' 2));                  string name = handLine.Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  string stackSizeString = handLine.Substring(parenIndex + 1' handLine.Length - 1 - parenIndex - 1);                  decimal amount = decimal.Parse(stackSizeString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                    playerList.Add(new Player(name' amount' seat)                      {                          IsSittingOut = sittingOut                      });              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 1; i < 12; i++)              {                  string handLine = handLines[i];                  var sittingOut = false;                    if (handLine.StartsWith("Seat ") == false)                  {                      break;                  }                    if (handLine.EndsWith(")") == false)                  {                      // handline is like Seat 6: ffbigfoot ($0.90)' is sitting out                      handLine = handLine.Substring(0' handLine.Length - 16);                      sittingOut = true;                  }                    //Seat 1: CardBluff ($109.65)                  int colonIndex = handLine.IndexOf(':'' 5);                  int parenIndex = handLine.IndexOf('('' colonIndex + 2);                    int seat = Int32.Parse(handLine.Substring(colonIndex - 2' 2));                  string name = handLine.Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  string stackSizeString = handLine.Substring(parenIndex + 1' handLine.Length - 1 - parenIndex - 1);                  decimal amount = decimal.Parse(stackSizeString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                    playerList.Add(new Player(name' amount' seat)                      {                          IsSittingOut = sittingOut                      });              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 1; i < 12; i++)              {                  string handLine = handLines[i];                  var sittingOut = false;                    if (handLine.StartsWith("Seat ") == false)                  {                      break;                  }                    if (handLine.EndsWith(")") == false)                  {                      // handline is like Seat 6: ffbigfoot ($0.90)' is sitting out                      handLine = handLine.Substring(0' handLine.Length - 16);                      sittingOut = true;                  }                    //Seat 1: CardBluff ($109.65)                  int colonIndex = handLine.IndexOf(':'' 5);                  int parenIndex = handLine.IndexOf('('' colonIndex + 2);                    int seat = Int32.Parse(handLine.Substring(colonIndex - 2' 2));                  string name = handLine.Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  string stackSizeString = handLine.Substring(parenIndex + 1' handLine.Length - 1 - parenIndex - 1);                  decimal amount = decimal.Parse(stackSizeString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                    playerList.Add(new Player(name' amount' seat)                      {                          IsSittingOut = sittingOut                      });              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 1; i < 12; i++)              {                  string handLine = handLines[i];                  var sittingOut = false;                    if (handLine.StartsWith("Seat ") == false)                  {                      break;                  }                    if (handLine.EndsWith(")") == false)                  {                      // handline is like Seat 6: ffbigfoot ($0.90)' is sitting out                      handLine = handLine.Substring(0' handLine.Length - 16);                      sittingOut = true;                  }                    //Seat 1: CardBluff ($109.65)                  int colonIndex = handLine.IndexOf(':'' 5);                  int parenIndex = handLine.IndexOf('('' colonIndex + 2);                    int seat = Int32.Parse(handLine.Substring(colonIndex - 2' 2));                  string name = handLine.Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  string stackSizeString = handLine.Substring(parenIndex + 1' handLine.Length - 1 - parenIndex - 1);                  decimal amount = decimal.Parse(stackSizeString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                    playerList.Add(new Player(name' amount' seat)                      {                          IsSittingOut = sittingOut                      });              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 1; i < 12; i++)              {                  string handLine = handLines[i];                  var sittingOut = false;                    if (handLine.StartsWith("Seat ") == false)                  {                      break;                  }                    if (handLine.EndsWith(")") == false)                  {                      // handline is like Seat 6: ffbigfoot ($0.90)' is sitting out                      handLine = handLine.Substring(0' handLine.Length - 16);                      sittingOut = true;                  }                    //Seat 1: CardBluff ($109.65)                  int colonIndex = handLine.IndexOf(':'' 5);                  int parenIndex = handLine.IndexOf('('' colonIndex + 2);                    int seat = Int32.Parse(handLine.Substring(colonIndex - 2' 2));                  string name = handLine.Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  string stackSizeString = handLine.Substring(parenIndex + 1' handLine.Length - 1 - parenIndex - 1);                  decimal amount = decimal.Parse(stackSizeString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                    playerList.Add(new Player(name' amount' seat)                      {                          IsSittingOut = sittingOut                      });              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 1; i < 12; i++)              {                  string handLine = handLines[i];                  var sittingOut = false;                    if (handLine.StartsWith("Seat ") == false)                  {                      break;                  }                    if (handLine.EndsWith(")") == false)                  {                      // handline is like Seat 6: ffbigfoot ($0.90)' is sitting out                      handLine = handLine.Substring(0' handLine.Length - 16);                      sittingOut = true;                  }                    //Seat 1: CardBluff ($109.65)                  int colonIndex = handLine.IndexOf(':'' 5);                  int parenIndex = handLine.IndexOf('('' colonIndex + 2);                    int seat = Int32.Parse(handLine.Substring(colonIndex - 2' 2));                  string name = handLine.Substring(colonIndex + 2' parenIndex - 1 - colonIndex - 2);                  string stackSizeString = handLine.Substring(parenIndex + 1' handLine.Length - 1 - parenIndex - 1);                  decimal amount = decimal.Parse(stackSizeString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                    playerList.Add(new Player(name' amount' seat)                      {                          IsSittingOut = sittingOut                      });              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: const int FirstPossibleShowActionIndex = 13;
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: if (ShowStartIndex != -1)              {                  for (int lineNumber = ShowStartIndex; lineNumber < handLines.Length; lineNumber++)                  {                      string line = handLines[lineNumber];                        int firstSquareBracket = line.LastIndexOf('[');                        if (firstSquareBracket == -1)                      {                          continue;                      }                        // can show single cards                      if (line[firstSquareBracket + 3] == ']')                      {                          continue;                      }                        int lastSquareBracket = line.LastIndexLoopsBackward(']'' line.Length - 1);                      int colonIndex = line.LastIndexLoopsBackward(':'' lastSquareBracket);                        string playerName;                      //if (isOmahaHiLo)                      //{                      //    seat = line.Substring(5' colonIndex - 5);                      //    playerName = playerList.First(p => p.SeatNumber.Equals(Convert.ToInt32(seat))).PlayerName;                      //}                      //else                      //{                      int playerNameEndIndex = line.IndexOf(" shows"' StringComparison.Ordinal);                      if (playerNameEndIndex == -1)                          break;                        playerName = line.Substring(0' playerNameEndIndex);                      //}                        string cards = line.Substring(firstSquareBracket + 1' lastSquareBracket - (firstSquareBracket + 1));                          playerList[playerName].HoleCards = HoleCards.FromCards(cards);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int lineNumber = handLines.Length - 2; lineNumber >= 0; lineNumber--)              {                  string line = handLines[lineNumber];                  if (line[0] == '*')                  {                      return BoardCards.ForPreflop();                  }                    if (line[0] != 'B')                  {                      continue;                  }                    return ParseBoard(line);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseBoard,The following statement contains a magic number: int firstSquareBracket = 7;
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string line = handLines[i];                  if (line.StartsWith("*** SUMMARY ***"' StringComparison.Ordinal))                  {                      return;                  }                    // Total pot $42.90 | Rake $2.10                              if (line[0] == 'T')                  {                      int lastSpaceIndex = line.LastIndexOf(" "' StringComparison.Ordinal);                      int spaceAfterFirstNumber = line.IndexOf(" "' 11' StringComparison.Ordinal);                        handHistorySummary.Rake =                          decimal.Parse(line.Substring(lastSpaceIndex + 1' line.Length - lastSpaceIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                        handHistorySummary.TotalPot =                          decimal.Parse(line.Substring(10' spaceAfterFirstNumber - 10)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                        return;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string line = handLines[i];                  if (line.StartsWith("*** SUMMARY ***"' StringComparison.Ordinal))                  {                      return;                  }                    // Total pot $42.90 | Rake $2.10                              if (line[0] == 'T')                  {                      int lastSpaceIndex = line.LastIndexOf(" "' StringComparison.Ordinal);                      int spaceAfterFirstNumber = line.IndexOf(" "' 11' StringComparison.Ordinal);                        handHistorySummary.Rake =                          decimal.Parse(line.Substring(lastSpaceIndex + 1' line.Length - lastSpaceIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                        handHistorySummary.TotalPot =                          decimal.Parse(line.Substring(10' spaceAfterFirstNumber - 10)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                        return;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string line = handLines[i];                  if (line.StartsWith("*** SUMMARY ***"' StringComparison.Ordinal))                  {                      return;                  }                    // Total pot $42.90 | Rake $2.10                              if (line[0] == 'T')                  {                      int lastSpaceIndex = line.LastIndexOf(" "' StringComparison.Ordinal);                      int spaceAfterFirstNumber = line.IndexOf(" "' 11' StringComparison.Ordinal);                        handHistorySummary.Rake =                          decimal.Parse(line.Substring(lastSpaceIndex + 1' line.Length - lastSpaceIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                        handHistorySummary.TotalPot =                          decimal.Parse(line.Substring(10' spaceAfterFirstNumber - 10)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo);                        return;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseRunItTwice,The following statement contains a magic number: for (int i = RITScanIndex; i < handLines.Length; i++)              {                  string line = handLines[i];                    if (line == "*** SUMMARY ***")                  {                      break;                  }                  int nameEndIndex = line.IndexOf(" wins pot 2 ("' StringComparison.Ordinal);                  if (nameEndIndex != -1)                  {                      string playerName = line.Remove(nameEndIndex);                        int amountStartIndex = line.IndexOf('('' nameEndIndex) + 2;                      int amountEndString = line.IndexOf(')'' amountStartIndex);                        string amountString = line.Substring(amountStartIndex' amountEndString - amountStartIndex);                      decimal amount = decimal.Parse(amountString' NumberFormatInfo);                        RIT.Actions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,SplitUpMultipleHands,The following statement contains a magic number: return HandSplitRegex.Split(rawHandHistories)                                   .Where(s => string.IsNullOrWhiteSpace(s) == false && s.Length > 30)                                   .Select(s => "<Game hhversion" + s.Trim('\r'' 'n'));
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 2)              {                  return SeatType.FromMaxPlayers(2);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 2)              {                  return SeatType.FromMaxPlayers(2);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 6)              {                  return SeatType.FromMaxPlayers(6);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 6)              {                  return SeatType.FromMaxPlayers(6);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 9)              {                  return SeatType.FromMaxPlayers(9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 9)              {                  return SeatType.FromMaxPlayers(9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: return SeatType.FromMaxPlayers(10);
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,GetPlayerCardsFromHandLines,The following statement contains a magic number: for(int i = 0; i< handLines.Count(); i++)              {                  // if the cards are shown for this player                  if(handLines[i].ToLower().Contains("showcards") && handLines[i].Contains(@"seat="""+playerSeat+@""""))                  {                      // add all cards the player has ( 2 for hold'em / 4 for omaha )                      var cards = "";                      do                      {                          i++;                          handLines[i] = handLines[i].Replace("value=\"10\""' "value=\"T\"");                            cards += handLines[i][13].ToString() + handLines[i][22].ToString();                         } while (!handLines[i+1].Contains("</Action"));                        return HoleCards.FromCards(playerName' cards);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,GetPlayerCardsFromHandLines,The following statement contains a magic number: for(int i = 0; i< handLines.Count(); i++)              {                  // if the cards are shown for this player                  if(handLines[i].ToLower().Contains("showcards") && handLines[i].Contains(@"seat="""+playerSeat+@""""))                  {                      // add all cards the player has ( 2 for hold'em / 4 for omaha )                      var cards = "";                      do                      {                          i++;                          handLines[i] = handLines[i].Replace("value=\"10\""' "value=\"T\"");                            cards += handLines[i][13].ToString() + handLines[i][22].ToString();                         } while (!handLines[i+1].Contains("</Action"));                        return HoleCards.FromCards(playerName' cards);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,GetCardLinesFromHandLines,The following statement contains a magic number: for (int i = 0; i < handLines.Count();i++)              {                  // there will never be more than 5 boardcards                  if (cardLines.Count() == 5) break;                    string actionLine = handLines[i].Trim();                    var actionType = GetActionTypeFromActionLine(actionLine);                    // we need to skip the lines where the players show or muck their cards                  if (actionType.Equals(HandActionType.SHOW) || actionType.Equals(HandActionType.MUCKS))                  {                      do                      {                          i++;                      } while (!handLines[i].Contains("</Action>"));                  }                    if (actionLine.Contains("<Card "))                  {                      cardLines.Add(actionLine);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,IsValidHand,The following statement contains a magic number: if (playerLines.Count() < 2 || playerLines.Count() > 10)              {                  return false;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,IsValidHand,The following statement contains a magic number: if (playerLines.Count() < 2 || playerLines.Count() > 10)              {                  return false;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 0; i < handLines.Length - 2; i++)              {                  string line = handLines[i].TrimStart();                    // skip all non action lines                  if(!line.Contains("<Action"))                  {                      continue;                  }                    string typeString = GetActionTypeString(line);                    // if the Street changes                  if (typeString.StartsWith("deal"' StringComparison.Ordinal))                  {                      currentStreet = GetStreetFromActionTypeString(typeString);                      continue;                  }                    switch (typeString)                  {                      case "showcards":                          int seat = GetPlayerSeatFromActionLine(line);                          string playerName = playerList.First(p => p.SeatNumber == seat).PlayerName;                          actions.Add(new HandAction(playerName' HandActionType.SHOW' Street.Showdown));                          continue;                        case "win":                          actions.AddRange(ParseWinActions(handLines' ref i' playerList));                          continue;                        default:                          break;                  }                    HandAction action = ParseActionFromActionLine(line' currentStreet' playerList' actions);                                     if(action != null && !action.HandActionType.Equals(HandActionType.UNKNOWN) && !action.HandActionType.Equals(HandActionType.SHOW))                  {                      actions.Add(action);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("value=\"10\""' "value=\"T\"");                    boardCards += new Card(handLine[13]' handLine[22]);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("value=\"10\""' "value=\"T\"");                    boardCards += new Card(handLine[13]' handLine[22]);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: var rakeStartIndex = line.LastIndexOf('=') + 2;
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int k = winningsLine; k < handLines.Length - 1; k++)              {                  // leave the loop on </Action>                  if (handLines[k][1] == '/')                  {                      break;                  }                  string amountString = handLines[k].Substring(22' handLines[k].IndexOf('"'' 22) - 22);                  handHistory.TotalPot += decimal.Parse(amountString' provider);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int k = winningsLine; k < handLines.Length - 1; k++)              {                  // leave the loop on </Action>                  if (handLines[k][1] == '/')                  {                      break;                  }                  string amountString = handLines[k].Substring(22' handLines[k].IndexOf('"'' 22) - 22);                  handHistory.TotalPot += decimal.Parse(amountString' provider);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.MicroGaming,MicroGamingFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\MicroGaming\MicroGamingFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int k = winningsLine; k < handLines.Length - 1; k++)              {                  // leave the loop on </Action>                  if (handLines[k][1] == '/')                  {                      break;                  }                  string amountString = handLines[k].Substring(22' handLines[k].IndexOf('"'' 22) - 22);                  handHistory.TotalPot += decimal.Parse(amountString' provider);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDealerPosition,The following statement contains a magic number: string line = handLines[3][0] == 'U' ? handLines[4] : handLines[3];
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDealerPosition,The following statement contains a magic number: string line = handLines[3][0] == 'U' ? handLines[4] : handLines[3];
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDealerPosition,The following statement contains a magic number: string line = handLines[3][0] == 'U' ? handLines[4] : handLines[3];
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: string dateString = handLines[1].Substring(firstColon + 2' handLines[1].Length - firstColon - 2);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: string dateString = handLines[1].Substring(firstColon + 2' handLines[1].Length - firstColon - 2);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int day = Int32.Parse(dateStringSplit[2]);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int hour = Int32.Parse(dateStringSplit[3].Substring(0' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int hour = Int32.Parse(dateStringSplit[3].Substring(0' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int minute = Int32.Parse(dateStringSplit[3].Substring(3' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int minute = Int32.Parse(dateStringSplit[3].Substring(3' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int minute = Int32.Parse(dateStringSplit[3].Substring(3' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int second = Int32.Parse(dateStringSplit[3].Substring(6' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int second = Int32.Parse(dateStringSplit[3].Substring(6' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int second = Int32.Parse(dateStringSplit[3].Substring(6' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int year = Int32.Parse(dateStringSplit[5]);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: string timeZone = dateStringSplit[4];
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: switch (timeZone)              {                  case "GMT":                      return date;                  case "CEST": // Central European Summer Time                      return date.AddHours(-2);                  case "BST": // British Summer TIme                  case "CET":                      return date.AddHours(-1);                  case "PST":                      return date.AddHours(8);                  case "PDT":                      return date.AddHours(7);//http://www.timeanddate.com/time/zones/pdt                  default:                      throw new ParseHandDateException(timeZone' "Unrecognized time-zone");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: switch (timeZone)              {                  case "GMT":                      return date;                  case "CEST": // Central European Summer Time                      return date.AddHours(-2);                  case "BST": // British Summer TIme                  case "CET":                      return date.AddHours(-1);                  case "PST":                      return date.AddHours(8);                  case "PDT":                      return date.AddHours(7);//http://www.timeanddate.com/time/zones/pdt                  default:                      throw new ParseHandDateException(timeZone' "Unrecognized time-zone");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: switch (timeZone)              {                  case "GMT":                      return date;                  case "CEST": // Central European Summer Time                      return date.AddHours(-2);                  case "BST": // British Summer TIme                  case "CET":                      return date.AddHours(-1);                  case "PST":                      return date.AddHours(8);                  case "PDT":                      return date.AddHours(7);//http://www.timeanddate.com/time/zones/pdt                  default:                      throw new ParseHandDateException(timeZone' "Unrecognized time-zone");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string handLine = handLines[i];                    //Rake taken: $0.12                  if (handLine[0] == 'R')                  {                      handHistory.Rake = decimal.Parse(handLine.Substring(12)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                  }                    //Main pot: $1.28 won by cristimanea ($1.20)                  //Side pot 1: $0.70 won by cristimanea ($0.66)                  else if (handLine[1] == 'i' || handLine[0] == 'M')                  {                      int colonIndex = handLine.IndexOf(':');                      int wonIndex = handLine.IndexOf(" won by"' colonIndex' StringComparison.Ordinal);                        handHistory.TotalPot += decimal.Parse(handLine.Substring(colonIndex + 2' wonIndex - colonIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                  }                    // we hit the summary line                  else if (handLine[1] == 'u')                  {                      return;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string handLine = handLines[i];                    //Rake taken: $0.12                  if (handLine[0] == 'R')                  {                      handHistory.Rake = decimal.Parse(handLine.Substring(12)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                  }                    //Main pot: $1.28 won by cristimanea ($1.20)                  //Side pot 1: $0.70 won by cristimanea ($0.66)                  else if (handLine[1] == 'i' || handLine[0] == 'M')                  {                      int colonIndex = handLine.IndexOf(':');                      int wonIndex = handLine.IndexOf(" won by"' colonIndex' StringComparison.Ordinal);                        handHistory.TotalPot += decimal.Parse(handLine.Substring(colonIndex + 2' wonIndex - colonIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                  }                    // we hit the summary line                  else if (handLine[1] == 'u')                  {                      return;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string handLine = handLines[i];                    //Rake taken: $0.12                  if (handLine[0] == 'R')                  {                      handHistory.Rake = decimal.Parse(handLine.Substring(12)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                  }                    //Main pot: $1.28 won by cristimanea ($1.20)                  //Side pot 1: $0.70 won by cristimanea ($0.66)                  else if (handLine[1] == 'i' || handLine[0] == 'M')                  {                      int colonIndex = handLine.IndexOf(':');                      int wonIndex = handLine.IndexOf(" won by"' colonIndex' StringComparison.Ordinal);                        handHistory.TotalPot += decimal.Parse(handLine.Substring(colonIndex + 2' wonIndex - colonIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                  }                    // we hit the summary line                  else if (handLine[1] == 'u')                  {                      return;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandId,The following statement contains a magic number: string handNumber = handLines[0].Substring(indexOfR + 1' handLines[0].Length - indexOfR - 1 - 6);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseTableName,The following statement contains a magic number: int firstParenIndex = handLines[2].IndexOf('(');
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseTableName,The following statement contains a magic number: return handLines[2].Substring(7' firstParenIndex - 8);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseTableName,The following statement contains a magic number: return handLines[2].Substring(7' firstParenIndex - 8);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseTableName,The following statement contains a magic number: return handLines[2].Substring(7' firstParenIndex - 8);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 2)              {                  return SeatType.FromMaxPlayers(2);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 2)              {                  return SeatType.FromMaxPlayers(2);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 6)              {                  return SeatType.FromMaxPlayers(6);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 6)              {                  return SeatType.FromMaxPlayers(6);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 9)              {                  return SeatType.FromMaxPlayers(9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 9)              {                  return SeatType.FromMaxPlayers(9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: return SeatType.FromMaxPlayers(10);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,isHeroHandhistory,The following statement contains a magic number: return handLines[3][0] == 'U';
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseNumberOfPlayers,The following statement contains a magic number: string line = isHeroHandhistory(handLines) ? handLines[5] : handLines[4];
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseNumberOfPlayers,The following statement contains a magic number: string line = isHeroHandhistory(handLines) ? handLines[5] : handLines[4];
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseGameType,The following statement contains a magic number: int parenIndex = handLines[2].IndexOf('(');
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseGameType,The following statement contains a magic number: string substring = handLines[2].Substring(parenIndex + 1' handLines[2].Length - 1 - parenIndex - 1);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseGameType,The following statement contains a magic number: string substring = handLines[2].Substring(parenIndex + 1' handLines[2].Length - 1 - parenIndex - 1);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseGameType,The following statement contains a magic number: string gameType = substring.Substring(bettingType.Length + 1' substring.IndexOf(' '' bettingType.Length + 2) - bettingType.Length - 1);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseGameType,The following statement contains a magic number: throw new UnrecognizedGameTypeException(handLines[2]' "Unrecognized game-type");
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseLimit,The following statement contains a magic number: int currencyIndex = handLines[2].IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseLimit,The following statement contains a magic number: int slashIndex = handLines[2].IndexOf('/'' currencyIndex + 1);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseLimit,The following statement contains a magic number: int commaIndex = handLines[2].IndexOf('''' slashIndex + 1);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseLimit,The following statement contains a magic number: var sbstring = handLines[2].Substring(currencyIndex' slashIndex - currencyIndex);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseLimit,The following statement contains a magic number: decimal bigBlind = decimal.Parse(handLines[2].Substring(slashIndex + 1' commaIndex - slashIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,IsValidHand,The following statement contains a magic number: return handLines[handLines.Length - 1].StartsWith("***** End of hand ") &&                     handLines[0].StartsWith("***** History for hand") &&                     handLines.Count() > 7;
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 6; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ") == false)                  {                      startOfActionsIndex = i;                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ")) // done with actions once we reach the seat line again                  {                      break;                  }                    bool isAllIn = handLine.EndsWith("all in]");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 9);                   }                    if (handLine[0] == '-')                  {                      if (handLine == "---")                      {                          continue;                      }                        // check for a line such as:                      //  --- Dealing flop [3d' 8h' 6d]                      // note: We can have players with - so hence the digit check to check for lines like                      //   ---ich--- raises $21.42 to $22.92 [all in]                       if (handLine[handLine.Length - 1] == ']' &&                          char.IsDigit(handLine[handLine.Length - 2]) == false)                      {                          char streetIdentifierChar = handLine[12];                          switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }                          }                                                                              }                    //Dealing line may be "Dealing pocket cards"                  //or "Dealing to {PlayerName}: [ Xy' Xy ]"                  if (currentStreet == Street.Preflop &&                      handLine.StartsWith("Dealing"))                  {                      continue;                  }                    if (handLine[handLine.Length - 1] == ':') // check for Summary: line                  {                      currentStreet = Street.Showdown;                  }                    if (currentStreet == Street.Showdown)                  {                      // Main pot: $2.25 won by zatli74 ($2.14)                      // Main pot: $710.00 won by alikator21 ($354.50)' McCall901 ($354.50)                      if (handLine.StartsWith("Main pot:"))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS' amount' 0));                          }                      }                      // Side pot 1: $12.26 won by iplaymybest ($11.65)                      // Side pot 2: $11.10 won by zatli74 ($5.20)' Hurtl ($5.20)                      if (handLine.StartsWith("Side pot "))                      {                          var nameStart = handLine.IndexOf(" won by"' StringComparison.Ordinal) + 7;                          var splitted = handLine.Substring(nameStart).Split(''');                            var potNumber = Int32.Parse(handLine[9].ToString());                          foreach (var winner in splitted)                          {                              int openParenIndex = winner.LastIndexOf('(');                              decimal amount = decimal.Parse(winner.Substring(openParenIndex + 1' winner.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string playerName = winner.Substring(1' openParenIndex - 2);                                handActions.Add(new WinningsAction(playerName' HandActionType.WINS_SIDE_POT' amount' potNumber));                          }                        }                        continue;                  }                    if (handLine[handLine.Length - 1] == ')' && currentStreet != Street.Showdown)                  {                      // small-blind & big-blind lines ex:                      //  GlassILass posts small blind ($0.25)                      //  EvilJihnny99 posts big blind ($0.25)                      //  19kb72 posts big blind ($6.50) [all in]                        int openParenIndex = handLine.LastIndexOf('(');                      decimal amount = decimal.Parse(handLine.Substring(openParenIndex + 1' handLine.Length - openParenIndex - 2)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        char blindIdentifier = handLine[openParenIndex - 10];                      if (blindIdentifier == 'b') // big blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 17);                          handActions.Add(new HandAction(playerName' HandActionType.BIG_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'a')  // small-blind                      {                          string playerName = handLine.Substring(0' openParenIndex - 19);                          handActions.Add(new HandAction(playerName' HandActionType.SMALL_BLIND' amount' Street.Preflop));                          continue;                      }                      else if (blindIdentifier == 'e') // posts - dead                      {                          string playerName = handLine.Substring(0' openParenIndex - 18);                          handActions.Add(new HandAction(playerName' HandActionType.POSTS' amount' Street.Preflop));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          string playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          string playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      //Old format                      //{playername} calls $18.00                        //New format                       //{playername} calls $13                        int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' StringComparison.Ordinal);                        int valueEndIndex = handLine.IndexOf(' '' currencyIndex);                      if (valueEndIndex == -1)                      {                          valueEndIndex = handLine.Length;                      }                        char actionIdentifier = handLine[currencyIndex - 3];                        var amountstr = handLine.Substring(currencyIndex' valueEndIndex - currencyIndex);                      string playerName;                      decimal amount = decimal.Parse(amountstr' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }                      continue;                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);          }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: int StartLine = isHeroHandhistory(handLines) ? 6 : 5;
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: int StartLine = isHeroHandhistory(handLines) ? 6 : 5;
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < numPlayers; i++)              {                  string handLine = handLines[StartLine + i];                                    int colonIndex = handLine.IndexOf(':');                  int parenIndex = handLine.IndexOf('(');                    string name = handLine.Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                  int seatNumber = Int32.Parse(handLine.Substring(5' colonIndex - 5));                  string amount = (handLine.Substring(parenIndex + 1' handLine.Length - parenIndex - 2));                    playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < numPlayers; i++)              {                  string handLine = handLines[StartLine + i];                                    int colonIndex = handLine.IndexOf(':');                  int parenIndex = handLine.IndexOf('(');                    string name = handLine.Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                  int seatNumber = Int32.Parse(handLine.Substring(5' colonIndex - 5));                  string amount = (handLine.Substring(parenIndex + 1' handLine.Length - parenIndex - 2));                    playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < numPlayers; i++)              {                  string handLine = handLines[StartLine + i];                                    int colonIndex = handLine.IndexOf(':');                  int parenIndex = handLine.IndexOf('(');                    string name = handLine.Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                  int seatNumber = Int32.Parse(handLine.Substring(5' colonIndex - 5));                  string amount = (handLine.Substring(parenIndex + 1' handLine.Length - parenIndex - 2));                    playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < numPlayers; i++)              {                  string handLine = handLines[StartLine + i];                                    int colonIndex = handLine.IndexOf(':');                  int parenIndex = handLine.IndexOf('(');                    string name = handLine.Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                  int seatNumber = Int32.Parse(handLine.Substring(5' colonIndex - 5));                  string amount = (handLine.Substring(parenIndex + 1' handLine.Length - parenIndex - 2));                    playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < numPlayers; i++)              {                  string handLine = handLines[StartLine + i];                                    int colonIndex = handLine.IndexOf(':');                  int parenIndex = handLine.IndexOf('(');                    string name = handLine.Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                  int seatNumber = Int32.Parse(handLine.Substring(5' colonIndex - 5));                  string amount = (handLine.Substring(parenIndex + 1' handLine.Length - parenIndex - 2));                    playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 2; i >= 0; i--)              {                  // Loop backward looking for lines like:                  //  Seat 4: mr dark hor ($37.87)' net: -$15.25' [Ts' 3s]                    string handLine = handLines[i];                    if (handLine.StartsWith("Seat") == false)                  {                      break;                  }                    if (handLine.EndsWith("]") == false)                  {                      continue;                  }                    int colonIndex = handLine.IndexOf(':');                  int parenIndex = handLine.IndexOf('(');                  string name = handLine.Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                    int openSquareIdex = handLine.LastIndexOf('[');                  string holeCards = handLine.Substring(openSquareIdex + 1' handLine.Length - openSquareIdex - 2);                    Player player = playerList.First(p => p.PlayerName.Equals(name));                  player.HoleCards = HoleCards.FromCards(holeCards.Replace(" "' "").Replace("'"' ""));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 2; i >= 0; i--)              {                  // Loop backward looking for lines like:                  //  Seat 4: mr dark hor ($37.87)' net: -$15.25' [Ts' 3s]                    string handLine = handLines[i];                    if (handLine.StartsWith("Seat") == false)                  {                      break;                  }                    if (handLine.EndsWith("]") == false)                  {                      continue;                  }                    int colonIndex = handLine.IndexOf(':');                  int parenIndex = handLine.IndexOf('(');                  string name = handLine.Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                    int openSquareIdex = handLine.LastIndexOf('[');                  string holeCards = handLine.Substring(openSquareIdex + 1' handLine.Length - openSquareIdex - 2);                    Player player = playerList.First(p => p.PlayerName.Equals(name));                  player.HoleCards = HoleCards.FromCards(holeCards.Replace(" "' "").Replace("'"' ""));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 2; i >= 0; i--)              {                  // Loop backward looking for lines like:                  //  Seat 4: mr dark hor ($37.87)' net: -$15.25' [Ts' 3s]                    string handLine = handLines[i];                    if (handLine.StartsWith("Seat") == false)                  {                      break;                  }                    if (handLine.EndsWith("]") == false)                  {                      continue;                  }                    int colonIndex = handLine.IndexOf(':');                  int parenIndex = handLine.IndexOf('(');                  string name = handLine.Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                    int openSquareIdex = handLine.LastIndexOf('[');                  string holeCards = handLine.Substring(openSquareIdex + 1' handLine.Length - openSquareIdex - 2);                    Player player = playerList.First(p => p.PlayerName.Equals(name));                  player.HoleCards = HoleCards.FromCards(holeCards.Replace(" "' "").Replace("'"' ""));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - 2; i >= 0; i--)              {                  // Loop backward looking for lines like:                  //  Seat 4: mr dark hor ($37.87)' net: -$15.25' [Ts' 3s]                    string handLine = handLines[i];                    if (handLine.StartsWith("Seat") == false)                  {                      break;                  }                    if (handLine.EndsWith("]") == false)                  {                      continue;                  }                    int colonIndex = handLine.IndexOf(':');                  int parenIndex = handLine.IndexOf('(');                  string name = handLine.Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                    int openSquareIdex = handLine.LastIndexOf('[');                  string holeCards = handLine.Substring(openSquareIdex + 1' handLine.Length - openSquareIdex - 2);                    Player player = playerList.First(p => p.PlayerName.Equals(name));                  player.HoleCards = HoleCards.FromCards(holeCards.Replace(" "' "").Replace("'"' ""));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 4; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("---") == false ||                      handLines.Length == 3 ||                      handLine.EndsWith("]") == false)                  {                      continue;                                      }                    int firstSquare = handLine.LastIndexOf('[');                  boardCards += handLine.Substring(firstSquare + 1' handLine.Length - firstSquare - 2);                  }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 4; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("---") == false ||                      handLines.Length == 3 ||                      handLine.EndsWith("]") == false)                  {                      continue;                                      }                    int firstSquare = handLine.LastIndexOf('[');                  boardCards += handLine.Substring(firstSquare + 1' handLine.Length - firstSquare - 2);                  }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 4; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("---") == false ||                      handLines.Length == 3 ||                      handLine.EndsWith("]") == false)                  {                      continue;                                      }                    int firstSquare = handLine.LastIndexOf('[');                  boardCards += handLine.Substring(firstSquare + 1' handLine.Length - firstSquare - 2);                  }
Magic Number,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHeroName,The following statement contains a magic number: string line = handlines[3];
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetSeatNumberFromPlayerLine,The following statement contains a magic number: int seatOffset = playerLine.IndexOf(" s") + 7;
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,IsPlayerLineDealer,The following statement contains a magic number: int dealerValue = Int32.Parse(" " + playerLine[dealerOffset + 9]);
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetStackFromPlayerLine,The following statement contains a magic number: int stackStartPos = playerLine.IndexOf(" c") + 8;
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetWinningsFromPlayerLine,The following statement contains a magic number: int stackStartPos = playerLine.IndexOf(" w") + 6;
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetNameFromPlayerLine,The following statement contains a magic number: int nameStartPos = playerLine.IndexOf(" n") + 7;
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,SplitUpMultipleHands,The following statement contains a magic number: if (rawHandHistories.IndexOf("<session") == rawHandHistories.LastIndexOf("<session"))              {                  //We are case 1 - convert to case 2                    int endOfGeneralInfoIndex = rawHandHistories.IndexOf("</general>");                    if (endOfGeneralInfoIndex == -1)                  {                      // log the first 1000 chars of the file' so we can at least guess what's the problem                      logger.Fatal("IPokerFastParserImpl.SplitUpMultipleHands(): Encountered a weird file\r\n{0}"' rawHandHistories.Substring(0'1000));                  }                    string generalInfoString = rawHandHistories.Substring(0' endOfGeneralInfoIndex + 10);                    MatchCollection gameMatches = GameGroupRegex.Matches(rawHandHistories' endOfGeneralInfoIndex + 9);                  foreach (Match gameMatch in gameMatches)                  {                      string fullGameString = generalInfoString + "\r\n" + gameMatch.Value + "\r\n</session>";                      yield return fullGameString;                  }              }              else              {                  //We are case 2                  MatchCollection matches = SessionGroupRegex.Matches(rawHandHistories);                    foreach (Match match in matches)                  {                      yield return match.Value;                  }                              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,SplitUpMultipleHands,The following statement contains a magic number: if (rawHandHistories.IndexOf("<session") == rawHandHistories.LastIndexOf("<session"))              {                  //We are case 1 - convert to case 2                    int endOfGeneralInfoIndex = rawHandHistories.IndexOf("</general>");                    if (endOfGeneralInfoIndex == -1)                  {                      // log the first 1000 chars of the file' so we can at least guess what's the problem                      logger.Fatal("IPokerFastParserImpl.SplitUpMultipleHands(): Encountered a weird file\r\n{0}"' rawHandHistories.Substring(0'1000));                  }                    string generalInfoString = rawHandHistories.Substring(0' endOfGeneralInfoIndex + 10);                    MatchCollection gameMatches = GameGroupRegex.Matches(rawHandHistories' endOfGeneralInfoIndex + 9);                  foreach (Match gameMatch in gameMatches)                  {                      string fullGameString = generalInfoString + "\r\n" + gameMatch.Value + "\r\n</session>";                      yield return fullGameString;                  }              }              else              {                  //We are case 2                  MatchCollection matches = SessionGroupRegex.Matches(rawHandHistories);                    foreach (Match match in matches)                  {                      yield return match.Value;                  }                              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,SplitUpMultipleHands,The following statement contains a magic number: if (rawHandHistories.IndexOf("<session") == rawHandHistories.LastIndexOf("<session"))              {                  //We are case 1 - convert to case 2                    int endOfGeneralInfoIndex = rawHandHistories.IndexOf("</general>");                    if (endOfGeneralInfoIndex == -1)                  {                      // log the first 1000 chars of the file' so we can at least guess what's the problem                      logger.Fatal("IPokerFastParserImpl.SplitUpMultipleHands(): Encountered a weird file\r\n{0}"' rawHandHistories.Substring(0'1000));                  }                    string generalInfoString = rawHandHistories.Substring(0' endOfGeneralInfoIndex + 10);                    MatchCollection gameMatches = GameGroupRegex.Matches(rawHandHistories' endOfGeneralInfoIndex + 9);                  foreach (Match gameMatch in gameMatches)                  {                      string fullGameString = generalInfoString + "\r\n" + gameMatch.Value + "\r\n</session>";                      yield return fullGameString;                  }              }              else              {                  //We are case 2                  MatchCollection matches = SessionGroupRegex.Matches(rawHandHistories);                    foreach (Match match in matches)                  {                      yield return match.Value;                  }                              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 2)              {                  return SeatType.FromMaxPlayers(2);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 2)              {                  return SeatType.FromMaxPlayers(2);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 6)              {                  return SeatType.FromMaxPlayers(6);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 6)              {                  return SeatType.FromMaxPlayers(6);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 9)              {                  return SeatType.FromMaxPlayers(9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 9)              {                  return SeatType.FromMaxPlayers(9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: return SeatType.FromMaxPlayers(10);
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetGameTypeLineFromHandLines,The following statement contains a magic number: return handLines[3];
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetTableNameLineFromHandLines,The following statement contains a magic number: return handLines[4];
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetStartDateFromHandLines,The following statement contains a magic number: for(int i=0; i<= handLines.Count(); i++)              {                  if(handLines[i].Contains("gamecode=\""))                  {                      return handLines[i + 2];                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetStartDateFromHandLines,The following statement contains a magic number: return handLines[8];
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetFirstPlayerIndex,The following statement contains a magic number: for (int i = 18; i < handLines.Length; i++)              {                  if (handLines[i][1] == 'p')                  {                      return i + 1;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetCardLinesFromHandLines,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  string handLine = handLines[i];                  handLine = handLine.TrimStart();                    //If we don't have these letters at these positions' we're not a hand line                  if (handLine[1] != 'c' || handLine[7] != 't')                  {                      continue;                  }                    cardLines.Add(handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: char gameTypeChar = gameTypeLine[10];
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: char holdemTypeChar = gameTypeLine[17];
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetCurrencyTagValue,The following statement contains a magic number: for (int i = 0; i < 11; i++)              {                  string handline = handLines[i];                  if (handline[1] == 'c' && handline[2] == 'u')                  {                      int endIndex = handline.IndexOf('<'' 10);                      return handline.Substring(10' endIndex - 10);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetCurrencyTagValue,The following statement contains a magic number: for (int i = 0; i < 11; i++)              {                  string handline = handLines[i];                  if (handline[1] == 'c' && handline[2] == 'u')                  {                      int endIndex = handline.IndexOf('<'' 10);                      return handline.Substring(10' endIndex - 10);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetCurrencyTagValue,The following statement contains a magic number: for (int i = 0; i < 11; i++)              {                  string handline = handLines[i];                  if (handline[1] == 'c' && handline[2] == 'u')                  {                      int endIndex = handline.IndexOf('<'' 10);                      return handline.Substring(10' endIndex - 10);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetCurrencyTagValue,The following statement contains a magic number: for (int i = 0; i < 11; i++)              {                  string handline = handLines[i];                  if (handline[1] == 'c' && handline[2] == 'u')                  {                      int endIndex = handline.IndexOf('<'' 10);                      return handline.Substring(10' endIndex - 10);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetCurrencyTagValue,The following statement contains a magic number: for (int i = 0; i < 11; i++)              {                  string handline = handLines[i];                  if (handline[1] == 'c' && handline[2] == 'u')                  {                      int endIndex = handline.IndexOf('<'' 10);                      return handline.Substring(10' endIndex - 10);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,IsValidHand,The following statement contains a magic number: if (playerLines.Count() < 2 || playerLines.Count() > 10)              {                  return false;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,IsValidHand,The following statement contains a magic number: if (playerLines.Count() < 2 || playerLines.Count() > 10)              {                  return false;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: int offset =  23;
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: int startRow = offset + playerLines.Length + 2;
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startRow; i < handLines.Length - 2; i++)              {                  string handLine = handLines[i].TrimStart();                    //If we are starting a new round' update the current street                   if (handLine[1] == 'r')                  {                      int roundNumber = GetRoundNumberFromLine(handLine);                      switch (roundNumber)                      {                          case 0:                          case 1:                              currentStreet = Street.Preflop;                              break;                          case 2:                              currentStreet = Street.Flop;                              break;                          case 3:                              currentStreet = Street.Turn;                              break;                          case 4:                              currentStreet = Street.River;                              break;                          default:                              throw new Exception("Encountered unknown round number " + roundNumber);                      }                  }                  //If we're an action' parse the action and act accordingly                  else if (handLine[1] == 'a')                  {                      HandAction action = GetHandActionFromActionLine(handLine' currentStreet);                                         actions.Add(action);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startRow; i < handLines.Length - 2; i++)              {                  string handLine = handLines[i].TrimStart();                    //If we are starting a new round' update the current street                   if (handLine[1] == 'r')                  {                      int roundNumber = GetRoundNumberFromLine(handLine);                      switch (roundNumber)                      {                          case 0:                          case 1:                              currentStreet = Street.Preflop;                              break;                          case 2:                              currentStreet = Street.Flop;                              break;                          case 3:                              currentStreet = Street.Turn;                              break;                          case 4:                              currentStreet = Street.River;                              break;                          default:                              throw new Exception("Encountered unknown round number " + roundNumber);                      }                  }                  //If we're an action' parse the action and act accordingly                  else if (handLine[1] == 'a')                  {                      HandAction action = GetHandActionFromActionLine(handLine' currentStreet);                                         actions.Add(action);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startRow; i < handLines.Length - 2; i++)              {                  string handLine = handLines[i].TrimStart();                    //If we are starting a new round' update the current street                   if (handLine[1] == 'r')                  {                      int roundNumber = GetRoundNumberFromLine(handLine);                      switch (roundNumber)                      {                          case 0:                          case 1:                              currentStreet = Street.Preflop;                              break;                          case 2:                              currentStreet = Street.Flop;                              break;                          case 3:                              currentStreet = Street.Turn;                              break;                          case 4:                              currentStreet = Street.River;                              break;                          default:                              throw new Exception("Encountered unknown round number " + roundNumber);                      }                  }                  //If we're an action' parse the action and act accordingly                  else if (handLine[1] == 'a')                  {                      HandAction action = GetHandActionFromActionLine(handLine' currentStreet);                                         actions.Add(action);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startRow; i < handLines.Length - 2; i++)              {                  string handLine = handLines[i].TrimStart();                    //If we are starting a new round' update the current street                   if (handLine[1] == 'r')                  {                      int roundNumber = GetRoundNumberFromLine(handLine);                      switch (roundNumber)                      {                          case 0:                          case 1:                              currentStreet = Street.Preflop;                              break;                          case 2:                              currentStreet = Street.Flop;                              break;                          case 3:                              currentStreet = Street.Turn;                              break;                          case 4:                              currentStreet = Street.River;                              break;                          default:                              throw new Exception("Encountered unknown round number " + roundNumber);                      }                  }                  //If we're an action' parse the action and act accordingly                  else if (handLine[1] == 'a')                  {                      HandAction action = GetHandActionFromActionLine(handLine' currentStreet);                                         actions.Add(action);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetWinningAndShowCardActions,The following statement contains a magic number: int actionNumber = Int32.MaxValue - 100;
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetHandActionFromActionLine,The following statement contains a magic number: switch (actionTypeNumber)              {                  case 0:                                      actionType = HandActionType.FOLD;                      break;                  case 1:                                       actionType = HandActionType.SMALL_BLIND;                      break;                  case 2:                      actionType = HandActionType.BIG_BLIND;                      break;                  case 3:                                       actionType = HandActionType.CALL;                      break;                  case 4:                                       actionType = HandActionType.CHECK;                      break;                  case 5:                      actionType = HandActionType.BET;                      break;                  case 6://Both are all-ins but don't know the difference between them                  case 7:                      return new AllInAction(actionPlayerName' value' street' false' actionNumber);                  case 8: //Case 8 is when a player sits out at the beginning of a hand                   case 9: //Case 9 is when a blind isn't posted - can be treated as sitting out                      actionType = HandActionType.SITTING_OUT;                      break;                  case 15:                      actionType = HandActionType.ANTE;                      break;                  case 23:                                       actionType = HandActionType.RAISE;                      break;                  default:                      throw new Exception(string.Format("Encountered unknown Action Type: {0} w/ line \r\n{1}"' actionTypeNumber' handLine));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetHandActionFromActionLine,The following statement contains a magic number: switch (actionTypeNumber)              {                  case 0:                                      actionType = HandActionType.FOLD;                      break;                  case 1:                                       actionType = HandActionType.SMALL_BLIND;                      break;                  case 2:                      actionType = HandActionType.BIG_BLIND;                      break;                  case 3:                                       actionType = HandActionType.CALL;                      break;                  case 4:                                       actionType = HandActionType.CHECK;                      break;                  case 5:                      actionType = HandActionType.BET;                      break;                  case 6://Both are all-ins but don't know the difference between them                  case 7:                      return new AllInAction(actionPlayerName' value' street' false' actionNumber);                  case 8: //Case 8 is when a player sits out at the beginning of a hand                   case 9: //Case 9 is when a blind isn't posted - can be treated as sitting out                      actionType = HandActionType.SITTING_OUT;                      break;                  case 15:                      actionType = HandActionType.ANTE;                      break;                  case 23:                                       actionType = HandActionType.RAISE;                      break;                  default:                      throw new Exception(string.Format("Encountered unknown Action Type: {0} w/ line \r\n{1}"' actionTypeNumber' handLine));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetHandActionFromActionLine,The following statement contains a magic number: switch (actionTypeNumber)              {                  case 0:                                      actionType = HandActionType.FOLD;                      break;                  case 1:                                       actionType = HandActionType.SMALL_BLIND;                      break;                  case 2:                      actionType = HandActionType.BIG_BLIND;                      break;                  case 3:                                       actionType = HandActionType.CALL;                      break;                  case 4:                                       actionType = HandActionType.CHECK;                      break;                  case 5:                      actionType = HandActionType.BET;                      break;                  case 6://Both are all-ins but don't know the difference between them                  case 7:                      return new AllInAction(actionPlayerName' value' street' false' actionNumber);                  case 8: //Case 8 is when a player sits out at the beginning of a hand                   case 9: //Case 9 is when a blind isn't posted - can be treated as sitting out                      actionType = HandActionType.SITTING_OUT;                      break;                  case 15:                      actionType = HandActionType.ANTE;                      break;                  case 23:                                       actionType = HandActionType.RAISE;                      break;                  default:                      throw new Exception(string.Format("Encountered unknown Action Type: {0} w/ line \r\n{1}"' actionTypeNumber' handLine));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetHandActionFromActionLine,The following statement contains a magic number: switch (actionTypeNumber)              {                  case 0:                                      actionType = HandActionType.FOLD;                      break;                  case 1:                                       actionType = HandActionType.SMALL_BLIND;                      break;                  case 2:                      actionType = HandActionType.BIG_BLIND;                      break;                  case 3:                                       actionType = HandActionType.CALL;                      break;                  case 4:                                       actionType = HandActionType.CHECK;                      break;                  case 5:                      actionType = HandActionType.BET;                      break;                  case 6://Both are all-ins but don't know the difference between them                  case 7:                      return new AllInAction(actionPlayerName' value' street' false' actionNumber);                  case 8: //Case 8 is when a player sits out at the beginning of a hand                   case 9: //Case 9 is when a blind isn't posted - can be treated as sitting out                      actionType = HandActionType.SITTING_OUT;                      break;                  case 15:                      actionType = HandActionType.ANTE;                      break;                  case 23:                                       actionType = HandActionType.RAISE;                      break;                  default:                      throw new Exception(string.Format("Encountered unknown Action Type: {0} w/ line \r\n{1}"' actionTypeNumber' handLine));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetHandActionFromActionLine,The following statement contains a magic number: switch (actionTypeNumber)              {                  case 0:                                      actionType = HandActionType.FOLD;                      break;                  case 1:                                       actionType = HandActionType.SMALL_BLIND;                      break;                  case 2:                      actionType = HandActionType.BIG_BLIND;                      break;                  case 3:                                       actionType = HandActionType.CALL;                      break;                  case 4:                                       actionType = HandActionType.CHECK;                      break;                  case 5:                      actionType = HandActionType.BET;                      break;                  case 6://Both are all-ins but don't know the difference between them                  case 7:                      return new AllInAction(actionPlayerName' value' street' false' actionNumber);                  case 8: //Case 8 is when a player sits out at the beginning of a hand                   case 9: //Case 9 is when a blind isn't posted - can be treated as sitting out                      actionType = HandActionType.SITTING_OUT;                      break;                  case 15:                      actionType = HandActionType.ANTE;                      break;                  case 23:                                       actionType = HandActionType.RAISE;                      break;                  default:                      throw new Exception(string.Format("Encountered unknown Action Type: {0} w/ line \r\n{1}"' actionTypeNumber' handLine));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetHandActionFromActionLine,The following statement contains a magic number: switch (actionTypeNumber)              {                  case 0:                                      actionType = HandActionType.FOLD;                      break;                  case 1:                                       actionType = HandActionType.SMALL_BLIND;                      break;                  case 2:                      actionType = HandActionType.BIG_BLIND;                      break;                  case 3:                                       actionType = HandActionType.CALL;                      break;                  case 4:                                       actionType = HandActionType.CHECK;                      break;                  case 5:                      actionType = HandActionType.BET;                      break;                  case 6://Both are all-ins but don't know the difference between them                  case 7:                      return new AllInAction(actionPlayerName' value' street' false' actionNumber);                  case 8: //Case 8 is when a player sits out at the beginning of a hand                   case 9: //Case 9 is when a blind isn't posted - can be treated as sitting out                      actionType = HandActionType.SITTING_OUT;                      break;                  case 15:                      actionType = HandActionType.ANTE;                      break;                  case 23:                                       actionType = HandActionType.RAISE;                      break;                  default:                      throw new Exception(string.Format("Encountered unknown Action Type: {0} w/ line \r\n{1}"' actionTypeNumber' handLine));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetHandActionFromActionLine,The following statement contains a magic number: switch (actionTypeNumber)              {                  case 0:                                      actionType = HandActionType.FOLD;                      break;                  case 1:                                       actionType = HandActionType.SMALL_BLIND;                      break;                  case 2:                      actionType = HandActionType.BIG_BLIND;                      break;                  case 3:                                       actionType = HandActionType.CALL;                      break;                  case 4:                                       actionType = HandActionType.CHECK;                      break;                  case 5:                      actionType = HandActionType.BET;                      break;                  case 6://Both are all-ins but don't know the difference between them                  case 7:                      return new AllInAction(actionPlayerName' value' street' false' actionNumber);                  case 8: //Case 8 is when a player sits out at the beginning of a hand                   case 9: //Case 9 is when a blind isn't posted - can be treated as sitting out                      actionType = HandActionType.SITTING_OUT;                      break;                  case 15:                      actionType = HandActionType.ANTE;                      break;                  case 23:                                       actionType = HandActionType.RAISE;                      break;                  default:                      throw new Exception(string.Format("Encountered unknown Action Type: {0} w/ line \r\n{1}"' actionTypeNumber' handLine));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetHandActionFromActionLine,The following statement contains a magic number: switch (actionTypeNumber)              {                  case 0:                                      actionType = HandActionType.FOLD;                      break;                  case 1:                                       actionType = HandActionType.SMALL_BLIND;                      break;                  case 2:                      actionType = HandActionType.BIG_BLIND;                      break;                  case 3:                                       actionType = HandActionType.CALL;                      break;                  case 4:                                       actionType = HandActionType.CHECK;                      break;                  case 5:                      actionType = HandActionType.BET;                      break;                  case 6://Both are all-ins but don't know the difference between them                  case 7:                      return new AllInAction(actionPlayerName' value' street' false' actionNumber);                  case 8: //Case 8 is when a player sits out at the beginning of a hand                   case 9: //Case 9 is when a blind isn't posted - can be treated as sitting out                      actionType = HandActionType.SITTING_OUT;                      break;                  case 15:                      actionType = HandActionType.ANTE;                      break;                  case 23:                                       actionType = HandActionType.RAISE;                      break;                  default:                      throw new Exception(string.Format("Encountered unknown Action Type: {0} w/ line \r\n{1}"' actionTypeNumber' handLine));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetHandActionFromActionLine,The following statement contains a magic number: switch (actionTypeNumber)              {                  case 0:                                      actionType = HandActionType.FOLD;                      break;                  case 1:                                       actionType = HandActionType.SMALL_BLIND;                      break;                  case 2:                      actionType = HandActionType.BIG_BLIND;                      break;                  case 3:                                       actionType = HandActionType.CALL;                      break;                  case 4:                                       actionType = HandActionType.CHECK;                      break;                  case 5:                      actionType = HandActionType.BET;                      break;                  case 6://Both are all-ins but don't know the difference between them                  case 7:                      return new AllInAction(actionPlayerName' value' street' false' actionNumber);                  case 8: //Case 8 is when a player sits out at the beginning of a hand                   case 9: //Case 9 is when a blind isn't posted - can be treated as sitting out                      actionType = HandActionType.SITTING_OUT;                      break;                  case 15:                      actionType = HandActionType.ANTE;                      break;                  case 23:                                       actionType = HandActionType.RAISE;                      break;                  default:                      throw new Exception(string.Format("Encountered unknown Action Type: {0} w/ line \r\n{1}"' actionTypeNumber' handLine));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetHandActionFromActionLine,The following statement contains a magic number: switch (actionTypeNumber)              {                  case 0:                                      actionType = HandActionType.FOLD;                      break;                  case 1:                                       actionType = HandActionType.SMALL_BLIND;                      break;                  case 2:                      actionType = HandActionType.BIG_BLIND;                      break;                  case 3:                                       actionType = HandActionType.CALL;                      break;                  case 4:                                       actionType = HandActionType.CHECK;                      break;                  case 5:                      actionType = HandActionType.BET;                      break;                  case 6://Both are all-ins but don't know the difference between them                  case 7:                      return new AllInAction(actionPlayerName' value' street' false' actionNumber);                  case 8: //Case 8 is when a player sits out at the beginning of a hand                   case 9: //Case 9 is when a blind isn't posted - can be treated as sitting out                      actionType = HandActionType.SITTING_OUT;                      break;                  case 15:                      actionType = HandActionType.ANTE;                      break;                  case 23:                                       actionType = HandActionType.RAISE;                      break;                  default:                      throw new Exception(string.Format("Encountered unknown Action Type: {0} w/ line \r\n{1}"' actionTypeNumber' handLine));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetRoundNumberFromLine,The following statement contains a magic number: int startPos = handLine.IndexOf(" n") + 5;
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetActionNumberFromActionLine,The following statement contains a magic number: int actionStartPos = actionLine.IndexOf(" n") + 5;
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetPlayerFromActionLine,The following statement contains a magic number: int nameStartPos = actionLine.IndexOf(" p") + 9;
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetValueFromActionLine,The following statement contains a magic number: int startPos = actionLine.IndexOf(" s") + 6;
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,GetActionTypeFromActionLine,The following statement contains a magic number: int actionStartPos = actionLine.IndexOf(" t") + 7;
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  //Had to change this to specific cases so we didn't accidentally change player names                  handLine = handLine.Replace("10 "' "T ");                  handLine = handLine.Replace("10<"' "T<");                    //We only care about Pocket Cards                  if (handLine[13] != 'P')                  {                      continue;                  }                    //When players fold' we see a line:                   //<cards type="Pocket" player="pepealas5">X X</cards>                  //or:                  //<cards type="Pocket" player="playername"></cards>                  //We skip these lines                  if (handLine[handLine.Length - 9] == 'X' || handLine[handLine.Length - 9] == '>')                  {                      continue;                  }                    int playerNameStartIndex = 29;                  int playerNameEndIndex = handLine.IndexOf('"'' playerNameStartIndex) - 1;                  string playerName = handLine.Substring(playerNameStartIndex'                                                         playerNameEndIndex - playerNameStartIndex + 1);                  Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      int playerCardsStartIndex = playerNameEndIndex + 3;                  int playerCardsEndIndex = handLine.Length - 9;                  string playerCardString = handLine.Substring(playerCardsStartIndex'                                                          playerCardsEndIndex - playerCardsStartIndex + 1);                  string[] cards = playerCardString.Split(' ');                  if (cards.Length > 1)                  {                      player.HoleCards = HoleCards.NoHolecards(player.PlayerName);                      foreach (string card in cards)                      {                          //Suit and rank are reversed in these strings' so we flip them around before adding                          player.HoleCards.AddCard(new Card(card[1]' card[0]));                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  //Had to change this to specific cases so we didn't accidentally change player names                  handLine = handLine.Replace("10 "' "T ");                  handLine = handLine.Replace("10<"' "T<");                    //We only care about Pocket Cards                  if (handLine[13] != 'P')                  {                      continue;                  }                    //When players fold' we see a line:                   //<cards type="Pocket" player="pepealas5">X X</cards>                  //or:                  //<cards type="Pocket" player="playername"></cards>                  //We skip these lines                  if (handLine[handLine.Length - 9] == 'X' || handLine[handLine.Length - 9] == '>')                  {                      continue;                  }                    int playerNameStartIndex = 29;                  int playerNameEndIndex = handLine.IndexOf('"'' playerNameStartIndex) - 1;                  string playerName = handLine.Substring(playerNameStartIndex'                                                         playerNameEndIndex - playerNameStartIndex + 1);                  Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      int playerCardsStartIndex = playerNameEndIndex + 3;                  int playerCardsEndIndex = handLine.Length - 9;                  string playerCardString = handLine.Substring(playerCardsStartIndex'                                                          playerCardsEndIndex - playerCardsStartIndex + 1);                  string[] cards = playerCardString.Split(' ');                  if (cards.Length > 1)                  {                      player.HoleCards = HoleCards.NoHolecards(player.PlayerName);                      foreach (string card in cards)                      {                          //Suit and rank are reversed in these strings' so we flip them around before adding                          player.HoleCards.AddCard(new Card(card[1]' card[0]));                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  //Had to change this to specific cases so we didn't accidentally change player names                  handLine = handLine.Replace("10 "' "T ");                  handLine = handLine.Replace("10<"' "T<");                    //We only care about Pocket Cards                  if (handLine[13] != 'P')                  {                      continue;                  }                    //When players fold' we see a line:                   //<cards type="Pocket" player="pepealas5">X X</cards>                  //or:                  //<cards type="Pocket" player="playername"></cards>                  //We skip these lines                  if (handLine[handLine.Length - 9] == 'X' || handLine[handLine.Length - 9] == '>')                  {                      continue;                  }                    int playerNameStartIndex = 29;                  int playerNameEndIndex = handLine.IndexOf('"'' playerNameStartIndex) - 1;                  string playerName = handLine.Substring(playerNameStartIndex'                                                         playerNameEndIndex - playerNameStartIndex + 1);                  Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      int playerCardsStartIndex = playerNameEndIndex + 3;                  int playerCardsEndIndex = handLine.Length - 9;                  string playerCardString = handLine.Substring(playerCardsStartIndex'                                                          playerCardsEndIndex - playerCardsStartIndex + 1);                  string[] cards = playerCardString.Split(' ');                  if (cards.Length > 1)                  {                      player.HoleCards = HoleCards.NoHolecards(player.PlayerName);                      foreach (string card in cards)                      {                          //Suit and rank are reversed in these strings' so we flip them around before adding                          player.HoleCards.AddCard(new Card(card[1]' card[0]));                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  //Had to change this to specific cases so we didn't accidentally change player names                  handLine = handLine.Replace("10 "' "T ");                  handLine = handLine.Replace("10<"' "T<");                    //We only care about Pocket Cards                  if (handLine[13] != 'P')                  {                      continue;                  }                    //When players fold' we see a line:                   //<cards type="Pocket" player="pepealas5">X X</cards>                  //or:                  //<cards type="Pocket" player="playername"></cards>                  //We skip these lines                  if (handLine[handLine.Length - 9] == 'X' || handLine[handLine.Length - 9] == '>')                  {                      continue;                  }                    int playerNameStartIndex = 29;                  int playerNameEndIndex = handLine.IndexOf('"'' playerNameStartIndex) - 1;                  string playerName = handLine.Substring(playerNameStartIndex'                                                         playerNameEndIndex - playerNameStartIndex + 1);                  Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      int playerCardsStartIndex = playerNameEndIndex + 3;                  int playerCardsEndIndex = handLine.Length - 9;                  string playerCardString = handLine.Substring(playerCardsStartIndex'                                                          playerCardsEndIndex - playerCardsStartIndex + 1);                  string[] cards = playerCardString.Split(' ');                  if (cards.Length > 1)                  {                      player.HoleCards = HoleCards.NoHolecards(player.PlayerName);                      foreach (string card in cards)                      {                          //Suit and rank are reversed in these strings' so we flip them around before adding                          player.HoleCards.AddCard(new Card(card[1]' card[0]));                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  //Had to change this to specific cases so we didn't accidentally change player names                  handLine = handLine.Replace("10 "' "T ");                  handLine = handLine.Replace("10<"' "T<");                    //We only care about Pocket Cards                  if (handLine[13] != 'P')                  {                      continue;                  }                    //When players fold' we see a line:                   //<cards type="Pocket" player="pepealas5">X X</cards>                  //or:                  //<cards type="Pocket" player="playername"></cards>                  //We skip these lines                  if (handLine[handLine.Length - 9] == 'X' || handLine[handLine.Length - 9] == '>')                  {                      continue;                  }                    int playerNameStartIndex = 29;                  int playerNameEndIndex = handLine.IndexOf('"'' playerNameStartIndex) - 1;                  string playerName = handLine.Substring(playerNameStartIndex'                                                         playerNameEndIndex - playerNameStartIndex + 1);                  Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      int playerCardsStartIndex = playerNameEndIndex + 3;                  int playerCardsEndIndex = handLine.Length - 9;                  string playerCardString = handLine.Substring(playerCardsStartIndex'                                                          playerCardsEndIndex - playerCardsStartIndex + 1);                  string[] cards = playerCardString.Split(' ');                  if (cards.Length > 1)                  {                      player.HoleCards = HoleCards.NoHolecards(player.PlayerName);                      foreach (string card in cards)                      {                          //Suit and rank are reversed in these strings' so we flip them around before adding                          player.HoleCards.AddCard(new Card(card[1]' card[0]));                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  //Had to change this to specific cases so we didn't accidentally change player names                  handLine = handLine.Replace("10 "' "T ");                  handLine = handLine.Replace("10<"' "T<");                    //We only care about Pocket Cards                  if (handLine[13] != 'P')                  {                      continue;                  }                    //When players fold' we see a line:                   //<cards type="Pocket" player="pepealas5">X X</cards>                  //or:                  //<cards type="Pocket" player="playername"></cards>                  //We skip these lines                  if (handLine[handLine.Length - 9] == 'X' || handLine[handLine.Length - 9] == '>')                  {                      continue;                  }                    int playerNameStartIndex = 29;                  int playerNameEndIndex = handLine.IndexOf('"'' playerNameStartIndex) - 1;                  string playerName = handLine.Substring(playerNameStartIndex'                                                         playerNameEndIndex - playerNameStartIndex + 1);                  Player player = playerList.First(p => p.PlayerName.Equals(playerName));                      int playerCardsStartIndex = playerNameEndIndex + 3;                  int playerCardsEndIndex = handLine.Length - 9;                  string playerCardString = handLine.Substring(playerCardsStartIndex'                                                          playerCardsEndIndex - playerCardsStartIndex + 1);                  string[] cards = playerCardString.Split(' ');                  if (cards.Length > 1)                  {                      player.HoleCards = HoleCards.NoHolecards(player.PlayerName);                      foreach (string card in cards)                      {                          //Suit and rank are reversed in these strings' so we flip them around before adding                          player.HoleCards.AddCard(new Card(card[1]' card[0]));                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = 0; i < cardLines.Length; i++)              {                  string handLine = cardLines[i];                  handLine = handLine.TrimStart();                    //To make sure we know the exact character location of each card' turn 10s into Ts (these are recognized by our parser)                  handLine = handLine.Replace("10"' "T");                    //The suit/ranks are reversed' so we need to reverse them when adding them to our board card string                    //Flop                  if (handLine[13] == 'F')                  {                      boardCards += new Card(handLine[30]' handLine[29]) + "'" + new Card(handLine[33]' handLine[32]) + "'" + new Card(handLine[36]' handLine[35]);                  }                  //Turn                  if (handLine[13] == 'T')                  {                      boardCards += "'" + new Card(handLine[30]' handLine[29]);                  }                  //River                  if (handLine[13] == 'R')                  {                      boardCards += "'" + new Card(handLine[31]' handLine[30]);                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.IPoker,IPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\IPoker\IPokerFastParserImpl.cs,ParseDecimal,The following statement contains a magic number: while (!decimal.TryParse(amountString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' NumberFormatInfo' out amount))              {                  CurrencyParsingErrors++;                  LoopCurrency();                  if (CurrencyParsingErrors > 3)                      throw new Exception("Unable to parse Amount " + amountString);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: if (startTime.Length == 14)              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(4' 2);                  string dayString = dateString.Substring(6' 2);                  string hourString = dateString.Substring(8' 2);                  string minuteString = dateString.Substring(10' 2);                  string secondString = dateString.Substring(12' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }              else              {                  string yearString = dateString.Substring(0' 4);                  string monthString = dateString.Substring(5' 2);                  string dayString = dateString.Substring(8' 2);                  string hourString = dateString.Substring(11' 2);                  string minuteString = dateString.Substring(14' 2);                  string secondString = dateString.Substring(17' 2);                    return new DateTime(Int32.Parse(yearString)' Int32.Parse(monthString)' Int32.Parse(dayString)'                                      Int32.Parse(hourString)' Int32.Parse(minuteString)' Int32.Parse(secondString));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 2)              {                  return SeatType.FromMaxPlayers(2);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 2)              {                  return SeatType.FromMaxPlayers(2);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 6)              {                  return SeatType.FromMaxPlayers(6);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 6)              {                  return SeatType.FromMaxPlayers(6);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 9)              {                  return SeatType.FromMaxPlayers(9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 9)              {                  return SeatType.FromMaxPlayers(9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: return SeatType.FromMaxPlayers(10);
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseGameType,The following statement contains a magic number: char typeCharacter = gameTypeLine[19];
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseGameType,The following statement contains a magic number: if (typeCharacter == 'O')              {                  //We are Omaha                  char subTypeCharacter = gameTypeLine[34];                  if (subTypeCharacter == 'P')                  {                      return GameType.PotLimitOmaha;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseGameType,The following statement contains a magic number: if (typeCharacter == 'H')              {                  //We are Holdem                  char subTypeCharacter = gameTypeLine[35];                  if (subTypeCharacter == 'N')                  {                      return GameType.NoLimitHoldem;                  }                  else if (subTypeCharacter == 'L')                  {                      return GameType.FixedLimitHoldem;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Merge,MergeFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Merge\MergeFastParserImpl.cs,ParseLimit,The following statement contains a magic number: int bigBlindStartIndex = smallBlindEndIndex + 2;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseDealerPosition,The following statement contains a magic number: const int startIndex = 5;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseDealerPosition,The following statement contains a magic number: return FastInt.Parse(handLines[3]' startIndex);
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int splitIndex = line.IndexOf(" - "' StringComparison.Ordinal) + 3;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int monthStartIndex = line.IndexOf('''' splitIndex) + 2;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int timeStartIndex = dayEndIndex + 2;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetMonthNumber,The following statement contains a magic number: switch (month)              {                  case "January":                      return 1;                  case "February":                      return 2;                  case "March":                      return 3;                  case "April":                      return 4;                  case "May":                      return 5;                  case "June":                      return 6;                  case "July":                      return 7;                  case "August":                      return 8;                  case "September":                      return 9;                  case "October":                      return 10;                  case "November":                      return 11;                  case "December":                      return 12;                  default:                      throw new ArgumentException("Month: " + month);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetMonthNumber,The following statement contains a magic number: switch (month)              {                  case "January":                      return 1;                  case "February":                      return 2;                  case "March":                      return 3;                  case "April":                      return 4;                  case "May":                      return 5;                  case "June":                      return 6;                  case "July":                      return 7;                  case "August":                      return 8;                  case "September":                      return 9;                  case "October":                      return 10;                  case "November":                      return 11;                  case "December":                      return 12;                  default:                      throw new ArgumentException("Month: " + month);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetMonthNumber,The following statement contains a magic number: switch (month)              {                  case "January":                      return 1;                  case "February":                      return 2;                  case "March":                      return 3;                  case "April":                      return 4;                  case "May":                      return 5;                  case "June":                      return 6;                  case "July":                      return 7;                  case "August":                      return 8;                  case "September":                      return 9;                  case "October":                      return 10;                  case "November":                      return 11;                  case "December":                      return 12;                  default:                      throw new ArgumentException("Month: " + month);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetMonthNumber,The following statement contains a magic number: switch (month)              {                  case "January":                      return 1;                  case "February":                      return 2;                  case "March":                      return 3;                  case "April":                      return 4;                  case "May":                      return 5;                  case "June":                      return 6;                  case "July":                      return 7;                  case "August":                      return 8;                  case "September":                      return 9;                  case "October":                      return 10;                  case "November":                      return 11;                  case "December":                      return 12;                  default:                      throw new ArgumentException("Month: " + month);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetMonthNumber,The following statement contains a magic number: switch (month)              {                  case "January":                      return 1;                  case "February":                      return 2;                  case "March":                      return 3;                  case "April":                      return 4;                  case "May":                      return 5;                  case "June":                      return 6;                  case "July":                      return 7;                  case "August":                      return 8;                  case "September":                      return 9;                  case "October":                      return 10;                  case "November":                      return 11;                  case "December":                      return 12;                  default:                      throw new ArgumentException("Month: " + month);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetMonthNumber,The following statement contains a magic number: switch (month)              {                  case "January":                      return 1;                  case "February":                      return 2;                  case "March":                      return 3;                  case "April":                      return 4;                  case "May":                      return 5;                  case "June":                      return 6;                  case "July":                      return 7;                  case "August":                      return 8;                  case "September":                      return 9;                  case "October":                      return 10;                  case "November":                      return 11;                  case "December":                      return 12;                  default:                      throw new ArgumentException("Month: " + month);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetMonthNumber,The following statement contains a magic number: switch (month)              {                  case "January":                      return 1;                  case "February":                      return 2;                  case "March":                      return 3;                  case "April":                      return 4;                  case "May":                      return 5;                  case "June":                      return 6;                  case "July":                      return 7;                  case "August":                      return 8;                  case "September":                      return 9;                  case "October":                      return 10;                  case "November":                      return 11;                  case "December":                      return 12;                  default:                      throw new ArgumentException("Month: " + month);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetMonthNumber,The following statement contains a magic number: switch (month)              {                  case "January":                      return 1;                  case "February":                      return 2;                  case "March":                      return 3;                  case "April":                      return 4;                  case "May":                      return 5;                  case "June":                      return 6;                  case "July":                      return 7;                  case "August":                      return 8;                  case "September":                      return 9;                  case "October":                      return 10;                  case "November":                      return 11;                  case "December":                      return 12;                  default:                      throw new ArgumentException("Month: " + month);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetMonthNumber,The following statement contains a magic number: switch (month)              {                  case "January":                      return 1;                  case "February":                      return 2;                  case "March":                      return 3;                  case "April":                      return 4;                  case "May":                      return 5;                  case "June":                      return 6;                  case "July":                      return 7;                  case "August":                      return 8;                  case "September":                      return 9;                  case "October":                      return 10;                  case "November":                      return 11;                  case "December":                      return 12;                  default:                      throw new ArgumentException("Month: " + month);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetMonthNumber,The following statement contains a magic number: switch (month)              {                  case "January":                      return 1;                  case "February":                      return 2;                  case "March":                      return 3;                  case "April":                      return 4;                  case "May":                      return 5;                  case "June":                      return 6;                  case "July":                      return 7;                  case "August":                      return 8;                  case "September":                      return 9;                  case "October":                      return 10;                  case "November":                      return 11;                  case "December":                      return 12;                  default:                      throw new ArgumentException("Month: " + month);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetMonthNumber,The following statement contains a magic number: switch (month)              {                  case "January":                      return 1;                  case "February":                      return 2;                  case "March":                      return 3;                  case "April":                      return 4;                  case "May":                      return 5;                  case "June":                      return 6;                  case "July":                      return 7;                  case "August":                      return 8;                  case "September":                      return 9;                  case "October":                      return 10;                  case "November":                      return 11;                  case "December":                      return 12;                  default:                      throw new ArgumentException("Month: " + month);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseHandId,The following statement contains a magic number: const int firstDigitIndex = 28;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseTableName,The following statement contains a magic number: string line = handLines[2];
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseTableName,The following statement contains a magic number: const int startIndex = 6;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: int maxPlayerIndex = handLines[4].LastIndexOf('/') + 1;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: int maxPlayers = FastInt.Parse(handLines[4][maxPlayerIndex]);
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (maxPlayers == 1)              {                  maxPlayers = 10;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: int gameLength = gameTypeLength - 3;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: string limit = line.Substring(startIndex' 2);
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (limit)              {                  case "FL":                      switch (gameLength)  	                {                          case 5://"Omaha".Length                              return GameType.FixedLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.FixedLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.FixedLimitOmahaHiLo;  	                }                      break;                  case "NL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.NoLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.NoLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.NoLimitOmahaHiLo;                      }                      break;                  case "PL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.PotLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.PotLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.PotLimitOmahaHiLo;                      }                      break;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (limit)              {                  case "FL":                      switch (gameLength)  	                {                          case 5://"Omaha".Length                              return GameType.FixedLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.FixedLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.FixedLimitOmahaHiLo;  	                }                      break;                  case "NL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.NoLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.NoLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.NoLimitOmahaHiLo;                      }                      break;                  case "PL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.PotLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.PotLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.PotLimitOmahaHiLo;                      }                      break;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (limit)              {                  case "FL":                      switch (gameLength)  	                {                          case 5://"Omaha".Length                              return GameType.FixedLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.FixedLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.FixedLimitOmahaHiLo;  	                }                      break;                  case "NL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.NoLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.NoLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.NoLimitOmahaHiLo;                      }                      break;                  case "PL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.PotLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.PotLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.PotLimitOmahaHiLo;                      }                      break;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (limit)              {                  case "FL":                      switch (gameLength)  	                {                          case 5://"Omaha".Length                              return GameType.FixedLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.FixedLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.FixedLimitOmahaHiLo;  	                }                      break;                  case "NL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.NoLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.NoLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.NoLimitOmahaHiLo;                      }                      break;                  case "PL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.PotLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.PotLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.PotLimitOmahaHiLo;                      }                      break;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (limit)              {                  case "FL":                      switch (gameLength)  	                {                          case 5://"Omaha".Length                              return GameType.FixedLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.FixedLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.FixedLimitOmahaHiLo;  	                }                      break;                  case "NL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.NoLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.NoLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.NoLimitOmahaHiLo;                      }                      break;                  case "PL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.PotLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.PotLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.PotLimitOmahaHiLo;                      }                      break;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (limit)              {                  case "FL":                      switch (gameLength)  	                {                          case 5://"Omaha".Length                              return GameType.FixedLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.FixedLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.FixedLimitOmahaHiLo;  	                }                      break;                  case "NL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.NoLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.NoLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.NoLimitOmahaHiLo;                      }                      break;                  case "PL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.PotLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.PotLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.PotLimitOmahaHiLo;                      }                      break;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (limit)              {                  case "FL":                      switch (gameLength)  	                {                          case 5://"Omaha".Length                              return GameType.FixedLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.FixedLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.FixedLimitOmahaHiLo;  	                }                      break;                  case "NL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.NoLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.NoLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.NoLimitOmahaHiLo;                      }                      break;                  case "PL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.PotLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.PotLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.PotLimitOmahaHiLo;                      }                      break;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (limit)              {                  case "FL":                      switch (gameLength)  	                {                          case 5://"Omaha".Length                              return GameType.FixedLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.FixedLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.FixedLimitOmahaHiLo;  	                }                      break;                  case "NL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.NoLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.NoLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.NoLimitOmahaHiLo;                      }                      break;                  case "PL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.PotLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.PotLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.PotLimitOmahaHiLo;                      }                      break;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (limit)              {                  case "FL":                      switch (gameLength)  	                {                          case 5://"Omaha".Length                              return GameType.FixedLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.FixedLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.FixedLimitOmahaHiLo;  	                }                      break;                  case "NL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.NoLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.NoLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.NoLimitOmahaHiLo;                      }                      break;                  case "PL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.PotLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.PotLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.PotLimitOmahaHiLo;                      }                      break;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,Parse20BBLimit,The following statement contains a magic number: return Limit.FromSmallBlindBigBlind(bigblind / 2' bigblind' currency);
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseNormalLimit,The following statement contains a magic number: string BB = limitSubstring.Substring(splitIndex + 2);
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,IsValidOrCancelledHand,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= handLines.Length - 10; i--)              {                  // if the line starts with ** we can definitely leave the loop                  if (handLines[i][0] == '*' && handLines[i][1] == '*')                      break;                    if (handLines[i].Contains(" wins "))                      return true;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,IsConnectionLost,The following statement contains a magic number: if (line[0] == 'C'                   && line[line.Length - 1] == 'n' && line[line.Length -2] == 'o'                  && line[10] == ' ' && line[11] == 'L')              {                  return true;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,IsConnectionLost,The following statement contains a magic number: if (line[0] == 'C'                   && line[line.Length - 1] == 'n' && line[line.Length -2] == 'o'                  && line[10] == ' ' && line[11] == 'L')              {                  return true;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,IsConnectionLost,The following statement contains a magic number: if (line[0] == 'C'                   && line[line.Length - 1] == 'n' && line[line.Length -2] == 'o'                  && line[10] == ' ' && line[11] == 'L')              {                  return true;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseWinsAction,The following statement contains a magic number: int amountStartIndex = nameEndIndex + 7;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseActionWithSize,The following statement contains a magic number: const int raiseLength = 8;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseActionWithSize,The following statement contains a magic number: const int callsLength = 7;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseActionWithSize,The following statement contains a magic number: const int betsLength = 6;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseActionWithSize,The following statement contains a magic number: const int allInLength = 12;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseActionWithSize,The following statement contains a magic number: decimal amount = ParseDecimal(line' amountStartIndex + 2);
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseActionWithSize,The following statement contains a magic number: char actionID = line[amountStartIndex - 3];
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseStreet,The following statement contains a magic number: const int identifierIndex = 11;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseDotAction,The following statement contains a magic number: const int smallBlindWidth = 19;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseDotAction,The following statement contains a magic number: const int bigBlindWidth = 17;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseDotAction,The following statement contains a magic number: const int deadBigBlindWidth = 24;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseDotAction,The following statement contains a magic number: char lastChar = line[line.Length - 2];
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseDotAction,The following statement contains a magic number: if (lastChar == ']')              {                  int amountStartIndex = line.LastIndexOf('[');                  decimal amount = ParseDecimal(line' amountStartIndex + 2);                    char blindIdentifier = line[amountStartIndex - 8];                    switch (blindIdentifier)                  {                      //"Player posts big blind [$10 USD]."                      case 'g':                          playerName = line.Remove(amountStartIndex - bigBlindWidth);                          return new HandAction(playerName' HandActionType.BIG_BLIND' amount' street);                        //"Player posts small blind [$5 USD]."                      case 'l':                          playerName = line.Remove(amountStartIndex - smallBlindWidth);                          return new HandAction(playerName' HandActionType.SMALL_BLIND' amount' street);                        //"Player posts big blind + dead [$0.15].                      case ' ':                          playerName = line.Remove(amountStartIndex - deadBigBlindWidth);                          return new HandAction(playerName' HandActionType.POSTS' amount' street);                      default:                          throw new ArgumentException("Unkown posting Action: " + line);                  }              }              else if (line.Contains(" shows"))              {                  if (isWinType(line' " shows ["' ref playerNameIndex))                  {                      playerName = line.Remove(playerNameIndex);                      return new HandAction(playerName' HandActionType.SHOW' 0m' street);                  }                  else if (line.Contains(" for low."))                  {                      playerNameIndex = line.IndexOf(" shows");                      playerName = line.Remove(playerNameIndex);                      return new HandAction(playerName' HandActionType.SHOWS_FOR_LOW' 0m' street);                  }                  else                  {                      throw new ArgumentException("Unknown Showdown: " + line);                  }              }              else if (line.Contains(" wins "))              {                  playerName = line.Remove(playerNameIndex);                  int amountStartIndex = line.LastIndexOf('[');                  if (isWinType(line' " wins ["' ref playerNameIndex))                  {                      decimal amount = ParseDecimal(line' amountStartIndex);                      return new WinningsAction(playerName' HandActionType.WINS' amount' 0);                  }                    if (isWinType(line' " wins Lo ("' ref playerNameIndex))                  {                      amountStartIndex = playerNameIndex + " wins Lo (".Length + 1;                      decimal amount = ParseDecimal(line' amountStartIndex);                        playerName = line.Remove(playerNameIndex);                      return new WinningsAction(playerName' HandActionType.WINS_THE_LOW' amount' 0);                  }                  if (amountStartIndex == -1)//Wins Side Pot                  {                      string sidePotID = " from the side pot ";                      int idStartIndex = line.IndexOf(sidePotID);                      if (idStartIndex != -1)                      {                          int idEndIndex = line.IndexOf(' '' idStartIndex + sidePotID.Length);                          string idStr = line.Substring(idStartIndex + sidePotID.Length' idEndIndex - idStartIndex - sidePotID.Length);                          int id = int.Parse(idStr);                          return ParseWinsAction(line' id);                      }                      else                      {                          return ParseWinsAction(line);                      }                  }              }              else if (line.Contains(" does not "))              {                  playerNameIndex = line.IndexOf(" does not ");                  playerName = line.Remove(playerNameIndex);                  return new HandAction(playerName' HandActionType.MUCKS' 0m' street);              }              else if (line.Contains(" doesn't show"))              {                  playerNameIndex = line.IndexOf(" doesn't show");                  playerName = line.Remove(playerNameIndex);                  return new HandAction(playerName' HandActionType.SHOW' 0m' street);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseDotAction,The following statement contains a magic number: if (lastChar == ']')              {                  int amountStartIndex = line.LastIndexOf('[');                  decimal amount = ParseDecimal(line' amountStartIndex + 2);                    char blindIdentifier = line[amountStartIndex - 8];                    switch (blindIdentifier)                  {                      //"Player posts big blind [$10 USD]."                      case 'g':                          playerName = line.Remove(amountStartIndex - bigBlindWidth);                          return new HandAction(playerName' HandActionType.BIG_BLIND' amount' street);                        //"Player posts small blind [$5 USD]."                      case 'l':                          playerName = line.Remove(amountStartIndex - smallBlindWidth);                          return new HandAction(playerName' HandActionType.SMALL_BLIND' amount' street);                        //"Player posts big blind + dead [$0.15].                      case ' ':                          playerName = line.Remove(amountStartIndex - deadBigBlindWidth);                          return new HandAction(playerName' HandActionType.POSTS' amount' street);                      default:                          throw new ArgumentException("Unkown posting Action: " + line);                  }              }              else if (line.Contains(" shows"))              {                  if (isWinType(line' " shows ["' ref playerNameIndex))                  {                      playerName = line.Remove(playerNameIndex);                      return new HandAction(playerName' HandActionType.SHOW' 0m' street);                  }                  else if (line.Contains(" for low."))                  {                      playerNameIndex = line.IndexOf(" shows");                      playerName = line.Remove(playerNameIndex);                      return new HandAction(playerName' HandActionType.SHOWS_FOR_LOW' 0m' street);                  }                  else                  {                      throw new ArgumentException("Unknown Showdown: " + line);                  }              }              else if (line.Contains(" wins "))              {                  playerName = line.Remove(playerNameIndex);                  int amountStartIndex = line.LastIndexOf('[');                  if (isWinType(line' " wins ["' ref playerNameIndex))                  {                      decimal amount = ParseDecimal(line' amountStartIndex);                      return new WinningsAction(playerName' HandActionType.WINS' amount' 0);                  }                    if (isWinType(line' " wins Lo ("' ref playerNameIndex))                  {                      amountStartIndex = playerNameIndex + " wins Lo (".Length + 1;                      decimal amount = ParseDecimal(line' amountStartIndex);                        playerName = line.Remove(playerNameIndex);                      return new WinningsAction(playerName' HandActionType.WINS_THE_LOW' amount' 0);                  }                  if (amountStartIndex == -1)//Wins Side Pot                  {                      string sidePotID = " from the side pot ";                      int idStartIndex = line.IndexOf(sidePotID);                      if (idStartIndex != -1)                      {                          int idEndIndex = line.IndexOf(' '' idStartIndex + sidePotID.Length);                          string idStr = line.Substring(idStartIndex + sidePotID.Length' idEndIndex - idStartIndex - sidePotID.Length);                          int id = int.Parse(idStr);                          return ParseWinsAction(line' id);                      }                      else                      {                          return ParseWinsAction(line);                      }                  }              }              else if (line.Contains(" does not "))              {                  playerNameIndex = line.IndexOf(" does not ");                  playerName = line.Remove(playerNameIndex);                  return new HandAction(playerName' HandActionType.MUCKS' 0m' street);              }              else if (line.Contains(" doesn't show"))              {                  playerNameIndex = line.IndexOf(" doesn't show");                  playerName = line.Remove(playerNameIndex);                  return new HandAction(playerName' HandActionType.SHOW' 0m' street);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseActionWithoutSize,The following statement contains a magic number: char identifier = line[line.Length - 2];
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseActionWithoutSize,The following statement contains a magic number: switch (identifier)              {                  case 'd':                      return new HandAction(ParseActionPlayerName(line' 6)' HandActionType.FOLD' 0m' street);                  case 'k':                      return new HandAction(ParseActionPlayerName(line' 7)' HandActionType.CHECK' 0m' street);                  default:                      throw new ArgumentException("Unknown Action: \"" + line + "\"");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseActionWithoutSize,The following statement contains a magic number: switch (identifier)              {                  case 'd':                      return new HandAction(ParseActionPlayerName(line' 6)' HandActionType.FOLD' 0m' street);                  case 'k':                      return new HandAction(ParseActionPlayerName(line' 7)' HandActionType.CHECK' 0m' street);                  default:                      throw new ArgumentException("Unknown Action: \"" + line + "\"");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetFirstActionIndex,The following statement contains a magic number: const int FirstSeatIndex = 5;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: const int playerListStart = 5;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int lineNumber = playerListStart; lineNumber < handLines.Length; lineNumber++)              {                  string line = handLines[lineNumber];                    char lastChar = line[line.Length - 1];                    // leave the loop if we spot a summary/hand start of line                  if (line.StartsWith("** "))                  {                      break;                  }                    // players can also seat at the table after the seat info' post a big blind and be immediately involved in the hand                  const int seatNumberStartIndex = 5;                                    int playerNameStartIndex = line.IndexOf(':'' seatNumberStartIndex) + 2;                    // seat info expected in format:                   // Seat 4: thaiJhonny ( $1'404 USD )                  if (playerNameStartIndex > 1 && lastChar == ')' && line.StartsWith("Seat "))                  {                      int seatNumber = FastInt.Parse(line' seatNumberStartIndex);                                         // we need to find the ( before the number. players can have ( in their name so we need to go backwards and skip the last one                      int openParenIndex = line.LastIndexOf('(');                        string playerName = line.Substring(playerNameStartIndex' openParenIndex - playerNameStartIndex - 1);                      decimal stack = ParseDecimal(line' openParenIndex + 3);                        playerList.Add(new Player(playerName' stack' seatNumber));                  }                    // post blind                  // kpark1996 posts big blind [$1 USD].                  else if (lastChar == '.')                  {                      // they don't have a known seatNumber                      int seatNumber = -1;                      decimal stack = 999999.00m; // we make the stacksize very high so bettings can never result in a "negative stack"                        int nameEndIndex = line.IndexOf(" posts "' StringComparison.Ordinal);                      if (nameEndIndex == -1)                      {                          continue;                      }                        string playerName = line.Substring(0' nameEndIndex);                        // only add if the player is unknown                      if (!playerList.Any(p => p.PlayerName.Equals(playerName)))                      {                          playerList.Add(new Player(playerName' stack' seatNumber));                      }                  }                                }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int lineNumber = playerListStart; lineNumber < handLines.Length; lineNumber++)              {                  string line = handLines[lineNumber];                    char lastChar = line[line.Length - 1];                    // leave the loop if we spot a summary/hand start of line                  if (line.StartsWith("** "))                  {                      break;                  }                    // players can also seat at the table after the seat info' post a big blind and be immediately involved in the hand                  const int seatNumberStartIndex = 5;                                    int playerNameStartIndex = line.IndexOf(':'' seatNumberStartIndex) + 2;                    // seat info expected in format:                   // Seat 4: thaiJhonny ( $1'404 USD )                  if (playerNameStartIndex > 1 && lastChar == ')' && line.StartsWith("Seat "))                  {                      int seatNumber = FastInt.Parse(line' seatNumberStartIndex);                                         // we need to find the ( before the number. players can have ( in their name so we need to go backwards and skip the last one                      int openParenIndex = line.LastIndexOf('(');                        string playerName = line.Substring(playerNameStartIndex' openParenIndex - playerNameStartIndex - 1);                      decimal stack = ParseDecimal(line' openParenIndex + 3);                        playerList.Add(new Player(playerName' stack' seatNumber));                  }                    // post blind                  // kpark1996 posts big blind [$1 USD].                  else if (lastChar == '.')                  {                      // they don't have a known seatNumber                      int seatNumber = -1;                      decimal stack = 999999.00m; // we make the stacksize very high so bettings can never result in a "negative stack"                        int nameEndIndex = line.IndexOf(" posts "' StringComparison.Ordinal);                      if (nameEndIndex == -1)                      {                          continue;                      }                        string playerName = line.Substring(0' nameEndIndex);                        // only add if the player is unknown                      if (!playerList.Any(p => p.PlayerName.Equals(playerName)))                      {                          playerList.Add(new Player(playerName' stack' seatNumber));                      }                  }                                }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int lineNumber = playerListStart; lineNumber < handLines.Length; lineNumber++)              {                  string line = handLines[lineNumber];                    char lastChar = line[line.Length - 1];                    // leave the loop if we spot a summary/hand start of line                  if (line.StartsWith("** "))                  {                      break;                  }                    // players can also seat at the table after the seat info' post a big blind and be immediately involved in the hand                  const int seatNumberStartIndex = 5;                                    int playerNameStartIndex = line.IndexOf(':'' seatNumberStartIndex) + 2;                    // seat info expected in format:                   // Seat 4: thaiJhonny ( $1'404 USD )                  if (playerNameStartIndex > 1 && lastChar == ')' && line.StartsWith("Seat "))                  {                      int seatNumber = FastInt.Parse(line' seatNumberStartIndex);                                         // we need to find the ( before the number. players can have ( in their name so we need to go backwards and skip the last one                      int openParenIndex = line.LastIndexOf('(');                        string playerName = line.Substring(playerNameStartIndex' openParenIndex - playerNameStartIndex - 1);                      decimal stack = ParseDecimal(line' openParenIndex + 3);                        playerList.Add(new Player(playerName' stack' seatNumber));                  }                    // post blind                  // kpark1996 posts big blind [$1 USD].                  else if (lastChar == '.')                  {                      // they don't have a known seatNumber                      int seatNumber = -1;                      decimal stack = 999999.00m; // we make the stacksize very high so bettings can never result in a "negative stack"                        int nameEndIndex = line.IndexOf(" posts "' StringComparison.Ordinal);                      if (nameEndIndex == -1)                      {                          continue;                      }                        string playerName = line.Substring(0' nameEndIndex);                        // only add if the player is unknown                      if (!playerList.Any(p => p.PlayerName.Equals(playerName)))                      {                          playerList.Add(new Player(playerName' stack' seatNumber));                      }                  }                                }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int lineNumber = handLines.Length - 1; lineNumber > 0; lineNumber--)              {                  //jimmyhoo: shows [7h 6h] (a full house' Sevens full of Jacks)                  //EASSA: mucks hand                   //jimmyhoo collected $562 from pot                  string line = handLines[lineNumber];                  //Skip when player mucks and collects                  //EASSA: mucks hand                   char lastChar = line[line.Length - 1];                  if (lastChar != '.')                  {                      break;                  }                    if (!line.Contains(" show"))                  {                      continue;                  }                    int lastSquareBracket = line.LastIndexOf(']');                    if (lastSquareBracket == -1)                  {                      continue;                  }                    int firstSquareBracket = line.LastIndexOf('['' lastSquareBracket);                    // can show single cards:                  // Zaza5573: shows [Qc]                  if (line[firstSquareBracket + 3] == ']')                  {                      continue;                  }                    int nameEndIndex = GetNameEndIndex(line);// line.IndexOf(' ');                    string playerName = line.Remove(nameEndIndex);                    string cards = line.Substring(firstSquareBracket + 1' lastSquareBracket - (firstSquareBracket + 1));                    playerList[playerName].HoleCards = HoleCards.FromCards(cards);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetShowDownStartIndex,The following statement contains a magic number: for (int i = lastLineRead; i < summaryIndex; i++)              {                  if (handLines[i][0] == '*' && handLines[i][4] == 'S' && handLines[i][5] == 'H')//handLines[i].StartsWith("*** SH"))                  {                      return i;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetShowDownStartIndex,The following statement contains a magic number: for (int i = lastLineRead; i < summaryIndex; i++)              {                  if (handLines[i][0] == '*' && handLines[i][4] == 'S' && handLines[i][5] == 'H')//handLines[i].StartsWith("*** SH"))                  {                      return i;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,GetSummaryStartIndex,The following statement contains a magic number: for (int lineNumber = handLines.Length - 3; lineNumber > lastLineRead; lineNumber--)              {                  if (handLines[lineNumber][0] != 'S' &&                       handLines[lineNumber][0] != 'T' &&                      handLines[lineNumber][0] != 'B')                  {                      return lineNumber;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int lineNumber = 1; lineNumber < handLines.Length; lineNumber++)              {                  string line = handLines[lineNumber];                  if (line[0] == '*' && line[line.Length - 1] == ']')                  {                      int cardsStartIndex = line.IndexOf('[') + 2;                      int cardsEndIndex = line.IndexOf(']'' cardsStartIndex);                      cards += line.Substring(cardsStartIndex' cardsEndIndex - cardsStartIndex);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseHeroName,The following statement contains a magic number: for (int i = 0; i < handlines.Length; i++)              {                  if (handlines[i][0] == 'D' && handlines[i].StartsWith("Dealt to "))                  {                      string line = handlines[i];                      int endIndex = line.LastIndexOf('[');                      return line.Substring(9' endIndex - 9 - 1);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseHeroName,The following statement contains a magic number: for (int i = 0; i < handlines.Length; i++)              {                  if (handlines[i][0] == 'D' && handlines[i].StartsWith("Dealt to "))                  {                      string line = handlines[i];                      int endIndex = line.LastIndexOf('[');                      return line.Substring(9' endIndex - 9 - 1);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: const int smallBlindWidth = 19;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: const int bigBlindWidth = 17;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: const int PostingWidth = 24;
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = firstActionIndex; i < handLines.Length; i++)              {                  string line = handLines[i];                    char lastChar = line[line.Length - 2];                  if (lastChar == ']')                  {                      int amountStartIndex = line.LastIndexOf('[');                      string playerName;                      HandActionType action;                      decimal amount;                        char blindIdentifier = line[amountStartIndex - 9];                        switch (blindIdentifier)                      {                          //"Player posts big blind [$10 USD]."                          case 'i':                              playerName = line.Remove(amountStartIndex - bigBlindWidth);                              action = HandActionType.BIG_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //"Player posts small blind [$5 USD]."                          case 'l':                              playerName = line.Remove(amountStartIndex - smallBlindWidth);                              action = HandActionType.SMALL_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //Peacli posts big blind + dead [$3].                          case 'd':                              playerName = line.Remove(amountStartIndex - PostingWidth);                              action = HandActionType.POSTS;                              string deadString = line.Substring(amountStartIndex + 2' line.Length - amountStartIndex - 2 - 2);                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            default:                              throw new ArgumentException("Unknown posting Action: " + line);                      }                        handActions.Add(new HandAction(playerName' action' amount' Street.Preflop));                  }                    if (line == "** Dealing down cards **")                  {                      return i + 1;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = firstActionIndex; i < handLines.Length; i++)              {                  string line = handLines[i];                    char lastChar = line[line.Length - 2];                  if (lastChar == ']')                  {                      int amountStartIndex = line.LastIndexOf('[');                      string playerName;                      HandActionType action;                      decimal amount;                        char blindIdentifier = line[amountStartIndex - 9];                        switch (blindIdentifier)                      {                          //"Player posts big blind [$10 USD]."                          case 'i':                              playerName = line.Remove(amountStartIndex - bigBlindWidth);                              action = HandActionType.BIG_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //"Player posts small blind [$5 USD]."                          case 'l':                              playerName = line.Remove(amountStartIndex - smallBlindWidth);                              action = HandActionType.SMALL_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //Peacli posts big blind + dead [$3].                          case 'd':                              playerName = line.Remove(amountStartIndex - PostingWidth);                              action = HandActionType.POSTS;                              string deadString = line.Substring(amountStartIndex + 2' line.Length - amountStartIndex - 2 - 2);                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            default:                              throw new ArgumentException("Unknown posting Action: " + line);                      }                        handActions.Add(new HandAction(playerName' action' amount' Street.Preflop));                  }                    if (line == "** Dealing down cards **")                  {                      return i + 1;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = firstActionIndex; i < handLines.Length; i++)              {                  string line = handLines[i];                    char lastChar = line[line.Length - 2];                  if (lastChar == ']')                  {                      int amountStartIndex = line.LastIndexOf('[');                      string playerName;                      HandActionType action;                      decimal amount;                        char blindIdentifier = line[amountStartIndex - 9];                        switch (blindIdentifier)                      {                          //"Player posts big blind [$10 USD]."                          case 'i':                              playerName = line.Remove(amountStartIndex - bigBlindWidth);                              action = HandActionType.BIG_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //"Player posts small blind [$5 USD]."                          case 'l':                              playerName = line.Remove(amountStartIndex - smallBlindWidth);                              action = HandActionType.SMALL_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //Peacli posts big blind + dead [$3].                          case 'd':                              playerName = line.Remove(amountStartIndex - PostingWidth);                              action = HandActionType.POSTS;                              string deadString = line.Substring(amountStartIndex + 2' line.Length - amountStartIndex - 2 - 2);                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            default:                              throw new ArgumentException("Unknown posting Action: " + line);                      }                        handActions.Add(new HandAction(playerName' action' amount' Street.Preflop));                  }                    if (line == "** Dealing down cards **")                  {                      return i + 1;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = firstActionIndex; i < handLines.Length; i++)              {                  string line = handLines[i];                    char lastChar = line[line.Length - 2];                  if (lastChar == ']')                  {                      int amountStartIndex = line.LastIndexOf('[');                      string playerName;                      HandActionType action;                      decimal amount;                        char blindIdentifier = line[amountStartIndex - 9];                        switch (blindIdentifier)                      {                          //"Player posts big blind [$10 USD]."                          case 'i':                              playerName = line.Remove(amountStartIndex - bigBlindWidth);                              action = HandActionType.BIG_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //"Player posts small blind [$5 USD]."                          case 'l':                              playerName = line.Remove(amountStartIndex - smallBlindWidth);                              action = HandActionType.SMALL_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //Peacli posts big blind + dead [$3].                          case 'd':                              playerName = line.Remove(amountStartIndex - PostingWidth);                              action = HandActionType.POSTS;                              string deadString = line.Substring(amountStartIndex + 2' line.Length - amountStartIndex - 2 - 2);                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            default:                              throw new ArgumentException("Unknown posting Action: " + line);                      }                        handActions.Add(new HandAction(playerName' action' amount' Street.Preflop));                  }                    if (line == "** Dealing down cards **")                  {                      return i + 1;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = firstActionIndex; i < handLines.Length; i++)              {                  string line = handLines[i];                    char lastChar = line[line.Length - 2];                  if (lastChar == ']')                  {                      int amountStartIndex = line.LastIndexOf('[');                      string playerName;                      HandActionType action;                      decimal amount;                        char blindIdentifier = line[amountStartIndex - 9];                        switch (blindIdentifier)                      {                          //"Player posts big blind [$10 USD]."                          case 'i':                              playerName = line.Remove(amountStartIndex - bigBlindWidth);                              action = HandActionType.BIG_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //"Player posts small blind [$5 USD]."                          case 'l':                              playerName = line.Remove(amountStartIndex - smallBlindWidth);                              action = HandActionType.SMALL_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //Peacli posts big blind + dead [$3].                          case 'd':                              playerName = line.Remove(amountStartIndex - PostingWidth);                              action = HandActionType.POSTS;                              string deadString = line.Substring(amountStartIndex + 2' line.Length - amountStartIndex - 2 - 2);                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            default:                              throw new ArgumentException("Unknown posting Action: " + line);                      }                        handActions.Add(new HandAction(playerName' action' amount' Street.Preflop));                  }                    if (line == "** Dealing down cards **")                  {                      return i + 1;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = firstActionIndex; i < handLines.Length; i++)              {                  string line = handLines[i];                    char lastChar = line[line.Length - 2];                  if (lastChar == ']')                  {                      int amountStartIndex = line.LastIndexOf('[');                      string playerName;                      HandActionType action;                      decimal amount;                        char blindIdentifier = line[amountStartIndex - 9];                        switch (blindIdentifier)                      {                          //"Player posts big blind [$10 USD]."                          case 'i':                              playerName = line.Remove(amountStartIndex - bigBlindWidth);                              action = HandActionType.BIG_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //"Player posts small blind [$5 USD]."                          case 'l':                              playerName = line.Remove(amountStartIndex - smallBlindWidth);                              action = HandActionType.SMALL_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //Peacli posts big blind + dead [$3].                          case 'd':                              playerName = line.Remove(amountStartIndex - PostingWidth);                              action = HandActionType.POSTS;                              string deadString = line.Substring(amountStartIndex + 2' line.Length - amountStartIndex - 2 - 2);                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            default:                              throw new ArgumentException("Unknown posting Action: " + line);                      }                        handActions.Add(new HandAction(playerName' action' amount' Street.Preflop));                  }                    if (line == "** Dealing down cards **")                  {                      return i + 1;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = firstActionIndex; i < handLines.Length; i++)              {                  string line = handLines[i];                    char lastChar = line[line.Length - 2];                  if (lastChar == ']')                  {                      int amountStartIndex = line.LastIndexOf('[');                      string playerName;                      HandActionType action;                      decimal amount;                        char blindIdentifier = line[amountStartIndex - 9];                        switch (blindIdentifier)                      {                          //"Player posts big blind [$10 USD]."                          case 'i':                              playerName = line.Remove(amountStartIndex - bigBlindWidth);                              action = HandActionType.BIG_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //"Player posts small blind [$5 USD]."                          case 'l':                              playerName = line.Remove(amountStartIndex - smallBlindWidth);                              action = HandActionType.SMALL_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //Peacli posts big blind + dead [$3].                          case 'd':                              playerName = line.Remove(amountStartIndex - PostingWidth);                              action = HandActionType.POSTS;                              string deadString = line.Substring(amountStartIndex + 2' line.Length - amountStartIndex - 2 - 2);                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            default:                              throw new ArgumentException("Unknown posting Action: " + line);                      }                        handActions.Add(new HandAction(playerName' action' amount' Street.Preflop));                  }                    if (line == "** Dealing down cards **")                  {                      return i + 1;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = firstActionIndex; i < handLines.Length; i++)              {                  string line = handLines[i];                    char lastChar = line[line.Length - 2];                  if (lastChar == ']')                  {                      int amountStartIndex = line.LastIndexOf('[');                      string playerName;                      HandActionType action;                      decimal amount;                        char blindIdentifier = line[amountStartIndex - 9];                        switch (blindIdentifier)                      {                          //"Player posts big blind [$10 USD]."                          case 'i':                              playerName = line.Remove(amountStartIndex - bigBlindWidth);                              action = HandActionType.BIG_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //"Player posts small blind [$5 USD]."                          case 'l':                              playerName = line.Remove(amountStartIndex - smallBlindWidth);                              action = HandActionType.SMALL_BLIND;                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            //Peacli posts big blind + dead [$3].                          case 'd':                              playerName = line.Remove(amountStartIndex - PostingWidth);                              action = HandActionType.POSTS;                              string deadString = line.Substring(amountStartIndex + 2' line.Length - amountStartIndex - 2 - 2);                              amount = ParseDecimal(line' amountStartIndex + 2);                              break;                            default:                              throw new ArgumentException("Unknown posting Action: " + line);                      }                        handActions.Add(new HandAction(playerName' action' amount' Street.Preflop));                  }                    if (line == "** Dealing down cards **")                  {                      return i + 1;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,SplitUpMultipleHands,The following statement contains a magic number: var start = rawHandHistories[16] == '#' ? "PokerStars Game #" : "PokerStars Zoom Hand #";
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,SplitUpMultipleHands,The following statement contains a magic number: return HandSplitRegex.Split(rawHandHistories)                              .Where(s => string.IsNullOrWhiteSpace(s) == false && s.Length > 30)                              .Select(s => start + s.Trim('\r'' 'n'));
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,SplitUpMultipleHandsToLines,The following statement contains a magic number: var allLines = rawHandHistories.LazyStringSplitFastSkip('\n'' jump: 10' jumpAfter: 2);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,SplitUpMultipleHandsToLines,The following statement contains a magic number: var allLines = rawHandHistories.LazyStringSplitFastSkip('\n'' jump: 10' jumpAfter: 2);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,SplitUpMultipleHandsToLines,The following statement contains a magic number: List<string> handLines = new List<string>(50);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,SplitUpMultipleHandsToLines,The following statement contains a magic number: foreach (var item in allLines)              {                  string line = item.TrimEnd('\r'' ' ');                    if (string.IsNullOrWhiteSpace(line))                  {                      if (handLines.Count > 0)                      {                          yield return handLines.ToArray();                          handLines = new List<string>(50);                      }                      continue;                  }                  handLines.Add(line);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int startIndex = line.Length - 22;
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: string dateString = line.Substring(startIndex' 20);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int month = FastInt.Parse(dateString' 5);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int day = FastInt.Parse(dateString' 8);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int hour = FastInt.Parse(dateString' 11);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int minuteStartIndex = dateString.IndexOf(':'' 12) + 1;
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: int second = FastInt.Parse(dateString' minuteStartIndex + 3);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string line = handLines[i];                    // Check for summary line:                  //  *** SUMMARY ***                  if (line[0] == '*' && line[4] == 'S')                  {                      // Line after summary line is:                      //  Total pot $13.12 | Rake $0.59                       // or                      //  Total pot $62.63 Main pot $54.75. Side pot $5.38. | Rake $2.50                       string totalLine = handLines[i + 1];                        int lastSpaceIndex = totalLine.LastIndexOf(' ');                      int spaceAfterFirstNumber = totalLine.IndexOf(' '' 11);                        string rake = totalLine.Substring(lastSpaceIndex + 1' totalLine.Length - lastSpaceIndex - 1);                        handHistorySummary.Rake = decimal.Parse(rake' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        string totalPot = totalLine.Substring(10' spaceAfterFirstNumber - 10);                        handHistorySummary.TotalPot = decimal.Parse(totalPot' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string line = handLines[i];                    // Check for summary line:                  //  *** SUMMARY ***                  if (line[0] == '*' && line[4] == 'S')                  {                      // Line after summary line is:                      //  Total pot $13.12 | Rake $0.59                       // or                      //  Total pot $62.63 Main pot $54.75. Side pot $5.38. | Rake $2.50                       string totalLine = handLines[i + 1];                        int lastSpaceIndex = totalLine.LastIndexOf(' ');                      int spaceAfterFirstNumber = totalLine.IndexOf(' '' 11);                        string rake = totalLine.Substring(lastSpaceIndex + 1' totalLine.Length - lastSpaceIndex - 1);                        handHistorySummary.Rake = decimal.Parse(rake' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        string totalPot = totalLine.Substring(10' spaceAfterFirstNumber - 10);                        handHistorySummary.TotalPot = decimal.Parse(totalPot' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string line = handLines[i];                    // Check for summary line:                  //  *** SUMMARY ***                  if (line[0] == '*' && line[4] == 'S')                  {                      // Line after summary line is:                      //  Total pot $13.12 | Rake $0.59                       // or                      //  Total pot $62.63 Main pot $54.75. Side pot $5.38. | Rake $2.50                       string totalLine = handLines[i + 1];                        int lastSpaceIndex = totalLine.LastIndexOf(' ');                      int spaceAfterFirstNumber = totalLine.IndexOf(' '' 11);                        string rake = totalLine.Substring(lastSpaceIndex + 1' totalLine.Length - lastSpaceIndex - 1);                        handHistorySummary.Rake = decimal.Parse(rake' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        string totalPot = totalLine.Substring(10' spaceAfterFirstNumber - 10);                        handHistorySummary.TotalPot = decimal.Parse(totalPot' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string line = handLines[i];                    // Check for summary line:                  //  *** SUMMARY ***                  if (line[0] == '*' && line[4] == 'S')                  {                      // Line after summary line is:                      //  Total pot $13.12 | Rake $0.59                       // or                      //  Total pot $62.63 Main pot $54.75. Side pot $5.38. | Rake $2.50                       string totalLine = handLines[i + 1];                        int lastSpaceIndex = totalLine.LastIndexOf(' ');                      int spaceAfterFirstNumber = totalLine.IndexOf(' '' 11);                        string rake = totalLine.Substring(lastSpaceIndex + 1' totalLine.Length - lastSpaceIndex - 1);                        handHistorySummary.Rake = decimal.Parse(rake' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        string totalPot = totalLine.Substring(10' spaceAfterFirstNumber - 10);                        handHistorySummary.TotalPot = decimal.Parse(totalPot' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseHandId,The following statement contains a magic number: const int zoomHandIdStartIndex = 22;
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseHandId,The following statement contains a magic number: char handIDchar = line[11];
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseTableName,The following statement contains a magic number: const int firstDashIndex = 7;
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: int maxPlayers = FastInt.Parse(handLines[1][secondDash + 2]);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (maxPlayers == 1)              {                  maxPlayers = 10;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: if (format.Equals(PokerFormat.SitAndGo))              {                  // Expect first line to look like                   // PokerStars Hand #121732576120: Tournament #974090903' $13.79+$1.21 USD Hold'em No Limit - Level III (25/50) - 2014/09/18 16:59:24 ET                  var commaIndex = handLines[0].IndexOf('''' TournamentIdStartindex);                  var secondSpaceIndex = handLines[0].IndexOf(' '' commaIndex + 3);                    // starts after the currency after the Buyin                  startIndex = handLines[0].IndexOf(' '' secondSpaceIndex + 2) + 1;                  endIndex = handLines[0].IndexOf('-') - 2;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: if (format.Equals(PokerFormat.SitAndGo))              {                  // Expect first line to look like                   // PokerStars Hand #121732576120: Tournament #974090903' $13.79+$1.21 USD Hold'em No Limit - Level III (25/50) - 2014/09/18 16:59:24 ET                  var commaIndex = handLines[0].IndexOf('''' TournamentIdStartindex);                  var secondSpaceIndex = handLines[0].IndexOf(' '' commaIndex + 3);                    // starts after the currency after the Buyin                  startIndex = handLines[0].IndexOf(' '' secondSpaceIndex + 2) + 1;                  endIndex = handLines[0].IndexOf('-') - 2;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: if (format.Equals(PokerFormat.SitAndGo))              {                  // Expect first line to look like                   // PokerStars Hand #121732576120: Tournament #974090903' $13.79+$1.21 USD Hold'em No Limit - Level III (25/50) - 2014/09/18 16:59:24 ET                  var commaIndex = handLines[0].IndexOf('''' TournamentIdStartindex);                  var secondSpaceIndex = handLines[0].IndexOf(' '' commaIndex + 3);                    // starts after the currency after the Buyin                  startIndex = handLines[0].IndexOf(' '' secondSpaceIndex + 2) + 1;                  endIndex = handLines[0].IndexOf('-') - 2;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: if (format.Equals(PokerFormat.CashGame))              {                  // Expect first line to look like                   // PokerStars Game #121735581349:  Hold'em No Limit ($0.02/$0.05 USD) - 2014/09/18 18:00:06 ET                  var colonIndex = handLines[0].IndexOf(':'' GameIdStartIndex);                    // can be either 1 or 2 spaces after the colon                  startIndex = (handLines[0][colonIndex + 2] == ' ') ? colonIndex + 3 : colonIndex + 2;                  endIndex = handLines[0].IndexOf('(') - 2;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: if (format.Equals(PokerFormat.CashGame))              {                  // Expect first line to look like                   // PokerStars Game #121735581349:  Hold'em No Limit ($0.02/$0.05 USD) - 2014/09/18 18:00:06 ET                  var colonIndex = handLines[0].IndexOf(':'' GameIdStartIndex);                    // can be either 1 or 2 spaces after the colon                  startIndex = (handLines[0][colonIndex + 2] == ' ') ? colonIndex + 3 : colonIndex + 2;                  endIndex = handLines[0].IndexOf('(') - 2;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: if (format.Equals(PokerFormat.CashGame))              {                  // Expect first line to look like                   // PokerStars Game #121735581349:  Hold'em No Limit ($0.02/$0.05 USD) - 2014/09/18 18:00:06 ET                  var colonIndex = handLines[0].IndexOf(':'' GameIdStartIndex);                    // can be either 1 or 2 spaces after the colon                  startIndex = (handLines[0][colonIndex + 2] == ' ') ? colonIndex + 3 : colonIndex + 2;                  endIndex = handLines[0].IndexOf('(') - 2;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: if (format.Equals(PokerFormat.CashGame))              {                  // Expect first line to look like                   // PokerStars Game #121735581349:  Hold'em No Limit ($0.02/$0.05 USD) - 2014/09/18 18:00:06 ET                  var colonIndex = handLines[0].IndexOf(':'' GameIdStartIndex);                    // can be either 1 or 2 spaces after the colon                  startIndex = (handLines[0][colonIndex + 2] == ' ') ? colonIndex + 3 : colonIndex + 2;                  endIndex = handLines[0].IndexOf('(') - 2;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (gameTypeLength)              {                  case 16:                      return GameType.NoLimitHoldem;                  case 15:                      return GameType.PotLimitOmaha;                  case 13:                      return GameType.FixedLimitHoldem;                  case 17:                      string gameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      if (gameTypeString[0] == 'O')                      {                          return GameType.FixedLimitOmahaHiLo;                      }                      return GameType.PotLimitHoldem;                  case 21:                      return GameType.PotLimitOmahaHiLo;                  case 20:                      return GameType.NoLimitOmahaHiLo;                  case 11:                      return GameType.FixedLimitOmaha;                  default:                      string errorGameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      throw new UnrecognizedGameTypeException(handLines[0]' "Unrecognized game-type: " + errorGameTypeString);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (gameTypeLength)              {                  case 16:                      return GameType.NoLimitHoldem;                  case 15:                      return GameType.PotLimitOmaha;                  case 13:                      return GameType.FixedLimitHoldem;                  case 17:                      string gameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      if (gameTypeString[0] == 'O')                      {                          return GameType.FixedLimitOmahaHiLo;                      }                      return GameType.PotLimitHoldem;                  case 21:                      return GameType.PotLimitOmahaHiLo;                  case 20:                      return GameType.NoLimitOmahaHiLo;                  case 11:                      return GameType.FixedLimitOmaha;                  default:                      string errorGameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      throw new UnrecognizedGameTypeException(handLines[0]' "Unrecognized game-type: " + errorGameTypeString);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (gameTypeLength)              {                  case 16:                      return GameType.NoLimitHoldem;                  case 15:                      return GameType.PotLimitOmaha;                  case 13:                      return GameType.FixedLimitHoldem;                  case 17:                      string gameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      if (gameTypeString[0] == 'O')                      {                          return GameType.FixedLimitOmahaHiLo;                      }                      return GameType.PotLimitHoldem;                  case 21:                      return GameType.PotLimitOmahaHiLo;                  case 20:                      return GameType.NoLimitOmahaHiLo;                  case 11:                      return GameType.FixedLimitOmaha;                  default:                      string errorGameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      throw new UnrecognizedGameTypeException(handLines[0]' "Unrecognized game-type: " + errorGameTypeString);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (gameTypeLength)              {                  case 16:                      return GameType.NoLimitHoldem;                  case 15:                      return GameType.PotLimitOmaha;                  case 13:                      return GameType.FixedLimitHoldem;                  case 17:                      string gameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      if (gameTypeString[0] == 'O')                      {                          return GameType.FixedLimitOmahaHiLo;                      }                      return GameType.PotLimitHoldem;                  case 21:                      return GameType.PotLimitOmahaHiLo;                  case 20:                      return GameType.NoLimitOmahaHiLo;                  case 11:                      return GameType.FixedLimitOmaha;                  default:                      string errorGameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      throw new UnrecognizedGameTypeException(handLines[0]' "Unrecognized game-type: " + errorGameTypeString);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (gameTypeLength)              {                  case 16:                      return GameType.NoLimitHoldem;                  case 15:                      return GameType.PotLimitOmaha;                  case 13:                      return GameType.FixedLimitHoldem;                  case 17:                      string gameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      if (gameTypeString[0] == 'O')                      {                          return GameType.FixedLimitOmahaHiLo;                      }                      return GameType.PotLimitHoldem;                  case 21:                      return GameType.PotLimitOmahaHiLo;                  case 20:                      return GameType.NoLimitOmahaHiLo;                  case 11:                      return GameType.FixedLimitOmaha;                  default:                      string errorGameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      throw new UnrecognizedGameTypeException(handLines[0]' "Unrecognized game-type: " + errorGameTypeString);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (gameTypeLength)              {                  case 16:                      return GameType.NoLimitHoldem;                  case 15:                      return GameType.PotLimitOmaha;                  case 13:                      return GameType.FixedLimitHoldem;                  case 17:                      string gameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      if (gameTypeString[0] == 'O')                      {                          return GameType.FixedLimitOmahaHiLo;                      }                      return GameType.PotLimitHoldem;                  case 21:                      return GameType.PotLimitOmahaHiLo;                  case 20:                      return GameType.NoLimitOmahaHiLo;                  case 11:                      return GameType.FixedLimitOmaha;                  default:                      string errorGameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      throw new UnrecognizedGameTypeException(handLines[0]' "Unrecognized game-type: " + errorGameTypeString);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseGameType,The following statement contains a magic number: switch (gameTypeLength)              {                  case 16:                      return GameType.NoLimitHoldem;                  case 15:                      return GameType.PotLimitOmaha;                  case 13:                      return GameType.FixedLimitHoldem;                  case 17:                      string gameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      if (gameTypeString[0] == 'O')                      {                          return GameType.FixedLimitOmahaHiLo;                      }                      return GameType.PotLimitHoldem;                  case 21:                      return GameType.PotLimitOmahaHiLo;                  case 20:                      return GameType.NoLimitOmahaHiLo;                  case 11:                      return GameType.FixedLimitOmaha;                  default:                      string errorGameTypeString = handLines[0].Substring(startIndex' gameTypeLength);                      throw new UnrecognizedGameTypeException(handLines[0]' "Unrecognized game-type: " + errorGameTypeString);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseBuyin,The following statement contains a magic number: int startIndex = handLines[0].IndexOf('''' TournamentIdStartindex) + 2;
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseBuyin,The following statement contains a magic number: if (buyinSplit.Length == 3)              {                  prizePoolValue = decimal.Parse(buyinSplit[0]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                  knockoutValue = decimal.Parse(buyinSplit[1]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                  rake = decimal.Parse(buyinSplit[2]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);              }              else if (buyinSplit.Length == 2)              {                  prizePoolValue = decimal.Parse(buyinSplit[0]' NumberStyles.Currency' _numberFormatInfo);                  rake = decimal.Parse(buyinSplit[1]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);              }              else              {                  throw new BuyinException(handLines[0]' "Unrecognized Buyin Format");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseBuyin,The following statement contains a magic number: if (buyinSplit.Length == 3)              {                  prizePoolValue = decimal.Parse(buyinSplit[0]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                  knockoutValue = decimal.Parse(buyinSplit[1]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                  rake = decimal.Parse(buyinSplit[2]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);              }              else if (buyinSplit.Length == 2)              {                  prizePoolValue = decimal.Parse(buyinSplit[0]' NumberStyles.Currency' _numberFormatInfo);                  rake = decimal.Parse(buyinSplit[1]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);              }              else              {                  throw new BuyinException(handLines[0]' "Unrecognized Buyin Format");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseBuyin,The following statement contains a magic number: if (buyinSplit.Length == 3)              {                  prizePoolValue = decimal.Parse(buyinSplit[0]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                  knockoutValue = decimal.Parse(buyinSplit[1]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                  rake = decimal.Parse(buyinSplit[2]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);              }              else if (buyinSplit.Length == 2)              {                  prizePoolValue = decimal.Parse(buyinSplit[0]' NumberStyles.Currency' _numberFormatInfo);                  rake = decimal.Parse(buyinSplit[1]' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);              }              else              {                  throw new BuyinException(handLines[0]' "Unrecognized Buyin Format");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,IsValidOrCancelledHand,The following statement contains a magic number: for (int i = handLines.Length - 1; i > 0; i--)              {                  string line = handLines[i];                    if (line.StartsWith("*** SU"' StringComparison.Ordinal)) // if its the summary line                  {                      // actually 'Hand cancelled' can be in any line between line 2 and i-1                      for (int k = i-1; k >= 2; k--)                      {                          var cancelledLine = handLines[k];                          bool cancelled = (cancelledLine[0] == 'H' && cancelledLine[cancelledLine.Length - 1] == 'd' && cancelledLine[cancelledLine.Length - 2] == 'e');                            if (cancelled)                          {                              isCancelled = true;                              break;                          }                      }                        return true;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,IsValidOrCancelledHand,The following statement contains a magic number: for (int i = handLines.Length - 1; i > 0; i--)              {                  string line = handLines[i];                    if (line.StartsWith("*** SU"' StringComparison.Ordinal)) // if its the summary line                  {                      // actually 'Hand cancelled' can be in any line between line 2 and i-1                      for (int k = i-1; k >= 2; k--)                      {                          var cancelledLine = handLines[k];                          bool cancelled = (cancelledLine[0] == 'H' && cancelledLine[cancelledLine.Length - 1] == 'd' && cancelledLine[cancelledLine.Length - 2] == 'e');                            if (cancelled)                          {                              isCancelled = true;                              break;                          }                      }                        return true;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,IsJoinTableLine,The following statement contains a magic number: return line[length - 2] == '#' || line[length - 3] == '#';
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,IsJoinTableLine,The following statement contains a magic number: return line[length - 2] == '#' || line[length - 3] == '#';
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,IsRebuyLine,The following statement contains a magic number: return (line[lastSpaceIndex - 1] == 'r' && line[lastSpaceIndex - 4] == ' ' && line[lastSpaceIndex - 5] == 's');
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,IsRebuyLine,The following statement contains a magic number: return (line[lastSpaceIndex - 1] == 'r' && line[lastSpaceIndex - 4] == ' ' && line[lastSpaceIndex - 5] == 's');
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseBlindActions,The following statement contains a magic number: for (int i = firstActionIndex; i < handLines.Length; i++)              {                  var line = handLines[i];                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      //blind actions(BB' SB ANTE) may end in a number during the blinds                      //reto27 joins the table at seat #3                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                          if(IsJoinTableLine(line))                          {                              continue;                          }                          break;                        case 'n':                          // Gaby66916: posts big blind $0.25 and is all-in <--- this is okay                          if (line[line.Length - 2] == 'o')                              continue;                          break;                        //*** HOLE CARDS ***                      case '*':                          return i + 1;                        //*** FLOP *** [6d 7c 6h]                      //*** TURN *** [6d 7c 6h] [2s]                      //*** RIVER *** [6d 7c 6h 2s] [Qc]                      case ']':                          throw new HandActionException(string.Join(Environment.NewLine' handLines)' "Unexpected Line: " + line);                        default:                          continue;                  }                    int colonIndex = line.LastIndexOf(':');                    if (colonIndex > -1)                  {                      var action = ParsePostingActionLine(line' colonIndex' smallBlind' bigBlind);                        if (action != null)                      {                          if (action.HandActionType == HandActionType.SMALL_BLIND) smallBlind = true;                          if (action.HandActionType == HandActionType.BIG_BLIND) bigBlind = true;                            handActions.Add(action);                      }                    }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseShowDown,The following statement contains a magic number: for (int i = actionIndex; i < handLines.Length; i++)              {                  var line = handLines[i];                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      // woezelenpip collected $7.50 from pot                      // kiljka: sits out                       case 't':                          if (line.EndsWith("pot"' StringComparison.Ordinal))                          {                              handActions.Add(ParseCollectedLine(line' Street.Showdown));                          }                          continue;                      // templargio collected €6.08 from side pot-2                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                            // skip lines like                          // Hudison747 was removed from the table for failing to post                          if (line[line.Length - 1] == 't' && line[line.Length - 2] == 's')                              continue;                                                    if (line[line.Length - 2] == '-')                          {                              handActions.Add(ParseCollectedLine(line' Street.Showdown));                          }                          continue;                        //*** FLOP *** [6d 7c 6h]                      //*** TURN *** [6d 7c 6h] [2s]                      //*** RIVER *** [6d 7c 6h 2s] [Qc]                      case ']':                          continue;                        //*** SUMMARY ***                      //*** SHOW DOWN ***                      //*** FIRST SHOW DOWN ***                      //*** SECOND SHOW DOWN ***                      case '*':                          char starId = line[5];                            switch (starId)                          {                              //*** SHOW DOWN ***                              //*** FIRST SHOW DOWN ***                              case 'H':                              case 'I':                                  continue;                                //*** SUMMARY ***                              case 'U':                                  return;                              //Skipping Second showdown' that is parsed with ParseRunItTwice                              //*** SECOND SHOW DOWN ***                              case 'E':                                  continue;                                default:                                  throw new ArgumentException("Unhandled line: " + line);                          }                        //No low hand qualified                      //EASSA: mucks hand                      case 'd':                          if (line.EndsWith("hand"' StringComparison.Ordinal))                          {                              break;                          }                          continue;                        //Player1: shows [6d Ad] (a pair of Sixes)                      case ')':                          break;                        //skip unidentified actions such as                      //leaves table                      //stands up                      default:                          continue;                  }                    int colonIndex = line.LastIndexOf(':'); // do backwards as players can have : in their name                    var action = ParseMiscShowdownLine(line' colonIndex' gameType);                  handActions.Add(action);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseShowDown,The following statement contains a magic number: for (int i = actionIndex; i < handLines.Length; i++)              {                  var line = handLines[i];                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      // woezelenpip collected $7.50 from pot                      // kiljka: sits out                       case 't':                          if (line.EndsWith("pot"' StringComparison.Ordinal))                          {                              handActions.Add(ParseCollectedLine(line' Street.Showdown));                          }                          continue;                      // templargio collected €6.08 from side pot-2                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                            // skip lines like                          // Hudison747 was removed from the table for failing to post                          if (line[line.Length - 1] == 't' && line[line.Length - 2] == 's')                              continue;                                                    if (line[line.Length - 2] == '-')                          {                              handActions.Add(ParseCollectedLine(line' Street.Showdown));                          }                          continue;                        //*** FLOP *** [6d 7c 6h]                      //*** TURN *** [6d 7c 6h] [2s]                      //*** RIVER *** [6d 7c 6h 2s] [Qc]                      case ']':                          continue;                        //*** SUMMARY ***                      //*** SHOW DOWN ***                      //*** FIRST SHOW DOWN ***                      //*** SECOND SHOW DOWN ***                      case '*':                          char starId = line[5];                            switch (starId)                          {                              //*** SHOW DOWN ***                              //*** FIRST SHOW DOWN ***                              case 'H':                              case 'I':                                  continue;                                //*** SUMMARY ***                              case 'U':                                  return;                              //Skipping Second showdown' that is parsed with ParseRunItTwice                              //*** SECOND SHOW DOWN ***                              case 'E':                                  continue;                                default:                                  throw new ArgumentException("Unhandled line: " + line);                          }                        //No low hand qualified                      //EASSA: mucks hand                      case 'd':                          if (line.EndsWith("hand"' StringComparison.Ordinal))                          {                              break;                          }                          continue;                        //Player1: shows [6d Ad] (a pair of Sixes)                      case ')':                          break;                        //skip unidentified actions such as                      //leaves table                      //stands up                      default:                          continue;                  }                    int colonIndex = line.LastIndexOf(':'); // do backwards as players can have : in their name                    var action = ParseMiscShowdownLine(line' colonIndex' gameType);                  handActions.Add(action);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseShowDown,The following statement contains a magic number: for (int i = actionIndex; i < handLines.Length; i++)              {                  var line = handLines[i];                    var lastChar = line[line.Length - 1];                    switch (lastChar)                  {                      // woezelenpip collected $7.50 from pot                      // kiljka: sits out                       case 't':                          if (line.EndsWith("pot"' StringComparison.Ordinal))                          {                              handActions.Add(ParseCollectedLine(line' Street.Showdown));                          }                          continue;                      // templargio collected €6.08 from side pot-2                      case '0':                      case '1':                      case '2':                      case '3':                      case '4':                      case '5':                      case '6':                      case '7':                      case '8':                      case '9':                            // skip lines like                          // Hudison747 was removed from the table for failing to post                          if (line[line.Length - 1] == 't' && line[line.Length - 2] == 's')                              continue;                                                    if (line[line.Length - 2] == '-')                          {                              handActions.Add(ParseCollectedLine(line' Street.Showdown));                          }                          continue;                        //*** FLOP *** [6d 7c 6h]                      //*** TURN *** [6d 7c 6h] [2s]                      //*** RIVER *** [6d 7c 6h 2s] [Qc]                      case ']':                          continue;                        //*** SUMMARY ***                      //*** SHOW DOWN ***                      //*** FIRST SHOW DOWN ***                      //*** SECOND SHOW DOWN ***                      case '*':                          char starId = line[5];                            switch (starId)                          {                              //*** SHOW DOWN ***                              //*** FIRST SHOW DOWN ***                              case 'H':                              case 'I':                                  continue;                                //*** SUMMARY ***                              case 'U':                                  return;                              //Skipping Second showdown' that is parsed with ParseRunItTwice                              //*** SECOND SHOW DOWN ***                              case 'E':                                  continue;                                default:                                  throw new ArgumentException("Unhandled line: " + line);                          }                        //No low hand qualified                      //EASSA: mucks hand                      case 'd':                          if (line.EndsWith("hand"' StringComparison.Ordinal))                          {                              break;                          }                          continue;                        //Player1: shows [6d Ad] (a pair of Sixes)                      case ')':                          break;                        //skip unidentified actions such as                      //leaves table                      //stands up                      default:                          continue;                  }                    int colonIndex = line.LastIndexOf(':'); // do backwards as players can have : in their name                    var action = ParseMiscShowdownLine(line' colonIndex' gameType);                  handActions.Add(action);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseLine,The following statement contains a magic number: if (line.Length > 29 && line[13] == '(')              {                  handActions.Add(ParseUncalledBetLine(line' currentStreet));                  currentStreet = Street.Showdown;                  return true;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseLine,The following statement contains a magic number: if (line.Length > 29 && line[13] == '(')              {                  handActions.Add(ParseUncalledBetLine(line' currentStreet));                  currentStreet = Street.Showdown;                  return true;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseLine,The following statement contains a magic number: switch (lastChar)              {                  //All actions with an amount(BET' CALL' RAISE)                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case 's':                      if (IsJoinTableLine(line))                          return false;                        break;                    //2As88 will be allowed to play after the button                  //matze1987: raises $8.94 to $10.94 and is all-in                  case 'n':                      if (line.EndsWith("on"' StringComparison.Ordinal))                      {                          return false;                      }                      break;                    // golfiarzp has timed out                  // Hudison747 was removed from the table for failing to post                  case 't':                      if (line[line.Length - 2] == 'u' || line[line.Length-2] == 's')                          return false;                      break;                      //*** SUMMARY ***                  //*** SHOW DOWN ***                  case '*':                  //*** FLOP *** [Qs Js 3h]                  //Dealt to PS_Hero [4s 7h]                  case ']':                      char firstChar = line[0];                        if (firstChar == '*')                      {                          return ParseCurrentStreet(line' ref currentStreet);                      }                      return false;                                   // molotork65: raises $2.50 to $6.50 and has reached the $10 cap                  case 'p':                      break;                    default:                      return false;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseLine,The following statement contains a magic number: switch (lastChar)              {                  //All actions with an amount(BET' CALL' RAISE)                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case 's':                      if (IsJoinTableLine(line))                          return false;                        break;                    //2As88 will be allowed to play after the button                  //matze1987: raises $8.94 to $10.94 and is all-in                  case 'n':                      if (line.EndsWith("on"' StringComparison.Ordinal))                      {                          return false;                      }                      break;                    // golfiarzp has timed out                  // Hudison747 was removed from the table for failing to post                  case 't':                      if (line[line.Length - 2] == 'u' || line[line.Length-2] == 's')                          return false;                      break;                      //*** SUMMARY ***                  //*** SHOW DOWN ***                  case '*':                  //*** FLOP *** [Qs Js 3h]                  //Dealt to PS_Hero [4s 7h]                  case ']':                      char firstChar = line[0];                        if (firstChar == '*')                      {                          return ParseCurrentStreet(line' ref currentStreet);                      }                      return false;                                   // molotork65: raises $2.50 to $6.50 and has reached the $10 cap                  case 'p':                      break;                    default:                      return false;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseLine,The following statement contains a magic number: if (line[line.Length - 2] == '#')              {                  // joins action                  // don't bother parsing it or adding it                  return false;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCurrentStreet,The following statement contains a magic number: char typeOfEventChar = line[7];
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCurrentStreet,The following statement contains a magic number: if (typeOfEventChar == 'S')                  typeOfEventChar = line[13];
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCurrentStreet,The following statement contains a magic number: if (typeOfEventChar == 'O')                  typeOfEventChar = line[14];
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseMiscShowdownLine,The following statement contains a magic number: char actionIdentifier = actionLine[colonIndex + 2];
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePostingActionLine,The following statement contains a magic number: char identifierChar = actionLine[colonIndex + 14];
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePostingActionLine,The following statement contains a magic number: if (lastChar == 'n')              {                  isAllIn = true;                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePostingActionLine,The following statement contains a magic number: switch (identifierChar)              {                  // this is important' because we need to adjust the raise sizes accordingly                  case 'b':                      firstDigitIndex = colonIndex + 20;                      handActionType = smallBlindPosted ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                      break;                  case 'i':                      firstDigitIndex = colonIndex + 18;                      handActionType = bigBlindPosted ? HandActionType.POSTS : HandActionType.BIG_BLIND;                      break;                                    case 't':                      firstDigitIndex = colonIndex + 17;                      handActionType = HandActionType.ANTE;                      break;                    case '&':                      firstDigitIndex = colonIndex + 27;                      handActionType = HandActionType.POSTS;                      break;                  default:                      throw new HandActionException(actionLine' "ParsePostingActionLine: Unregonized lined " + actionLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePostingActionLine,The following statement contains a magic number: switch (identifierChar)              {                  // this is important' because we need to adjust the raise sizes accordingly                  case 'b':                      firstDigitIndex = colonIndex + 20;                      handActionType = smallBlindPosted ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                      break;                  case 'i':                      firstDigitIndex = colonIndex + 18;                      handActionType = bigBlindPosted ? HandActionType.POSTS : HandActionType.BIG_BLIND;                      break;                                    case 't':                      firstDigitIndex = colonIndex + 17;                      handActionType = HandActionType.ANTE;                      break;                    case '&':                      firstDigitIndex = colonIndex + 27;                      handActionType = HandActionType.POSTS;                      break;                  default:                      throw new HandActionException(actionLine' "ParsePostingActionLine: Unregonized lined " + actionLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePostingActionLine,The following statement contains a magic number: switch (identifierChar)              {                  // this is important' because we need to adjust the raise sizes accordingly                  case 'b':                      firstDigitIndex = colonIndex + 20;                      handActionType = smallBlindPosted ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                      break;                  case 'i':                      firstDigitIndex = colonIndex + 18;                      handActionType = bigBlindPosted ? HandActionType.POSTS : HandActionType.BIG_BLIND;                      break;                                    case 't':                      firstDigitIndex = colonIndex + 17;                      handActionType = HandActionType.ANTE;                      break;                    case '&':                      firstDigitIndex = colonIndex + 27;                      handActionType = HandActionType.POSTS;                      break;                  default:                      throw new HandActionException(actionLine' "ParsePostingActionLine: Unregonized lined " + actionLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePostingActionLine,The following statement contains a magic number: switch (identifierChar)              {                  // this is important' because we need to adjust the raise sizes accordingly                  case 'b':                      firstDigitIndex = colonIndex + 20;                      handActionType = smallBlindPosted ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                      break;                  case 'i':                      firstDigitIndex = colonIndex + 18;                      handActionType = bigBlindPosted ? HandActionType.POSTS : HandActionType.BIG_BLIND;                      break;                                    case 't':                      firstDigitIndex = colonIndex + 17;                      handActionType = HandActionType.ANTE;                      break;                    case '&':                      firstDigitIndex = colonIndex + 27;                      handActionType = HandActionType.POSTS;                      break;                  default:                      throw new HandActionException(actionLine' "ParsePostingActionLine: Unregonized lined " + actionLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseRegularActionLine,The following statement contains a magic number: if (isAllIn)// Remove the  ' and is all in' and just proceed like normal              {                  actionLine = actionLine.Remove(actionLine.Length - 14);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseRegularActionLine,The following statement contains a magic number: if (hasReachedCap)// Remove the  ' and has reached the $80 cap' and just proceed like normal              {                  int lastNonCapCharacter = actionLine.LastIndexOf('n') - 2;  // find the n in the and                  actionLine = actionLine.Remove(lastNonCapCharacter);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseRegularActionLine,The following statement contains a magic number: char actionIdentifier = actionLine[colonIndex + 2];
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseRegularActionLine,The following statement contains a magic number: switch (actionIdentifier)              {                  //gaydaddy: folds                  case 'f':                      return new HandAction(playerName' HandActionType.FOLD' currentStreet);                    case 'c':                      //Piotr280688: checks                      if (actionLine[colonIndex + 3] == 'h')                      {                          return new HandAction(playerName' HandActionType.CHECK' currentStreet);                      }                      //MECO-LEO: calls $1.23                      firstDigitIndex = actionLine.LastIndexOf(' ') + 1;                      amount = decimal.Parse(actionLine.Substring(firstDigitIndex' actionLine.Length - firstDigitIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      actionType = HandActionType.CALL;                      break;                    //MS13ZEN: bets $1.76                  case 'b':                      firstDigitIndex = actionLine.LastIndexOf(' ') + 1;                      amount = decimal.Parse(actionLine.Substring(firstDigitIndex' actionLine.Length - firstDigitIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      actionType = HandActionType.BET;                      break;                    //Zypherin: raises $6400 to $8300                                case 'r':                      firstDigitIndex = actionLine.LastIndexOf(' ') + 1;                      amount = decimal.Parse(actionLine.Substring(firstDigitIndex' actionLine.Length - firstDigitIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      actionType = HandActionType.RAISE;                      break;                  default:                      throw new HandActionException(actionLine' "ParseRegularActionLine: Unrecognized line:" + actionLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCollectedLine,The following statement contains a magic number: if (actionLine[actionLine.Length - 2] == '-')              {                  handActionType = HandActionType.WINS_SIDE_POT;                  potNumber = Int32.Parse(actionLine[actionLine.Length - 1].ToString());                  // This removes the ' from side pot-2' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 16);              }              // check for a side pot line like              // bozzoTHEclow collected $136.80 from side pot              else if (actionLine[actionLine.Length - 8] == 's')              {                  potNumber = 1;                  handActionType = HandActionType.WINS_SIDE_POT;                  // This removes the ' from side pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // check for main pot line like               //bozzoTHEclow collected $245.20 from main pot              else if (actionLine[actionLine.Length - 8] == 'm')              {                  // This removes the ' from main pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // otherwise is basic line like              // alecc frost collected $1.25 from pot              else              {                  // This removes the ' from pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCollectedLine,The following statement contains a magic number: if (actionLine[actionLine.Length - 2] == '-')              {                  handActionType = HandActionType.WINS_SIDE_POT;                  potNumber = Int32.Parse(actionLine[actionLine.Length - 1].ToString());                  // This removes the ' from side pot-2' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 16);              }              // check for a side pot line like              // bozzoTHEclow collected $136.80 from side pot              else if (actionLine[actionLine.Length - 8] == 's')              {                  potNumber = 1;                  handActionType = HandActionType.WINS_SIDE_POT;                  // This removes the ' from side pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // check for main pot line like               //bozzoTHEclow collected $245.20 from main pot              else if (actionLine[actionLine.Length - 8] == 'm')              {                  // This removes the ' from main pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // otherwise is basic line like              // alecc frost collected $1.25 from pot              else              {                  // This removes the ' from pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCollectedLine,The following statement contains a magic number: if (actionLine[actionLine.Length - 2] == '-')              {                  handActionType = HandActionType.WINS_SIDE_POT;                  potNumber = Int32.Parse(actionLine[actionLine.Length - 1].ToString());                  // This removes the ' from side pot-2' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 16);              }              // check for a side pot line like              // bozzoTHEclow collected $136.80 from side pot              else if (actionLine[actionLine.Length - 8] == 's')              {                  potNumber = 1;                  handActionType = HandActionType.WINS_SIDE_POT;                  // This removes the ' from side pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // check for main pot line like               //bozzoTHEclow collected $245.20 from main pot              else if (actionLine[actionLine.Length - 8] == 'm')              {                  // This removes the ' from main pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // otherwise is basic line like              // alecc frost collected $1.25 from pot              else              {                  // This removes the ' from pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCollectedLine,The following statement contains a magic number: if (actionLine[actionLine.Length - 2] == '-')              {                  handActionType = HandActionType.WINS_SIDE_POT;                  potNumber = Int32.Parse(actionLine[actionLine.Length - 1].ToString());                  // This removes the ' from side pot-2' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 16);              }              // check for a side pot line like              // bozzoTHEclow collected $136.80 from side pot              else if (actionLine[actionLine.Length - 8] == 's')              {                  potNumber = 1;                  handActionType = HandActionType.WINS_SIDE_POT;                  // This removes the ' from side pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // check for main pot line like               //bozzoTHEclow collected $245.20 from main pot              else if (actionLine[actionLine.Length - 8] == 'm')              {                  // This removes the ' from main pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // otherwise is basic line like              // alecc frost collected $1.25 from pot              else              {                  // This removes the ' from pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCollectedLine,The following statement contains a magic number: if (actionLine[actionLine.Length - 2] == '-')              {                  handActionType = HandActionType.WINS_SIDE_POT;                  potNumber = Int32.Parse(actionLine[actionLine.Length - 1].ToString());                  // This removes the ' from side pot-2' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 16);              }              // check for a side pot line like              // bozzoTHEclow collected $136.80 from side pot              else if (actionLine[actionLine.Length - 8] == 's')              {                  potNumber = 1;                  handActionType = HandActionType.WINS_SIDE_POT;                  // This removes the ' from side pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // check for main pot line like               //bozzoTHEclow collected $245.20 from main pot              else if (actionLine[actionLine.Length - 8] == 'm')              {                  // This removes the ' from main pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // otherwise is basic line like              // alecc frost collected $1.25 from pot              else              {                  // This removes the ' from pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCollectedLine,The following statement contains a magic number: if (actionLine[actionLine.Length - 2] == '-')              {                  handActionType = HandActionType.WINS_SIDE_POT;                  potNumber = Int32.Parse(actionLine[actionLine.Length - 1].ToString());                  // This removes the ' from side pot-2' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 16);              }              // check for a side pot line like              // bozzoTHEclow collected $136.80 from side pot              else if (actionLine[actionLine.Length - 8] == 's')              {                  potNumber = 1;                  handActionType = HandActionType.WINS_SIDE_POT;                  // This removes the ' from side pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // check for main pot line like               //bozzoTHEclow collected $245.20 from main pot              else if (actionLine[actionLine.Length - 8] == 'm')              {                  // This removes the ' from main pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // otherwise is basic line like              // alecc frost collected $1.25 from pot              else              {                  // This removes the ' from pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCollectedLine,The following statement contains a magic number: if (actionLine[actionLine.Length - 2] == '-')              {                  handActionType = HandActionType.WINS_SIDE_POT;                  potNumber = Int32.Parse(actionLine[actionLine.Length - 1].ToString());                  // This removes the ' from side pot-2' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 16);              }              // check for a side pot line like              // bozzoTHEclow collected $136.80 from side pot              else if (actionLine[actionLine.Length - 8] == 's')              {                  potNumber = 1;                  handActionType = HandActionType.WINS_SIDE_POT;                  // This removes the ' from side pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // check for main pot line like               //bozzoTHEclow collected $245.20 from main pot              else if (actionLine[actionLine.Length - 8] == 'm')              {                  // This removes the ' from main pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 14);              }              // otherwise is basic line like              // alecc frost collected $1.25 from pot              else              {                  // This removes the ' from pot' from the line                  actionLine = actionLine.Substring(0' actionLine.Length - 9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCollectedLine,The following statement contains a magic number: string playerName = actionLine.Substring(0' firstAmountDigit - 11);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseUncalledBetLine,The following statement contains a magic number: int closeParenIndex = actionLine.IndexOf(')'' 14);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseUncalledBetLine,The following statement contains a magic number: decimal amount = decimal.Parse(actionLine.Substring(14' closeParenIndex - 14)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseUncalledBetLine,The following statement contains a magic number: decimal amount = decimal.Parse(actionLine.Substring(14' closeParenIndex - 14)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseUncalledBetLine,The following statement contains a magic number: int firstLetterOfName = closeParenIndex + 14;
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,GetFirstActionIndex,The following statement contains a magic number: for (int lineNumber = 2; lineNumber < handLines.Length; lineNumber++)              {                  //Seat 8: Zockermicha ($1613.51 in chips)                   //BoomDoon: posts small blind $5                  string line = handLines[lineNumber];                  if (line[0] != 'S' || line[line.Length - 1] != ')')                  {                      return lineNumber;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int lineNumber = 2; lineNumber < handLines.Length - 1; lineNumber++)              {                  string line = handLines[lineNumber];                    // in tournaments the lines 3 to x can include addons/rebuys' skip these                  if (!foundSeats && !line.StartsWith("Seat ") && line[6] != ':')                  {                      continue;                  }                   else if (foundSeats && !line.StartsWith("Seat "))                  {                      lastLineRead = lineNumber;                      break;                  }                  foundSeats = true;                    char endChar = line[line.Length - 1];                    //Seat 1: thaiJhonny ($16.08 in chips)                  //Seat 1: thaiJhonny ($16.08 in chips) is sitting out                  if (endChar != ')' && endChar != 't')                  {                      lastLineRead = lineNumber;                      break;                  }                    // seat info expected in format:                   //Seat 1: thaiJhonny ($16.08 in chips)                  const int seatNumberStartIndex = 4;                  int spaceIndex = line.IndexOf(' '' seatNumberStartIndex);                  int colonIndex = line.IndexOf(':'' spaceIndex + 1);                  int seatNumber = FastInt.Parse(line' spaceIndex + 1);                    // we need to find the ( before the number. players can have ( in their name so we need to go backwards and skip the last one                  int openParenIndex = line.LastIndexOf('(');                    //Seat 2: ZamaskaStars (1660 in chips) out of hand (moved from another table into small blind)                  if (line[openParenIndex + 1] == 'm')                  {                      line = line.Remove(openParenIndex);                      openParenIndex = line.LastIndexOf('(');                  }                                    int spaceAfterOpenParen = line.IndexOf(' '' openParenIndex);                                    string playerName = line.Substring(colonIndex + 2' (openParenIndex - 1) - (colonIndex + 2));                    string stackString = line.Substring(openParenIndex + 1' spaceAfterOpenParen - (openParenIndex + 1));                  decimal stack = decimal.Parse(stackString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                    playerList.Add(new Player(playerName' stack' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int lineNumber = 2; lineNumber < handLines.Length - 1; lineNumber++)              {                  string line = handLines[lineNumber];                    // in tournaments the lines 3 to x can include addons/rebuys' skip these                  if (!foundSeats && !line.StartsWith("Seat ") && line[6] != ':')                  {                      continue;                  }                   else if (foundSeats && !line.StartsWith("Seat "))                  {                      lastLineRead = lineNumber;                      break;                  }                  foundSeats = true;                    char endChar = line[line.Length - 1];                    //Seat 1: thaiJhonny ($16.08 in chips)                  //Seat 1: thaiJhonny ($16.08 in chips) is sitting out                  if (endChar != ')' && endChar != 't')                  {                      lastLineRead = lineNumber;                      break;                  }                    // seat info expected in format:                   //Seat 1: thaiJhonny ($16.08 in chips)                  const int seatNumberStartIndex = 4;                  int spaceIndex = line.IndexOf(' '' seatNumberStartIndex);                  int colonIndex = line.IndexOf(':'' spaceIndex + 1);                  int seatNumber = FastInt.Parse(line' spaceIndex + 1);                    // we need to find the ( before the number. players can have ( in their name so we need to go backwards and skip the last one                  int openParenIndex = line.LastIndexOf('(');                    //Seat 2: ZamaskaStars (1660 in chips) out of hand (moved from another table into small blind)                  if (line[openParenIndex + 1] == 'm')                  {                      line = line.Remove(openParenIndex);                      openParenIndex = line.LastIndexOf('(');                  }                                    int spaceAfterOpenParen = line.IndexOf(' '' openParenIndex);                                    string playerName = line.Substring(colonIndex + 2' (openParenIndex - 1) - (colonIndex + 2));                    string stackString = line.Substring(openParenIndex + 1' spaceAfterOpenParen - (openParenIndex + 1));                  decimal stack = decimal.Parse(stackString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                    playerList.Add(new Player(playerName' stack' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int lineNumber = 2; lineNumber < handLines.Length - 1; lineNumber++)              {                  string line = handLines[lineNumber];                    // in tournaments the lines 3 to x can include addons/rebuys' skip these                  if (!foundSeats && !line.StartsWith("Seat ") && line[6] != ':')                  {                      continue;                  }                   else if (foundSeats && !line.StartsWith("Seat "))                  {                      lastLineRead = lineNumber;                      break;                  }                  foundSeats = true;                    char endChar = line[line.Length - 1];                    //Seat 1: thaiJhonny ($16.08 in chips)                  //Seat 1: thaiJhonny ($16.08 in chips) is sitting out                  if (endChar != ')' && endChar != 't')                  {                      lastLineRead = lineNumber;                      break;                  }                    // seat info expected in format:                   //Seat 1: thaiJhonny ($16.08 in chips)                  const int seatNumberStartIndex = 4;                  int spaceIndex = line.IndexOf(' '' seatNumberStartIndex);                  int colonIndex = line.IndexOf(':'' spaceIndex + 1);                  int seatNumber = FastInt.Parse(line' spaceIndex + 1);                    // we need to find the ( before the number. players can have ( in their name so we need to go backwards and skip the last one                  int openParenIndex = line.LastIndexOf('(');                    //Seat 2: ZamaskaStars (1660 in chips) out of hand (moved from another table into small blind)                  if (line[openParenIndex + 1] == 'm')                  {                      line = line.Remove(openParenIndex);                      openParenIndex = line.LastIndexOf('(');                  }                                    int spaceAfterOpenParen = line.IndexOf(' '' openParenIndex);                                    string playerName = line.Substring(colonIndex + 2' (openParenIndex - 1) - (colonIndex + 2));                    string stackString = line.Substring(openParenIndex + 1' spaceAfterOpenParen - (openParenIndex + 1));                  decimal stack = decimal.Parse(stackString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                    playerList.Add(new Player(playerName' stack' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int lineNumber = 2; lineNumber < handLines.Length - 1; lineNumber++)              {                  string line = handLines[lineNumber];                    // in tournaments the lines 3 to x can include addons/rebuys' skip these                  if (!foundSeats && !line.StartsWith("Seat ") && line[6] != ':')                  {                      continue;                  }                   else if (foundSeats && !line.StartsWith("Seat "))                  {                      lastLineRead = lineNumber;                      break;                  }                  foundSeats = true;                    char endChar = line[line.Length - 1];                    //Seat 1: thaiJhonny ($16.08 in chips)                  //Seat 1: thaiJhonny ($16.08 in chips) is sitting out                  if (endChar != ')' && endChar != 't')                  {                      lastLineRead = lineNumber;                      break;                  }                    // seat info expected in format:                   //Seat 1: thaiJhonny ($16.08 in chips)                  const int seatNumberStartIndex = 4;                  int spaceIndex = line.IndexOf(' '' seatNumberStartIndex);                  int colonIndex = line.IndexOf(':'' spaceIndex + 1);                  int seatNumber = FastInt.Parse(line' spaceIndex + 1);                    // we need to find the ( before the number. players can have ( in their name so we need to go backwards and skip the last one                  int openParenIndex = line.LastIndexOf('(');                    //Seat 2: ZamaskaStars (1660 in chips) out of hand (moved from another table into small blind)                  if (line[openParenIndex + 1] == 'm')                  {                      line = line.Remove(openParenIndex);                      openParenIndex = line.LastIndexOf('(');                  }                                    int spaceAfterOpenParen = line.IndexOf(' '' openParenIndex);                                    string playerName = line.Substring(colonIndex + 2' (openParenIndex - 1) - (colonIndex + 2));                    string stackString = line.Substring(openParenIndex + 1' spaceAfterOpenParen - (openParenIndex + 1));                  decimal stack = decimal.Parse(stackString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                    playerList.Add(new Player(playerName' stack' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int lineNumber = 2; lineNumber < handLines.Length - 1; lineNumber++)              {                  string line = handLines[lineNumber];                    // in tournaments the lines 3 to x can include addons/rebuys' skip these                  if (!foundSeats && !line.StartsWith("Seat ") && line[6] != ':')                  {                      continue;                  }                   else if (foundSeats && !line.StartsWith("Seat "))                  {                      lastLineRead = lineNumber;                      break;                  }                  foundSeats = true;                    char endChar = line[line.Length - 1];                    //Seat 1: thaiJhonny ($16.08 in chips)                  //Seat 1: thaiJhonny ($16.08 in chips) is sitting out                  if (endChar != ')' && endChar != 't')                  {                      lastLineRead = lineNumber;                      break;                  }                    // seat info expected in format:                   //Seat 1: thaiJhonny ($16.08 in chips)                  const int seatNumberStartIndex = 4;                  int spaceIndex = line.IndexOf(' '' seatNumberStartIndex);                  int colonIndex = line.IndexOf(':'' spaceIndex + 1);                  int seatNumber = FastInt.Parse(line' spaceIndex + 1);                    // we need to find the ( before the number. players can have ( in their name so we need to go backwards and skip the last one                  int openParenIndex = line.LastIndexOf('(');                    //Seat 2: ZamaskaStars (1660 in chips) out of hand (moved from another table into small blind)                  if (line[openParenIndex + 1] == 'm')                  {                      line = line.Remove(openParenIndex);                      openParenIndex = line.LastIndexOf('(');                  }                                    int spaceAfterOpenParen = line.IndexOf(' '' openParenIndex);                                    string playerName = line.Substring(colonIndex + 2' (openParenIndex - 1) - (colonIndex + 2));                    string stackString = line.Substring(openParenIndex + 1' spaceAfterOpenParen - (openParenIndex + 1));                  decimal stack = decimal.Parse(stackString' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                    playerList.Add(new Player(playerName' stack' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: if (showDownIndex != -1)              {                  for (int lineNumber = showDownIndex + 1; lineNumber < summaryIndex; lineNumber++)                  {                      //jimmyhoo: shows [7h 6h] (a full house' Sevens full of Jacks)                      //EASSA: mucks hand                       //jimmyhoo collected $562 from pot                      string line = handLines[lineNumber];                      //Skip when player mucks' collects or says sth.                      //EASSA: mucks hand                       char lastChar = line[line.Length - 1];                        if (lastChar == '*')                      {                          break;                      }                        if (lastChar == 'd' || lastChar == 't' || lastChar == '"')                      {                          continue;                      }                        int lastSquareBracket = line.LastIndexLoopsBackward(']'' line.Length - 1);                        if (lastSquareBracket == -1)                      {                          continue;                      }                        int firstSquareBracket = line.LastIndexOf('['' lastSquareBracket);                        // can show single cards:                      // Zaza5573: shows [Qc]                      if (line[firstSquareBracket + 3] == ']')                      {                          continue;                      }                        int colonIndex = line.LastIndexOf(':'' firstSquareBracket);                        if (colonIndex == -1)                      {                          // players with [ in their name                          // [PS_UA]Tarik collected $18.57 from pot                          continue;                      }                        string playerName = line.Substring(0' colonIndex);                        string cards = line.Substring(firstSquareBracket + 1' lastSquareBracket - (firstSquareBracket + 1));                        playerList[playerName].HoleCards = HoleCards.FromCards(cards);                  }              }              else              {                  //Check for player shows                  for (int i = summaryIndex - 1; i > 0; i--)                  {                      string line = handLines[i];                        if (line.EndsWith(")") && line.Contains(": shows ["))                      {                          int nameEndIndex = line.IndexOf(": shows ["' StringComparison.Ordinal);                            string playerName = line.Remove(nameEndIndex);                            int cardsStartIndex = nameEndIndex + 9;                          int cardsEndIndex = line.IndexOf(']'' cardsStartIndex);                            string cards = line.Substring(cardsStartIndex' cardsEndIndex - cardsStartIndex);                            playerList[playerName].HoleCards = HoleCards.FromCards(cards);                      }                      else                      {                          break;                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: if (showDownIndex != -1)              {                  for (int lineNumber = showDownIndex + 1; lineNumber < summaryIndex; lineNumber++)                  {                      //jimmyhoo: shows [7h 6h] (a full house' Sevens full of Jacks)                      //EASSA: mucks hand                       //jimmyhoo collected $562 from pot                      string line = handLines[lineNumber];                      //Skip when player mucks' collects or says sth.                      //EASSA: mucks hand                       char lastChar = line[line.Length - 1];                        if (lastChar == '*')                      {                          break;                      }                        if (lastChar == 'd' || lastChar == 't' || lastChar == '"')                      {                          continue;                      }                        int lastSquareBracket = line.LastIndexLoopsBackward(']'' line.Length - 1);                        if (lastSquareBracket == -1)                      {                          continue;                      }                        int firstSquareBracket = line.LastIndexOf('['' lastSquareBracket);                        // can show single cards:                      // Zaza5573: shows [Qc]                      if (line[firstSquareBracket + 3] == ']')                      {                          continue;                      }                        int colonIndex = line.LastIndexOf(':'' firstSquareBracket);                        if (colonIndex == -1)                      {                          // players with [ in their name                          // [PS_UA]Tarik collected $18.57 from pot                          continue;                      }                        string playerName = line.Substring(0' colonIndex);                        string cards = line.Substring(firstSquareBracket + 1' lastSquareBracket - (firstSquareBracket + 1));                        playerList[playerName].HoleCards = HoleCards.FromCards(cards);                  }              }              else              {                  //Check for player shows                  for (int i = summaryIndex - 1; i > 0; i--)                  {                      string line = handLines[i];                        if (line.EndsWith(")") && line.Contains(": shows ["))                      {                          int nameEndIndex = line.IndexOf(": shows ["' StringComparison.Ordinal);                            string playerName = line.Remove(nameEndIndex);                            int cardsStartIndex = nameEndIndex + 9;                          int cardsEndIndex = line.IndexOf(']'' cardsStartIndex);                            string cards = line.Substring(cardsStartIndex' cardsEndIndex - cardsStartIndex);                            playerList[playerName].HoleCards = HoleCards.FromCards(cards);                      }                      else                      {                          break;                      }                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,GetSummaryStartIndex,The following statement contains a magic number: for (int lineNumber = handLines.Length - 3; lineNumber > lastLineRead; lineNumber--)              {                  string line = handLines[lineNumber];                    if (line[0] != 'S' &&                       line[0] != 'T' &&                      line[0] != 'B')                  {                      return lineNumber;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int lineNumber = handLines.Length - 2; lineNumber >= 0; lineNumber--)              {                  string line = handLines[lineNumber];                    if (line[0] == '*')                  {                      return boardCards;                  }                    if (line[0] == 'B')                  {                      const int firstSquareBracket = 7;                      int lastSquareBracket = line.Length - 1;                        return ParseBoard(line' firstSquareBracket' lastSquareBracket);                  }                    if (line[0] == 'F')                  {                      //FIRST Board [3d Kd 9h 8h 4s]                      const int firstSquareBracket = 13;                      int lastSquareBracket = line.Length - 1;                        return ParseBoard(line' firstSquareBracket' lastSquareBracket);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int lineNumber = handLines.Length - 2; lineNumber >= 0; lineNumber--)              {                  string line = handLines[lineNumber];                    if (line[0] == '*')                  {                      return boardCards;                  }                    if (line[0] == 'B')                  {                      const int firstSquareBracket = 7;                      int lastSquareBracket = line.Length - 1;                        return ParseBoard(line' firstSquareBracket' lastSquareBracket);                  }                    if (line[0] == 'F')                  {                      //FIRST Board [3d Kd 9h 8h 4s]                      const int firstSquareBracket = 13;                      int lastSquareBracket = line.Length - 1;                        return ParseBoard(line' firstSquareBracket' lastSquareBracket);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int lineNumber = handLines.Length - 2; lineNumber >= 0; lineNumber--)              {                  string line = handLines[lineNumber];                    if (line[0] == '*')                  {                      return boardCards;                  }                    if (line[0] == 'B')                  {                      const int firstSquareBracket = 7;                      int lastSquareBracket = line.Length - 1;                        return ParseBoard(line' firstSquareBracket' lastSquareBracket);                  }                    if (line[0] == 'F')                  {                      //FIRST Board [3d Kd 9h 8h 4s]                      const int firstSquareBracket = 13;                      int lastSquareBracket = line.Length - 1;                        return ParseBoard(line' firstSquareBracket' lastSquareBracket);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseHeroName,The following statement contains a magic number: for (int i = 0; i < handlines.Length; i++)              {                  string line = handlines[i];                    if (line.StartsWith("Dealt to "' StringComparison.Ordinal))                  {                      int endIndex = line.LastIndexOf('[');                      return line.Substring(9' endIndex - 9 - 1);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseHeroName,The following statement contains a magic number: for (int i = 0; i < handlines.Length; i++)              {                  string line = handlines[i];                    if (line.StartsWith("Dealt to "' StringComparison.Ordinal))                  {                      int endIndex = line.LastIndexOf('[');                      return line.Substring(9' endIndex - 9 - 1);                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.PokerStars,PokerStarsFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PokerStars\PokerStarsFastParserImpl.cs,ParseRunItTwice,The following statement contains a magic number: for (int i = handLines.Length - 1; i > 0; i--)              {                  string line = handLines[i];                    switch (line[1])                  {                      //*** SUMMARY ***                      case '*':                          if (isRunItTwiceHand)                          {                              secondShowDownIndex = i - 1;                              i = 0;                              break;                          }                          //no run it twice hand                          return null;                        //SECOND Board [3d Kd 9h 8h Kc]                      //run it twice hand found                      case 'E':                          isRunItTwiceHand = true;                          rit = new RunItTwice                                {                                    Board = ParseBoard(line' 14' line.Length - 1)                                };                          break;                      default:                          continue;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,SplitUpMultipleHands,The following statement contains a magic number: return HandSplitRegex.Split(rawHandHistories)                                   .Where(s => string.IsNullOrWhiteSpace(s) == false && s.Length > 30)                                   .Select(s => "Winamax Poker - " + s.Trim('\r'' 'n'));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var year = Int32.Parse(dateStringSplit[1].Substring(0' 4));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var month = Int32.Parse(dateStringSplit[1].Substring(5' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var month = Int32.Parse(dateStringSplit[1].Substring(5' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var day = Int32.Parse(dateStringSplit[1].Substring(8' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var day = Int32.Parse(dateStringSplit[1].Substring(8' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var hour = Int32.Parse(dateStringSplit[2].Substring(0' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var hour = Int32.Parse(dateStringSplit[2].Substring(0' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var minute = Int32.Parse(dateStringSplit[2].Substring(3' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var minute = Int32.Parse(dateStringSplit[2].Substring(3' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var minute = Int32.Parse(dateStringSplit[2].Substring(3' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var second = Int32.Parse(dateStringSplit[2].Substring(6' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var second = Int32.Parse(dateStringSplit[2].Substring(6' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var second = Int32.Parse(dateStringSplit[2].Substring(6' 2));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: var timeZone = dateStringSplit[3];
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: switch (timeZone)              {                  case "CEST": // Central European Summer Time                      return date.AddHours(-2);                  case "CET":                      return date.AddHours(-1);                  case "PST":                      return date.AddHours(8);                  case "UTC":                      return date;                  default:                      throw new ParseHandDateException(timeZone' "Unrecognized time-zone");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: switch (timeZone)              {                  case "CEST": // Central European Summer Time                      return date.AddHours(-2);                  case "CET":                      return date.AddHours(-1);                  case "PST":                      return date.AddHours(8);                  case "UTC":                      return date;                  default:                      throw new ParseHandDateException(timeZone' "Unrecognized time-zone");              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandId,The following statement contains a magic number: int indexOfHandIdEnd = handLines[0].IndexOf('-'' indexOfHandIdStart+9);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: for(int i = 3; i< handLines.Length; i++)              {                  if (handLines[i].StartsWith("***"))                  {                      numPlayers = i - 3;                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: for(int i = 3; i< handLines.Length; i++)              {                  if (handLines[i].StartsWith("***"))                  {                      numPlayers = i - 3;                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 2)              {                  return SeatType.FromMaxPlayers(2);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 2)              {                  return SeatType.FromMaxPlayers(2);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 6)              {                  return SeatType.FromMaxPlayers(6);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 6)              {                  return SeatType.FromMaxPlayers(6);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 9)              {                  return SeatType.FromMaxPlayers(9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: if (numPlayers <= 9)              {                  return SeatType.FromMaxPlayers(9);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseSeatType,The following statement contains a magic number: return SeatType.FromMaxPlayers(10);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseGameType,The following statement contains a magic number: var parenIndex = lineSplit[5].IndexOf('(');
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseGameType,The following statement contains a magic number: string gameTypeString = lineSplit[5].Substring(1'parenIndex - 2);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseGameType,The following statement contains a magic number: string gameTypeString = lineSplit[5].Substring(1'parenIndex - 2);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseLimit,The following statement contains a magic number: var parenIndex = lineSplit[5].IndexOf('(');
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseLimit,The following statement contains a magic number: int slashIndex = lineSplit[5].IndexOf('/');
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseLimit,The following statement contains a magic number: var sbString = lineSplit[5].Substring(parenIndex + 1' slashIndex - parenIndex - 1);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseLimit,The following statement contains a magic number: var bbString = lineSplit[5].Substring(slashIndex + 1' lineSplit[5].Length - slashIndex - 3);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseLimit,The following statement contains a magic number: var bbString = lineSplit[5].Substring(slashIndex + 1' lineSplit[5].Length - slashIndex - 3);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseLimit,The following statement contains a magic number: var bbString = lineSplit[5].Substring(slashIndex + 1' lineSplit[5].Length - slashIndex - 3);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseLimit,The following statement contains a magic number: decimal smallBlind = decimal.Parse(lineSplit[5].Substring(parenIndex + 1' slashIndex - parenIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseLimit,The following statement contains a magic number: decimal bigBlind = decimal.Parse(lineSplit[5].Substring(slashIndex + 1' lineSplit[5].Length - slashIndex - 3)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseLimit,The following statement contains a magic number: decimal bigBlind = decimal.Parse(lineSplit[5].Substring(slashIndex + 1' lineSplit[5].Length - slashIndex - 3)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseLimit,The following statement contains a magic number: decimal bigBlind = decimal.Parse(lineSplit[5].Substring(slashIndex + 1' lineSplit[5].Length - slashIndex - 3)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = 5; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if (handLine.StartsWith("Seat ") == false)                  {                      startOfActionsIndex = i;                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if(handLine.StartsWith("*** SUMMARY ***"))                  {                      currentStreet = Street.Showdown;                      i++;                      continue;                  }                    if(handLine.StartsWith("*** "))                  {                      if (handLine.StartsWith("*** PRE-FLOP ***"))                      {                          currentStreet = Street.Preflop;                          continue;                      }                       if (handLine.StartsWith("*** FLOP *** ["))                      {                          currentStreet = Street.Flop;                          continue;                      }                      if (handLine.StartsWith("*** TURN *** ["))                      {                          currentStreet = Street.Turn;                          continue;                      }                      if (handLine.StartsWith("*** RIVER *** ["))                      {                          currentStreet = Street.River;                          continue;                      }                      if (handLine.StartsWith("*** SHOW DOWN ***"))                      {                          currentStreet = Street.Showdown;                          continue;                      }                        // skip the following lines                      if (handLine.StartsWith("*** PRE-FLOP ***")                       || handLine.StartsWith("*** ANTE/BLINDS ***"))                      {                          continue;                      }                  }                    bool isAllIn = handLine.EndsWith("and is all-in");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 14);                  }                    if (currentStreet == Street.Showdown)                  {                      // lines look like:                      // Seat 3: xGras (button) won 6.07€                      // Seat 4: KryptonII (button) showed [Qd Ah] and won 42.32€ with One pair : Aces                      // Seat 1: Hitchhiker won 0.90€                      if(handLine.StartsWith("Seat "))                      {                          int wonIndex = handLine.IndexOf(" won "' StringComparison.Ordinal);                            if (wonIndex != -1)                          {                              int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' wonIndex' StringComparison.Ordinal);                                decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                            }                      }                        // when a player shows his hand it looks like                      // LEROISALO shows [Kh Ah] (high card : Ace)                      if(handLine[handLine.Length-1] == ')')                      {                          if (handLine.Contains("[") && handLine.Contains("]"))                          {                              string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new HandAction(name' HandActionType.SHOW' 0' Street.Showdown));                          }                        }                                            continue;                  }                    // Blind posting                  if(currentStreet.Equals(Street.Null))                  {                      if (handLine.StartsWith("Dealt to "))                      {                          continue;                      }                        // skip                      // Nhat60 denies big blind                      if (handLine[handLine.Length - 1] == 'd')                      {                          continue;                      }                        var smallBlindIndex = handLine.IndexOf("posts small blind"' StringComparison.Ordinal);                      var bigBlindIndex = handLine.IndexOf("posts big blind"' StringComparison.Ordinal);                        // bkk2015 posts small blind 0.25€ out of position                      // bkk2015 posts big blind 0.50€ out of position                      var deadMoney = handLine[handLine.Length-1] == 'n';                      if (deadMoney)                      {                          handLine = handLine.Substring(0' handLine.Length - 16);                      }                        var amountStartIndex = handLine.LastIndexOf(" "' StringComparison.Ordinal);                        var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                           if(smallBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                            var playerName = handLine.Substring(0' smallBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop'isAllIn));                            smallBlindValue = amount;                          continue;                      }                        if(bigBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.BIG_BLIND;                            var playerName = handLine.Substring(0' bigBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop' isAllIn));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          var playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          var playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      // from here on we can skip lines that don't end on the EURO-symbol AND that are not allins                      if (handLine[handLine.Length - 1] != '€' && !isAllIn)                      {                          continue;                      }                        var currencyIndex = handLine.IndexOf('€');                      var lastCurrencyIndex = handLine.LastIndexOf('€');                        var amountIndex = -1;                      var lastAmountIndex = -1;                        decimal amount;                        for (int k = 1; k <= currencyIndex; k++)                      {                          if (handLine[currencyIndex - k] == ' ')                          {                              amountIndex = currencyIndex - k;                              break;                          }                      }                        if(currencyIndex != lastCurrencyIndex)                      {                          for (int k = 1; k <= lastCurrencyIndex; k++)                          {                              if (handLine[lastCurrencyIndex - k] == ' ')                              {                                  lastAmountIndex = lastCurrencyIndex - k;                                  break;                              }                          }                            amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      else                      {                          amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                        char actionIdentifier = handLine[amountIndex - 2];                                            string playerName;                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if(handLine.StartsWith("*** SUMMARY ***"))                  {                      currentStreet = Street.Showdown;                      i++;                      continue;                  }                    if(handLine.StartsWith("*** "))                  {                      if (handLine.StartsWith("*** PRE-FLOP ***"))                      {                          currentStreet = Street.Preflop;                          continue;                      }                       if (handLine.StartsWith("*** FLOP *** ["))                      {                          currentStreet = Street.Flop;                          continue;                      }                      if (handLine.StartsWith("*** TURN *** ["))                      {                          currentStreet = Street.Turn;                          continue;                      }                      if (handLine.StartsWith("*** RIVER *** ["))                      {                          currentStreet = Street.River;                          continue;                      }                      if (handLine.StartsWith("*** SHOW DOWN ***"))                      {                          currentStreet = Street.Showdown;                          continue;                      }                        // skip the following lines                      if (handLine.StartsWith("*** PRE-FLOP ***")                       || handLine.StartsWith("*** ANTE/BLINDS ***"))                      {                          continue;                      }                  }                    bool isAllIn = handLine.EndsWith("and is all-in");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 14);                  }                    if (currentStreet == Street.Showdown)                  {                      // lines look like:                      // Seat 3: xGras (button) won 6.07€                      // Seat 4: KryptonII (button) showed [Qd Ah] and won 42.32€ with One pair : Aces                      // Seat 1: Hitchhiker won 0.90€                      if(handLine.StartsWith("Seat "))                      {                          int wonIndex = handLine.IndexOf(" won "' StringComparison.Ordinal);                            if (wonIndex != -1)                          {                              int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' wonIndex' StringComparison.Ordinal);                                decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                            }                      }                        // when a player shows his hand it looks like                      // LEROISALO shows [Kh Ah] (high card : Ace)                      if(handLine[handLine.Length-1] == ')')                      {                          if (handLine.Contains("[") && handLine.Contains("]"))                          {                              string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new HandAction(name' HandActionType.SHOW' 0' Street.Showdown));                          }                        }                                            continue;                  }                    // Blind posting                  if(currentStreet.Equals(Street.Null))                  {                      if (handLine.StartsWith("Dealt to "))                      {                          continue;                      }                        // skip                      // Nhat60 denies big blind                      if (handLine[handLine.Length - 1] == 'd')                      {                          continue;                      }                        var smallBlindIndex = handLine.IndexOf("posts small blind"' StringComparison.Ordinal);                      var bigBlindIndex = handLine.IndexOf("posts big blind"' StringComparison.Ordinal);                        // bkk2015 posts small blind 0.25€ out of position                      // bkk2015 posts big blind 0.50€ out of position                      var deadMoney = handLine[handLine.Length-1] == 'n';                      if (deadMoney)                      {                          handLine = handLine.Substring(0' handLine.Length - 16);                      }                        var amountStartIndex = handLine.LastIndexOf(" "' StringComparison.Ordinal);                        var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                           if(smallBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                            var playerName = handLine.Substring(0' smallBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop'isAllIn));                            smallBlindValue = amount;                          continue;                      }                        if(bigBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.BIG_BLIND;                            var playerName = handLine.Substring(0' bigBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop' isAllIn));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          var playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          var playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      // from here on we can skip lines that don't end on the EURO-symbol AND that are not allins                      if (handLine[handLine.Length - 1] != '€' && !isAllIn)                      {                          continue;                      }                        var currencyIndex = handLine.IndexOf('€');                      var lastCurrencyIndex = handLine.LastIndexOf('€');                        var amountIndex = -1;                      var lastAmountIndex = -1;                        decimal amount;                        for (int k = 1; k <= currencyIndex; k++)                      {                          if (handLine[currencyIndex - k] == ' ')                          {                              amountIndex = currencyIndex - k;                              break;                          }                      }                        if(currencyIndex != lastCurrencyIndex)                      {                          for (int k = 1; k <= lastCurrencyIndex; k++)                          {                              if (handLine[lastCurrencyIndex - k] == ' ')                              {                                  lastAmountIndex = lastCurrencyIndex - k;                                  break;                              }                          }                            amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      else                      {                          amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                        char actionIdentifier = handLine[amountIndex - 2];                                            string playerName;                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if(handLine.StartsWith("*** SUMMARY ***"))                  {                      currentStreet = Street.Showdown;                      i++;                      continue;                  }                    if(handLine.StartsWith("*** "))                  {                      if (handLine.StartsWith("*** PRE-FLOP ***"))                      {                          currentStreet = Street.Preflop;                          continue;                      }                       if (handLine.StartsWith("*** FLOP *** ["))                      {                          currentStreet = Street.Flop;                          continue;                      }                      if (handLine.StartsWith("*** TURN *** ["))                      {                          currentStreet = Street.Turn;                          continue;                      }                      if (handLine.StartsWith("*** RIVER *** ["))                      {                          currentStreet = Street.River;                          continue;                      }                      if (handLine.StartsWith("*** SHOW DOWN ***"))                      {                          currentStreet = Street.Showdown;                          continue;                      }                        // skip the following lines                      if (handLine.StartsWith("*** PRE-FLOP ***")                       || handLine.StartsWith("*** ANTE/BLINDS ***"))                      {                          continue;                      }                  }                    bool isAllIn = handLine.EndsWith("and is all-in");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 14);                  }                    if (currentStreet == Street.Showdown)                  {                      // lines look like:                      // Seat 3: xGras (button) won 6.07€                      // Seat 4: KryptonII (button) showed [Qd Ah] and won 42.32€ with One pair : Aces                      // Seat 1: Hitchhiker won 0.90€                      if(handLine.StartsWith("Seat "))                      {                          int wonIndex = handLine.IndexOf(" won "' StringComparison.Ordinal);                            if (wonIndex != -1)                          {                              int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' wonIndex' StringComparison.Ordinal);                                decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                            }                      }                        // when a player shows his hand it looks like                      // LEROISALO shows [Kh Ah] (high card : Ace)                      if(handLine[handLine.Length-1] == ')')                      {                          if (handLine.Contains("[") && handLine.Contains("]"))                          {                              string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new HandAction(name' HandActionType.SHOW' 0' Street.Showdown));                          }                        }                                            continue;                  }                    // Blind posting                  if(currentStreet.Equals(Street.Null))                  {                      if (handLine.StartsWith("Dealt to "))                      {                          continue;                      }                        // skip                      // Nhat60 denies big blind                      if (handLine[handLine.Length - 1] == 'd')                      {                          continue;                      }                        var smallBlindIndex = handLine.IndexOf("posts small blind"' StringComparison.Ordinal);                      var bigBlindIndex = handLine.IndexOf("posts big blind"' StringComparison.Ordinal);                        // bkk2015 posts small blind 0.25€ out of position                      // bkk2015 posts big blind 0.50€ out of position                      var deadMoney = handLine[handLine.Length-1] == 'n';                      if (deadMoney)                      {                          handLine = handLine.Substring(0' handLine.Length - 16);                      }                        var amountStartIndex = handLine.LastIndexOf(" "' StringComparison.Ordinal);                        var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                           if(smallBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                            var playerName = handLine.Substring(0' smallBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop'isAllIn));                            smallBlindValue = amount;                          continue;                      }                        if(bigBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.BIG_BLIND;                            var playerName = handLine.Substring(0' bigBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop' isAllIn));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          var playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          var playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      // from here on we can skip lines that don't end on the EURO-symbol AND that are not allins                      if (handLine[handLine.Length - 1] != '€' && !isAllIn)                      {                          continue;                      }                        var currencyIndex = handLine.IndexOf('€');                      var lastCurrencyIndex = handLine.LastIndexOf('€');                        var amountIndex = -1;                      var lastAmountIndex = -1;                        decimal amount;                        for (int k = 1; k <= currencyIndex; k++)                      {                          if (handLine[currencyIndex - k] == ' ')                          {                              amountIndex = currencyIndex - k;                              break;                          }                      }                        if(currencyIndex != lastCurrencyIndex)                      {                          for (int k = 1; k <= lastCurrencyIndex; k++)                          {                              if (handLine[lastCurrencyIndex - k] == ' ')                              {                                  lastAmountIndex = lastCurrencyIndex - k;                                  break;                              }                          }                            amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      else                      {                          amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                        char actionIdentifier = handLine[amountIndex - 2];                                            string playerName;                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if(handLine.StartsWith("*** SUMMARY ***"))                  {                      currentStreet = Street.Showdown;                      i++;                      continue;                  }                    if(handLine.StartsWith("*** "))                  {                      if (handLine.StartsWith("*** PRE-FLOP ***"))                      {                          currentStreet = Street.Preflop;                          continue;                      }                       if (handLine.StartsWith("*** FLOP *** ["))                      {                          currentStreet = Street.Flop;                          continue;                      }                      if (handLine.StartsWith("*** TURN *** ["))                      {                          currentStreet = Street.Turn;                          continue;                      }                      if (handLine.StartsWith("*** RIVER *** ["))                      {                          currentStreet = Street.River;                          continue;                      }                      if (handLine.StartsWith("*** SHOW DOWN ***"))                      {                          currentStreet = Street.Showdown;                          continue;                      }                        // skip the following lines                      if (handLine.StartsWith("*** PRE-FLOP ***")                       || handLine.StartsWith("*** ANTE/BLINDS ***"))                      {                          continue;                      }                  }                    bool isAllIn = handLine.EndsWith("and is all-in");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 14);                  }                    if (currentStreet == Street.Showdown)                  {                      // lines look like:                      // Seat 3: xGras (button) won 6.07€                      // Seat 4: KryptonII (button) showed [Qd Ah] and won 42.32€ with One pair : Aces                      // Seat 1: Hitchhiker won 0.90€                      if(handLine.StartsWith("Seat "))                      {                          int wonIndex = handLine.IndexOf(" won "' StringComparison.Ordinal);                            if (wonIndex != -1)                          {                              int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' wonIndex' StringComparison.Ordinal);                                decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                            }                      }                        // when a player shows his hand it looks like                      // LEROISALO shows [Kh Ah] (high card : Ace)                      if(handLine[handLine.Length-1] == ')')                      {                          if (handLine.Contains("[") && handLine.Contains("]"))                          {                              string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new HandAction(name' HandActionType.SHOW' 0' Street.Showdown));                          }                        }                                            continue;                  }                    // Blind posting                  if(currentStreet.Equals(Street.Null))                  {                      if (handLine.StartsWith("Dealt to "))                      {                          continue;                      }                        // skip                      // Nhat60 denies big blind                      if (handLine[handLine.Length - 1] == 'd')                      {                          continue;                      }                        var smallBlindIndex = handLine.IndexOf("posts small blind"' StringComparison.Ordinal);                      var bigBlindIndex = handLine.IndexOf("posts big blind"' StringComparison.Ordinal);                        // bkk2015 posts small blind 0.25€ out of position                      // bkk2015 posts big blind 0.50€ out of position                      var deadMoney = handLine[handLine.Length-1] == 'n';                      if (deadMoney)                      {                          handLine = handLine.Substring(0' handLine.Length - 16);                      }                        var amountStartIndex = handLine.LastIndexOf(" "' StringComparison.Ordinal);                        var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                           if(smallBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                            var playerName = handLine.Substring(0' smallBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop'isAllIn));                            smallBlindValue = amount;                          continue;                      }                        if(bigBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.BIG_BLIND;                            var playerName = handLine.Substring(0' bigBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop' isAllIn));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          var playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          var playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      // from here on we can skip lines that don't end on the EURO-symbol AND that are not allins                      if (handLine[handLine.Length - 1] != '€' && !isAllIn)                      {                          continue;                      }                        var currencyIndex = handLine.IndexOf('€');                      var lastCurrencyIndex = handLine.LastIndexOf('€');                        var amountIndex = -1;                      var lastAmountIndex = -1;                        decimal amount;                        for (int k = 1; k <= currencyIndex; k++)                      {                          if (handLine[currencyIndex - k] == ' ')                          {                              amountIndex = currencyIndex - k;                              break;                          }                      }                        if(currencyIndex != lastCurrencyIndex)                      {                          for (int k = 1; k <= lastCurrencyIndex; k++)                          {                              if (handLine[lastCurrencyIndex - k] == ' ')                              {                                  lastAmountIndex = lastCurrencyIndex - k;                                  break;                              }                          }                            amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      else                      {                          amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                        char actionIdentifier = handLine[amountIndex - 2];                                            string playerName;                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if(handLine.StartsWith("*** SUMMARY ***"))                  {                      currentStreet = Street.Showdown;                      i++;                      continue;                  }                    if(handLine.StartsWith("*** "))                  {                      if (handLine.StartsWith("*** PRE-FLOP ***"))                      {                          currentStreet = Street.Preflop;                          continue;                      }                       if (handLine.StartsWith("*** FLOP *** ["))                      {                          currentStreet = Street.Flop;                          continue;                      }                      if (handLine.StartsWith("*** TURN *** ["))                      {                          currentStreet = Street.Turn;                          continue;                      }                      if (handLine.StartsWith("*** RIVER *** ["))                      {                          currentStreet = Street.River;                          continue;                      }                      if (handLine.StartsWith("*** SHOW DOWN ***"))                      {                          currentStreet = Street.Showdown;                          continue;                      }                        // skip the following lines                      if (handLine.StartsWith("*** PRE-FLOP ***")                       || handLine.StartsWith("*** ANTE/BLINDS ***"))                      {                          continue;                      }                  }                    bool isAllIn = handLine.EndsWith("and is all-in");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 14);                  }                    if (currentStreet == Street.Showdown)                  {                      // lines look like:                      // Seat 3: xGras (button) won 6.07€                      // Seat 4: KryptonII (button) showed [Qd Ah] and won 42.32€ with One pair : Aces                      // Seat 1: Hitchhiker won 0.90€                      if(handLine.StartsWith("Seat "))                      {                          int wonIndex = handLine.IndexOf(" won "' StringComparison.Ordinal);                            if (wonIndex != -1)                          {                              int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' wonIndex' StringComparison.Ordinal);                                decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                            }                      }                        // when a player shows his hand it looks like                      // LEROISALO shows [Kh Ah] (high card : Ace)                      if(handLine[handLine.Length-1] == ')')                      {                          if (handLine.Contains("[") && handLine.Contains("]"))                          {                              string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new HandAction(name' HandActionType.SHOW' 0' Street.Showdown));                          }                        }                                            continue;                  }                    // Blind posting                  if(currentStreet.Equals(Street.Null))                  {                      if (handLine.StartsWith("Dealt to "))                      {                          continue;                      }                        // skip                      // Nhat60 denies big blind                      if (handLine[handLine.Length - 1] == 'd')                      {                          continue;                      }                        var smallBlindIndex = handLine.IndexOf("posts small blind"' StringComparison.Ordinal);                      var bigBlindIndex = handLine.IndexOf("posts big blind"' StringComparison.Ordinal);                        // bkk2015 posts small blind 0.25€ out of position                      // bkk2015 posts big blind 0.50€ out of position                      var deadMoney = handLine[handLine.Length-1] == 'n';                      if (deadMoney)                      {                          handLine = handLine.Substring(0' handLine.Length - 16);                      }                        var amountStartIndex = handLine.LastIndexOf(" "' StringComparison.Ordinal);                        var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                           if(smallBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                            var playerName = handLine.Substring(0' smallBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop'isAllIn));                            smallBlindValue = amount;                          continue;                      }                        if(bigBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.BIG_BLIND;                            var playerName = handLine.Substring(0' bigBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop' isAllIn));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          var playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          var playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      // from here on we can skip lines that don't end on the EURO-symbol AND that are not allins                      if (handLine[handLine.Length - 1] != '€' && !isAllIn)                      {                          continue;                      }                        var currencyIndex = handLine.IndexOf('€');                      var lastCurrencyIndex = handLine.LastIndexOf('€');                        var amountIndex = -1;                      var lastAmountIndex = -1;                        decimal amount;                        for (int k = 1; k <= currencyIndex; k++)                      {                          if (handLine[currencyIndex - k] == ' ')                          {                              amountIndex = currencyIndex - k;                              break;                          }                      }                        if(currencyIndex != lastCurrencyIndex)                      {                          for (int k = 1; k <= lastCurrencyIndex; k++)                          {                              if (handLine[lastCurrencyIndex - k] == ' ')                              {                                  lastAmountIndex = lastCurrencyIndex - k;                                  break;                              }                          }                            amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      else                      {                          amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                        char actionIdentifier = handLine[amountIndex - 2];                                            string playerName;                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if(handLine.StartsWith("*** SUMMARY ***"))                  {                      currentStreet = Street.Showdown;                      i++;                      continue;                  }                    if(handLine.StartsWith("*** "))                  {                      if (handLine.StartsWith("*** PRE-FLOP ***"))                      {                          currentStreet = Street.Preflop;                          continue;                      }                       if (handLine.StartsWith("*** FLOP *** ["))                      {                          currentStreet = Street.Flop;                          continue;                      }                      if (handLine.StartsWith("*** TURN *** ["))                      {                          currentStreet = Street.Turn;                          continue;                      }                      if (handLine.StartsWith("*** RIVER *** ["))                      {                          currentStreet = Street.River;                          continue;                      }                      if (handLine.StartsWith("*** SHOW DOWN ***"))                      {                          currentStreet = Street.Showdown;                          continue;                      }                        // skip the following lines                      if (handLine.StartsWith("*** PRE-FLOP ***")                       || handLine.StartsWith("*** ANTE/BLINDS ***"))                      {                          continue;                      }                  }                    bool isAllIn = handLine.EndsWith("and is all-in");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 14);                  }                    if (currentStreet == Street.Showdown)                  {                      // lines look like:                      // Seat 3: xGras (button) won 6.07€                      // Seat 4: KryptonII (button) showed [Qd Ah] and won 42.32€ with One pair : Aces                      // Seat 1: Hitchhiker won 0.90€                      if(handLine.StartsWith("Seat "))                      {                          int wonIndex = handLine.IndexOf(" won "' StringComparison.Ordinal);                            if (wonIndex != -1)                          {                              int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' wonIndex' StringComparison.Ordinal);                                decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                            }                      }                        // when a player shows his hand it looks like                      // LEROISALO shows [Kh Ah] (high card : Ace)                      if(handLine[handLine.Length-1] == ')')                      {                          if (handLine.Contains("[") && handLine.Contains("]"))                          {                              string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new HandAction(name' HandActionType.SHOW' 0' Street.Showdown));                          }                        }                                            continue;                  }                    // Blind posting                  if(currentStreet.Equals(Street.Null))                  {                      if (handLine.StartsWith("Dealt to "))                      {                          continue;                      }                        // skip                      // Nhat60 denies big blind                      if (handLine[handLine.Length - 1] == 'd')                      {                          continue;                      }                        var smallBlindIndex = handLine.IndexOf("posts small blind"' StringComparison.Ordinal);                      var bigBlindIndex = handLine.IndexOf("posts big blind"' StringComparison.Ordinal);                        // bkk2015 posts small blind 0.25€ out of position                      // bkk2015 posts big blind 0.50€ out of position                      var deadMoney = handLine[handLine.Length-1] == 'n';                      if (deadMoney)                      {                          handLine = handLine.Substring(0' handLine.Length - 16);                      }                        var amountStartIndex = handLine.LastIndexOf(" "' StringComparison.Ordinal);                        var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                           if(smallBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                            var playerName = handLine.Substring(0' smallBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop'isAllIn));                            smallBlindValue = amount;                          continue;                      }                        if(bigBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.BIG_BLIND;                            var playerName = handLine.Substring(0' bigBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop' isAllIn));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          var playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          var playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      // from here on we can skip lines that don't end on the EURO-symbol AND that are not allins                      if (handLine[handLine.Length - 1] != '€' && !isAllIn)                      {                          continue;                      }                        var currencyIndex = handLine.IndexOf('€');                      var lastCurrencyIndex = handLine.LastIndexOf('€');                        var amountIndex = -1;                      var lastAmountIndex = -1;                        decimal amount;                        for (int k = 1; k <= currencyIndex; k++)                      {                          if (handLine[currencyIndex - k] == ' ')                          {                              amountIndex = currencyIndex - k;                              break;                          }                      }                        if(currencyIndex != lastCurrencyIndex)                      {                          for (int k = 1; k <= lastCurrencyIndex; k++)                          {                              if (handLine[lastCurrencyIndex - k] == ' ')                              {                                  lastAmountIndex = lastCurrencyIndex - k;                                  break;                              }                          }                            amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      else                      {                          amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                        char actionIdentifier = handLine[amountIndex - 2];                                            string playerName;                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if(handLine.StartsWith("*** SUMMARY ***"))                  {                      currentStreet = Street.Showdown;                      i++;                      continue;                  }                    if(handLine.StartsWith("*** "))                  {                      if (handLine.StartsWith("*** PRE-FLOP ***"))                      {                          currentStreet = Street.Preflop;                          continue;                      }                       if (handLine.StartsWith("*** FLOP *** ["))                      {                          currentStreet = Street.Flop;                          continue;                      }                      if (handLine.StartsWith("*** TURN *** ["))                      {                          currentStreet = Street.Turn;                          continue;                      }                      if (handLine.StartsWith("*** RIVER *** ["))                      {                          currentStreet = Street.River;                          continue;                      }                      if (handLine.StartsWith("*** SHOW DOWN ***"))                      {                          currentStreet = Street.Showdown;                          continue;                      }                        // skip the following lines                      if (handLine.StartsWith("*** PRE-FLOP ***")                       || handLine.StartsWith("*** ANTE/BLINDS ***"))                      {                          continue;                      }                  }                    bool isAllIn = handLine.EndsWith("and is all-in");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 14);                  }                    if (currentStreet == Street.Showdown)                  {                      // lines look like:                      // Seat 3: xGras (button) won 6.07€                      // Seat 4: KryptonII (button) showed [Qd Ah] and won 42.32€ with One pair : Aces                      // Seat 1: Hitchhiker won 0.90€                      if(handLine.StartsWith("Seat "))                      {                          int wonIndex = handLine.IndexOf(" won "' StringComparison.Ordinal);                            if (wonIndex != -1)                          {                              int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' wonIndex' StringComparison.Ordinal);                                decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                            }                      }                        // when a player shows his hand it looks like                      // LEROISALO shows [Kh Ah] (high card : Ace)                      if(handLine[handLine.Length-1] == ')')                      {                          if (handLine.Contains("[") && handLine.Contains("]"))                          {                              string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new HandAction(name' HandActionType.SHOW' 0' Street.Showdown));                          }                        }                                            continue;                  }                    // Blind posting                  if(currentStreet.Equals(Street.Null))                  {                      if (handLine.StartsWith("Dealt to "))                      {                          continue;                      }                        // skip                      // Nhat60 denies big blind                      if (handLine[handLine.Length - 1] == 'd')                      {                          continue;                      }                        var smallBlindIndex = handLine.IndexOf("posts small blind"' StringComparison.Ordinal);                      var bigBlindIndex = handLine.IndexOf("posts big blind"' StringComparison.Ordinal);                        // bkk2015 posts small blind 0.25€ out of position                      // bkk2015 posts big blind 0.50€ out of position                      var deadMoney = handLine[handLine.Length-1] == 'n';                      if (deadMoney)                      {                          handLine = handLine.Substring(0' handLine.Length - 16);                      }                        var amountStartIndex = handLine.LastIndexOf(" "' StringComparison.Ordinal);                        var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                           if(smallBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                            var playerName = handLine.Substring(0' smallBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop'isAllIn));                            smallBlindValue = amount;                          continue;                      }                        if(bigBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.BIG_BLIND;                            var playerName = handLine.Substring(0' bigBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop' isAllIn));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          var playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          var playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      // from here on we can skip lines that don't end on the EURO-symbol AND that are not allins                      if (handLine[handLine.Length - 1] != '€' && !isAllIn)                      {                          continue;                      }                        var currencyIndex = handLine.IndexOf('€');                      var lastCurrencyIndex = handLine.LastIndexOf('€');                        var amountIndex = -1;                      var lastAmountIndex = -1;                        decimal amount;                        for (int k = 1; k <= currencyIndex; k++)                      {                          if (handLine[currencyIndex - k] == ' ')                          {                              amountIndex = currencyIndex - k;                              break;                          }                      }                        if(currencyIndex != lastCurrencyIndex)                      {                          for (int k = 1; k <= lastCurrencyIndex; k++)                          {                              if (handLine[lastCurrencyIndex - k] == ' ')                              {                                  lastAmountIndex = lastCurrencyIndex - k;                                  break;                              }                          }                            amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      else                      {                          amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                        char actionIdentifier = handLine[amountIndex - 2];                                            string playerName;                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if(handLine.StartsWith("*** SUMMARY ***"))                  {                      currentStreet = Street.Showdown;                      i++;                      continue;                  }                    if(handLine.StartsWith("*** "))                  {                      if (handLine.StartsWith("*** PRE-FLOP ***"))                      {                          currentStreet = Street.Preflop;                          continue;                      }                       if (handLine.StartsWith("*** FLOP *** ["))                      {                          currentStreet = Street.Flop;                          continue;                      }                      if (handLine.StartsWith("*** TURN *** ["))                      {                          currentStreet = Street.Turn;                          continue;                      }                      if (handLine.StartsWith("*** RIVER *** ["))                      {                          currentStreet = Street.River;                          continue;                      }                      if (handLine.StartsWith("*** SHOW DOWN ***"))                      {                          currentStreet = Street.Showdown;                          continue;                      }                        // skip the following lines                      if (handLine.StartsWith("*** PRE-FLOP ***")                       || handLine.StartsWith("*** ANTE/BLINDS ***"))                      {                          continue;                      }                  }                    bool isAllIn = handLine.EndsWith("and is all-in");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 14);                  }                    if (currentStreet == Street.Showdown)                  {                      // lines look like:                      // Seat 3: xGras (button) won 6.07€                      // Seat 4: KryptonII (button) showed [Qd Ah] and won 42.32€ with One pair : Aces                      // Seat 1: Hitchhiker won 0.90€                      if(handLine.StartsWith("Seat "))                      {                          int wonIndex = handLine.IndexOf(" won "' StringComparison.Ordinal);                            if (wonIndex != -1)                          {                              int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' wonIndex' StringComparison.Ordinal);                                decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                            }                      }                        // when a player shows his hand it looks like                      // LEROISALO shows [Kh Ah] (high card : Ace)                      if(handLine[handLine.Length-1] == ')')                      {                          if (handLine.Contains("[") && handLine.Contains("]"))                          {                              string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new HandAction(name' HandActionType.SHOW' 0' Street.Showdown));                          }                        }                                            continue;                  }                    // Blind posting                  if(currentStreet.Equals(Street.Null))                  {                      if (handLine.StartsWith("Dealt to "))                      {                          continue;                      }                        // skip                      // Nhat60 denies big blind                      if (handLine[handLine.Length - 1] == 'd')                      {                          continue;                      }                        var smallBlindIndex = handLine.IndexOf("posts small blind"' StringComparison.Ordinal);                      var bigBlindIndex = handLine.IndexOf("posts big blind"' StringComparison.Ordinal);                        // bkk2015 posts small blind 0.25€ out of position                      // bkk2015 posts big blind 0.50€ out of position                      var deadMoney = handLine[handLine.Length-1] == 'n';                      if (deadMoney)                      {                          handLine = handLine.Substring(0' handLine.Length - 16);                      }                        var amountStartIndex = handLine.LastIndexOf(" "' StringComparison.Ordinal);                        var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                           if(smallBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                            var playerName = handLine.Substring(0' smallBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop'isAllIn));                            smallBlindValue = amount;                          continue;                      }                        if(bigBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.BIG_BLIND;                            var playerName = handLine.Substring(0' bigBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop' isAllIn));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          var playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          var playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      // from here on we can skip lines that don't end on the EURO-symbol AND that are not allins                      if (handLine[handLine.Length - 1] != '€' && !isAllIn)                      {                          continue;                      }                        var currencyIndex = handLine.IndexOf('€');                      var lastCurrencyIndex = handLine.LastIndexOf('€');                        var amountIndex = -1;                      var lastAmountIndex = -1;                        decimal amount;                        for (int k = 1; k <= currencyIndex; k++)                      {                          if (handLine[currencyIndex - k] == ' ')                          {                              amountIndex = currencyIndex - k;                              break;                          }                      }                        if(currencyIndex != lastCurrencyIndex)                      {                          for (int k = 1; k <= lastCurrencyIndex; k++)                          {                              if (handLine[lastCurrencyIndex - k] == ' ')                              {                                  lastAmountIndex = lastCurrencyIndex - k;                                  break;                              }                          }                            amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      else                      {                          amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                        char actionIdentifier = handLine[amountIndex - 2];                                            string playerName;                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if(handLine.StartsWith("*** SUMMARY ***"))                  {                      currentStreet = Street.Showdown;                      i++;                      continue;                  }                    if(handLine.StartsWith("*** "))                  {                      if (handLine.StartsWith("*** PRE-FLOP ***"))                      {                          currentStreet = Street.Preflop;                          continue;                      }                       if (handLine.StartsWith("*** FLOP *** ["))                      {                          currentStreet = Street.Flop;                          continue;                      }                      if (handLine.StartsWith("*** TURN *** ["))                      {                          currentStreet = Street.Turn;                          continue;                      }                      if (handLine.StartsWith("*** RIVER *** ["))                      {                          currentStreet = Street.River;                          continue;                      }                      if (handLine.StartsWith("*** SHOW DOWN ***"))                      {                          currentStreet = Street.Showdown;                          continue;                      }                        // skip the following lines                      if (handLine.StartsWith("*** PRE-FLOP ***")                       || handLine.StartsWith("*** ANTE/BLINDS ***"))                      {                          continue;                      }                  }                    bool isAllIn = handLine.EndsWith("and is all-in");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 14);                  }                    if (currentStreet == Street.Showdown)                  {                      // lines look like:                      // Seat 3: xGras (button) won 6.07€                      // Seat 4: KryptonII (button) showed [Qd Ah] and won 42.32€ with One pair : Aces                      // Seat 1: Hitchhiker won 0.90€                      if(handLine.StartsWith("Seat "))                      {                          int wonIndex = handLine.IndexOf(" won "' StringComparison.Ordinal);                            if (wonIndex != -1)                          {                              int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' wonIndex' StringComparison.Ordinal);                                decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                            }                      }                        // when a player shows his hand it looks like                      // LEROISALO shows [Kh Ah] (high card : Ace)                      if(handLine[handLine.Length-1] == ')')                      {                          if (handLine.Contains("[") && handLine.Contains("]"))                          {                              string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new HandAction(name' HandActionType.SHOW' 0' Street.Showdown));                          }                        }                                            continue;                  }                    // Blind posting                  if(currentStreet.Equals(Street.Null))                  {                      if (handLine.StartsWith("Dealt to "))                      {                          continue;                      }                        // skip                      // Nhat60 denies big blind                      if (handLine[handLine.Length - 1] == 'd')                      {                          continue;                      }                        var smallBlindIndex = handLine.IndexOf("posts small blind"' StringComparison.Ordinal);                      var bigBlindIndex = handLine.IndexOf("posts big blind"' StringComparison.Ordinal);                        // bkk2015 posts small blind 0.25€ out of position                      // bkk2015 posts big blind 0.50€ out of position                      var deadMoney = handLine[handLine.Length-1] == 'n';                      if (deadMoney)                      {                          handLine = handLine.Substring(0' handLine.Length - 16);                      }                        var amountStartIndex = handLine.LastIndexOf(" "' StringComparison.Ordinal);                        var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                           if(smallBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                            var playerName = handLine.Substring(0' smallBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop'isAllIn));                            smallBlindValue = amount;                          continue;                      }                        if(bigBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.BIG_BLIND;                            var playerName = handLine.Substring(0' bigBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop' isAllIn));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          var playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          var playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      // from here on we can skip lines that don't end on the EURO-symbol AND that are not allins                      if (handLine[handLine.Length - 1] != '€' && !isAllIn)                      {                          continue;                      }                        var currencyIndex = handLine.IndexOf('€');                      var lastCurrencyIndex = handLine.LastIndexOf('€');                        var amountIndex = -1;                      var lastAmountIndex = -1;                        decimal amount;                        for (int k = 1; k <= currencyIndex; k++)                      {                          if (handLine[currencyIndex - k] == ' ')                          {                              amountIndex = currencyIndex - k;                              break;                          }                      }                        if(currencyIndex != lastCurrencyIndex)                      {                          for (int k = 1; k <= lastCurrencyIndex; k++)                          {                              if (handLine[lastCurrencyIndex - k] == ' ')                              {                                  lastAmountIndex = lastCurrencyIndex - k;                                  break;                              }                          }                            amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      else                      {                          amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                        char actionIdentifier = handLine[amountIndex - 2];                                            string playerName;                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if(handLine.StartsWith("*** SUMMARY ***"))                  {                      currentStreet = Street.Showdown;                      i++;                      continue;                  }                    if(handLine.StartsWith("*** "))                  {                      if (handLine.StartsWith("*** PRE-FLOP ***"))                      {                          currentStreet = Street.Preflop;                          continue;                      }                       if (handLine.StartsWith("*** FLOP *** ["))                      {                          currentStreet = Street.Flop;                          continue;                      }                      if (handLine.StartsWith("*** TURN *** ["))                      {                          currentStreet = Street.Turn;                          continue;                      }                      if (handLine.StartsWith("*** RIVER *** ["))                      {                          currentStreet = Street.River;                          continue;                      }                      if (handLine.StartsWith("*** SHOW DOWN ***"))                      {                          currentStreet = Street.Showdown;                          continue;                      }                        // skip the following lines                      if (handLine.StartsWith("*** PRE-FLOP ***")                       || handLine.StartsWith("*** ANTE/BLINDS ***"))                      {                          continue;                      }                  }                    bool isAllIn = handLine.EndsWith("and is all-in");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 14);                  }                    if (currentStreet == Street.Showdown)                  {                      // lines look like:                      // Seat 3: xGras (button) won 6.07€                      // Seat 4: KryptonII (button) showed [Qd Ah] and won 42.32€ with One pair : Aces                      // Seat 1: Hitchhiker won 0.90€                      if(handLine.StartsWith("Seat "))                      {                          int wonIndex = handLine.IndexOf(" won "' StringComparison.Ordinal);                            if (wonIndex != -1)                          {                              int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' wonIndex' StringComparison.Ordinal);                                decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                            }                      }                        // when a player shows his hand it looks like                      // LEROISALO shows [Kh Ah] (high card : Ace)                      if(handLine[handLine.Length-1] == ')')                      {                          if (handLine.Contains("[") && handLine.Contains("]"))                          {                              string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new HandAction(name' HandActionType.SHOW' 0' Street.Showdown));                          }                        }                                            continue;                  }                    // Blind posting                  if(currentStreet.Equals(Street.Null))                  {                      if (handLine.StartsWith("Dealt to "))                      {                          continue;                      }                        // skip                      // Nhat60 denies big blind                      if (handLine[handLine.Length - 1] == 'd')                      {                          continue;                      }                        var smallBlindIndex = handLine.IndexOf("posts small blind"' StringComparison.Ordinal);                      var bigBlindIndex = handLine.IndexOf("posts big blind"' StringComparison.Ordinal);                        // bkk2015 posts small blind 0.25€ out of position                      // bkk2015 posts big blind 0.50€ out of position                      var deadMoney = handLine[handLine.Length-1] == 'n';                      if (deadMoney)                      {                          handLine = handLine.Substring(0' handLine.Length - 16);                      }                        var amountStartIndex = handLine.LastIndexOf(" "' StringComparison.Ordinal);                        var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                           if(smallBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                            var playerName = handLine.Substring(0' smallBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop'isAllIn));                            smallBlindValue = amount;                          continue;                      }                        if(bigBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.BIG_BLIND;                            var playerName = handLine.Substring(0' bigBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop' isAllIn));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          var playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          var playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      // from here on we can skip lines that don't end on the EURO-symbol AND that are not allins                      if (handLine[handLine.Length - 1] != '€' && !isAllIn)                      {                          continue;                      }                        var currencyIndex = handLine.IndexOf('€');                      var lastCurrencyIndex = handLine.LastIndexOf('€');                        var amountIndex = -1;                      var lastAmountIndex = -1;                        decimal amount;                        for (int k = 1; k <= currencyIndex; k++)                      {                          if (handLine[currencyIndex - k] == ' ')                          {                              amountIndex = currencyIndex - k;                              break;                          }                      }                        if(currencyIndex != lastCurrencyIndex)                      {                          for (int k = 1; k <= lastCurrencyIndex; k++)                          {                              if (handLine[lastCurrencyIndex - k] == ' ')                              {                                  lastAmountIndex = lastCurrencyIndex - k;                                  break;                              }                          }                            amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      else                      {                          amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                        char actionIdentifier = handLine[amountIndex - 2];                                            string playerName;                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if(handLine.StartsWith("*** SUMMARY ***"))                  {                      currentStreet = Street.Showdown;                      i++;                      continue;                  }                    if(handLine.StartsWith("*** "))                  {                      if (handLine.StartsWith("*** PRE-FLOP ***"))                      {                          currentStreet = Street.Preflop;                          continue;                      }                       if (handLine.StartsWith("*** FLOP *** ["))                      {                          currentStreet = Street.Flop;                          continue;                      }                      if (handLine.StartsWith("*** TURN *** ["))                      {                          currentStreet = Street.Turn;                          continue;                      }                      if (handLine.StartsWith("*** RIVER *** ["))                      {                          currentStreet = Street.River;                          continue;                      }                      if (handLine.StartsWith("*** SHOW DOWN ***"))                      {                          currentStreet = Street.Showdown;                          continue;                      }                        // skip the following lines                      if (handLine.StartsWith("*** PRE-FLOP ***")                       || handLine.StartsWith("*** ANTE/BLINDS ***"))                      {                          continue;                      }                  }                    bool isAllIn = handLine.EndsWith("and is all-in");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 14);                  }                    if (currentStreet == Street.Showdown)                  {                      // lines look like:                      // Seat 3: xGras (button) won 6.07€                      // Seat 4: KryptonII (button) showed [Qd Ah] and won 42.32€ with One pair : Aces                      // Seat 1: Hitchhiker won 0.90€                      if(handLine.StartsWith("Seat "))                      {                          int wonIndex = handLine.IndexOf(" won "' StringComparison.Ordinal);                            if (wonIndex != -1)                          {                              int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' wonIndex' StringComparison.Ordinal);                                decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                            }                      }                        // when a player shows his hand it looks like                      // LEROISALO shows [Kh Ah] (high card : Ace)                      if(handLine[handLine.Length-1] == ')')                      {                          if (handLine.Contains("[") && handLine.Contains("]"))                          {                              string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new HandAction(name' HandActionType.SHOW' 0' Street.Showdown));                          }                        }                                            continue;                  }                    // Blind posting                  if(currentStreet.Equals(Street.Null))                  {                      if (handLine.StartsWith("Dealt to "))                      {                          continue;                      }                        // skip                      // Nhat60 denies big blind                      if (handLine[handLine.Length - 1] == 'd')                      {                          continue;                      }                        var smallBlindIndex = handLine.IndexOf("posts small blind"' StringComparison.Ordinal);                      var bigBlindIndex = handLine.IndexOf("posts big blind"' StringComparison.Ordinal);                        // bkk2015 posts small blind 0.25€ out of position                      // bkk2015 posts big blind 0.50€ out of position                      var deadMoney = handLine[handLine.Length-1] == 'n';                      if (deadMoney)                      {                          handLine = handLine.Substring(0' handLine.Length - 16);                      }                        var amountStartIndex = handLine.LastIndexOf(" "' StringComparison.Ordinal);                        var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                           if(smallBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                            var playerName = handLine.Substring(0' smallBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop'isAllIn));                            smallBlindValue = amount;                          continue;                      }                        if(bigBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.BIG_BLIND;                            var playerName = handLine.Substring(0' bigBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop' isAllIn));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          var playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          var playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      // from here on we can skip lines that don't end on the EURO-symbol AND that are not allins                      if (handLine[handLine.Length - 1] != '€' && !isAllIn)                      {                          continue;                      }                        var currencyIndex = handLine.IndexOf('€');                      var lastCurrencyIndex = handLine.LastIndexOf('€');                        var amountIndex = -1;                      var lastAmountIndex = -1;                        decimal amount;                        for (int k = 1; k <= currencyIndex; k++)                      {                          if (handLine[currencyIndex - k] == ' ')                          {                              amountIndex = currencyIndex - k;                              break;                          }                      }                        if(currencyIndex != lastCurrencyIndex)                      {                          for (int k = 1; k <= lastCurrencyIndex; k++)                          {                              if (handLine[lastCurrencyIndex - k] == ' ')                              {                                  lastAmountIndex = lastCurrencyIndex - k;                                  break;                              }                          }                            amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      else                      {                          amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                        char actionIdentifier = handLine[amountIndex - 2];                                            string playerName;                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = startOfActionsIndex; i < handLines.Length; i++)              {                  string handLine = handLines[i];                    if(handLine.StartsWith("*** SUMMARY ***"))                  {                      currentStreet = Street.Showdown;                      i++;                      continue;                  }                    if(handLine.StartsWith("*** "))                  {                      if (handLine.StartsWith("*** PRE-FLOP ***"))                      {                          currentStreet = Street.Preflop;                          continue;                      }                       if (handLine.StartsWith("*** FLOP *** ["))                      {                          currentStreet = Street.Flop;                          continue;                      }                      if (handLine.StartsWith("*** TURN *** ["))                      {                          currentStreet = Street.Turn;                          continue;                      }                      if (handLine.StartsWith("*** RIVER *** ["))                      {                          currentStreet = Street.River;                          continue;                      }                      if (handLine.StartsWith("*** SHOW DOWN ***"))                      {                          currentStreet = Street.Showdown;                          continue;                      }                        // skip the following lines                      if (handLine.StartsWith("*** PRE-FLOP ***")                       || handLine.StartsWith("*** ANTE/BLINDS ***"))                      {                          continue;                      }                  }                    bool isAllIn = handLine.EndsWith("and is all-in");                  if (isAllIn)                  {                      handLine = handLine.Substring(0' handLine.Length - 14);                  }                    if (currentStreet == Street.Showdown)                  {                      // lines look like:                      // Seat 3: xGras (button) won 6.07€                      // Seat 4: KryptonII (button) showed [Qd Ah] and won 42.32€ with One pair : Aces                      // Seat 1: Hitchhiker won 0.90€                      if(handLine.StartsWith("Seat "))                      {                          int wonIndex = handLine.IndexOf(" won "' StringComparison.Ordinal);                            if (wonIndex != -1)                          {                              int currencyIndex = handLine.IndexOf(_numberFormatInfo.CurrencySymbol' wonIndex' StringComparison.Ordinal);                                decimal amount = decimal.Parse(handLine.Substring(wonIndex + 5' currencyIndex - wonIndex - 4)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new WinningsAction(name' HandActionType.WINS' amount' 0));                            }                      }                        // when a player shows his hand it looks like                      // LEROISALO shows [Kh Ah] (high card : Ace)                      if(handLine[handLine.Length-1] == ')')                      {                          if (handLine.Contains("[") && handLine.Contains("]"))                          {                              string name = GetPlayerNameFromHandLine(handLine);                                handActions.Add(new HandAction(name' HandActionType.SHOW' 0' Street.Showdown));                          }                        }                                            continue;                  }                    // Blind posting                  if(currentStreet.Equals(Street.Null))                  {                      if (handLine.StartsWith("Dealt to "))                      {                          continue;                      }                        // skip                      // Nhat60 denies big blind                      if (handLine[handLine.Length - 1] == 'd')                      {                          continue;                      }                        var smallBlindIndex = handLine.IndexOf("posts small blind"' StringComparison.Ordinal);                      var bigBlindIndex = handLine.IndexOf("posts big blind"' StringComparison.Ordinal);                        // bkk2015 posts small blind 0.25€ out of position                      // bkk2015 posts big blind 0.50€ out of position                      var deadMoney = handLine[handLine.Length-1] == 'n';                      if (deadMoney)                      {                          handLine = handLine.Substring(0' handLine.Length - 16);                      }                        var amountStartIndex = handLine.LastIndexOf(" "' StringComparison.Ordinal);                        var amount = decimal.Parse(handLine.Substring(amountStartIndex + 1' handLine.Length - amountStartIndex - 1)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                                           if(smallBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.SMALL_BLIND;                            var playerName = handLine.Substring(0' smallBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop'isAllIn));                            smallBlindValue = amount;                          continue;                      }                        if(bigBlindIndex > -1)                      {                          var handActionType = deadMoney ? HandActionType.POSTS : HandActionType.BIG_BLIND;                            var playerName = handLine.Substring(0' bigBlindIndex - 1);                          handActions.Add(new HandAction(playerName' handActionType' amount' Street.Preflop' isAllIn));                          continue;                      }                        throw new HandActionException(handLine' "Unknown hand-line: " + handLine);                  }                    // Check for folds & checks                  if (handLine[handLine.Length - 1] == 's')                  {                      if (handLine[handLine.Length - 2] == 'd') // folds                      {                          var playerName = handLine.Substring(0' handLine.Length - 6);                          handActions.Add(new HandAction(playerName' HandActionType.FOLD' 0' currentStreet));                      }                      else if (handLine[handLine.Length - 2] == 'k') // checks                      {                          var playerName = handLine.Substring(0' handLine.Length - 7);                          handActions.Add(new HandAction(playerName' HandActionType.CHECK' 0' currentStreet));                      }                      continue;                  }                  else                  {                      // from here on we can skip lines that don't end on the EURO-symbol AND that are not allins                      if (handLine[handLine.Length - 1] != '€' && !isAllIn)                      {                          continue;                      }                        var currencyIndex = handLine.IndexOf('€');                      var lastCurrencyIndex = handLine.LastIndexOf('€');                        var amountIndex = -1;                      var lastAmountIndex = -1;                        decimal amount;                        for (int k = 1; k <= currencyIndex; k++)                      {                          if (handLine[currencyIndex - k] == ' ')                          {                              amountIndex = currencyIndex - k;                              break;                          }                      }                        if(currencyIndex != lastCurrencyIndex)                      {                          for (int k = 1; k <= lastCurrencyIndex; k++)                          {                              if (handLine[lastCurrencyIndex - k] == ' ')                              {                                  lastAmountIndex = lastCurrencyIndex - k;                                  break;                              }                          }                            amount = decimal.Parse(handLine.Substring(lastAmountIndex' lastCurrencyIndex - lastAmountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      else                      {                          amount = decimal.Parse(handLine.Substring(amountIndex' currencyIndex - amountIndex)' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                        char actionIdentifier = handLine[amountIndex - 2];                                            string playerName;                      switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }                  }                    throw new HandActionException(handLine' "Unknown hand-line: " + handLine);              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 2; i < handLines.Length; i++)              {                  // when the line starts with stars' we already have all players                  if (handLines[i].StartsWith("***")) break;                    int colonIndex = handLines[i].IndexOf(':');                  int parenIndex = handLines[i].IndexOf('(');                    string name = handLines[i].Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                  int seatNumber = Int32.Parse(handLines[i].Substring(5' colonIndex - 5));                  string amount = (handLines[i].Substring(parenIndex + 1' handLines[i].Length - parenIndex - 2));                    playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 2; i < handLines.Length; i++)              {                  // when the line starts with stars' we already have all players                  if (handLines[i].StartsWith("***")) break;                    int colonIndex = handLines[i].IndexOf(':');                  int parenIndex = handLines[i].IndexOf('(');                    string name = handLines[i].Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                  int seatNumber = Int32.Parse(handLines[i].Substring(5' colonIndex - 5));                  string amount = (handLines[i].Substring(parenIndex + 1' handLines[i].Length - parenIndex - 2));                    playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 2; i < handLines.Length; i++)              {                  // when the line starts with stars' we already have all players                  if (handLines[i].StartsWith("***")) break;                    int colonIndex = handLines[i].IndexOf(':');                  int parenIndex = handLines[i].IndexOf('(');                    string name = handLines[i].Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                  int seatNumber = Int32.Parse(handLines[i].Substring(5' colonIndex - 5));                  string amount = (handLines[i].Substring(parenIndex + 1' handLines[i].Length - parenIndex - 2));                    playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 2; i < handLines.Length; i++)              {                  // when the line starts with stars' we already have all players                  if (handLines[i].StartsWith("***")) break;                    int colonIndex = handLines[i].IndexOf(':');                  int parenIndex = handLines[i].IndexOf('(');                    string name = handLines[i].Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                  int seatNumber = Int32.Parse(handLines[i].Substring(5' colonIndex - 5));                  string amount = (handLines[i].Substring(parenIndex + 1' handLines[i].Length - parenIndex - 2));                    playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 2; i < handLines.Length; i++)              {                  // when the line starts with stars' we already have all players                  if (handLines[i].StartsWith("***")) break;                    int colonIndex = handLines[i].IndexOf(':');                  int parenIndex = handLines[i].IndexOf('(');                    string name = handLines[i].Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                  int seatNumber = Int32.Parse(handLines[i].Substring(5' colonIndex - 5));                  string amount = (handLines[i].Substring(parenIndex + 1' handLines[i].Length - parenIndex - 2));                    playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 2; i < handLines.Length; i++)              {                  // when the line starts with stars' we already have all players                  if (handLines[i].StartsWith("***")) break;                    int colonIndex = handLines[i].IndexOf(':');                  int parenIndex = handLines[i].IndexOf('(');                    string name = handLines[i].Substring(colonIndex + 2' parenIndex - 2 - colonIndex - 1);                  int seatNumber = Int32.Parse(handLines[i].Substring(5' colonIndex - 5));                  string amount = (handLines[i].Substring(parenIndex + 1' handLines[i].Length - parenIndex - 2));                    playerList.Add(new Player(name' decimal.Parse(amount' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo)' seatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int i = handLines.Length-1; i >= 0; i--)              {                  string handLine = handLines[i];                    if(!handLine.StartsWith("Board: ["))                  {                      continue;                  }                    int lastSquareOpen = handLine.LastIndexOf('[');                    boardCards += handLine.Substring(lastSquareOpen + 1' handLine.Length - lastSquareOpen - 2);                    // as there is only one possible board line' leave here                  break;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,GetPlayerNameFromHandLine,The following statement contains a magic number: if(handLine.StartsWith("Seat ") && colonIndex > -1)              {                  nameStartIndex = colonIndex + 2;              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string line = handLines[i];                                      // Check for summary line:                  //  *** SUMMARY ***                  if (line[0] == '*' && line[4] == 'S')                  {                      // Line after summary line is:                      //  Total pot 3€ | No rake                      // or                      //  Total pot 62.50€ | Rake 1.50€                      string totalLine = handLines[i + 1];                        int lastSpaceIndex = totalLine.LastIndexOf(' ');                      int spaceAfterFirstNumber = totalLine.IndexOf(' '' 11);                        string rake = totalLine.Substring(lastSpaceIndex + 1' totalLine.Length - lastSpaceIndex - 1);                      try                      {                          handHistorySummary.Rake = decimal.Parse(rake' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      catch (Exception)                      {                          // we can't parse "rake" in No rake -> 0.00m rake paid                          handHistorySummary.Rake = 0.0m;                      }                                            string totalPot = totalLine.Substring(10' spaceAfterFirstNumber - 10);                        handHistorySummary.TotalPot = decimal.Parse(totalPot' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        // the pot in the hand history already deducted the rake' so we need to readd it                      handHistorySummary.TotalPot += handHistorySummary.Rake;                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string line = handLines[i];                                      // Check for summary line:                  //  *** SUMMARY ***                  if (line[0] == '*' && line[4] == 'S')                  {                      // Line after summary line is:                      //  Total pot 3€ | No rake                      // or                      //  Total pot 62.50€ | Rake 1.50€                      string totalLine = handLines[i + 1];                        int lastSpaceIndex = totalLine.LastIndexOf(' ');                      int spaceAfterFirstNumber = totalLine.IndexOf(' '' 11);                        string rake = totalLine.Substring(lastSpaceIndex + 1' totalLine.Length - lastSpaceIndex - 1);                      try                      {                          handHistorySummary.Rake = decimal.Parse(rake' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      catch (Exception)                      {                          // we can't parse "rake" in No rake -> 0.00m rake paid                          handHistorySummary.Rake = 0.0m;                      }                                            string totalPot = totalLine.Substring(10' spaceAfterFirstNumber - 10);                        handHistorySummary.TotalPot = decimal.Parse(totalPot' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        // the pot in the hand history already deducted the rake' so we need to readd it                      handHistorySummary.TotalPot += handHistorySummary.Rake;                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string line = handLines[i];                                      // Check for summary line:                  //  *** SUMMARY ***                  if (line[0] == '*' && line[4] == 'S')                  {                      // Line after summary line is:                      //  Total pot 3€ | No rake                      // or                      //  Total pot 62.50€ | Rake 1.50€                      string totalLine = handLines[i + 1];                        int lastSpaceIndex = totalLine.LastIndexOf(' ');                      int spaceAfterFirstNumber = totalLine.IndexOf(' '' 11);                        string rake = totalLine.Substring(lastSpaceIndex + 1' totalLine.Length - lastSpaceIndex - 1);                      try                      {                          handHistorySummary.Rake = decimal.Parse(rake' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      catch (Exception)                      {                          // we can't parse "rake" in No rake -> 0.00m rake paid                          handHistorySummary.Rake = 0.0m;                      }                                            string totalPot = totalLine.Substring(10' spaceAfterFirstNumber - 10);                        handHistorySummary.TotalPot = decimal.Parse(totalPot' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        // the pot in the hand history already deducted the rake' so we need to readd it                      handHistorySummary.TotalPot += handHistorySummary.Rake;                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseExtraHandInformation,The following statement contains a magic number: for (int i = handLines.Length - 1; i >= 0; i--)              {                  string line = handLines[i];                                      // Check for summary line:                  //  *** SUMMARY ***                  if (line[0] == '*' && line[4] == 'S')                  {                      // Line after summary line is:                      //  Total pot 3€ | No rake                      // or                      //  Total pot 62.50€ | Rake 1.50€                      string totalLine = handLines[i + 1];                        int lastSpaceIndex = totalLine.LastIndexOf(' ');                      int spaceAfterFirstNumber = totalLine.IndexOf(' '' 11);                        string rake = totalLine.Substring(lastSpaceIndex + 1' totalLine.Length - lastSpaceIndex - 1);                      try                      {                          handHistorySummary.Rake = decimal.Parse(rake' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                      }                      catch (Exception)                      {                          // we can't parse "rake" in No rake -> 0.00m rake paid                          handHistorySummary.Rake = 0.0m;                      }                                            string totalPot = totalLine.Substring(10' spaceAfterFirstNumber - 10);                        handHistorySummary.TotalPot = decimal.Parse(totalPot' NumberStyles.AllowCurrencySymbol | NumberStyles.Number' _numberFormatInfo);                        // the pot in the hand history already deducted the rake' so we need to readd it                      handHistorySummary.TotalPot += handHistorySummary.Rake;                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,SplitUpMultipleHands,The following statement contains a magic number: return HandSplitRegex.Split(rawHandHistories)                              .Where(s => string.IsNullOrWhiteSpace(s) == false && s.Length > 30)                              .Select(s => "Game started at: " + s.Trim('\r'' '\n'));
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseDealerPosition,The following statement contains a magic number: const int offset = 5;
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseDealerPosition,The following statement contains a magic number: int endIndex = handLines[2].IndexOf(' '' offset);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseDealerPosition,The following statement contains a magic number: string dealerLine = handLines[2].Substring(offset' endIndex - offset);
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseDateUtc,The following statement contains a magic number: const int startindex = 17;
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseTableName,The following statement contains a magic number: int StartIndex = tablenameLine.IndexOf('/'' GameIDStartIndex) + 2;
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: const int MinimumLinesWithoutActions = 8;
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: int actionNumber = 2;
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = ActionsStart + 2; i < handLines.Length; i++)              {                  string actionLine = handLines[i];                  //Parse winning action                  if (actionLine[0] == '*')                  {                      string playerName = PlayerWithSpaces ? GetWinnerNameWithSpaces(actionLine' playerList) : GetWinnerNameWithoutSpaces(actionLine);                      int winAmountStartIndex = actionLine.LastIndexOf(':') + 2;                      string winString = actionLine.Substring(winAmountStartIndex).TrimEnd('.');                      decimal winAmount = decimal.Parse(winString' System.Globalization.CultureInfo.InvariantCulture);                      actions.Add(new WinningsAction(playerName' HandActionType.WINS' winAmount' 0' actionNumber++));                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseHandActions,The following statement contains a magic number: for (int i = ActionsStart + 2; i < handLines.Length; i++)              {                  string actionLine = handLines[i];                  //Parse winning action                  if (actionLine[0] == '*')                  {                      string playerName = PlayerWithSpaces ? GetWinnerNameWithSpaces(actionLine' playerList) : GetWinnerNameWithoutSpaces(actionLine);                      int winAmountStartIndex = actionLine.LastIndexOf(':') + 2;                      string winString = actionLine.Substring(winAmountStartIndex).TrimEnd('.');                      decimal winAmount = decimal.Parse(winString' System.Globalization.CultureInfo.InvariantCulture);                      actions.Add(new WinningsAction(playerName' HandActionType.WINS' winAmount' 0' actionNumber++));                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePosts,The following statement contains a magic number: for (int i = ActionsStart; i < handLines.Length; i++)              {                  const int PlayerNameStartindex = 7;//"Player ".Length                  string actionLine = handLines[i];                                    char endChar = actionLine[actionLine.Length - 1];                  bool deadBet = false;                    switch (endChar)                  {                      //Player bubblebubble wait BB                      case 'B':                          continue;//More posts can still occur                        //Player Aquasces1 received a card.                      case '.':                      //Player WP_Hero received card: [6d]                      case ']':                           //No more posts can occur when players start reciving cards                          return i;                        //Player TheKunttzz posts (0.25) as a dead bet                      //Player TheKunttzz posts (0.50)                      case 't':                             deadBet = true;                          break;                        //Player Aquasces1 has small blind (2)                      //Player COMON-JOE-JUG has big blind (4)                      //Player TheKunttzz posts (0.25)                      //Player TheKunttzz straddles (0.50)                      case ')':                          break;                        default:                          throw new HandActionException(actionLine' "Unrecognized endChar \"" + endChar + "\"");                  }                    int playerNameEndIndex = actionLine.IndexOf(" posts (");                  if (playerNameEndIndex == -1)                  {                      playerNameEndIndex = actionLine.IndexOf(" straddle (");                  }                    string playerName = actionLine.Substring(PlayerNameStartindex' playerNameEndIndex - PlayerNameStartindex);                  decimal Amount = ParseActionAmountAfterPlayer(actionLine);                    if (deadBet)                  {                      Amount += ParseActionAmountAfterPlayer(handLines[++i]);                  }                    actions.Add(new HandAction(playerName' HandActionType.POSTS' Amount' Street.Preflop' actionNumber++));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseNextStreet,The following statement contains a magic number: const int StreetIndex = 4;
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,GetActionStart,The following statement contains a magic number: for (int i = 3; i < handLines.Length; i++)              {                  if (handLines[i][0] != 'S')                  {                      return i;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: int CurrentLineIndex = 3;
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: while (handLines[CurrentLineIndex][0] == 'S')              {                  string playerLine = handLines[CurrentLineIndex++];                    const int seatNumberStart = 5;                  int colonIndex = playerLine.IndexOf(':'' seatNumberStart + 1);                  int SeatNumber = int.Parse(playerLine.Substring(seatNumberStart' colonIndex - seatNumberStart));                    //Parsing playerName                  //PlayerName can contain '(' & ')'                  int NameStartIndex = colonIndex + 2;                  int NameEndIndex = playerLine.LastIndexOf(" (");                  string playerName = playerLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                    int stackSizeStartIndex = NameEndIndex + 2;                  int stackSizeEndIndex = playerLine.Length - 2;                  string stack = playerLine.Substring(stackSizeStartIndex' stackSizeEndIndex - stackSizeStartIndex);                  //string playerName = playerLine.Substring(NameStartIndex' stackSizeStartIndex - NameStartIndex - 2);                  playerList.Add(new Player(playerName' decimal.Parse(stack' System.Globalization.CultureInfo.InvariantCulture)' SeatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: while (handLines[CurrentLineIndex][0] == 'S')              {                  string playerLine = handLines[CurrentLineIndex++];                    const int seatNumberStart = 5;                  int colonIndex = playerLine.IndexOf(':'' seatNumberStart + 1);                  int SeatNumber = int.Parse(playerLine.Substring(seatNumberStart' colonIndex - seatNumberStart));                    //Parsing playerName                  //PlayerName can contain '(' & ')'                  int NameStartIndex = colonIndex + 2;                  int NameEndIndex = playerLine.LastIndexOf(" (");                  string playerName = playerLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                    int stackSizeStartIndex = NameEndIndex + 2;                  int stackSizeEndIndex = playerLine.Length - 2;                  string stack = playerLine.Substring(stackSizeStartIndex' stackSizeEndIndex - stackSizeStartIndex);                  //string playerName = playerLine.Substring(NameStartIndex' stackSizeStartIndex - NameStartIndex - 2);                  playerList.Add(new Player(playerName' decimal.Parse(stack' System.Globalization.CultureInfo.InvariantCulture)' SeatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: while (handLines[CurrentLineIndex][0] == 'S')              {                  string playerLine = handLines[CurrentLineIndex++];                    const int seatNumberStart = 5;                  int colonIndex = playerLine.IndexOf(':'' seatNumberStart + 1);                  int SeatNumber = int.Parse(playerLine.Substring(seatNumberStart' colonIndex - seatNumberStart));                    //Parsing playerName                  //PlayerName can contain '(' & ')'                  int NameStartIndex = colonIndex + 2;                  int NameEndIndex = playerLine.LastIndexOf(" (");                  string playerName = playerLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                    int stackSizeStartIndex = NameEndIndex + 2;                  int stackSizeEndIndex = playerLine.Length - 2;                  string stack = playerLine.Substring(stackSizeStartIndex' stackSizeEndIndex - stackSizeStartIndex);                  //string playerName = playerLine.Substring(NameStartIndex' stackSizeStartIndex - NameStartIndex - 2);                  playerList.Add(new Player(playerName' decimal.Parse(stack' System.Globalization.CultureInfo.InvariantCulture)' SeatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: while (handLines[CurrentLineIndex][0] == 'S')              {                  string playerLine = handLines[CurrentLineIndex++];                    const int seatNumberStart = 5;                  int colonIndex = playerLine.IndexOf(':'' seatNumberStart + 1);                  int SeatNumber = int.Parse(playerLine.Substring(seatNumberStart' colonIndex - seatNumberStart));                    //Parsing playerName                  //PlayerName can contain '(' & ')'                  int NameStartIndex = colonIndex + 2;                  int NameEndIndex = playerLine.LastIndexOf(" (");                  string playerName = playerLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                    int stackSizeStartIndex = NameEndIndex + 2;                  int stackSizeEndIndex = playerLine.Length - 2;                  string stack = playerLine.Substring(stackSizeStartIndex' stackSizeEndIndex - stackSizeStartIndex);                  //string playerName = playerLine.Substring(NameStartIndex' stackSizeStartIndex - NameStartIndex - 2);                  playerList.Add(new Player(playerName' decimal.Parse(stack' System.Globalization.CultureInfo.InvariantCulture)' SeatNumber));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  const int NameStartIndex = 7;                  string sitOutLine = handLines[CurrentLineIndex + i];                    bool receivingCards = false;                  int NameEndIndex;                  string playerName;                    //Uncalled bet (20) returned to zz7                  if (sitOutLine[0] == 'U')                  {                      break;                  }                    switch (sitOutLine[sitOutLine.Length - 1])                  {                      //Player bubblebubble received card: [2h]                      case ']':                          //TODO: Parse cards here                          break;                      case '.':                          //Player bubblebubble is timed out.                          if (sitOutLine[sitOutLine.Length - 2] == 't')                          {                              continue;                          }                          receivingCards = true;                          break;                      case ')':                          continue;                      case 'B':                          //Player bubblebubble wait BB                          NameEndIndex = sitOutLine.Length - 8;//" wait BB".Length                          playerName = sitOutLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                          playerList[playerName].IsSittingOut = true;                          break;                      case 't':                          //Player xx45809 sitting out                          if (sitOutLine[sitOutLine.Length - 2] == 'u')                          {                              NameEndIndex = sitOutLine.Length - 12;//" sitting out".Length                              playerName = sitOutLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                              if (playerName == "")//"Player  sitting out"                              {                                  continue;                              }                              playerList[playerName].IsSittingOut = true;                              break;                          }                          //Player TheKunttzz posts (0.25) as a dead bet                          else continue;                      default:                          throw new ArgumentException("Unhandled Line: " + sitOutLine);                  }                  if (receivingCards)                  {                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  const int NameStartIndex = 7;                  string sitOutLine = handLines[CurrentLineIndex + i];                    bool receivingCards = false;                  int NameEndIndex;                  string playerName;                    //Uncalled bet (20) returned to zz7                  if (sitOutLine[0] == 'U')                  {                      break;                  }                    switch (sitOutLine[sitOutLine.Length - 1])                  {                      //Player bubblebubble received card: [2h]                      case ']':                          //TODO: Parse cards here                          break;                      case '.':                          //Player bubblebubble is timed out.                          if (sitOutLine[sitOutLine.Length - 2] == 't')                          {                              continue;                          }                          receivingCards = true;                          break;                      case ')':                          continue;                      case 'B':                          //Player bubblebubble wait BB                          NameEndIndex = sitOutLine.Length - 8;//" wait BB".Length                          playerName = sitOutLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                          playerList[playerName].IsSittingOut = true;                          break;                      case 't':                          //Player xx45809 sitting out                          if (sitOutLine[sitOutLine.Length - 2] == 'u')                          {                              NameEndIndex = sitOutLine.Length - 12;//" sitting out".Length                              playerName = sitOutLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                              if (playerName == "")//"Player  sitting out"                              {                                  continue;                              }                              playerList[playerName].IsSittingOut = true;                              break;                          }                          //Player TheKunttzz posts (0.25) as a dead bet                          else continue;                      default:                          throw new ArgumentException("Unhandled Line: " + sitOutLine);                  }                  if (receivingCards)                  {                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  const int NameStartIndex = 7;                  string sitOutLine = handLines[CurrentLineIndex + i];                    bool receivingCards = false;                  int NameEndIndex;                  string playerName;                    //Uncalled bet (20) returned to zz7                  if (sitOutLine[0] == 'U')                  {                      break;                  }                    switch (sitOutLine[sitOutLine.Length - 1])                  {                      //Player bubblebubble received card: [2h]                      case ']':                          //TODO: Parse cards here                          break;                      case '.':                          //Player bubblebubble is timed out.                          if (sitOutLine[sitOutLine.Length - 2] == 't')                          {                              continue;                          }                          receivingCards = true;                          break;                      case ')':                          continue;                      case 'B':                          //Player bubblebubble wait BB                          NameEndIndex = sitOutLine.Length - 8;//" wait BB".Length                          playerName = sitOutLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                          playerList[playerName].IsSittingOut = true;                          break;                      case 't':                          //Player xx45809 sitting out                          if (sitOutLine[sitOutLine.Length - 2] == 'u')                          {                              NameEndIndex = sitOutLine.Length - 12;//" sitting out".Length                              playerName = sitOutLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                              if (playerName == "")//"Player  sitting out"                              {                                  continue;                              }                              playerList[playerName].IsSittingOut = true;                              break;                          }                          //Player TheKunttzz posts (0.25) as a dead bet                          else continue;                      default:                          throw new ArgumentException("Unhandled Line: " + sitOutLine);                  }                  if (receivingCards)                  {                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  const int NameStartIndex = 7;                  string sitOutLine = handLines[CurrentLineIndex + i];                    bool receivingCards = false;                  int NameEndIndex;                  string playerName;                    //Uncalled bet (20) returned to zz7                  if (sitOutLine[0] == 'U')                  {                      break;                  }                    switch (sitOutLine[sitOutLine.Length - 1])                  {                      //Player bubblebubble received card: [2h]                      case ']':                          //TODO: Parse cards here                          break;                      case '.':                          //Player bubblebubble is timed out.                          if (sitOutLine[sitOutLine.Length - 2] == 't')                          {                              continue;                          }                          receivingCards = true;                          break;                      case ')':                          continue;                      case 'B':                          //Player bubblebubble wait BB                          NameEndIndex = sitOutLine.Length - 8;//" wait BB".Length                          playerName = sitOutLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                          playerList[playerName].IsSittingOut = true;                          break;                      case 't':                          //Player xx45809 sitting out                          if (sitOutLine[sitOutLine.Length - 2] == 'u')                          {                              NameEndIndex = sitOutLine.Length - 12;//" sitting out".Length                              playerName = sitOutLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                              if (playerName == "")//"Player  sitting out"                              {                                  continue;                              }                              playerList[playerName].IsSittingOut = true;                              break;                          }                          //Player TheKunttzz posts (0.25) as a dead bet                          else continue;                      default:                          throw new ArgumentException("Unhandled Line: " + sitOutLine);                  }                  if (receivingCards)                  {                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = 0; i < handLines.Length; i++)              {                  const int NameStartIndex = 7;                  string sitOutLine = handLines[CurrentLineIndex + i];                    bool receivingCards = false;                  int NameEndIndex;                  string playerName;                    //Uncalled bet (20) returned to zz7                  if (sitOutLine[0] == 'U')                  {                      break;                  }                    switch (sitOutLine[sitOutLine.Length - 1])                  {                      //Player bubblebubble received card: [2h]                      case ']':                          //TODO: Parse cards here                          break;                      case '.':                          //Player bubblebubble is timed out.                          if (sitOutLine[sitOutLine.Length - 2] == 't')                          {                              continue;                          }                          receivingCards = true;                          break;                      case ')':                          continue;                      case 'B':                          //Player bubblebubble wait BB                          NameEndIndex = sitOutLine.Length - 8;//" wait BB".Length                          playerName = sitOutLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                          playerList[playerName].IsSittingOut = true;                          break;                      case 't':                          //Player xx45809 sitting out                          if (sitOutLine[sitOutLine.Length - 2] == 'u')                          {                              NameEndIndex = sitOutLine.Length - 12;//" sitting out".Length                              playerName = sitOutLine.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                              if (playerName == "")//"Player  sitting out"                              {                                  continue;                              }                              playerList[playerName].IsSittingOut = true;                              break;                          }                          //Player TheKunttzz posts (0.25) as a dead bet                          else continue;                      default:                          throw new ArgumentException("Unhandled Line: " + sitOutLine);                  }                  if (receivingCards)                  {                      break;                  }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParsePlayers,The following statement contains a magic number: for (int i = handLines.Length - playerList.Count - 1; i < handLines.Length - 1; i++)              {                  const int WinningStartOffset = 1;                  const int PlayerMinLength = 7; // = "Player ".Length                    string summaryLine = handLines[i];                                    int playerNameStartIndex = PlayerMinLength + (summaryLine[0] == '*' ? WinningStartOffset : 0);                  int playerNameEndIndex = summaryLine.IndexOf(' '' playerNameStartIndex);                    int ShowIndex = summaryLine.IndexOf(" shows: ");                  if (ShowIndex != -1)                  {                      string playerName = summaryLine.Substring(playerNameStartIndex' ShowIndex - playerNameStartIndex);                        int pocketStartIndex = summaryLine.IndexOf('['' playerNameEndIndex) + 1;                      int pocketEndIndex = summaryLine.IndexOf(']'' pocketStartIndex);                        Player showdownPlayer = playerList[playerName];                      if (!showdownPlayer.hasHoleCards)                      {                           string cards = summaryLine.Substring(pocketStartIndex' pocketEndIndex - pocketStartIndex);                          cards = cards.Replace("10"' "T");                          showdownPlayer.HoleCards = HoleCards.FromCards(cards);                      }                                       }              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int lineNumber = handLines.Length - 5; lineNumber >= 0; lineNumber--)              {                  string line = handLines[lineNumber];                  if (line[0] == '-')                  {                      return boardCards;                  }                    if (line[0] != 'B')                  {                      continue;                  }                    const int firstSquareBracketEnd = 8;                  int lastSquareBracket = line.Length - 1;                    return BoardCards.FromCards(line.Substring(firstSquareBracketEnd' lastSquareBracket - firstSquareBracketEnd).Replace("10"' "T"));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseCommunityCards,The following statement contains a magic number: for (int lineNumber = handLines.Length - 5; lineNumber >= 0; lineNumber--)              {                  string line = handLines[lineNumber];                  if (line[0] == '-')                  {                      return boardCards;                  }                    if (line[0] != 'B')                  {                      continue;                  }                    const int firstSquareBracketEnd = 8;                  int lastSquareBracket = line.Length - 1;                    return BoardCards.FromCards(line.Substring(firstSquareBracketEnd' lastSquareBracket - firstSquareBracketEnd).Replace("10"' "T"));              }
Magic Number,HandHistories.Parser.Parsers.FastParser.Winning,WinningPokerNetworkFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winning\WinningPokerNetworkFastParserImpl.cs,ParseHeroName,The following statement contains a magic number: for (int i = 0; i < handlines.Length; i++)              {                  string line = handlines[i];                  if (line[0] == 'P' && line.EndsWith("]"))                  {                      const int NameStartIndex = 7;                      int NameEndIndex = line.LastIndexOf(" r");                      return line.Substring(NameStartIndex' NameEndIndex - NameStartIndex);                  }              }
Magic Number,HandHistories.Parser.Parsers.RegexParser.PartyPoker,PartyHandHistoryRegexParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\RegexParser\PartyPoker\PartyHandHistoryRegexParserImpl.cs,ParseLimit,The following statement contains a magic number: try              {                  var gameLimitNoSlash = Regex.Match(handText' GameLimitRegex).Value;                  var gameLimitWithSlash = Regex.Match(handText' GameLimitRegexWithSlash).Value;                    gameLimitNoSlash = gameLimitNoSlash.Replace("€"' "").Replace("$"' "").Replace("*"' "").Replace("'"' "");                  gameLimitWithSlash = gameLimitWithSlash.Replace("€"' "").Replace("$"' "").Replace("*"' "").Replace("'"' "");                    // Handle 20BB tables' due to Party putting the limit up as 40% of the actual                  // limit. So for instance 20BB party $100NL the limit is displayed as $40NL.                  // No idea why this is so.                                 if (tableName.StartsWith("20BB"))                  {                      gameLimitNoSlash = ((int)((Int32.Parse(gameLimitNoSlash) / 4.0) * 10.0)).ToString();                  }                  // If there is a game limit with a slash then the limit is in form $2/$4                  // then convert the game limit into a game type without a slash which would be 400 for 2/4                  else if (!string.IsNullOrWhiteSpace(gameLimitWithSlash))                  {                      // get the bb amount                      gameLimitNoSlash = gameLimitWithSlash.Split('/')[1];                        // turn into a buy in only if the game type is not fixed limit                      // as there are no buy ins in fixed limit.                      if (gameType != GameType.FixedLimitHoldem)                          gameLimitNoSlash = (decimal.Parse(gameLimitNoSlash' System.Globalization.CultureInfo.InvariantCulture) * 100).ToString();                  }                    Currency currency = ParseCurrency(handText);                    decimal bigBlind;                    // If its fixed limit we can return now as we don't have our                  // data in buy in format so don't need to down convert to                  // a sb/bb                  if (gameType == GameType.FixedLimitHoldem)                  {                      bigBlind = decimal.Parse(gameLimitNoSlash' System.Globalization.CultureInfo.InvariantCulture);                        return Limit.FromSmallBlindBigBlind(bigBlind/2.0m' bigBlind' currency);                  }                    // All other game types                    decimal buyIn = decimal.Parse(gameLimitNoSlash' System.Globalization.CultureInfo.InvariantCulture);                  bigBlind = buyIn/100.0m;                    if (bigBlind == 0.25m)                  {                      return Limit.FromSmallBlindBigBlind(0.10m' 0.25m' currency);                  }                    return Limit.FromSmallBlindBigBlind(bigBlind / 2.0m' bigBlind' currency);              }              catch (Exception exception)              {                  throw new LimitException(handText' "ParseLimit: " + exception.Message);              }
Magic Number,HandHistories.Parser.Parsers.RegexParser.PartyPoker,PartyHandHistoryRegexParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\RegexParser\PartyPoker\PartyHandHistoryRegexParserImpl.cs,ParseLimit,The following statement contains a magic number: try              {                  var gameLimitNoSlash = Regex.Match(handText' GameLimitRegex).Value;                  var gameLimitWithSlash = Regex.Match(handText' GameLimitRegexWithSlash).Value;                    gameLimitNoSlash = gameLimitNoSlash.Replace("€"' "").Replace("$"' "").Replace("*"' "").Replace("'"' "");                  gameLimitWithSlash = gameLimitWithSlash.Replace("€"' "").Replace("$"' "").Replace("*"' "").Replace("'"' "");                    // Handle 20BB tables' due to Party putting the limit up as 40% of the actual                  // limit. So for instance 20BB party $100NL the limit is displayed as $40NL.                  // No idea why this is so.                                 if (tableName.StartsWith("20BB"))                  {                      gameLimitNoSlash = ((int)((Int32.Parse(gameLimitNoSlash) / 4.0) * 10.0)).ToString();                  }                  // If there is a game limit with a slash then the limit is in form $2/$4                  // then convert the game limit into a game type without a slash which would be 400 for 2/4                  else if (!string.IsNullOrWhiteSpace(gameLimitWithSlash))                  {                      // get the bb amount                      gameLimitNoSlash = gameLimitWithSlash.Split('/')[1];                        // turn into a buy in only if the game type is not fixed limit                      // as there are no buy ins in fixed limit.                      if (gameType != GameType.FixedLimitHoldem)                          gameLimitNoSlash = (decimal.Parse(gameLimitNoSlash' System.Globalization.CultureInfo.InvariantCulture) * 100).ToString();                  }                    Currency currency = ParseCurrency(handText);                    decimal bigBlind;                    // If its fixed limit we can return now as we don't have our                  // data in buy in format so don't need to down convert to                  // a sb/bb                  if (gameType == GameType.FixedLimitHoldem)                  {                      bigBlind = decimal.Parse(gameLimitNoSlash' System.Globalization.CultureInfo.InvariantCulture);                        return Limit.FromSmallBlindBigBlind(bigBlind/2.0m' bigBlind' currency);                  }                    // All other game types                    decimal buyIn = decimal.Parse(gameLimitNoSlash' System.Globalization.CultureInfo.InvariantCulture);                  bigBlind = buyIn/100.0m;                    if (bigBlind == 0.25m)                  {                      return Limit.FromSmallBlindBigBlind(0.10m' 0.25m' currency);                  }                    return Limit.FromSmallBlindBigBlind(bigBlind / 2.0m' bigBlind' currency);              }              catch (Exception exception)              {                  throw new LimitException(handText' "ParseLimit: " + exception.Message);              }
Magic Number,HandHistories.Parser.Parsers.RegexParser.PartyPoker,PartyHandHistoryRegexParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\RegexParser\PartyPoker\PartyHandHistoryRegexParserImpl.cs,ParseLimit,The following statement contains a magic number: try              {                  var gameLimitNoSlash = Regex.Match(handText' GameLimitRegex).Value;                  var gameLimitWithSlash = Regex.Match(handText' GameLimitRegexWithSlash).Value;                    gameLimitNoSlash = gameLimitNoSlash.Replace("€"' "").Replace("$"' "").Replace("*"' "").Replace("'"' "");                  gameLimitWithSlash = gameLimitWithSlash.Replace("€"' "").Replace("$"' "").Replace("*"' "").Replace("'"' "");                    // Handle 20BB tables' due to Party putting the limit up as 40% of the actual                  // limit. So for instance 20BB party $100NL the limit is displayed as $40NL.                  // No idea why this is so.                                 if (tableName.StartsWith("20BB"))                  {                      gameLimitNoSlash = ((int)((Int32.Parse(gameLimitNoSlash) / 4.0) * 10.0)).ToString();                  }                  // If there is a game limit with a slash then the limit is in form $2/$4                  // then convert the game limit into a game type without a slash which would be 400 for 2/4                  else if (!string.IsNullOrWhiteSpace(gameLimitWithSlash))                  {                      // get the bb amount                      gameLimitNoSlash = gameLimitWithSlash.Split('/')[1];                        // turn into a buy in only if the game type is not fixed limit                      // as there are no buy ins in fixed limit.                      if (gameType != GameType.FixedLimitHoldem)                          gameLimitNoSlash = (decimal.Parse(gameLimitNoSlash' System.Globalization.CultureInfo.InvariantCulture) * 100).ToString();                  }                    Currency currency = ParseCurrency(handText);                    decimal bigBlind;                    // If its fixed limit we can return now as we don't have our                  // data in buy in format so don't need to down convert to                  // a sb/bb                  if (gameType == GameType.FixedLimitHoldem)                  {                      bigBlind = decimal.Parse(gameLimitNoSlash' System.Globalization.CultureInfo.InvariantCulture);                        return Limit.FromSmallBlindBigBlind(bigBlind/2.0m' bigBlind' currency);                  }                    // All other game types                    decimal buyIn = decimal.Parse(gameLimitNoSlash' System.Globalization.CultureInfo.InvariantCulture);                  bigBlind = buyIn/100.0m;                    if (bigBlind == 0.25m)                  {                      return Limit.FromSmallBlindBigBlind(0.10m' 0.25m' currency);                  }                    return Limit.FromSmallBlindBigBlind(bigBlind / 2.0m' bigBlind' currency);              }              catch (Exception exception)              {                  throw new LimitException(handText' "ParseLimit: " + exception.Message);              }
Magic Number,HandHistories.Parser.Utils.FastParsing,FastInt,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Utils\FastParsing\FastParsing.cs,Parse,The following statement contains a magic number: while (currentChar >= 0x30 && currentChar <= 0x39)              {                  Value = (Value * 10) + currentChar - 0x30;                  if (startindex >= text.Length)                  {                      break;                  }                  currentChar = text[startindex++];              }
Missing Default,HandHistories.Parser.Parsers.FastParser._888,Poker888FastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\888\Poker888FastParserImpl.cs,ParseHandActions,The following switch statement is missing a default case: switch (handLine[11])                      {                          case 'r':                              currentStreet = Street.River;                              break;                          case 'f':                              currentStreet = Street.Flop;                              break;                          case 't':                              currentStreet = Street.Turn;                              break;                      }
Missing Default,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseGameType,The following switch statement is missing a default case: switch (limit)              {                  case "PL":                      switch (game)                      {                          case "OMA":                              return GameType.PotLimitOmaha;                          case "OMAHL":                              return GameType.PotLimitOmahaHiLo;                          case "THM":                              return GameType.PotLimitHoldem;                      }                      break;                  case "NL":                      switch (game)                      {                          case "OMA":                              return GameType.NoLimitOmaha;                          case "OMAHL":                              return GameType.NoLimitOmahaHiLo;                          case "THM":                              return GameType.NoLimitHoldem;                      }                      break;                  case "FL":                      switch (game)                      {                          case "OMA":                              return GameType.FixedLimitOmaha;                          case "OMAHL":                              return GameType.FixedLimitOmahaHiLo;                          case "THM":                              return GameType.FixedLimitHoldem;                      }                      break;              }
Missing Default,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseGameType,The following switch statement is missing a default case: switch (game)                      {                          case "OMA":                              return GameType.PotLimitOmaha;                          case "OMAHL":                              return GameType.PotLimitOmahaHiLo;                          case "THM":                              return GameType.PotLimitHoldem;                      }
Missing Default,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseGameType,The following switch statement is missing a default case: switch (game)                      {                          case "OMA":                              return GameType.NoLimitOmaha;                          case "OMAHL":                              return GameType.NoLimitOmahaHiLo;                          case "THM":                              return GameType.NoLimitHoldem;                      }
Missing Default,HandHistories.Parser.Parsers.FastParser.BossMedia,BossMediaFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\BossMedia\BossMediaFastParserImpl.cs,ParseGameType,The following switch statement is missing a default case: switch (game)                      {                          case "OMA":                              return GameType.FixedLimitOmaha;                          case "OMAHL":                              return GameType.FixedLimitOmahaHiLo;                          case "THM":                              return GameType.FixedLimitHoldem;                      }
Missing Default,HandHistories.Parser.Parsers.FastParser.Entraction,EntractionFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Entraction\EntractionFastParserImpl.cs.cs,ParseHandActions,The following switch statement is missing a default case: switch (action)                  {                      case "Raise":                          handActions.Add(new HandAction(name' HandActionType.RAISE' amount' currentStreet));                          continue;                      case "Check":                          handActions.Add(new HandAction(name' HandActionType.CHECK' amount' currentStreet));                          continue;                      case "Fold":                          handActions.Add(new HandAction(name' HandActionType.FOLD' amount' currentStreet));                          continue;                      case "Bet":                          handActions.Add(new HandAction(name' HandActionType.BET' amount' currentStreet));                          continue;                      case "Call":                          handActions.Add(new HandAction(name' HandActionType.CALL' amount' currentStreet));                          continue;                      case "Payback":                          handActions.Add(new HandAction(name' HandActionType.UNCALLED_BET' amount' currentStreet));                          continue;                      case "All-In":                                                  handActions.Add(new AllInAction(name' amount' currentStreet' false));                          continue;                  }
Missing Default,HandHistories.Parser.Parsers.FastParser.FullTiltPoker,FullTiltPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\FullTiltPoker\FullTiltPokerFastParserImpl.cs,ParseStreet,The following switch statement is missing a default case: switch (streetId)              {                  case 'F':                      return Street.Flop;                  case 'T':                      return Street.Turn;                  case 'R':                      return Street.River;              }
Missing Default,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseGameType,The following switch statement is missing a default case: switch (bettingType)              {                  case "LIMIT":                      switch (gameType)                      {                          case "TEXAS_HOLDEM":                              return GameType.FixedLimitHoldem;                      }                      break;                  case "NO_LIMIT":                      switch (gameType)                      {                          case "TEXAS_HOLDEM":                              return GameType.NoLimitHoldem;                          case "OMAHA_HI":                              return GameType.NoLimitOmaha;                      }                      break;                  case "POT_LIMIT":                      switch (gameType)                      {                          case "OMAHA_HI":                              return GameType.PotLimitOmaha;                          case "TEXAS_HOLDEM":                              return GameType.PotLimitHoldem;                              case "OMAHA_HI_LO":                              return GameType.PotLimitOmahaHiLo;                                                  }                      break;                                                  }
Missing Default,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseGameType,The following switch statement is missing a default case: switch (gameType)                      {                          case "TEXAS_HOLDEM":                              return GameType.FixedLimitHoldem;                      }
Missing Default,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseGameType,The following switch statement is missing a default case: switch (gameType)                      {                          case "TEXAS_HOLDEM":                              return GameType.NoLimitHoldem;                          case "OMAHA_HI":                              return GameType.NoLimitOmaha;                      }
Missing Default,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseGameType,The following switch statement is missing a default case: switch (gameType)                      {                          case "OMAHA_HI":                              return GameType.PotLimitOmaha;                          case "TEXAS_HOLDEM":                              return GameType.PotLimitHoldem;                              case "OMAHA_HI_LO":                              return GameType.PotLimitOmahaHiLo;                                                  }
Missing Default,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following switch statement is missing a default case: switch (streetIdentifierChar)                          {                              case 'f':                                  currentStreet = Street.Flop;                                  continue;                              case 't':                                  currentStreet = Street.Turn;                                  continue;                              case 'r':                                  currentStreet = Street.River;                                  continue;                          }
Missing Default,HandHistories.Parser.Parsers.FastParser.OnGame,OnGameFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\OnGame\OnGameFastParserImpl.cs,ParseHandActions,The following switch statement is missing a default case: switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' currencyIndex - 7);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              break;                          case 'e': // raises                              // ex: zatli74 raises $1.00 to $1.00                              playerName = handLine.Substring(0' currencyIndex - 8);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              break;                          case 't': // bets                              playerName = handLine.Substring(0' currencyIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                                 }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                                  }                              break;                      }
Missing Default,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following switch statement is missing a default case: switch (limit)              {                  case "FL":                      switch (gameLength)  	                {                          case 5://"Omaha".Length                              return GameType.FixedLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.FixedLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.FixedLimitOmahaHiLo;  	                }                      break;                  case "NL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.NoLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.NoLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.NoLimitOmahaHiLo;                      }                      break;                  case "PL":                      switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.PotLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.PotLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.PotLimitOmahaHiLo;                      }                      break;              }
Missing Default,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following switch statement is missing a default case: switch (gameLength)  	                {                          case 5://"Omaha".Length                              return GameType.FixedLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.FixedLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.FixedLimitOmahaHiLo;  	                }
Missing Default,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following switch statement is missing a default case: switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.NoLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.NoLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.NoLimitOmahaHiLo;                      }
Missing Default,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseGameType,The following switch statement is missing a default case: switch (gameLength)                      {                          case 5://"Omaha".Length                              return GameType.PotLimitOmaha;                          case 13://"Texas Hold'em".Length                              return GameType.PotLimitHoldem;                          case 11://"Omaha Hi-Lo".Length                              return GameType.PotLimitOmahaHiLo;                      }
Missing Default,HandHistories.Parser.Parsers.FastParser.PartyPoker,PartyPokerFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\PartyPoker\PartyPokerFastParserImpl.cs,ParseLine,The following switch statement is missing a default case: switch (lastChar)              {                  //Expected formats:                  //player posts small blind [$5 USD].                  //player posts big blind [$10 USD].                  case '.':                      action = ParseDotAction(line' currentStreet);                      break;                    case ']':                      char firstChar = line[0];                      if (firstChar == '*')                      {                          currentStreet = ParseStreet(line);                          return false;                      }                      else if(line.StartsWith("Dealt to"))                      {                          return false;                      }                      else                      {                          action = ParseActionWithSize(line' currentStreet);                      }                      break;                    case 's':                      action = ParseActionWithoutSize(line' currentStreet);                      break;                                    //Expected Formats:                  //"Player wins $5.18 USD"                  case 'D':                      action = ParseWinsAction(line);                      break;              }
Missing Default,HandHistories.Parser.Parsers.FastParser.Winamax,WinamaxFastParserImpl,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Parser\Parsers\FastParser\Winamax\WinamaxFastParserImpl.cs,ParseHandActions,The following switch statement is missing a default case: switch (actionIdentifier)                      {                          case 'l': // calls                              playerName = handLine.Substring(0' amountIndex - 6);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.CALL' amount' currentStreet));                              }                              continue;                          case 'e': // raises                              // ex: r.BAGGIO raises 20€ to 40€                              playerName = handLine.Substring(0' amountIndex - 7);                                                            // 30/04/2015: if a player posts dead money (SB)' his raise size is too high by the amount of the small blind                              //             this can be verified by taking a look at pot and call sizes of other players                              if (currentStreet == Street.Preflop)                              {                                  var deadMoneyAction = handActions.Any(h => h.PlayerName.Equals(playerName)                                                                             && h.HandActionType.Equals(HandActionType.POSTS)                                                                             && Math.Abs(h.Amount).Equals(smallBlindValue));                                    if (deadMoneyAction)                                  {                                      amount -= smallBlindValue;                                  }                                  }                                                           if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' true));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.RAISE' amount' currentStreet));                              }                              continue;                          case 't': // bets                              playerName = handLine.Substring(0' amountIndex - 5);                              if (isAllIn)                              {                                  handActions.Add(new AllInAction(playerName' amount' currentStreet' false));                              }                              else                              {                                  handActions.Add(new HandAction(playerName' HandActionType.BET' amount' currentStreet));                              }                              continue;                      }
