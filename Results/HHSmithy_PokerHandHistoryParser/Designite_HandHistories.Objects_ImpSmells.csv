Implementation smell,Namespace,Class,File,Method,Description
Long Method,HandHistories.Objects.GameDescription,SiteUtils,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SiteUtils.cs,ParseSiteName,The method has 109 lines of code.
Long Parameter List,HandHistories.Objects.Actions,AllInAction,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Actions\AllInAction.cs,AllInAction,The method has 5 parameters. Parameters: playerName' amount' street' isRaiseAllIn' actionNumber
Long Parameter List,HandHistories.Objects.Actions,HandAction,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Actions\HandAction.cs,HandAction,The method has 5 parameters. Parameters: playerName' handActionType' amount' street' actionNumber
Long Parameter List,HandHistories.Objects.Actions,HandAction,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Actions\HandAction.cs,HandAction,The method has 5 parameters. Parameters: playerName' handActionType' street' AllInAction' actionNumber
Long Parameter List,HandHistories.Objects.Actions,HandAction,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Actions\HandAction.cs,HandAction,The method has 6 parameters. Parameters: playerName' handActionType' amount' street' AllInAction' actionNumber
Long Parameter List,HandHistories.Objects.Actions,WinningsAction,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Actions\WinningsAction.cs,WinningsAction,The method has 5 parameters. Parameters: playerName' handActionType' amount' potNumber' actionNumber
Long Parameter List,HandHistories.Objects.Cards,BoardCards,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\BoardCards.cs,ForRiver,The method has 5 parameters. Parameters: card1' card2' card3' card4' card5
Long Parameter List,HandHistories.Objects.Cards,HoleCards,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\HoleCards.cs,ForOmaha,The method has 5 parameters. Parameters: playerName' card1' card2' card3' card4
Long Parameter List,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,Buyin,The method has 5 parameters. Parameters: prizePool' rake' currency' isKnockout' knockoutValue
Long Parameter List,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,FromBuyinRake,The method has 5 parameters. Parameters: prizePoolValue' rake' currency' isKnockout' knockoutValue
Long Parameter List,HandHistories.Objects.GameDescription,GameDescriptor,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\GameDescriptor.cs,GameDescriptor,The method has 5 parameters. Parameters: siteName' gameType' limit' tableType' seatType
Long Parameter List,HandHistories.Objects.GameDescription,GameDescriptor,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\GameDescriptor.cs,GameDescriptor,The method has 5 parameters. Parameters: siteName' gameType' buyin' tableType' seatType
Long Parameter List,HandHistories.Objects.GameDescription,GameDescriptor,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\GameDescriptor.cs,GameDescriptor,The method has 6 parameters. Parameters: pokerFormat' siteName' gameType' limit' tableType' seatType
Long Parameter List,HandHistories.Objects.GameDescription,GameDescriptor,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\GameDescriptor.cs,GameDescriptor,The method has 6 parameters. Parameters: pokerFormat' siteName' gameType' buyin' tableType' seatType
Long Parameter List,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,Limit,The method has 5 parameters. Parameters: smallBlind' bigBlind' currency' isAnteTable' ante
Long Parameter List,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,FromSmallBlindBigBlind,The method has 5 parameters. Parameters: smallBlind' bigBlind' currency' isAnteTable' anteAmount
Long Statement,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,GetBuyinString,The length of the statement  "            string prizePoolString = (PrizePoolValue != Math.Round(PrizePoolValue)) ? PrizePoolValue.ToString("N2"' format) : PrizePoolValue.ToString("N0"' format); " is 152.
Long Statement,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,GetBuyinString,The length of the statement  "                string knockoutString = (KnockoutValue != Math.Round(KnockoutValue)) ? KnockoutValue.ToString("N2"' format) : KnockoutValue.ToString("N0"' format); " is 147.
Long Statement,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,GetBuyinString,The length of the statement  "                return string.Format("{0}{1}{4}{0}{3}{4}{0}{2}"' currencySymbol' prizePoolString' rakeString' knockoutString' seperatorCharacter); " is 130.
Long Statement,HandHistories.Objects.GameDescription,SitAndGoTriple,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SitAndGoTriple.cs,ToDisplayName,The length of the statement  "            return Buyin.ToString(CultureInfo.CurrentCulture'false'"+") + " " + GameTypeUtils.GetShortName(GameType) + " [" + TableType.ToString().Replace("-"'"' ") + "] "; " is 160.
Long Statement,HandHistories.Objects.GameDescription,TableTypeUtils,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\TableTypeUtils.cs,ParseTableType,The length of the statement  "                    string match = Enum.GetNames(typeof(TableTypeDescription)).FirstOrDefault(s => s.ToLower().Equals(tableType.ToLower())); " is 120.
Long Statement,HandHistories.Objects.GameDescription,TableTypeUtils,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\TableTypeUtils.cs,ParseTableType,The length of the statement  "                    return match == null ? TableTypeDescription.Unknown : (TableTypeDescription)Enum.Parse(typeof(TableTypeDescription)' match' true); " is 130.
Long Statement,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,GetLimitString,The length of the statement  "            string smallBlindString = (SmallBlind != Math.Round(SmallBlind)) ? SmallBlind.ToString("N2"' format) : SmallBlind.ToString("N0"' format); " is 137.
Long Statement,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,GetLimitString,The length of the statement  "            string bigBlindString = (BigBlind != Math.Round(BigBlind)) ? BigBlind.ToString("N2"' format) : BigBlind.ToString("N0"' format); " is 127.
Long Statement,HandHistories.Objects.GameDescription,TableType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\TableType.cs,ToString,The length of the statement  "            var output = GetTableTypeDescriptions().Aggregate(""' (current' tableType) => current + "-" + TableTypeUtils.GetDisplayString(tableType)); " is 138.
Long Statement,HandHistories.Objects.Players,Player,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Players\Player.cs,ToString,The length of the statement  "            string s = string.Format("Seat {0}: {1} [{2}] with '{3}'"' SeatNumber' PlayerName' StartingStack.ToString("N2")' (hasHoleCards ? HoleCards.ToString() : "")); " is 157.
Magic Number,HandHistories.Objects.Cards,BoardCards,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\BoardCards.cs,GetBoardOnStreet,The following statement contains a magic number: switch (streetAllIn)              {                  case Street.Preflop:                      return BoardCards.ForPreflop();                  case Street.Flop:                      return BoardCards.ForFlop(this[0]' this[1]' this[2]);                  case Street.Turn:                      return BoardCards.ForTurn(this[0]' this[1]' this[2]' this[3]);                  case Street.River:                      return BoardCards.ForRiver(this[0]' this[1]' this[2]' this[3]' this[4]);                  default:                      throw new ArgumentException("Can't get board in for null street");              }
Magic Number,HandHistories.Objects.Cards,BoardCards,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\BoardCards.cs,GetBoardOnStreet,The following statement contains a magic number: switch (streetAllIn)              {                  case Street.Preflop:                      return BoardCards.ForPreflop();                  case Street.Flop:                      return BoardCards.ForFlop(this[0]' this[1]' this[2]);                  case Street.Turn:                      return BoardCards.ForTurn(this[0]' this[1]' this[2]' this[3]);                  case Street.River:                      return BoardCards.ForRiver(this[0]' this[1]' this[2]' this[3]' this[4]);                  default:                      throw new ArgumentException("Can't get board in for null street");              }
Magic Number,HandHistories.Objects.Cards,BoardCards,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\BoardCards.cs,GetBoardOnStreet,The following statement contains a magic number: switch (streetAllIn)              {                  case Street.Preflop:                      return BoardCards.ForPreflop();                  case Street.Flop:                      return BoardCards.ForFlop(this[0]' this[1]' this[2]);                  case Street.Turn:                      return BoardCards.ForTurn(this[0]' this[1]' this[2]' this[3]);                  case Street.River:                      return BoardCards.ForRiver(this[0]' this[1]' this[2]' this[3]' this[4]);                  default:                      throw new ArgumentException("Can't get board in for null street");              }
Magic Number,HandHistories.Objects.Cards,BoardCards,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\BoardCards.cs,GetBoardOnStreet,The following statement contains a magic number: switch (streetAllIn)              {                  case Street.Preflop:                      return BoardCards.ForPreflop();                  case Street.Flop:                      return BoardCards.ForFlop(this[0]' this[1]' this[2]);                  case Street.Turn:                      return BoardCards.ForTurn(this[0]' this[1]' this[2]' this[3]);                  case Street.River:                      return BoardCards.ForRiver(this[0]' this[1]' this[2]' this[3]' this[4]);                  default:                      throw new ArgumentException("Can't get board in for null street");              }
Magic Number,HandHistories.Objects.Cards,BoardCards,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\BoardCards.cs,GetBoardOnStreet,The following statement contains a magic number: switch (streetAllIn)              {                  case Street.Preflop:                      return BoardCards.ForPreflop();                  case Street.Flop:                      return BoardCards.ForFlop(this[0]' this[1]' this[2]);                  case Street.Turn:                      return BoardCards.ForTurn(this[0]' this[1]' this[2]' this[3]);                  case Street.River:                      return BoardCards.ForRiver(this[0]' this[1]' this[2]' this[3]' this[4]);                  default:                      throw new ArgumentException("Can't get board in for null street");              }
Magic Number,HandHistories.Objects.Cards,BoardCards,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\BoardCards.cs,GetBoardOnStreet,The following statement contains a magic number: switch (streetAllIn)              {                  case Street.Preflop:                      return BoardCards.ForPreflop();                  case Street.Flop:                      return BoardCards.ForFlop(this[0]' this[1]' this[2]);                  case Street.Turn:                      return BoardCards.ForTurn(this[0]' this[1]' this[2]' this[3]);                  case Street.River:                      return BoardCards.ForRiver(this[0]' this[1]' this[2]' this[3]' this[4]);                  default:                      throw new ArgumentException("Can't get board in for null street");              }
Magic Number,HandHistories.Objects.Cards,Card,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\Card.cs,GetCardFromIntValue,The following statement contains a magic number: if (value >= 52 || value <= -1)              {                  //Because card is a struct we cant return null'                   //however there is a property isEmpty that is true when this method fails                  return new Card();              }
Magic Number,HandHistories.Objects.Cards,Card,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\Card.cs,GetCardFromIntValue,The following statement contains a magic number: var suit = (int) (value/13);
Magic Number,HandHistories.Objects.Cards,Card,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\Card.cs,GetCardFromIntValue,The following statement contains a magic number: var rank = value % 13;
Magic Number,HandHistories.Objects.Cards,Card,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\Card.cs,GetCardFromIntValue,The following statement contains a magic number: SuitEnum suitValue = (SuitEnum)((suit + 1) << 4);
Magic Number,HandHistories.Objects.Cards,Card,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\Card.cs,GetCardFromIntValue,The following statement contains a magic number: CardValueEnum rankValue = (CardValueEnum)rank + 2;
Magic Number,HandHistories.Objects.Cards,Card,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\Card.cs,Parse,The following statement contains a magic number: if (card.Length != 2)                  throw new ArgumentException("Cards must be length 2. Format Rs where R is rank and s is suit.");
Magic Number,HandHistories.Objects.Cards,Card,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\Card.cs,initRankParseLookup,The following statement contains a magic number: CardValueEnum[] ranks = new CardValueEnum[128];
Magic Number,HandHistories.Objects.Cards,Card,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\Card.cs,initRankParseLookup,The following statement contains a magic number: for (int i = 2; i <= 9; i++)              {                  ranks[i.ToString()[0]] = (CardValueEnum)i;              }
Magic Number,HandHistories.Objects.Cards,Card,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\Card.cs,initRankParseLookup,The following statement contains a magic number: for (int i = 2; i <= 9; i++)              {                  ranks[i.ToString()[0]] = (CardValueEnum)i;              }
Magic Number,HandHistories.Objects.Cards,Card,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\Card.cs,initSuitParseLookup,The following statement contains a magic number: SuitEnum[] suits = new SuitEnum[128];
Magic Number,HandHistories.Objects.Cards,CardGroup,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\CardGroup.cs,Parse,The following statement contains a magic number: List<Card> cardsList = new List<Card>(2);
Magic Number,HandHistories.Objects.Cards,CardGroup,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\CardGroup.cs,AddCard,The following statement contains a magic number: if (Cards.Count >= 5)              {                  throw new ArgumentException("Board can't consist of more than 5 cards.");              }
Magic Number,HandHistories.Objects.Cards,HoleCards,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\HoleCards.cs,FromCards,The following statement contains a magic number: switch (cards.Length)               {                   case 0:                       return NoHolecards(playerName);                   case 2:                       return ForHoldem(playerName' cards[0]' cards[1]);                   case 4:                       return ForOmaha(playerName' cards[0]' cards[1]' cards[2]' cards[3]);                   default:                       throw new ArgumentException("Hole cards must contain atleast 0' 2 or 4 cards.");               }
Magic Number,HandHistories.Objects.Cards,HoleCards,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\HoleCards.cs,FromCards,The following statement contains a magic number: switch (cards.Length)               {                   case 0:                       return NoHolecards(playerName);                   case 2:                       return ForHoldem(playerName' cards[0]' cards[1]);                   case 4:                       return ForOmaha(playerName' cards[0]' cards[1]' cards[2]' cards[3]);                   default:                       throw new ArgumentException("Hole cards must contain atleast 0' 2 or 4 cards.");               }
Magic Number,HandHistories.Objects.Cards,HoleCards,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\HoleCards.cs,FromCards,The following statement contains a magic number: switch (cards.Length)               {                   case 0:                       return NoHolecards(playerName);                   case 2:                       return ForHoldem(playerName' cards[0]' cards[1]);                   case 4:                       return ForOmaha(playerName' cards[0]' cards[1]' cards[2]' cards[3]);                   default:                       throw new ArgumentException("Hole cards must contain atleast 0' 2 or 4 cards.");               }
Magic Number,HandHistories.Objects.Cards,HoleCards,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Cards\HoleCards.cs,FromCards,The following statement contains a magic number: switch (cards.Length)               {                   case 0:                       return NoHolecards(playerName);                   case 2:                       return ForHoldem(playerName' cards[0]' cards[1]);                   case 4:                       return ForOmaha(playerName' cards[0]' cards[1]' cards[2]' cards[3]);                   default:                       throw new ArgumentException("Hole cards must contain atleast 0' 2 or 4 cards.");               }
Magic Number,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,ToDbSafeString,The following statement contains a magic number: if(IsKnockout)              {                  buyin = string.Format("B{0}c-{1}c-{2}c"' (int)(PrizePoolValue * 100)' (int)(KnockoutValue * 100)' (int)(Rake * 100));              }              else              {                  buyin = string.Format("B{0}c-{1}c"' (int)(PrizePoolValue * 100)' (int)(Rake * 100));              }
Magic Number,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,ToDbSafeString,The following statement contains a magic number: if(IsKnockout)              {                  buyin = string.Format("B{0}c-{1}c-{2}c"' (int)(PrizePoolValue * 100)' (int)(KnockoutValue * 100)' (int)(Rake * 100));              }              else              {                  buyin = string.Format("B{0}c-{1}c"' (int)(PrizePoolValue * 100)' (int)(Rake * 100));              }
Magic Number,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,ToDbSafeString,The following statement contains a magic number: if(IsKnockout)              {                  buyin = string.Format("B{0}c-{1}c-{2}c"' (int)(PrizePoolValue * 100)' (int)(KnockoutValue * 100)' (int)(Rake * 100));              }              else              {                  buyin = string.Format("B{0}c-{1}c"' (int)(PrizePoolValue * 100)' (int)(Rake * 100));              }
Magic Number,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,ToDbSafeString,The following statement contains a magic number: if(IsKnockout)              {                  buyin = string.Format("B{0}c-{1}c-{2}c"' (int)(PrizePoolValue * 100)' (int)(KnockoutValue * 100)' (int)(Rake * 100));              }              else              {                  buyin = string.Format("B{0}c-{1}c"' (int)(PrizePoolValue * 100)' (int)(Rake * 100));              }
Magic Number,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,ToDbSafeString,The following statement contains a magic number: if(IsKnockout)              {                  buyin = string.Format("B{0}c-{1}c-{2}c"' (int)(PrizePoolValue * 100)' (int)(KnockoutValue * 100)' (int)(Rake * 100));              }              else              {                  buyin = string.Format("B{0}c-{1}c"' (int)(PrizePoolValue * 100)' (int)(Rake * 100));              }
Magic Number,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,ParseDbSafeString,The following statement contains a magic number: if(split.Length == 4)              {                  knockoutValue = Int32.Parse(split[1]) / 100.0m;                  rake = Int32.Parse(split[2]) / 100.0m;                  currencyString = split[3];              }                // Format: PrizePool-Knockout-Rake OR PrizePool-Rake-Currency              else if(split.Length == 3)              {                  int test;                  if(Int32.TryParse(split[2]' out test))                  {                      rake = test / 100.0m;                      knockoutValue = Int32.Parse(split[1]) / 100.0m;                  }                  else                  {                      currencyString = split[2];                      rake = Int32.Parse(split[1]) / 100.0m;                  }              }                // Format: PrizePool-Rake              else if(split.Length == 2)              {                  rake = Int32.Parse(split[1]) / 100.0m;              }
Magic Number,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,ParseDbSafeString,The following statement contains a magic number: if(split.Length == 4)              {                  knockoutValue = Int32.Parse(split[1]) / 100.0m;                  rake = Int32.Parse(split[2]) / 100.0m;                  currencyString = split[3];              }                // Format: PrizePool-Knockout-Rake OR PrizePool-Rake-Currency              else if(split.Length == 3)              {                  int test;                  if(Int32.TryParse(split[2]' out test))                  {                      rake = test / 100.0m;                      knockoutValue = Int32.Parse(split[1]) / 100.0m;                  }                  else                  {                      currencyString = split[2];                      rake = Int32.Parse(split[1]) / 100.0m;                  }              }                // Format: PrizePool-Rake              else if(split.Length == 2)              {                  rake = Int32.Parse(split[1]) / 100.0m;              }
Magic Number,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,ParseDbSafeString,The following statement contains a magic number: if(split.Length == 4)              {                  knockoutValue = Int32.Parse(split[1]) / 100.0m;                  rake = Int32.Parse(split[2]) / 100.0m;                  currencyString = split[3];              }                // Format: PrizePool-Knockout-Rake OR PrizePool-Rake-Currency              else if(split.Length == 3)              {                  int test;                  if(Int32.TryParse(split[2]' out test))                  {                      rake = test / 100.0m;                      knockoutValue = Int32.Parse(split[1]) / 100.0m;                  }                  else                  {                      currencyString = split[2];                      rake = Int32.Parse(split[1]) / 100.0m;                  }              }                // Format: PrizePool-Rake              else if(split.Length == 2)              {                  rake = Int32.Parse(split[1]) / 100.0m;              }
Magic Number,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,ParseDbSafeString,The following statement contains a magic number: if(split.Length == 4)              {                  knockoutValue = Int32.Parse(split[1]) / 100.0m;                  rake = Int32.Parse(split[2]) / 100.0m;                  currencyString = split[3];              }                // Format: PrizePool-Knockout-Rake OR PrizePool-Rake-Currency              else if(split.Length == 3)              {                  int test;                  if(Int32.TryParse(split[2]' out test))                  {                      rake = test / 100.0m;                      knockoutValue = Int32.Parse(split[1]) / 100.0m;                  }                  else                  {                      currencyString = split[2];                      rake = Int32.Parse(split[1]) / 100.0m;                  }              }                // Format: PrizePool-Rake              else if(split.Length == 2)              {                  rake = Int32.Parse(split[1]) / 100.0m;              }
Magic Number,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,ParseDbSafeString,The following statement contains a magic number: if(split.Length == 4)              {                  knockoutValue = Int32.Parse(split[1]) / 100.0m;                  rake = Int32.Parse(split[2]) / 100.0m;                  currencyString = split[3];              }                // Format: PrizePool-Knockout-Rake OR PrizePool-Rake-Currency              else if(split.Length == 3)              {                  int test;                  if(Int32.TryParse(split[2]' out test))                  {                      rake = test / 100.0m;                      knockoutValue = Int32.Parse(split[1]) / 100.0m;                  }                  else                  {                      currencyString = split[2];                      rake = Int32.Parse(split[1]) / 100.0m;                  }              }                // Format: PrizePool-Rake              else if(split.Length == 2)              {                  rake = Int32.Parse(split[1]) / 100.0m;              }
Magic Number,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,ParseDbSafeString,The following statement contains a magic number: if(split.Length == 4)              {                  knockoutValue = Int32.Parse(split[1]) / 100.0m;                  rake = Int32.Parse(split[2]) / 100.0m;                  currencyString = split[3];              }                // Format: PrizePool-Knockout-Rake OR PrizePool-Rake-Currency              else if(split.Length == 3)              {                  int test;                  if(Int32.TryParse(split[2]' out test))                  {                      rake = test / 100.0m;                      knockoutValue = Int32.Parse(split[1]) / 100.0m;                  }                  else                  {                      currencyString = split[2];                      rake = Int32.Parse(split[1]) / 100.0m;                  }              }                // Format: PrizePool-Rake              else if(split.Length == 2)              {                  rake = Int32.Parse(split[1]) / 100.0m;              }
Magic Number,HandHistories.Objects.GameDescription,Buyin,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Buyin.cs,ParseDbSafeString,The following statement contains a magic number: if(split.Length == 4)              {                  knockoutValue = Int32.Parse(split[1]) / 100.0m;                  rake = Int32.Parse(split[2]) / 100.0m;                  currencyString = split[3];              }                // Format: PrizePool-Knockout-Rake OR PrizePool-Rake-Currency              else if(split.Length == 3)              {                  int test;                  if(Int32.TryParse(split[2]' out test))                  {                      rake = test / 100.0m;                      knockoutValue = Int32.Parse(split[1]) / 100.0m;                  }                  else                  {                      currencyString = split[2];                      rake = Int32.Parse(split[1]) / 100.0m;                  }              }                // Format: PrizePool-Rake              else if(split.Length == 2)              {                  rake = Int32.Parse(split[1]) / 100.0m;              }
Magic Number,HandHistories.Objects.GameDescription,LimitGameTypePair,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\LimitGameTypePair.cs,ToBuyinFormatString,The following statement contains a magic number: return "$" + (int)(Limit.BigBlind * 100) + " " + GameTypeUtils.GetShortName(GameType);
Magic Number,HandHistories.Objects.GameDescription,SitAndGoTriple,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SitAndGoTriple.cs,Parse,The following statement contains a magic number: string gameTypeString = sitAndGoTriple.Split('_')[2];
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,FromLimitEnum,The following statement contains a magic number: string bigBlindString = limitEnum.ToString().Split('_')[2].Replace("c"' "");
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,FromLimitEnum,The following statement contains a magic number: decimal bigBlind = decimal.Parse(bigBlindString' System.Globalization.CultureInfo.InvariantCulture) / 100;
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,GetLimitGrouping,The following statement contains a magic number: if (BigBlind < 1)              {                  return LimitGrouping.Micro;              }              else if (BigBlind < 2)              {                  return LimitGrouping.Small;              }              else if (BigBlind < 10)              {                  return LimitGrouping.Mid;              }              else if (BigBlind <= 50)              {                  return LimitGrouping.High;              }              else              {                  return LimitGrouping.NoseBleeds;              }
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,GetLimitGrouping,The following statement contains a magic number: if (BigBlind < 1)              {                  return LimitGrouping.Micro;              }              else if (BigBlind < 2)              {                  return LimitGrouping.Small;              }              else if (BigBlind < 10)              {                  return LimitGrouping.Mid;              }              else if (BigBlind <= 50)              {                  return LimitGrouping.High;              }              else              {                  return LimitGrouping.NoseBleeds;              }
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,GetLimitGrouping,The following statement contains a magic number: if (BigBlind < 1)              {                  return LimitGrouping.Micro;              }              else if (BigBlind < 2)              {                  return LimitGrouping.Small;              }              else if (BigBlind < 10)              {                  return LimitGrouping.Mid;              }              else if (BigBlind <= 50)              {                  return LimitGrouping.High;              }              else              {                  return LimitGrouping.NoseBleeds;              }
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,GetLimitEnum,The following statement contains a magic number: int smallBlindCents = (int)(SmallBlind * 100);
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,GetLimitEnum,The following statement contains a magic number: int bigBlindCents = (int)(BigBlind * 100);
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,ToDbSafeString,The following statement contains a magic number: string anteString = (IsAnteTable)                                      ? string.Format("-Ante{0}"' (int) (Ante*100))                                      : string.Empty;
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,ToDbSafeString,The following statement contains a magic number: string limit = string.Format("L{0}c-{1}c{2}"' (int)(SmallBlind * 100)' (int)(BigBlind * 100)' anteString);
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,ToDbSafeString,The following statement contains a magic number: string limit = string.Format("L{0}c-{1}c{2}"' (int)(SmallBlind * 100)' (int)(BigBlind * 100)' anteString);
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,ParseDbSafeString,The following statement contains a magic number: decimal ante = (split.Length == 4) ? Int32.Parse(split[2])/100.0m : 0;
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,ParseDbSafeString,The following statement contains a magic number: decimal ante = (split.Length == 4) ? Int32.Parse(split[2])/100.0m : 0;
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,ParseDbSafeString,The following statement contains a magic number: string currencyString = (split.Length == 4) ? split[3] : split[2];
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,ParseDbSafeString,The following statement contains a magic number: string currencyString = (split.Length == 4) ? split[3] : split[2];
Magic Number,HandHistories.Objects.GameDescription,Limit,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\Limit.cs,ParseDbSafeString,The following statement contains a magic number: string currencyString = (split.Length == 4) ? split[3] : split[2];
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,SeatType,The following statement contains a magic number: switch (maxPlayers)              {                  case -1:                  case 0:                      seatType = SeatTypeEnum.All;                      break;                     case 2:                      seatType = SeatTypeEnum.HeadsUp;                      break;                  case 3:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._3Handed;                      break;                  case 4:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._4Max;                      break;                  case 5:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._5Handed;                      break;                  case 6:                      seatType = SeatTypeEnum._6Max;                      break;                  case 7:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._7Handed;                      break;                  case 8:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._8Handed;                      break;                  case 9:                      seatType = SeatTypeEnum._FullRing_9Handed;                      break;                  case 10:                      seatType = SeatTypeEnum._FullRing_10Handed;                      break;                  default:                      throw new ArgumentOutOfRangeException("MaxPlayer' Must be between 0 and 10");              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,SeatType,The following statement contains a magic number: switch (maxPlayers)              {                  case -1:                  case 0:                      seatType = SeatTypeEnum.All;                      break;                     case 2:                      seatType = SeatTypeEnum.HeadsUp;                      break;                  case 3:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._3Handed;                      break;                  case 4:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._4Max;                      break;                  case 5:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._5Handed;                      break;                  case 6:                      seatType = SeatTypeEnum._6Max;                      break;                  case 7:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._7Handed;                      break;                  case 8:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._8Handed;                      break;                  case 9:                      seatType = SeatTypeEnum._FullRing_9Handed;                      break;                  case 10:                      seatType = SeatTypeEnum._FullRing_10Handed;                      break;                  default:                      throw new ArgumentOutOfRangeException("MaxPlayer' Must be between 0 and 10");              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,SeatType,The following statement contains a magic number: switch (maxPlayers)              {                  case -1:                  case 0:                      seatType = SeatTypeEnum.All;                      break;                     case 2:                      seatType = SeatTypeEnum.HeadsUp;                      break;                  case 3:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._3Handed;                      break;                  case 4:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._4Max;                      break;                  case 5:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._5Handed;                      break;                  case 6:                      seatType = SeatTypeEnum._6Max;                      break;                  case 7:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._7Handed;                      break;                  case 8:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._8Handed;                      break;                  case 9:                      seatType = SeatTypeEnum._FullRing_9Handed;                      break;                  case 10:                      seatType = SeatTypeEnum._FullRing_10Handed;                      break;                  default:                      throw new ArgumentOutOfRangeException("MaxPlayer' Must be between 0 and 10");              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,SeatType,The following statement contains a magic number: switch (maxPlayers)              {                  case -1:                  case 0:                      seatType = SeatTypeEnum.All;                      break;                     case 2:                      seatType = SeatTypeEnum.HeadsUp;                      break;                  case 3:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._3Handed;                      break;                  case 4:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._4Max;                      break;                  case 5:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._5Handed;                      break;                  case 6:                      seatType = SeatTypeEnum._6Max;                      break;                  case 7:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._7Handed;                      break;                  case 8:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._8Handed;                      break;                  case 9:                      seatType = SeatTypeEnum._FullRing_9Handed;                      break;                  case 10:                      seatType = SeatTypeEnum._FullRing_10Handed;                      break;                  default:                      throw new ArgumentOutOfRangeException("MaxPlayer' Must be between 0 and 10");              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,SeatType,The following statement contains a magic number: switch (maxPlayers)              {                  case -1:                  case 0:                      seatType = SeatTypeEnum.All;                      break;                     case 2:                      seatType = SeatTypeEnum.HeadsUp;                      break;                  case 3:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._3Handed;                      break;                  case 4:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._4Max;                      break;                  case 5:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._5Handed;                      break;                  case 6:                      seatType = SeatTypeEnum._6Max;                      break;                  case 7:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._7Handed;                      break;                  case 8:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._8Handed;                      break;                  case 9:                      seatType = SeatTypeEnum._FullRing_9Handed;                      break;                  case 10:                      seatType = SeatTypeEnum._FullRing_10Handed;                      break;                  default:                      throw new ArgumentOutOfRangeException("MaxPlayer' Must be between 0 and 10");              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,SeatType,The following statement contains a magic number: switch (maxPlayers)              {                  case -1:                  case 0:                      seatType = SeatTypeEnum.All;                      break;                     case 2:                      seatType = SeatTypeEnum.HeadsUp;                      break;                  case 3:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._3Handed;                      break;                  case 4:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._4Max;                      break;                  case 5:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._5Handed;                      break;                  case 6:                      seatType = SeatTypeEnum._6Max;                      break;                  case 7:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._7Handed;                      break;                  case 8:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._8Handed;                      break;                  case 9:                      seatType = SeatTypeEnum._FullRing_9Handed;                      break;                  case 10:                      seatType = SeatTypeEnum._FullRing_10Handed;                      break;                  default:                      throw new ArgumentOutOfRangeException("MaxPlayer' Must be between 0 and 10");              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,SeatType,The following statement contains a magic number: switch (maxPlayers)              {                  case -1:                  case 0:                      seatType = SeatTypeEnum.All;                      break;                     case 2:                      seatType = SeatTypeEnum.HeadsUp;                      break;                  case 3:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._3Handed;                      break;                  case 4:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._4Max;                      break;                  case 5:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._5Handed;                      break;                  case 6:                      seatType = SeatTypeEnum._6Max;                      break;                  case 7:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._7Handed;                      break;                  case 8:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._8Handed;                      break;                  case 9:                      seatType = SeatTypeEnum._FullRing_9Handed;                      break;                  case 10:                      seatType = SeatTypeEnum._FullRing_10Handed;                      break;                  default:                      throw new ArgumentOutOfRangeException("MaxPlayer' Must be between 0 and 10");              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,SeatType,The following statement contains a magic number: switch (maxPlayers)              {                  case -1:                  case 0:                      seatType = SeatTypeEnum.All;                      break;                     case 2:                      seatType = SeatTypeEnum.HeadsUp;                      break;                  case 3:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._3Handed;                      break;                  case 4:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._4Max;                      break;                  case 5:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._5Handed;                      break;                  case 6:                      seatType = SeatTypeEnum._6Max;                      break;                  case 7:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._7Handed;                      break;                  case 8:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._8Handed;                      break;                  case 9:                      seatType = SeatTypeEnum._FullRing_9Handed;                      break;                  case 10:                      seatType = SeatTypeEnum._FullRing_10Handed;                      break;                  default:                      throw new ArgumentOutOfRangeException("MaxPlayer' Must be between 0 and 10");              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,SeatType,The following statement contains a magic number: switch (maxPlayers)              {                  case -1:                  case 0:                      seatType = SeatTypeEnum.All;                      break;                     case 2:                      seatType = SeatTypeEnum.HeadsUp;                      break;                  case 3:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._3Handed;                      break;                  case 4:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._4Max;                      break;                  case 5:                      seatType = realTypes ? SeatTypeEnum._6Max : SeatTypeEnum._5Handed;                      break;                  case 6:                      seatType = SeatTypeEnum._6Max;                      break;                  case 7:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._7Handed;                      break;                  case 8:                      seatType = realTypes ? SeatTypeEnum._FullRing_9Handed : SeatTypeEnum._8Handed;                      break;                  case 9:                      seatType = SeatTypeEnum._FullRing_9Handed;                      break;                  case 10:                      seatType = SeatTypeEnum._FullRing_10Handed;                      break;                  default:                      throw new ArgumentOutOfRangeException("MaxPlayer' Must be between 0 and 10");              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,Parse,The following statement contains a magic number: switch (seatType.ToLower())              {                  case "hu":                  case "heads up":                  case "headsup":                  case "1-on-1":                  case "2":                  case "2 handed":                      return SeatType.FromMaxPlayers(2);                  case "3":                  case "3 handed":                  case "3 max":                  case "3max":                  case "3-max":                      return SeatType.FromMaxPlayers(3);                  case "4 max":                  case "four max":                  case "fourmax":                  case "4max":                  case "4":                      return SeatType.FromMaxPlayers(4);                  case "5":                  case "5 handed":                  case "5 max":                  case "5max":                  case "5-max":                      return SeatType.FromMaxPlayers(5);                  case "6 max":                  case "six max":                  case "sixmax":                  case "6max":                  case "6":                  case "6 handed":                  case "3to6":                      return SeatType.FromMaxPlayers(6);                  case "7":                  case "7 handed":                  case "7 max":                  case "7max":                  case "7-max":                      return SeatType.FromMaxPlayers(7);                  case "8":                  case "8 handed":                  case "8 max":                  case "8max":                  case "8-max":                      return SeatType.FromMaxPlayers(8);                  case "full ring (9 handed)":                  case "9":                  case "9 handed":                      return SeatType.FromMaxPlayers(9);                  case "fr":                  case "full ring":                  case "ring":                  case "full":                  case "full ring (10 handed)":                  case "10":                  case "10 handed":                      return SeatType.FromMaxPlayers(10);                                  default:                      return SeatType.AllSeatType();              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,Parse,The following statement contains a magic number: switch (seatType.ToLower())              {                  case "hu":                  case "heads up":                  case "headsup":                  case "1-on-1":                  case "2":                  case "2 handed":                      return SeatType.FromMaxPlayers(2);                  case "3":                  case "3 handed":                  case "3 max":                  case "3max":                  case "3-max":                      return SeatType.FromMaxPlayers(3);                  case "4 max":                  case "four max":                  case "fourmax":                  case "4max":                  case "4":                      return SeatType.FromMaxPlayers(4);                  case "5":                  case "5 handed":                  case "5 max":                  case "5max":                  case "5-max":                      return SeatType.FromMaxPlayers(5);                  case "6 max":                  case "six max":                  case "sixmax":                  case "6max":                  case "6":                  case "6 handed":                  case "3to6":                      return SeatType.FromMaxPlayers(6);                  case "7":                  case "7 handed":                  case "7 max":                  case "7max":                  case "7-max":                      return SeatType.FromMaxPlayers(7);                  case "8":                  case "8 handed":                  case "8 max":                  case "8max":                  case "8-max":                      return SeatType.FromMaxPlayers(8);                  case "full ring (9 handed)":                  case "9":                  case "9 handed":                      return SeatType.FromMaxPlayers(9);                  case "fr":                  case "full ring":                  case "ring":                  case "full":                  case "full ring (10 handed)":                  case "10":                  case "10 handed":                      return SeatType.FromMaxPlayers(10);                                  default:                      return SeatType.AllSeatType();              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,Parse,The following statement contains a magic number: switch (seatType.ToLower())              {                  case "hu":                  case "heads up":                  case "headsup":                  case "1-on-1":                  case "2":                  case "2 handed":                      return SeatType.FromMaxPlayers(2);                  case "3":                  case "3 handed":                  case "3 max":                  case "3max":                  case "3-max":                      return SeatType.FromMaxPlayers(3);                  case "4 max":                  case "four max":                  case "fourmax":                  case "4max":                  case "4":                      return SeatType.FromMaxPlayers(4);                  case "5":                  case "5 handed":                  case "5 max":                  case "5max":                  case "5-max":                      return SeatType.FromMaxPlayers(5);                  case "6 max":                  case "six max":                  case "sixmax":                  case "6max":                  case "6":                  case "6 handed":                  case "3to6":                      return SeatType.FromMaxPlayers(6);                  case "7":                  case "7 handed":                  case "7 max":                  case "7max":                  case "7-max":                      return SeatType.FromMaxPlayers(7);                  case "8":                  case "8 handed":                  case "8 max":                  case "8max":                  case "8-max":                      return SeatType.FromMaxPlayers(8);                  case "full ring (9 handed)":                  case "9":                  case "9 handed":                      return SeatType.FromMaxPlayers(9);                  case "fr":                  case "full ring":                  case "ring":                  case "full":                  case "full ring (10 handed)":                  case "10":                  case "10 handed":                      return SeatType.FromMaxPlayers(10);                                  default:                      return SeatType.AllSeatType();              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,Parse,The following statement contains a magic number: switch (seatType.ToLower())              {                  case "hu":                  case "heads up":                  case "headsup":                  case "1-on-1":                  case "2":                  case "2 handed":                      return SeatType.FromMaxPlayers(2);                  case "3":                  case "3 handed":                  case "3 max":                  case "3max":                  case "3-max":                      return SeatType.FromMaxPlayers(3);                  case "4 max":                  case "four max":                  case "fourmax":                  case "4max":                  case "4":                      return SeatType.FromMaxPlayers(4);                  case "5":                  case "5 handed":                  case "5 max":                  case "5max":                  case "5-max":                      return SeatType.FromMaxPlayers(5);                  case "6 max":                  case "six max":                  case "sixmax":                  case "6max":                  case "6":                  case "6 handed":                  case "3to6":                      return SeatType.FromMaxPlayers(6);                  case "7":                  case "7 handed":                  case "7 max":                  case "7max":                  case "7-max":                      return SeatType.FromMaxPlayers(7);                  case "8":                  case "8 handed":                  case "8 max":                  case "8max":                  case "8-max":                      return SeatType.FromMaxPlayers(8);                  case "full ring (9 handed)":                  case "9":                  case "9 handed":                      return SeatType.FromMaxPlayers(9);                  case "fr":                  case "full ring":                  case "ring":                  case "full":                  case "full ring (10 handed)":                  case "10":                  case "10 handed":                      return SeatType.FromMaxPlayers(10);                                  default:                      return SeatType.AllSeatType();              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,Parse,The following statement contains a magic number: switch (seatType.ToLower())              {                  case "hu":                  case "heads up":                  case "headsup":                  case "1-on-1":                  case "2":                  case "2 handed":                      return SeatType.FromMaxPlayers(2);                  case "3":                  case "3 handed":                  case "3 max":                  case "3max":                  case "3-max":                      return SeatType.FromMaxPlayers(3);                  case "4 max":                  case "four max":                  case "fourmax":                  case "4max":                  case "4":                      return SeatType.FromMaxPlayers(4);                  case "5":                  case "5 handed":                  case "5 max":                  case "5max":                  case "5-max":                      return SeatType.FromMaxPlayers(5);                  case "6 max":                  case "six max":                  case "sixmax":                  case "6max":                  case "6":                  case "6 handed":                  case "3to6":                      return SeatType.FromMaxPlayers(6);                  case "7":                  case "7 handed":                  case "7 max":                  case "7max":                  case "7-max":                      return SeatType.FromMaxPlayers(7);                  case "8":                  case "8 handed":                  case "8 max":                  case "8max":                  case "8-max":                      return SeatType.FromMaxPlayers(8);                  case "full ring (9 handed)":                  case "9":                  case "9 handed":                      return SeatType.FromMaxPlayers(9);                  case "fr":                  case "full ring":                  case "ring":                  case "full":                  case "full ring (10 handed)":                  case "10":                  case "10 handed":                      return SeatType.FromMaxPlayers(10);                                  default:                      return SeatType.AllSeatType();              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,Parse,The following statement contains a magic number: switch (seatType.ToLower())              {                  case "hu":                  case "heads up":                  case "headsup":                  case "1-on-1":                  case "2":                  case "2 handed":                      return SeatType.FromMaxPlayers(2);                  case "3":                  case "3 handed":                  case "3 max":                  case "3max":                  case "3-max":                      return SeatType.FromMaxPlayers(3);                  case "4 max":                  case "four max":                  case "fourmax":                  case "4max":                  case "4":                      return SeatType.FromMaxPlayers(4);                  case "5":                  case "5 handed":                  case "5 max":                  case "5max":                  case "5-max":                      return SeatType.FromMaxPlayers(5);                  case "6 max":                  case "six max":                  case "sixmax":                  case "6max":                  case "6":                  case "6 handed":                  case "3to6":                      return SeatType.FromMaxPlayers(6);                  case "7":                  case "7 handed":                  case "7 max":                  case "7max":                  case "7-max":                      return SeatType.FromMaxPlayers(7);                  case "8":                  case "8 handed":                  case "8 max":                  case "8max":                  case "8-max":                      return SeatType.FromMaxPlayers(8);                  case "full ring (9 handed)":                  case "9":                  case "9 handed":                      return SeatType.FromMaxPlayers(9);                  case "fr":                  case "full ring":                  case "ring":                  case "full":                  case "full ring (10 handed)":                  case "10":                  case "10 handed":                      return SeatType.FromMaxPlayers(10);                                  default:                      return SeatType.AllSeatType();              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,Parse,The following statement contains a magic number: switch (seatType.ToLower())              {                  case "hu":                  case "heads up":                  case "headsup":                  case "1-on-1":                  case "2":                  case "2 handed":                      return SeatType.FromMaxPlayers(2);                  case "3":                  case "3 handed":                  case "3 max":                  case "3max":                  case "3-max":                      return SeatType.FromMaxPlayers(3);                  case "4 max":                  case "four max":                  case "fourmax":                  case "4max":                  case "4":                      return SeatType.FromMaxPlayers(4);                  case "5":                  case "5 handed":                  case "5 max":                  case "5max":                  case "5-max":                      return SeatType.FromMaxPlayers(5);                  case "6 max":                  case "six max":                  case "sixmax":                  case "6max":                  case "6":                  case "6 handed":                  case "3to6":                      return SeatType.FromMaxPlayers(6);                  case "7":                  case "7 handed":                  case "7 max":                  case "7max":                  case "7-max":                      return SeatType.FromMaxPlayers(7);                  case "8":                  case "8 handed":                  case "8 max":                  case "8max":                  case "8-max":                      return SeatType.FromMaxPlayers(8);                  case "full ring (9 handed)":                  case "9":                  case "9 handed":                      return SeatType.FromMaxPlayers(9);                  case "fr":                  case "full ring":                  case "ring":                  case "full":                  case "full ring (10 handed)":                  case "10":                  case "10 handed":                      return SeatType.FromMaxPlayers(10);                                  default:                      return SeatType.AllSeatType();              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,Parse,The following statement contains a magic number: switch (seatType.ToLower())              {                  case "hu":                  case "heads up":                  case "headsup":                  case "1-on-1":                  case "2":                  case "2 handed":                      return SeatType.FromMaxPlayers(2);                  case "3":                  case "3 handed":                  case "3 max":                  case "3max":                  case "3-max":                      return SeatType.FromMaxPlayers(3);                  case "4 max":                  case "four max":                  case "fourmax":                  case "4max":                  case "4":                      return SeatType.FromMaxPlayers(4);                  case "5":                  case "5 handed":                  case "5 max":                  case "5max":                  case "5-max":                      return SeatType.FromMaxPlayers(5);                  case "6 max":                  case "six max":                  case "sixmax":                  case "6max":                  case "6":                  case "6 handed":                  case "3to6":                      return SeatType.FromMaxPlayers(6);                  case "7":                  case "7 handed":                  case "7 max":                  case "7max":                  case "7-max":                      return SeatType.FromMaxPlayers(7);                  case "8":                  case "8 handed":                  case "8 max":                  case "8max":                  case "8-max":                      return SeatType.FromMaxPlayers(8);                  case "full ring (9 handed)":                  case "9":                  case "9 handed":                      return SeatType.FromMaxPlayers(9);                  case "fr":                  case "full ring":                  case "ring":                  case "full":                  case "full ring (10 handed)":                  case "10":                  case "10 handed":                      return SeatType.FromMaxPlayers(10);                                  default:                      return SeatType.AllSeatType();              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,Parse,The following statement contains a magic number: switch (seatType.ToLower())              {                  case "hu":                  case "heads up":                  case "headsup":                  case "1-on-1":                  case "2":                  case "2 handed":                      return SeatType.FromMaxPlayers(2);                  case "3":                  case "3 handed":                  case "3 max":                  case "3max":                  case "3-max":                      return SeatType.FromMaxPlayers(3);                  case "4 max":                  case "four max":                  case "fourmax":                  case "4max":                  case "4":                      return SeatType.FromMaxPlayers(4);                  case "5":                  case "5 handed":                  case "5 max":                  case "5max":                  case "5-max":                      return SeatType.FromMaxPlayers(5);                  case "6 max":                  case "six max":                  case "sixmax":                  case "6max":                  case "6":                  case "6 handed":                  case "3to6":                      return SeatType.FromMaxPlayers(6);                  case "7":                  case "7 handed":                  case "7 max":                  case "7max":                  case "7-max":                      return SeatType.FromMaxPlayers(7);                  case "8":                  case "8 handed":                  case "8 max":                  case "8max":                  case "8-max":                      return SeatType.FromMaxPlayers(8);                  case "full ring (9 handed)":                  case "9":                  case "9 handed":                      return SeatType.FromMaxPlayers(9);                  case "fr":                  case "full ring":                  case "ring":                  case "full":                  case "full ring (10 handed)":                  case "10":                  case "10 handed":                      return SeatType.FromMaxPlayers(10);                                  default:                      return SeatType.AllSeatType();              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,FromTableScanPlayerColumn,The following statement contains a magic number: if (!string.IsNullOrEmpty(playerColumn))              {                                  // Table scan outputs player columns as players/max for FTP and Party                  // but only numplayers for stars                  if (playerColumn.Split('/').Count() == 2)                  {                      numSeats = Int32.Parse(playerColumn.Split('/')[1]);                                      }                  else // Handle for stars                  {                      if (tableName.Contains("6 max"))                      {                          numSeats = 6;                      }                      else if (tableName.Contains("1-on-1"))                      {                          numSeats = 2;                      }                      else                      {                          numSeats = 10;                      }                  }              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,FromTableScanPlayerColumn,The following statement contains a magic number: if (!string.IsNullOrEmpty(playerColumn))              {                                  // Table scan outputs player columns as players/max for FTP and Party                  // but only numplayers for stars                  if (playerColumn.Split('/').Count() == 2)                  {                      numSeats = Int32.Parse(playerColumn.Split('/')[1]);                                      }                  else // Handle for stars                  {                      if (tableName.Contains("6 max"))                      {                          numSeats = 6;                      }                      else if (tableName.Contains("1-on-1"))                      {                          numSeats = 2;                      }                      else                      {                          numSeats = 10;                      }                  }              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,FromTableScanPlayerColumn,The following statement contains a magic number: if (!string.IsNullOrEmpty(playerColumn))              {                                  // Table scan outputs player columns as players/max for FTP and Party                  // but only numplayers for stars                  if (playerColumn.Split('/').Count() == 2)                  {                      numSeats = Int32.Parse(playerColumn.Split('/')[1]);                                      }                  else // Handle for stars                  {                      if (tableName.Contains("6 max"))                      {                          numSeats = 6;                      }                      else if (tableName.Contains("1-on-1"))                      {                          numSeats = 2;                      }                      else                      {                          numSeats = 10;                      }                  }              }
Magic Number,HandHistories.Objects.GameDescription,SeatType,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\SeatType.cs,FromTableScanPlayerColumn,The following statement contains a magic number: if (!string.IsNullOrEmpty(playerColumn))              {                                  // Table scan outputs player columns as players/max for FTP and Party                  // but only numplayers for stars                  if (playerColumn.Split('/').Count() == 2)                  {                      numSeats = Int32.Parse(playerColumn.Split('/')[1]);                                      }                  else // Handle for stars                  {                      if (tableName.Contains("6 max"))                      {                          numSeats = 6;                      }                      else if (tableName.Contains("1-on-1"))                      {                          numSeats = 2;                      }                      else                      {                          numSeats = 10;                      }                  }              }
Missing Default,HandHistories.Objects.Actions,HandAction,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\Actions\HandAction.cs,GetAdjustedAmount,The following switch statement is missing a default case: switch (type)              {                  case HandActionType.CALL:                      return amount*-1;                                      case HandActionType.WINS:                      return amount;                                     case HandActionType.WINS_SIDE_POT:                      return amount;                                     case HandActionType.TIES:                      return amount;                  case HandActionType.RAISE:                      return amount * -1;                  case HandActionType.ALL_IN:                      return amount * -1;                  case HandActionType.BET:                      return amount * -1;                  case HandActionType.SMALL_BLIND:                      return amount * -1;                  case HandActionType.BIG_BLIND:                      return amount * -1;                  case HandActionType.UNCALLED_BET:                      return amount;                  case HandActionType.POSTS:                      return amount * -1;                  case HandActionType.ANTE:                      return amount * -1;                  case HandActionType.WINS_THE_LOW:                      return amount;                  case HandActionType.ADDS:                      return 0.0M; // when someone adds to their stack it doesnt effect their winnings in the hand                  case HandActionType.CHAT:                      return 0.0M; // overwrite any $ talk in the chat                  case HandActionType.JACKPOTCONTRIBUTION:                      return 0.0M; // does not affect pot' as it goes to a jackpot              }
Missing Default,HandHistories.Objects.GameDescription,PokerFormatUtils,C:\repos\HHSmithy_PokerHandHistoryParser\HandHistories.Objects\GameDescription\PokerFormatUtils.cs,ParseFormatName,The following switch statement is missing a default case: switch (pokerformat.ToLower())              {                  case "cash game":                  case "cashgame":                  case "cg":                  case "cash":                      return PokerFormat.CashGame;                    case "sng":                  case "sitandgo":                  case "sit and go":                  case "sitngo":                  case "sit&go":                      return PokerFormat.SitAndGo;                    case "mtt":                  case "multitabletournament":                  case "multi table tournament":                      return PokerFormat.MultiTableTournament;                }
