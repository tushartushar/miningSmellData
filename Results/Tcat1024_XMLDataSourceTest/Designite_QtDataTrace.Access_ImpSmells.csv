Implementation smell,Namespace,Class,File,Method,Description
Long Method,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetMatPedigree,The method has 129 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The method has 203 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Elemants,The method has 126 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The method has 229 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The method has 328 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF,The method has 268 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_KeyEvents,The method has 144 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The method has 111 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF,The method has 243 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_KeyEvents,The method has 139 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The method has 190 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_KeyEvents,The method has 144 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetMIKeyEvents,The method has 107 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRHeatInfo,The method has 173 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRKeyEvents,The method has 196 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOFHeatInfo,The method has 360 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,BOFHeatInfo_Ini,The method has 146 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOFKeyEvents,The method has 125 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLFHeatInfo,The method has 110 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRHHeatInfo,The method has 239 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRHKeyEvents,The method has 270 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_CC,The method has 261 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The method has 192 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_SCS,The method has 122 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetELEM_ANA,The method has 139 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_BaseInfo_HF,The method has 156 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The method has 191 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The method has 286 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HF,The method has 264 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_RM,The method has 109 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_FR,The method has 201 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_UFC,The method has 312 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_CTC,The method has 121 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The method has 122 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PEDIGREE,The method has 109 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PLTCM,The method has 213 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_KeyEvents_PLTCM,The method has 318 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRMCoilTrack,The method has 133 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_CGL,The method has 244 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The method has 164 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The method has 237 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The method has 165 lines of code.
Long Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The method has 102 lines of code.
Complex Method,QtDataTrace.Access,PersistentService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\PersistentService.cs,GetMemberInfo,Cyclomatic complexity of the method is 9
Complex Method,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetMaterialList,Cyclomatic complexity of the method is 9
Complex Method,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetMaterialPedigree,Cyclomatic complexity of the method is 19
Complex Method,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetQtData,Cyclomatic complexity of the method is 21
Complex Method,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ShowPDFReport,Cyclomatic complexity of the method is 17
Complex Method,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetMatList,Cyclomatic complexity of the method is 11
Complex Method,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetMatPedigree,Cyclomatic complexity of the method is 20
Complex Method,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetMatPedigreeByStrSQL,Cyclomatic complexity of the method is 9
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,Cyclomatic complexity of the method is 10
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetMIHeatInfo,Cyclomatic complexity of the method is 13
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetMIKeyEvents,Cyclomatic complexity of the method is 23
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,HMSendTo_Num2Chn,Cyclomatic complexity of the method is 10
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRHeatInfo,Cyclomatic complexity of the method is 54
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRKeyEvents,Cyclomatic complexity of the method is 41
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOFHeatInfo,Cyclomatic complexity of the method is 116
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOFKeyEvents,Cyclomatic complexity of the method is 19
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLFHeatInfo,Cyclomatic complexity of the method is 34
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRHHeatInfo,Cyclomatic complexity of the method is 77
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRHKeyEvents,Cyclomatic complexity of the method is 54
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,Cyclomatic complexity of the method is 8
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,Cyclomatic complexity of the method is 15
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,Cyclomatic complexity of the method is 14
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,Cyclomatic complexity of the method is 13
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,Cyclomatic complexity of the method is 15
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHEAT_TRACK_ByDataRow,Cyclomatic complexity of the method is 44
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetAddition,Cyclomatic complexity of the method is 12
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetTEMPTURE,Cyclomatic complexity of the method is 9
Complex Method,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetELEM_ANA,Cyclomatic complexity of the method is 44
Complex Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF,Cyclomatic complexity of the method is 11
Complex Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetLY2250SlabNoInfo,Cyclomatic complexity of the method is 8
Complex Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_BaseInfo_HF,Cyclomatic complexity of the method is 41
Complex Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,Cyclomatic complexity of the method is 25
Complex Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,Cyclomatic complexity of the method is 48
Complex Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,Cyclomatic complexity of the method is 12
Complex Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,Cyclomatic complexity of the method is 16
Complex Method,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,Cyclomatic complexity of the method is 20
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PEDIGREE,Cyclomatic complexity of the method is 27
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PLTCM,Cyclomatic complexity of the method is 124
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_KeyEvents_PLTCM,Cyclomatic complexity of the method is 46
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRMCoilTrack,Cyclomatic complexity of the method is 21
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,Cyclomatic complexity of the method is 9
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,Cyclomatic complexity of the method is 8
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,Cyclomatic complexity of the method is 8
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,Cyclomatic complexity of the method is 10
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,Cyclomatic complexity of the method is 11
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,Cyclomatic complexity of the method is 22
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,Cyclomatic complexity of the method is 14
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,Cyclomatic complexity of the method is 38
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,Cyclomatic complexity of the method is 26
Complex Method,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,Cyclomatic complexity of the method is 16
Long Parameter List,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,CCTStart,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,KMeansStart,The method has 11 parameters.
Long Parameter List,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,ContourPlotStart,The method has 10 parameters.
Long Parameter List,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,RpartStart,The method has 9 parameters.
Long Parameter List,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,LmRegressStart,The method has 7 parameters.
Long Parameter List,QtDataTrace.Access,DataBackUpService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataBackUpService.cs,SaveTable,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,NewDataTrace,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,SearchTimeFromCastingLength_HisDB,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Gas,The method has 6 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_PriSide,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_SecSide_Voltage,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_SecSide_Current,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Vacuum_CycGas,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Flue,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_Casting,The method has 6 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_Weight,The method has 6 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD,The method has 6 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_WaterFlux,The method has 6 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_DiffTemp,The method has 6 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHeatIDList,The method has 6 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_FR,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRMCoilTrack,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PC,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_Iunit,The method has 6 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Gap,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_RollingForce,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Tension,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Para,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_OxyRota,The method has 5 parameters.
Long Parameter List,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_GasFlux,The method has 5 parameters.
Long Statement,QtDataTrace.Access,BaseTableService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\BaseTableService.cs,GetQtTraceDataSourceConfig,The length of the statement  "		sql = "select T.TABLE_NAME'T.COLUMN_NAME'T.DATA_TYPE' " + "decode(T.DATA_TYPE''VARCHAR2''T.DATA_LENGTH''NUMBER''T.DATA_PRECISION'T.DATA_LENGTH) DATA_LENGTH'T.DATA_SCALE' " + " v.POSITION'c.COMMENTS " + " from user_col_comments c'user_tab_cols t'(select a.TABLE_NAME'a.COLUMN_NAME'a.POSITION from user_cons_columns a'user_constraints b where a.CONSTRAINT_NAME=b.CONSTRAINT_NAME " + " and b.CONSTRAINT_TYPE='P')  v  " + " where t.TABLE_NAME=c.TABLE_NAME and t.COLUMN_NAME=c.COLUMN_NAME " + " and c.TABLE_NAME=v.TABLE_NAME(+) and c.COLUMN_NAME=v.COLUMN_NAME(+) " + " ORDER BY T.TABLE_NAME'v.POSITION'T.COLUMN_NAME "; " is 613.
Long Statement,QtDataTrace.Access,BaseTableService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\BaseTableService.cs,GetTablenameAndColume,The length of the statement  "		sql = "select col.column_name'col.table_name from user_constraints con'  user_cons_columns col where con.constraint_name = col.constraint_name and con.constraint_type='P'"; " is 172.
Long Statement,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,CCTStart,The length of the statement  "	return ServiceContainer.GetService<ILocalizationDataAnalyzeService> ("LocalServiceBridger").CCTStart (username' id' selected' target' f); " is 137.
Long Statement,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,KMeansStart,The length of the statement  "	return ServiceContainer.GetService<ILocalizationDataAnalyzeService> ("LocalServiceBridger").KMeansStart (username' id' selected' properties' maxcount' minclustercount' maxclustercount' m' s' initialmode' maxthread); " is 215.
Long Statement,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,GetErrorMessage,The length of the statement  "	return ServiceContainer.GetService<ILocalizationDataAnalyzeService> ("LocalServiceBridger").GetErrorMessage (username' id); " is 123.
Long Statement,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,ContourPlotStart,The length of the statement  "	return ServiceContainer.GetService<ILocalizationDataAnalyzeService> ("LocalServiceBridger").ContourPlotStart (username' id' selected' x' y' z' width' height' levels' drawline); " is 176.
Long Statement,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,ContourPlotGet,The length of the statement  "	return ServiceContainer.GetService<ILocalizationDataAnalyzeService> ("LocalServiceBridger").ContourPlotGet (username' id); " is 122.
Long Statement,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,RpartStart,The length of the statement  "	return ServiceContainer.GetService<ILocalizationDataAnalyzeService> ("LocalServiceBridger").RpartStart (username' id' selected' width' height' targetcolumn' sourcecolumns' method' cp); " is 184.
Long Statement,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,LmRegressStart,The length of the statement  "	return ServiceContainer.GetService<ILocalizationDataAnalyzeService> ("LocalServiceBridger").LmRegressStart (username' id' selected' width' height' targetcolumn' sourcecolumns); " is 176.
Long Statement,QtDataTrace.Access,DataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataAnalyzeService.cs,LmRegressGet,The length of the statement  "	return ServiceContainer.GetService<ILocalizationDataAnalyzeService> ("LocalServiceBridger").LmRegressGet (username' id); " is 120.
Long Statement,QtDataTrace.Access,DataBackUpService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataBackUpService.cs,SaveTable,The length of the statement  "	return ServiceContainer.GetService<AnalyzeIService.ILocalizationDataBackUpService> ().SaveTable (loginid' userid' id' tablename' selected); " is 139.
Long Statement,QtDataTrace.Access,DataBackUpService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataBackUpService.cs,GetTable,The length of the statement  "	return ServiceContainer.GetService<AnalyzeIService.ILocalizationDataBackUpService> ().GetTable (loginid' userid' tablename); " is 124.
Long Statement,QtDataTrace.Access,DataBackUpService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\DataBackUpService.cs,RemoveTable,The length of the statement  "	return ServiceContainer.GetService<AnalyzeIService.ILocalizationDataBackUpService> ().RemoveTable (loginid' tablenames); " is 120.
Long Statement,QtDataTrace.Access,PersistentService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\PersistentService.cs,Load,The length of the statement  "					type.InvokeMember (column.Name' BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetField' null' obj' new object[] { " is 179.
Long Statement,QtDataTrace.Access,PersistentService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\PersistentService.cs,Load,The length of the statement  "					type.InvokeMember (column.Name' BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty' null' obj' new object[] { " is 182.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetMaterialList,The length of the statement  "		whereClause += string.Format (" and product_time >= to_date('{0}'' 'YYYYMMDDHH24MI') and product_time <= to_date('{1}'' 'YYYYMMDDHH24MI') "' arg.StartTime.ToString ("yyyyMMddHHmm")' arg.StopTime.ToString ("yyyyMMddHHmm")); " is 222.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetMaterialPedigree,The length of the statement  "			string sql = string.Format (" select in_mat_id1' in_mat_id2' out_mat_id' process_code " + " from process_mat_pedigree t " + " where out_mat_id = '{0}' "' matId); " is 161.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetMaterialPedigree,The length of the statement  "						sql = string.Format ("select mat_no' device_no' start_time' stop_time " + " from {1} " + " where mat_no = '{0}' and device_no in " + " (select device_no from equipment_code where process_code = '{2}')"' mat.InId' table' mat.Process); " is 233.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetMaterialPedigree,The length of the statement  "							sql = string.Format ("select mat_no' device_no' start_time' stop_time " + " from {1} " + " where mat_no = '{0}' and device_no in " + " (select device_no from equipment_code where process_code = '{2}')"' mat.OutId' table' mat.Process); " is 234.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetQtData,The length of the statement  "		whereClause += string.Format (" and starttime_da >= to_date('{0}'' 'YYYYMMDDHH24MISS') and endtime_da <= to_date('{1}'' 'YYYYMMDDHH24MISS') "' arg.StartTime.ToString ("yyyyMMddHHmmss")' arg.StopTime.ToString ("yyyyMMddHHmmss")); " is 228.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetQtData,The length of the statement  "		sql = string.Format ("select {0} from {1} where rowid in (select rowid from SM_ELEM_ANA_DA where {2} and processcode_da = \'{3}\')"' columnname' tablename' whereClause' arg.ProcessCode); " is 186.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetQtData,The length of the statement  "		sql = string.Format ("select {0} from {1} where slab_id in (select slab_id from HRM_L2_COILREPORTS_DA where {2})"' columnname' tablename' whereClause); " is 151.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetQtData,The length of the statement  "		sql = string.Format ("select {0} from {1} where rowid in (select rowid from SM_LF_HEAT_DA where {2})"' columnname' tablename' whereClause); " is 139.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetQtData,The length of the statement  "		sql = string.Format ("select {0} from {1} where rowid in (select rowid from SM_BOF_HEAT_DA where {2})"' columnname' tablename' whereClause); " is 140.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetQtData,The length of the statement  "		sql = string.Format ("select {0} from {1} where rowid in (select rowid from SM_RH_HEAT_DA where {2})"' columnname' tablename' whereClause); " is 139.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,NewDataTrace,The length of the statement  "	return ServiceContainer.GetService<ILocalizationDataTraceService> ("LocalServiceBridger").NewDataTrace (processNo' iDList' processes' back' username); " is 150.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetErrorMessage,The length of the statement  "	return ServiceContainer.GetService<ILocalizationDataTraceService> ("LocalServiceBridger").GetErrorMessage (username' id); " is 121.
Long Statement,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,CommitData,The length of the statement  "	return ServiceContainer.GetService<ILocalizationDataTraceService> ("LocalServiceBridger").CommitData (username' id' data); " is 122.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The length of the statement  "	string sql = "SELECT TRIM(COIL_ID)' TRIM(SLAB_ID)' ROLLED_TIME' STEELGRADE' THK_MEAN' WID_MEAN' COIL_LEN' THK_PCNT_ON' WID_PCNT_ON'FDT_PCNT_ON' CT_PCNT_ON' PROF_PCNT_ON' WDG_PCNT_ON FROM HRM_L2_COILREPORTS " + where; " is 216.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The length of the statement  "	string sql = "SELECT TRIM(COIL_ID)'SLAB_ID'ROLLEDTIME'TRIM(STEELGRADE)'THK'WIDTH'LEN'THKH'THKB'THKT'WIDH'WIDB'WIDT'THKOVER'DOT'FDTH'FDTB'FDTT'CTH'CTB'CTT'CONV'WDG'FLAT'RTIME FROM COIL_JUDGE_VAMA " + where; " is 205.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVamaCal,The length of the statement  "	string sql = "select b.grade' count(*) total_sum' " + "count(case " + "when b.thk_head = 'n' or b.thk_midd = 'n' or b.thk_tail = 'n' or " + "b.wid_head = 'n' or b.wid_midd = 'n' or b.wid_tail = 'n' or " + "b.fdt_head = 'n' or b.fdt_midd = 'n' or b.fdt_tail = 'n' or " + "b.ct_head = 'n' or b.ct_midd = 'n' or b.ct_tail = 'n' or " + "b.tudu = 'n' or b.xiexing = 'n' or b.flat = 'n' then 1 end) failed_sum' " + "trunc(count(case " + "when b.thk_head = 'n' or b.thk_midd = 'n' or b.thk_tail = 'n' or " + "b.wid_head = 'n' or b.wid_midd = 'n' or b.wid_tail = 'n' or " + "b.fdt_head = 'n' or b.fdt_midd = 'n' or b.fdt_tail = 'n' or " + "b.ct_head = 'n' or b.ct_midd = 'n' or b.ct_tail = 'n' or " + "b.tudu = 'n' or b.xiexing = 'n' or b.flat = 'n' then 1 end) / count(*) * 100'2) || '%' failed_pcnt" + " from vama_result b " + where + " GROUP BY rollup(b.grade) "; " is 858.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The length of the statement  "	string sql = string.Format ("SELECT TRIM(COIL_ID)' TRIM(SLAB_ID)' ROLLED_TIME' STEELGRADE' THK_MEAN ' THK_MAX' THK_MIN' THK_PCNT_ON' THK_PCNT_OVER' THK_PCNT_UNDER' THK_STD' WID_MEAN' WID_MAX' WID_MIN' WID_PCNT_ON' WID_PCNT_OVER' WID_PCNT_UNDER'FDT_MEAN' FDT_MAX' FDT_MIN' FDT_PCNT_ON' FDT_PCNT_OVER' FDT_PCNT_UNDER'CT_MEAN' CT_MAX' CT_MIN' CT_PCNT_ON' CT_PCNT_OVER' CT_PCNT_UNDER'PROF_MEAN' PROF_MAX' PROF_MIN' PROF_PCNT_ON' PROF_PCNT_OVER' PROF_PCNT_UNDER'WDG_MEAN' WDG_MAX' WDG_MIN' WDG_PCNT_ON' WDG_PCNT_OVER' WDG_PCNT_UNDER' COIL_LEN' FLAT_MEAN' FLAT_MAX' FLAT_MIN' FLAT_PCT_ON' FLAT_PCT_OVER' FLAT_PCT_UNDER FROM HRM_L2_COILREPORTS where slab_id = '{0}' or coil_id = '{0}'"' matId); " is 687.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The length of the statement  "	string sql = string.Format ("SELECT TRIM(COIL_ID)' TRIM(SLAB_ID)'F_FMDELTEMPTARG'F_TEMPTOLPOS'F_TEMPTOLNEG'F_COILTEMPTARG'F_CTTOLPOS'F_CTTOLNEG FROM HRM_L2_SETVALUE where slab_id = '{0}' or coil_id = '{0}'"' matId); " is 215.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetBofHeatList,The length of the statement  "		whereClause = string.Format ("where start_time = to_date({0}' 'yyyymm') and stop_time = to_date({1}' 'yyyymm')"' cond.StartTime' cond.StopTime); " is 144.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ReadDatatable_HisDB,The length of the statement  "	string strConn = "Integrated Security=False;" + "Persist Security Info=False;" + "User ID=sa;" + "PassWord=Lysteel2013;" + "Initial Catalog='';" + "Data Source=10.8.6.21;" + "Initial File Name='';"; " is 198.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ReadDatatable_HisDB,The length of the statement  "	string strSQL = "SET QUOTED_IDENTIFIER OFF" + " SELECT * FROM OPENQUERY(INSQL' " + (char)34 + "SELECT DateTime = convert(nvarchar' DateTime' 21)'" + strTags + " FROM WideHistory" + " WHERE wwRetrievalMode = 'Cyclic'" + " AND wwCycleCount = " + wwCycleCount.ToString () + " AND wwVersion = 'Latest'" + " AND DateTime >= '" + StartDateTime + "'" + " AND DateTime <= '" + EndDateTime + "'" + (char)34 + ")" + " ORDER BY DateTime ASC"; " is 431.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ReadDatatable_HisDB,The length of the statement  "	string strConn = "Integrated Security=False;" + "Persist Security Info=False;" + "User ID=sa;" + "PassWord=Lysteel2013;" + "Initial Catalog='';" + "Data Source=10.8.6.21;" + "Initial File Name='';"; " is 198.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,SearchTimeFromCastingLength_HisDB,The length of the statement  "	string strConn = "Integrated Security=False;" + "Persist Security Info=False;" + "User ID=sa;" + "PassWord=Lysteel2013;" + "Initial Catalog='';" + "Data Source=10.8.6.21;" + "Initial File Name='';"; " is 198.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,SearchTimeFromCastingLength_HisDB,The length of the statement  "	string strSQL = " SELECT DateTime' Value" + " FROM History" + " WHERE History.TagName IN ('LYQ210.CCM" + CCM + "S" + Strand + ".CastingLength')" + " AND wwRetrievalMode = 'Cyclic'" + " AND wwCycleCount = 1000" + " AND wwVersion = 'Latest'" + " AND Value>" + Castingength.ToString () + " AND Value<" + (Castingength + 100).ToString () + " AND DateTime >= '" + StartTime + "'" + " AND DateTime <= '" + EndTime + "'"; " is 414.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ShowPDFReport,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfHei = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\SIMHEI.TTF"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 194.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ShowPDFReport,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfKai = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\simkai.ttf"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 194.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ShowPDFReport,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfSun = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\SIMSUN.TTC'1"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 196.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ShowPDFReport,The length of the statement  "	iTextSharp.text.pdf.PdfWriter.getInstance (pdfDocument' new System.IO.FileStream (strHtmlFileName_Local' System.IO.FileMode.Create)); " is 133.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ShowPDFReport,The length of the statement  "	//strHtmlLine[0] = "<object classid=\"clsid:CA8A9780-280D-11CF-A24D-444553540000\" width=\"100%\" height=\"100%\" border=\"0\"> "; " is 130.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,DrawstuDrawPicInfo2pdfDocument,The length of the statement  "	iTextSharp.text.Image Img = iTextSharp.text.Image.getInstance (stuDrawPicInfo.BMP' System.Drawing.Imaging.ImageFormat.Jpeg); " is 124.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,DrawstuDrawPicInfo2pdfDocument,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfKai = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\simkai.ttf"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 194.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetSteelGrade,The length of the statement  "	string strSQL = " SELECT DISTINCT steel_grade FROM MAT_PEDIGREE " + " WHERE DEVICE_no LIKE '" + WorkProcess + "%' " + " AND start_time>=to_date('" + StartTime + "'''yyyy-mm-dd')" + " AND start_time<=to_date('" + StopTime + "'''yyyy-mm-dd')" + " ORDER BY steel_grade"; " is 267.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetMatList,The length of the statement  "	string strSQL = " SELECT * FROM MAT_PEDIGREE " + " WHERE DEVICE_no LIKE '" + WorkProcess + "%' " + " AND start_time>=to_date('" + StartTime + "'''yyyy-mm-dd')" + " AND start_time<=to_date('" + StopTime + "'''yyyy-mm-dd')"; " is 222.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetMatPedigree,The length of the statement  "		if (CurrProcess.StartsWith ("LYHRM_FM") || CurrProcess.StartsWith ("LYHRM_CTC") || CurrProcess.StartsWith ("LYHRM_DC")) { " is 121.
Long Statement,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetMatPedigree_LYCRM,The length of the statement  "		strSQL = " SELECT * FROM MAT_PEDIGREE" + " WHERE in_mat_id1='" + CoilID_Next + "'" + " OR in_mat_id2='" + CoilID_Next + "'" + " AND  device_no LIKE 'LYCRM%'"; " is 158.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The length of the statement  "		stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE)); " is 136.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF,The length of the statement  "	GetReportPdf_BOF_HisDB (HeatID' lst [0].Treatpos' Convert.ToDateTime (lst [0].Ready_time)' Convert.ToDateTime (lst [0].tapping_endtime)' ref pdfDocument); " is 154.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The length of the statement  "	iTextSharp.text.Image Img = iTextSharp.text.Image.getInstance (stuDrawPicInfo.BMP' System.Drawing.Imaging.ImageFormat.Jpeg); " is 124.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetMIHeatInfo,The length of the statement  "	strSQL = "SELECT * FROM (SELECT * FROM sm_mi_heat" + " WHERE iron_ladle_id='" + IronLadleID + "'" + " AND start_time <= to_date('" + HM_ChargingStartTime.ToString () + "'' 'yyyy-mm-dd hh24:mi:ss')" + " AND in_out='OUT'" + " ORDER BY start_time desc) t" + " WHERE RowNUM<=1"; " is 274.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetMIKeyEvents,The length of the statement  "	strSQL = "SELECT * FROM (SELECT * FROM sm_mi_heat" + " WHERE iron_ladle_id='" + IronLadleID + "'" + " AND start_time <= to_date('" + HM_ChargingStartTime.ToString () + "'' 'yyyy-mm-dd hh24:mi:ss')" + " AND in_out='OUT'" + " ORDER BY start_time desc) t" + " WHERE RowNUM<=1"; " is 274.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetMIKeyEvents,The length of the statement  "	strSQL = "SELECT * FROM sm_mi_heat" + " WHERE start_time <= to_date('" + dtDateTimeStart.ToString ("yyyy-MM-dd HH:mm:ss") + "'' 'yyyy-mm-dd hh24:mi:ss')" + " AND start_time >= to_date('" + dtDateTimeEnd.ToString ("yyyy-MM-dd HH:mm:ss") + "'' 'yyyy-mm-dd hh24:mi:ss')"; " is 268.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRKeyEvents,The length of the statement  "		lst.Ele_Cu5As8Sn = (Convert.ToSingle (lst.Ele_Cu) + 5 * Convert.ToSingle (lst.Ele_As) + 8 * Convert.ToSingle (lst.Ele_Sn)).ToString (); " is 135.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRMixerHeightSpeed,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartDateTime)' Convert.ToDateTime (EndDateTime)); " is 128.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRMixerHeightSpeed,The length of the statement  "		MHS.DateTimeDuration = MHS.DateAndTime.Year + "/" + MHS.DateAndTime.Month + "/" + MHS.DateAndTime.Day + " " + MHS.DateAndTime.Hour + ":" + MHS.DateAndTime.Minute + ":" + MHS.DateAndTime.Second + "(" + MHS.sngDuration + ")"; " is 223.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetSlabIDListFromHeatID,The length of the statement  "	strSQL = "SELECT slab_no FROM SLAB_L2_REPORTS_VIEW" + " WHERE ccm='" + CCM + "'" + " AND ( " + "    ( start_time <=to_date('" + StartTime.ToString () + "'' 'yyyy-mm-dd hh24:mi:ss') AND stop_time >=to_date('" + StartTime.ToString () + "'' 'yyyy-mm-dd hh24:mi:ss') )" + " OR ( start_time >=to_date('" + StartTime.ToString () + "'' 'yyyy-mm-dd hh24:mi:ss') AND stop_time <=to_date('" + StopTime.ToString () + "'' 'yyyy-mm-dd hh24:mi:ss') )" + " OR ( start_time <=to_date('" + StopTime.ToString () + "'' 'yyyy-mm-dd hh24:mi:ss') AND stop_time >=to_date('" + StopTime.ToString () + "'' 'yyyy-mm-dd hh24:mi:ss') )" + "    )"; " is 619.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCCHeatInfo,The length of the statement  "		lst.Ladle_opening_date = Convert.ToDateTime (dt.Rows [RowIndex] ["ladle_opening_date"]).ToString ("yyyy/MM/dd HH:mm:ss"); " is 121.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The length of the statement  "		//cell = new iTextSharp.text.Cell(new Paragraph("坯头宽度"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell); " is 126.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The length of the statement  "		//cell = new iTextSharp.text.Cell(new Paragraph("坯尾宽度"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell); " is 126.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The length of the statement  "		//cell = new iTextSharp.text.Cell(new Paragraph("SAMPLE_WGT"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell); " is 132.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_SCS,The length of the statement  "	string strSQL = "SELECT slab_no'ccm'strand_no'start_time'stop_time'start_cast_pos'stop_cast_pos'cut_date FROM SLAB_L2_REPORTS WHERE slab_no='" + SlabID + "'"; " is 158.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_SCS,The length of the statement  "	dt = sqt.SearchTimeFromCastingLength_HisDB (CCM' strand_no' start_cast_pos' start_time.ToString ()' cut_date.ToString ()); " is 122.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartDateTime)' Convert.ToDateTime (EndDateTime)); " is 128.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHeatTrack,The length of the statement  "	string strSQL = "SELECT t.*'s.steel_grade FROM sm_mattrack_time t' SM_bof_heat s" + " WHERE t.mat_no='" + HeatID + "'" + " AND t.mat_no=s.heat_id" + " AND rownum <=999"; " is 169.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartDateTime)' Convert.ToDateTime (EndDateTime)); " is 128.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartDateTime)' Convert.ToDateTime (EndDateTime)); " is 128.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartDateTime)' Convert.ToDateTime (EndDateTime)); " is 128.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartDateTime)' Convert.ToDateTime (EndDateTime)); " is 128.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHeatIDList,The length of the statement  "		strSQL = strSQL + " AND ready_time >= to_date('" + schStartTime + " 00:00:01'' 'yyyy-mm-dd hh24:mi:ss')" + " AND ready_time <= to_date('" + schEndTime + " 23:59:59'' 'yyyy-mm-dd hh24:mi:ss')"; " is 192.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHeatIDList,The length of the statement  "	strSQL = "SELECT t.*'s.steel_grade FROM SM_MATTRACK_TIME t'(" + strSQL + ") s " + " WHERE t.mat_no=s.heat_id ORDER BY t.mat_no"; " is 128.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHEAT_TRACK_ByDataRow,The length of the statement  "		if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) { " is 141.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHEAT_TRACK_ByDataRow,The length of the statement  "		if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) { " is 141.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHEAT_TRACK_ByDataRow,The length of the statement  "		if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) { " is 141.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHEAT_TRACK_ByDataRow,The length of the statement  "		if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) { " is 141.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHEAT_TRACK_ByDataRow,The length of the statement  "		if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) { " is 141.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHEAT_TRACK_ByDataRow,The length of the statement  "		if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) { " is 141.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,DefinePdfFont,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfHei = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\SIMHEI.TTF"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 194.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,DefinePdfFont,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfKai = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\simkai.ttf"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 194.
Long Statement,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,DefinePdfFont,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfSun = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\SIMSUN.TTC'1"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 196.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetSlabSteelGradeList,The length of the statement  "	string strSQL = "SELECT DISTINCT steel_grade FROM HRM_L2_FCEREPORTS WHERE steel_grade IS NOT NULL ORDER BY steel_grade"; " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_PreHeat,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartDateTime)' Convert.ToDateTime (EndDateTime)); " is 128.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_SZ1,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartDateTime)' Convert.ToDateTime (EndDateTime)); " is 128.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ1,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartDateTime)' Convert.ToDateTime (EndDateTime)); " is 128.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ2,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartDateTime)' Convert.ToDateTime (EndDateTime)); " is 128.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetLY2250SlabNoInfo,The length of the statement  "	string strSQL = "SELECT slab_id'steel_grade'productno'fceno'charge_time FROM hrm_l2_FCEREPORTS" + " WHERE charge_time >= to_date('" + StartDateTime + "'' 'yyyy-mm-dd')" + " AND charge_time <= to_date('" + EndDateTime + " 23:59:59'' 'yyyy-mm-dd hh24:mi:ss')"; " is 258.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,DefinePdfFont,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfHei = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\SIMHEI.TTF"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 194.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,DefinePdfFont,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfKai = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\simkai.ttf"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 194.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,DefinePdfFont,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfSun = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\SIMSUN.TTC'1"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 196.
Long Statement,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PEDIGREE,The length of the statement  "		string strSQL = " SELECT * FROM CRM_COIL_TRACK_VIEW" + " WHERE in_mat_id1='" + CoilID_Next + "'" + " OR in_mat_id2='" + CoilID_Next + "'"; " is 138.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PLTCM,The length of the statement  "	string strSQL = "SELECT * FROM CRM_PLTCM_REPORT" + " WHERE in_mat_no_1='" + CoilID + "'" + " OR in_mat_no_2='" + CoilID + "'"; " is 126.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_KeyEvents_PLTCM,The length of the statement  "	string strSQL = "SELECT mat_no  FROM CRM_MATTRACK_TIME" + " WHERE start_time>to_date('" + LST_Info [0].TCM_EntryTime + "'''yyyy-mm-dd hh24:mi:ss')" + " AND start_time<to_date('" + strNextTCM_EntryTime + "'''yyyy-mm-dd hh24:mi:ss')" + " AND device_no='LYCRM_TCM'" + " ORDER BY start_time"; " is 288.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_CSL,The length of the statement  "	string strSQL = " SELECT * FROM CRM_CSL_INFO" + " WHERE in_mat_ID_1='" + CoilID + "'" + " OR    in_mat_ID_2='" + CoilID + "'"; " is 126.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_RCL,The length of the statement  "	string strSQL = " SELECT * FROM CRM_RCL_INFO" + " WHERE in_mat_ID_1='" + CoilID + "'" + " OR  in_mat_ID_2='" + CoilID + "'"; " is 124.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRMCoilTrack,The length of the statement  "		strSQL = "SELECT * FROM CRM_PLTCM_REPORT" + " WHERE start_time>=to_date('" + strStartTime + "'''yyyy-mm-dd')" + " AND start_time<=to_date('" + strEndTime + "'''yyyy-mm-dd')"; " is 174.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRMCoilTrack,The length of the statement  "		strSQL = "SELECT * FROM CRM_AF_INFO" + " WHERE on_base>=to_date('" + strStartTime + "'''yyyy-mm-dd')" + " AND on_base<=to_date('" + strEndTime + "'''yyyy-mm-dd')"; " is 163.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRMCoilTrack,The length of the statement  "		strSQL = "SELECT * FROM CRM_CGL_INFO" + " WHERE prod_start>=to_date('" + strStartTime + "'''yyyy-mm-dd')" + " AND prod_start<=to_date('" + strEndTime + "'''yyyy-mm-dd')"; " is 170.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRMCoilTrack,The length of the statement  "		strSQL = "SELECT * FROM CRM_SPM_INFO" + " WHERE prod_time_start>=to_date('" + strStartTime + "'''yyyy-mm-dd')" + " AND prod_time_start<=to_date('" + strEndTime + "'''yyyy-mm-dd')"; " is 180.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRMCoilTrack,The length of the statement  "		strSQL = "SELECT * FROM CRM_RCL_INFO" + " WHERE PRODUCT_TIME_START >=to_date('" + strStartTime + "'''yyyy-mm-dd')" + " AND PRODUCT_TIME_START <=to_date('" + strEndTime + "'''yyyy-mm-dd')"; " is 188.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRMCoilTrack,The length of the statement  "		strSQL = "SELECT * FROM CRM_CSL_INFO" + " WHERE PROD_TIME_START >=to_date('" + strStartTime + "'''yyyy-mm-dd')" + " AND   PROD_TIME_START <=to_date('" + strEndTime + "'''yyyy-mm-dd')"; " is 184.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartDateTime)' Convert.ToDateTime (EndDateTime)); " is 128.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PC,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_RT,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_ParaSet,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_Iunit,The length of the statement  "	sqt.DrawstuDrawPicInfo2pdfDocument (CoilID + "号钢卷 " + StartUnit.ToString () + "-" + StopUnit.ToString () + "区版型平直度"' stuDrawPicInfo' ref pdfDocument); " is 150.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_RT,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The length of the statement  "	System.Data.DataTable dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (StartTime)' Convert.ToDateTime (EndTime)); " is 120.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,DefinePdfFont,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfHei = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\SIMHEI.TTF"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 194.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,DefinePdfFont,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfKai = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\simkai.ttf"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 194.
Long Statement,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,DefinePdfFont,The length of the statement  "	iTextSharp.text.pdf.BaseFont bfSun = iTextSharp.text.pdf.BaseFont.createFont (@"C:\Windows\Fonts\SIMSUN.TTC'1"' iTextSharp.text.pdf.BaseFont.IDENTITY_H' iTextSharp.text.pdf.BaseFont.NOT_EMBEDDED); " is 196.
Long Statement,QtDataTrace.Access,SingleQtTableService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableService.cs,GetCC_CastInfo,The length of the statement  "		string sql = string.Format ("SELECT * FROM cast_info_view WHERE start_time >= to_date('{0}'' 'yyyymmdd') and stop_time <= to_date('{1}'' 'yyyymmdd') order by cast_number"' startTime.ToString ("yyyyMMdd")' stopTime.ToString ("yyyyMMdd")); " is 237.
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfo info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfo info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfo info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfo info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfo info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfo info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfo info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfo info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfo info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfo info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfo info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfo info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: info.RolledTime = reader.GetDateTime (2);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: info.Thickness = System.Convert.ToDouble (reader.GetDecimal (4));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: info.Length = System.Convert.ToDouble (reader.GetDecimal (6));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (8));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (9));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (10));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (11));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilList,The following statement contains a magic number: info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (12));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVama info = new HotCoilInfoVama ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.IsDBNull (1) ? "" : reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  	info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  	info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  	info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  	info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  	info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  	info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  	info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  	info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  	info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  	info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  	info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  	info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  	info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  	info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  	info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  	info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  	info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  	info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  	info.RTime = reader.GetDateTime (24);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.RolledTime = reader.GetDateTime (2);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.Thk = System.Convert.ToDouble (reader.GetDecimal (4));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.Width = System.Convert.ToDouble (reader.GetDecimal (5));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.Len = System.Convert.ToDouble (reader.GetDecimal (6));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.ThkH = reader.IsDBNull (7) ? "" : reader.GetString (7);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.ThkB = reader.IsDBNull (8) ? "" : reader.GetString (8);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.ThkT = reader.IsDBNull (9) ? "" : reader.GetString (9);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.WidH = reader.IsDBNull (10) ? "" : reader.GetString (10);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.WidB = reader.IsDBNull (11) ? "" : reader.GetString (11);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.WidT = reader.IsDBNull (12) ? "" : reader.GetString (12);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.ThkOver = reader.IsDBNull (13) ? "" : reader.GetString (13);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.Dot = reader.IsDBNull (14) ? "" : reader.GetString (14);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.FdtH = reader.IsDBNull (15) ? "" : reader.GetString (15);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.FdtB = reader.IsDBNull (16) ? "" : reader.GetString (16);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.FdtT = reader.IsDBNull (17) ? "" : reader.GetString (17);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.CtH = reader.IsDBNull (18) ? "" : reader.GetString (18);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.CtB = reader.IsDBNull (19) ? "" : reader.GetString (19);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.CtT = reader.IsDBNull (20) ? "" : reader.GetString (20);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.Conv = reader.IsDBNull (21) ? "" : reader.GetString (21);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.Wdg = reader.IsDBNull (22) ? "" : reader.GetString (22);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.Flat = reader.IsDBNull (23) ? "" : reader.GetString (23);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVama,The following statement contains a magic number: info.RTime = reader.GetDateTime (24);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVamaCal,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVamaCal info = new HotCoilInfoVamaCal ();  	info.sGrade = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.Total_sum = reader.IsDBNull (1) ? "" : Convert.ToString (reader ["TOTAL_SUM"]);  	info.Failed_sum = reader.IsDBNull (2) ? "" : Convert.ToString (reader ["FAILED_SUM"]);  	info.Failed_pcnt = reader.IsDBNull (3) ? "" : Convert.ToString (reader ["FAILED_PCNT"]);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVamaCal,The following statement contains a magic number: while (reader.Read ()) {  	HotCoilInfoVamaCal info = new HotCoilInfoVamaCal ();  	info.sGrade = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.Total_sum = reader.IsDBNull (1) ? "" : Convert.ToString (reader ["TOTAL_SUM"]);  	info.Failed_sum = reader.IsDBNull (2) ? "" : Convert.ToString (reader ["FAILED_SUM"]);  	info.Failed_pcnt = reader.IsDBNull (3) ? "" : Convert.ToString (reader ["FAILED_PCNT"]);  	coils.Add (info);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVamaCal,The following statement contains a magic number: info.Failed_sum = reader.IsDBNull (2) ? "" : Convert.ToString (reader ["FAILED_SUM"]);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilListVamaCal,The following statement contains a magic number: info.Failed_pcnt = reader.IsDBNull (3) ? "" : Convert.ToString (reader ["FAILED_PCNT"]);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.RolledTime = reader.GetDateTime (2);  	info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  	info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  	info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  	info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  	info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  	info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  	info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  	info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  	info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  	info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  	info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  	info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  	info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  	info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  	info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  	info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  	info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  	info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  	info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  	info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  	info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  	info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  	info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  	info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  	info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  	info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  	info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  	info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  	info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  	info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  	info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  	info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  	info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  	info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  	info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  	info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  	info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  	info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  	info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  	info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  	info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  	info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  	info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  	info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  	info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.RolledTime = reader.GetDateTime (2);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.SteelGrade = reader.IsDBNull (3) ? "" : reader.GetString (3);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ThkMean = System.Convert.ToDouble (reader.GetDecimal (4));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ThkMax = System.Convert.ToDouble (reader.GetDecimal (5));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ThkMin = System.Convert.ToDouble (reader.GetDecimal (6));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ThkPcntOn = System.Convert.ToDouble (reader.GetDecimal (7));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ThkPcntOver = System.Convert.ToDouble (reader.GetDecimal (8));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ThkPcntUnder = System.Convert.ToDouble (reader.GetDecimal (9));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ThkStd = System.Convert.ToDouble (reader.GetDecimal (10));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.WidMean = System.Convert.ToDouble (reader.GetDecimal (11));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.WidMax = System.Convert.ToDouble (reader.GetDecimal (12));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.WidMin = System.Convert.ToDouble (reader.GetDecimal (13));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.WidPcntOn = System.Convert.ToDouble (reader.GetDecimal (14));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.WidPcntOver = System.Convert.ToDouble (reader.GetDecimal (15));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.WidPcntUnder = System.Convert.ToDouble (reader.GetDecimal (16));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.FDTMean = System.Convert.ToDouble (reader.GetDecimal (17));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.FDTMax = System.Convert.ToDouble (reader.GetDecimal (18));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.FDTMin = System.Convert.ToDouble (reader.GetDecimal (19));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.FDTPcntOn = System.Convert.ToDouble (reader.GetDecimal (20));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.FDTPcntOver = System.Convert.ToDouble (reader.GetDecimal (21));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.FDTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (22));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.CTMean = System.Convert.ToDouble (reader.GetDecimal (23));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.CTMax = System.Convert.ToDouble (reader.GetDecimal (24));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.CTMin = System.Convert.ToDouble (reader.GetDecimal (25));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.CTPcntOn = System.Convert.ToDouble (reader.GetDecimal (26));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.CTPcntOver = System.Convert.ToDouble (reader.GetDecimal (27));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.CTPcntUnder = System.Convert.ToDouble (reader.GetDecimal (28));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ProfMean = System.Convert.ToDouble (reader.GetDecimal (29));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ProfMax = System.Convert.ToDouble (reader.GetDecimal (30));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ProfMin = System.Convert.ToDouble (reader.GetDecimal (31));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ProfPcntOn = System.Convert.ToDouble (reader.GetDecimal (32));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ProfPcntOver = System.Convert.ToDouble (reader.GetDecimal (33));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.ProfPcntUnder = System.Convert.ToDouble (reader.GetDecimal (34));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.WdgMean = System.Convert.ToDouble (reader.GetDecimal (35));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.WdgMax = System.Convert.ToDouble (reader.GetDecimal (36));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.WdgMin = System.Convert.ToDouble (reader.GetDecimal (37));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.WdgPcntOn = System.Convert.ToDouble (reader.GetDecimal (38));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.WdgPcntOver = System.Convert.ToDouble (reader.GetDecimal (39));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.WdgPcntUnder = System.Convert.ToDouble (reader.GetDecimal (40));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.Length = System.Convert.ToDouble (reader.GetDecimal (41));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.FlatMean = System.Convert.ToDouble (reader.GetDecimal (42));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.FlatMax = System.Convert.ToDouble (reader.GetDecimal (43));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.FlatMin = System.Convert.ToDouble (reader.GetDecimal (44));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.FlatPcntOn = System.Convert.ToDouble (reader.GetDecimal (45));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.FlatPcntOver = System.Convert.ToDouble (reader.GetDecimal (46));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilInfo,The following statement contains a magic number: info.FlatPcntUnder = System.Convert.ToDouble (reader.GetDecimal (47));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.FdtTrg = System.Convert.ToDouble (reader.GetDecimal (2));  	info.FdtPos = System.Convert.ToDouble (reader.GetDecimal (3));  	info.FdtNeg = System.Convert.ToDouble (reader.GetDecimal (4));  	info.CtTrg = System.Convert.ToDouble (reader.GetDecimal (5));  	info.CtPos = System.Convert.ToDouble (reader.GetDecimal (6));  	info.CtNeg = System.Convert.ToDouble (reader.GetDecimal (7));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.FdtTrg = System.Convert.ToDouble (reader.GetDecimal (2));  	info.FdtPos = System.Convert.ToDouble (reader.GetDecimal (3));  	info.FdtNeg = System.Convert.ToDouble (reader.GetDecimal (4));  	info.CtTrg = System.Convert.ToDouble (reader.GetDecimal (5));  	info.CtPos = System.Convert.ToDouble (reader.GetDecimal (6));  	info.CtNeg = System.Convert.ToDouble (reader.GetDecimal (7));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.FdtTrg = System.Convert.ToDouble (reader.GetDecimal (2));  	info.FdtPos = System.Convert.ToDouble (reader.GetDecimal (3));  	info.FdtNeg = System.Convert.ToDouble (reader.GetDecimal (4));  	info.CtTrg = System.Convert.ToDouble (reader.GetDecimal (5));  	info.CtPos = System.Convert.ToDouble (reader.GetDecimal (6));  	info.CtNeg = System.Convert.ToDouble (reader.GetDecimal (7));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.FdtTrg = System.Convert.ToDouble (reader.GetDecimal (2));  	info.FdtPos = System.Convert.ToDouble (reader.GetDecimal (3));  	info.FdtNeg = System.Convert.ToDouble (reader.GetDecimal (4));  	info.CtTrg = System.Convert.ToDouble (reader.GetDecimal (5));  	info.CtPos = System.Convert.ToDouble (reader.GetDecimal (6));  	info.CtNeg = System.Convert.ToDouble (reader.GetDecimal (7));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.FdtTrg = System.Convert.ToDouble (reader.GetDecimal (2));  	info.FdtPos = System.Convert.ToDouble (reader.GetDecimal (3));  	info.FdtNeg = System.Convert.ToDouble (reader.GetDecimal (4));  	info.CtTrg = System.Convert.ToDouble (reader.GetDecimal (5));  	info.CtPos = System.Convert.ToDouble (reader.GetDecimal (6));  	info.CtNeg = System.Convert.ToDouble (reader.GetDecimal (7));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The following statement contains a magic number: if (reader.Read ()) {  	info = new HotCoilInfo ();  	info.CoilId = reader.IsDBNull (0) ? "" : reader.GetString (0);  	info.SlabId = reader.GetString (1);  	info.FdtTrg = System.Convert.ToDouble (reader.GetDecimal (2));  	info.FdtPos = System.Convert.ToDouble (reader.GetDecimal (3));  	info.FdtNeg = System.Convert.ToDouble (reader.GetDecimal (4));  	info.CtTrg = System.Convert.ToDouble (reader.GetDecimal (5));  	info.CtPos = System.Convert.ToDouble (reader.GetDecimal (6));  	info.CtNeg = System.Convert.ToDouble (reader.GetDecimal (7));  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The following statement contains a magic number: info.FdtTrg = System.Convert.ToDouble (reader.GetDecimal (2));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The following statement contains a magic number: info.FdtPos = System.Convert.ToDouble (reader.GetDecimal (3));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The following statement contains a magic number: info.FdtNeg = System.Convert.ToDouble (reader.GetDecimal (4));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The following statement contains a magic number: info.CtTrg = System.Convert.ToDouble (reader.GetDecimal (5));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The following statement contains a magic number: info.CtPos = System.Convert.ToDouble (reader.GetDecimal (6));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetHotCoilPdi,The following statement contains a magic number: info.CtNeg = System.Convert.ToDouble (reader.GetDecimal (7));  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ShowPDFReport,The following statement contains a magic number: FontHei = new iTextSharp.text.Font (bfHei' 32' 1);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ShowPDFReport,The following statement contains a magic number: FontKai = new iTextSharp.text.Font (bfKai' 32' 1);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ShowPDFReport,The following statement contains a magic number: FontSong = new iTextSharp.text.Font (bfSun' 32' 1);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,ShowTXTReport,The following statement contains a magic number: if (ss [0] == "MatPedigree") {  	//����  	string[] strTitle = new string[1];  	strTitle [0] = "�����1";  	strTitle [0] += "\t�����2";  	strTitle [0] += "\t������";  	strTitle [0] += "\t�豸";  	strTitle [0] += "\t����";  	strTitle [0] += "\t��ʼ";  	strTitle [0] += "\t����";  	System.IO.File.AppendAllLines (txtFilePathName' strTitle' Encoding.Default);  	//���������  	List<Mat_Pedigree> LST = GetMatPedigree (ss [1]' ss [2]);  	string[] strTxtLine = new string[LST.Count];  	for (int I = 0; I < LST.Count; I++) {  		strTxtLine [I] = LST [I].IN_MAT_ID1;  		strTxtLine [I] += "\t" + LST [I].IN_MAT_ID2;  		strTxtLine [I] += "\t" + LST [I].OUT_MAT_ID;  		strTxtLine [I] += "\t" + LST [I].DEVICE_NO;  		strTxtLine [I] += "\t" + LST [I].STEEL_GRADE;  		strTxtLine [I] += "\t" + LST [I].START_TIME;  		strTxtLine [I] += "\t" + LST [I].STOP_TIME;  	}  	System.IO.File.AppendAllLines (txtFilePathName' strTxtLine' Encoding.Default);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetPdfReport_PageHeaderFooter,The following statement contains a magic number: jpeg.scaleAbsolute (44' 12);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetPdfReport_PageHeaderFooter,The following statement contains a magic number: jpeg.scaleAbsolute (44' 12);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetPdfReport_PageHeaderFooter,The following statement contains a magic number: FontKai.Size = 10;  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,DrawstuDrawPicInfo2pdfDocument,The following statement contains a magic number: Img.scaleAbsolute (ImgWidth' 150);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetMatList,The following statement contains a magic number: CheckDateRange (StartTime' ref StopTime' 15.0);  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetMatPedigree,The following statement contains a magic number: if (CurrProcess.StartsWith ("LYCRM")) {  	GetMatPedigree_LYCRM (MatID' CurrProcess' ref LST);  	string Mat_CoilID = ""' MATID_SlabID = ""' MATID_HeatID = ""' MATID_IronID = "";  	//TCM  	for (int I = 0; I < LST.Count; I++) {  		if (LST [I].DEVICE_NO.StartsWith ("LYCRM_TCM")) {  			//�ҵ�����������ڸ־��  			Mat_CoilID = LST [I].IN_MAT_ID1;  			I = LST.Count + 10;  		}  	}  	if (Mat_CoilID != "") {  		strSQL = " SELECT * FROM MAT_PEDIGREE WHERE out_mat_id='" + Mat_CoilID + "' AND device_no like 'LYHRM_RM%'";  		dt = ReadDatatable_OraDB (strSQL);  		if (dt.Rows.Count > 0) {  			//������  			MATID_SlabID = dt.Rows [0] ["in_mat_id1"].ToString ();  			strSQL = " SELECT * FROM MAT_PEDIGREE WHERE out_mat_id='" + MATID_SlabID + "' AND device_no like 'LY210_CC%'";  			dt = ReadDatatable_OraDB (strSQL);  			if (dt.Rows.Count > 0) {  				//¯�κ�  				MATID_HeatID = dt.Rows [0] ["in_mat_id1"].ToString ();  				strSQL = " SELECT * FROM MAT_PEDIGREE WHERE out_mat_id='" + MATID_HeatID + "' AND device_no like 'LY210_BOF%'";  				dt = ReadDatatable_OraDB (strSQL);  				//���κ�  				if (dt.Rows.Count > 0)  					MATID_IronID = dt.Rows [0] ["in_mat_id1"].ToString ();  			}  		}  	}  	//֪��Ϊɶ����  	LST.Clear ();  	//ע��CCֻ��ʾһ�����ţ���˲�����ȫ�Ժ����ˣ�ֻ��һ��һ������ʾ  	GetMatPedigree_LY210_MI_KR_BOF (MATID_IronID' ""' ref LST);  	strSQL = " SELECT * FROM MAT_PEDIGREE WHERE in_mat_id1='" + MATID_HeatID + "' AND device_no like 'LY210_LF%'";  	GetMatPedigreeByStrSQL (strSQL' ref LST);  	strSQL = " SELECT * FROM MAT_PEDIGREE WHERE in_mat_id1='" + MATID_HeatID + "' AND device_no like 'LY210_RH%'";  	GetMatPedigreeByStrSQL (strSQL' ref LST);  	strSQL = " SELECT * FROM MAT_PEDIGREE WHERE out_mat_id='" + MATID_SlabID + "' AND device_no like 'LY210_CC%'";  	GetMatPedigreeByStrSQL (strSQL' ref LST);  	//��������  	GetMatPedigree_LYHRM (MATID_SlabID' "LYHRM_RM"' ref LST);  	//��������  	GetMatPedigree_LYCRM (MatID' CurrProcess' ref LST);  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetMatPedigree,The following statement contains a magic number: for (int I = 0; I < LST.Count; I++) {  	if (LST [I].DEVICE_NO.StartsWith ("LYCRM_TCM")) {  		//�ҵ�����������ڸ־��  		Mat_CoilID = LST [I].IN_MAT_ID1;  		I = LST.Count + 10;  	}  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetMatPedigree,The following statement contains a magic number: if (LST [I].DEVICE_NO.StartsWith ("LYCRM_TCM")) {  	//�ҵ�����������ڸ־��  	Mat_CoilID = LST [I].IN_MAT_ID1;  	I = LST.Count + 10;  }  
Magic Number,QtDataTrace.Access,SingleQtTable,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTable.cs,GetMatPedigree,The following statement contains a magic number: I = LST.Count + 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: FontHei.Size = 20;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: FontKai.Size = 18;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: FontHei.Size = 12;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: FontSong.Size = 12;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: cell.Colspan = 4;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: cell.Colspan = 4;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: table.DefaultCellBackgroundColor = new iTextSharp.text.Color (220' 220' 220);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: table.DefaultCellBackgroundColor = new iTextSharp.text.Color (220' 220' 220);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: table.DefaultCellBackgroundColor = new iTextSharp.text.Color (220' 220' 220);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: FontKai.Size = 12;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: table.DefaultCellBackgroundColor = new iTextSharp.text.Color (255' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: table.DefaultCellBackgroundColor = new iTextSharp.text.Color (255' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: table.DefaultCellBackgroundColor = new iTextSharp.text.Color (255' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: if (LST_Slab.Count >= 1) {  	para = new iTextSharp.text.Paragraph (LST_Slab [0]' FontHei);  	for (int I = 1; I < LST_Slab.Count; I++) {  		para.Add (";" + LST_Slab [I]);  	}  	cell = new iTextSharp.text.Cell (para);  	cell.HorizontalAlignment = Element.ALIGN_LEFT;  	cell.Colspan = 4;  	table.addCell (cell);  }  else {  	cell = new iTextSharp.text.Cell ("");  	cell.Colspan = 4;  	table.addCell (cell);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: if (LST_Slab.Count >= 1) {  	para = new iTextSharp.text.Paragraph (LST_Slab [0]' FontHei);  	for (int I = 1; I < LST_Slab.Count; I++) {  		para.Add (";" + LST_Slab [I]);  	}  	cell = new iTextSharp.text.Cell (para);  	cell.HorizontalAlignment = Element.ALIGN_LEFT;  	cell.Colspan = 4;  	table.addCell (cell);  }  else {  	cell = new iTextSharp.text.Cell ("");  	cell.Colspan = 4;  	table.addCell (cell);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: cell.Colspan = 4;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face,The following statement contains a magic number: cell.Colspan = 4;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Addition,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Addition,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Addition,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Addition,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Addition,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Addition,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Addition,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Addition,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Addition,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Tempture,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Tempture,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Tempture,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Tempture,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Tempture,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Tempture,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Tempture,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Tempture,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Tempture,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Elemants,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Elemants,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Elemants,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Elemants,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Elemants,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Elemants,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Elemants,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Elemants,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetPdfReport_Face_Elemants,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: FontHei.Size = 16;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table = new iTextSharp.text.Table (14);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table.Padding = 3;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_MI,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: FontHei.Size = 16;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.DefaultCellBackgroundColor = new iTextSharp.text.Color (255' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.DefaultCellBackgroundColor = new iTextSharp.text.Color (255' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.DefaultCellBackgroundColor = new iTextSharp.text.Color (255' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table = new iTextSharp.text.Table (10);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.Padding = 3;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: if (lst.Count > 0) {  	//读出数据  	List<KRKeyEvents> LST = GetKRKeyEvents (HeatID);  	for (int I = 0; I < LST.Count; I++) {  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].DateAndTime' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Duration.ToString ("#0.0")' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Descripion' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Tempture' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Weight' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_C' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Si' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_Mn' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_S' FontSong));  		table.addCell (cell);  		cell = new iTextSharp.text.Cell (new Paragraph (LST [I].Ele_P' FontSong));  		table.addCell (cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_As' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cu5As8Sn' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Cr' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ni' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Mo' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Ti' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Nb' FontSong)); table.addCell(cell);  		//cell = new iTextSharp.text.Cell(new Paragraph(LST[I].Ele_Pb' FontSong)); table.addCell(cell);  	}  	//把表写入文档  	pdfDocument.Add (table);  	//***** 历史His数据 *******//                	//这里绘图，转速和高度  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	stuDrawPicInfo.TagDescription [1] = "高度";  	stuDrawPicInfo.TagUnit [1] = "m";  	stuDrawPicInfo.YAxisIsLeft [1] = true;  	stuDrawPicInfo.AutoSetRang [1] = false;  	stuDrawPicInfo.YSN [1] = 15;  	stuDrawPicInfo.TagMin [1] = 0;  	stuDrawPicInfo.TagMax [1] = 15;  	stuDrawPicInfo.TagDescription [2] = "转速";  	stuDrawPicInfo.TagUnit [2] = "rad/min";  	stuDrawPicInfo.YAxisIsLeft [2] = false;  	stuDrawPicInfo.AutoSetRang [2] = false;  	stuDrawPicInfo.YSN [2] = 15;  	stuDrawPicInfo.TagMin [2] = 0;  	stuDrawPicInfo.TagMax [2] = 150;  	//绘图的数据  	string[] tags = new string[2];  	tags [0] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_HEIGHT";  	tags [1] = "LYQ210.KR" + lst [0].DES_STATION_NO + ".REAL_MIX_SPEED";  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' Convert.ToDateTime (lst [0].LADLE_ARRIVE)' Convert.ToDateTime (lst [0].LADLE_LEAVE));  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (HeatID + "炉次脱硫站搅拌器的高度和转速"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: stuDrawPicInfo.YSN [1] = 15;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: stuDrawPicInfo.TagMax [1] = 15;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: stuDrawPicInfo.TagDescription [2] = "转速";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: stuDrawPicInfo.TagUnit [2] = "rad/min";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: stuDrawPicInfo.YAxisIsLeft [2] = false;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: stuDrawPicInfo.AutoSetRang [2] = false;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: stuDrawPicInfo.YSN [2] = 15;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: stuDrawPicInfo.YSN [2] = 15;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: stuDrawPicInfo.TagMin [2] = 0;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: stuDrawPicInfo.TagMax [2] = 150;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_KR,The following statement contains a magic number: stuDrawPicInfo.TagMax [2] = 150;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (0' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_KeyEvents,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_KeyEvents,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_KeyEvents,The following statement contains a magic number: table.Padding = 3;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_KeyEvents,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_KeyEvents,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_KeyEvents,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_KeyEvents,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.YSN [1] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMax [1] = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagDescription [2] = "CO2含量";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagUnit [2] = "%";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.YAxisIsLeft [2] = true;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.AutoSetRang [2] = false;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.YSN [2] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.YSN [2] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMin [2] = 0;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMax [2] = 50;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMax [2] = 50;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagDescription [3] = "O2含量";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagUnit [3] = "%";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.YAxisIsLeft [3] = false;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.AutoSetRang [3] = false;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.YSN [3] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.YSN [3] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMin [3] = 0;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMax [3] = 30;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMax [3] = 30;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: tags [2] = "LYQ210.BOF" + TreatPos + ".ContentO2";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: Img.scaleAbsolute (ImgWidth' 100);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.YSN [RowNo] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMax [RowNo] = 1500;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.YSN [RowNo] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMin [RowNo] = -150;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMax [RowNo] = 150;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.YSN [RowNo] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMax [RowNo] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.YSN [RowNo] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMax [RowNo] = 500;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.YSN [RowNo] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: stuDrawPicInfo.TagMax [RowNo] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: tags = new string[5];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: tags [2] = "LYQ210.BOF" + TreatPos + ".ACT_O2_FLUX";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: tags [3] = "LYQ210.BOF" + TreatPos + ".ACT_N2_FLUX";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_BOF_HisDB,The following statement contains a magic number: tags [4] = "LYQ210.BOF" + TreatPos + ".ACT_AR_FLUX";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (0' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF,The following statement contains a magic number: cell.Colspan = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF,The following statement contains a magic number: cell.Colspan = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF,The following statement contains a magic number: cell.Colspan = 3;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_KeyEvents,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_KeyEvents,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_KeyEvents,The following statement contains a magic number: table.Padding = 3;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_KeyEvents,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_KeyEvents,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_KeyEvents,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_KeyEvents,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Gas,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Gas,The following statement contains a magic number: stuDrawPicInfo.YSN [TagNo] = 12;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Gas,The following statement contains a magic number: stuDrawPicInfo.TagDecimalPlaces [TagNo] = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Gas,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 1200;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_PriSide,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_PriSide,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 20;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_PriSide,The following statement contains a magic number: stuDrawPicInfo.TagMin [TagNo] = 36000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_PriSide,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 37000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_PriSide,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_PriSide,The following statement contains a magic number: tags [02] = "LYQ210.LF" + TreatPos + ".EleTran_PriSide_Curr_A";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_SecSide_Voltage,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_SecSide_Voltage,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 400;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_SecSide_Voltage,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 600;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_SecSide_Voltage,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 800;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_SecSide_Voltage,The following statement contains a magic number: tags [2] = "LYQ210.LF" + TreatPos + ".EleTran_SecSide_Voltage_C";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_SecSide_Current,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_SecSide_Current,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 120000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_SecSide_Current,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 100000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_SecSide_Current,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 80000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_LF_HisDB_Ele_SecSide_Current,The following statement contains a magic number: tags [2] = "LYQ210.LF" + TreatPos + ".EleTran_SecSide_Curr_C";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (0' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The following statement contains a magic number: if (lst.Count > 0) {  	//这里开始写基本信息  	cell = new iTextSharp.text.Cell (new Paragraph ("炉次"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].heat_id' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("钢种"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].steel_grade' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("炉座号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].treatpos' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("钢包号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].ladle_id' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("班次"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (Shift_IDNum2Chn (lst [0].shift_id)' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("班组"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (Crew_IDNum2Chn (lst [0].crew_id)' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("氧枪编号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].lance_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("氧枪寿命"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].lance_age' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("进站"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].arrive_mainpos_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("离站"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].depart_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("在站时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	TimeSpan ts = Convert.ToDateTime (lst [0].depart_time) - Convert.ToDateTime (lst [0].arrive_mainpos_time);  	cell = new iTextSharp.text.Cell (new Paragraph (ts.TotalMinutes.ToString ("#0.0") + "分钟"' FontSong));  	cell.Colspan = 3;  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("真空时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].vac_dur' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("处理时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].treat_time' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("最小真空度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].min_vacuum' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("机械冷却水消耗"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].machine_cooling_water_cons' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("冷凝器水消耗"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].condensor_cooling_water_cons' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("热弯管号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].hot_bend_tube_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("热弯管次数"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].hot_bend_tube_num' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("真空槽号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].vacuum_slot_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("真空槽使用次数"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].vacuum_slot_num' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("上升下降次数"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].updown_num' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("ladle_tare_wt"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].ladle_tare_wt' FontSong));  	table.addCell (cell);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The following statement contains a magic number: if (lst.Count > 0) {  	//这里开始写基本信息  	cell = new iTextSharp.text.Cell (new Paragraph ("炉次"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].heat_id' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("钢种"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].steel_grade' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("炉座号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].treatpos' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("钢包号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].ladle_id' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("班次"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (Shift_IDNum2Chn (lst [0].shift_id)' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("班组"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (Crew_IDNum2Chn (lst [0].crew_id)' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("氧枪编号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].lance_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("氧枪寿命"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].lance_age' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("进站"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].arrive_mainpos_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("离站"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].depart_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("在站时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	TimeSpan ts = Convert.ToDateTime (lst [0].depart_time) - Convert.ToDateTime (lst [0].arrive_mainpos_time);  	cell = new iTextSharp.text.Cell (new Paragraph (ts.TotalMinutes.ToString ("#0.0") + "分钟"' FontSong));  	cell.Colspan = 3;  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("真空时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].vac_dur' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("处理时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].treat_time' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("最小真空度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].min_vacuum' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("机械冷却水消耗"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].machine_cooling_water_cons' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("冷凝器水消耗"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].condensor_cooling_water_cons' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("热弯管号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].hot_bend_tube_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("热弯管次数"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].hot_bend_tube_num' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("真空槽号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].vacuum_slot_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("真空槽使用次数"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].vacuum_slot_num' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("上升下降次数"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].updown_num' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("ladle_tare_wt"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].ladle_tare_wt' FontSong));  	table.addCell (cell);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The following statement contains a magic number: if (lst.Count > 0) {  	//这里开始写基本信息  	cell = new iTextSharp.text.Cell (new Paragraph ("炉次"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].heat_id' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("钢种"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].steel_grade' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("炉座号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].treatpos' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("钢包号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].ladle_id' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("班次"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (Shift_IDNum2Chn (lst [0].shift_id)' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("班组"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (Crew_IDNum2Chn (lst [0].crew_id)' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("氧枪编号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].lance_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("氧枪寿命"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].lance_age' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("进站"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].arrive_mainpos_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("离站"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].depart_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("在站时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	TimeSpan ts = Convert.ToDateTime (lst [0].depart_time) - Convert.ToDateTime (lst [0].arrive_mainpos_time);  	cell = new iTextSharp.text.Cell (new Paragraph (ts.TotalMinutes.ToString ("#0.0") + "分钟"' FontSong));  	cell.Colspan = 3;  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("真空时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].vac_dur' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("处理时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].treat_time' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("最小真空度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].min_vacuum' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("机械冷却水消耗"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].machine_cooling_water_cons' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("冷凝器水消耗"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].condensor_cooling_water_cons' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("热弯管号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].hot_bend_tube_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("热弯管次数"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].hot_bend_tube_num' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("真空槽号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].vacuum_slot_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("真空槽使用次数"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].vacuum_slot_num' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("上升下降次数"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].updown_num' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("ladle_tare_wt"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].ladle_tare_wt' FontSong));  	table.addCell (cell);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The following statement contains a magic number: cell.Colspan = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The following statement contains a magic number: cell.Colspan = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH,The following statement contains a magic number: cell.Colspan = 3;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_KeyEvents,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_KeyEvents,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_KeyEvents,The following statement contains a magic number: table.Padding = 3;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_KeyEvents,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_KeyEvents,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_KeyEvents,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_KeyEvents,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRKeyEvents,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	int RowIndex = 0;  	lst = new KRKeyEvents ();  	KRKeyEvents_Ini (ref lst);  	lst.Descripion = "化验值" + RowIndex.ToString ();  	//str = dt.Rows[RowIndex][""].ToString();if (str.Length>0) lst=str;  	str = dt.Rows [RowIndex] ["sampletime"].ToString ();  	if (str.Length > 0)  		lst.DateAndTime = str;  	str = dt.Rows [RowIndex] ["Ele_C"].ToString ();  	if (str.Length > 0)  		lst.Ele_C = str;  	str = dt.Rows [RowIndex] ["Ele_Si"].ToString ();  	if (str.Length > 0)  		lst.Ele_Si = str;  	str = dt.Rows [RowIndex] ["Ele_Mn"].ToString ();  	if (str.Length > 0)  		lst.Ele_Mn = str;  	str = dt.Rows [RowIndex] ["Ele_S"].ToString ();  	if (str.Length > 0)  		lst.Ele_S = str;  	str = dt.Rows [RowIndex] ["Ele_P"].ToString ();  	if (str.Length > 0)  		lst.Ele_P = str;  	str = dt.Rows [RowIndex] ["Ele_Cu"].ToString ();  	if (str.Length > 0)  		lst.Ele_Cu = str;  	str = dt.Rows [RowIndex] ["Ele_As"].ToString ();  	if (str.Length > 0)  		lst.Ele_As = str;  	str = dt.Rows [RowIndex] ["Ele_Sn"].ToString ();  	if (str.Length > 0)  		lst.Ele_Sn = str;  	lst.Ele_Cu5As8Sn = (Convert.ToSingle (lst.Ele_Cu) + 5 * Convert.ToSingle (lst.Ele_As) + 8 * Convert.ToSingle (lst.Ele_Sn)).ToString ();  	str = dt.Rows [RowIndex] ["Ele_Cr"].ToString ();  	if (str.Length > 0)  		lst.Ele_Cr = str;  	str = dt.Rows [RowIndex] ["Ele_Ni"].ToString ();  	if (str.Length > 0)  		lst.Ele_Ni = str;  	str = dt.Rows [RowIndex] ["Ele_Mo"].ToString ();  	if (str.Length > 0)  		lst.Ele_Mo = str;  	str = dt.Rows [RowIndex] ["Ele_Ti"].ToString ();  	if (str.Length > 0)  		lst.Ele_Ti = str;  	str = dt.Rows [RowIndex] ["Ele_Nb"].ToString ();  	if (str.Length > 0)  		lst.Ele_Nb = str;  	str = dt.Rows [RowIndex] ["Ele_Pb"].ToString ();  	if (str.Length > 0)  		lst.Ele_Pb = str;  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRKeyEvents,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	int RowIndex = 0;  	lst = new KRKeyEvents ();  	KRKeyEvents_Ini (ref lst);  	lst.Descripion = "化验值" + RowIndex.ToString ();  	//str = dt.Rows[RowIndex][""].ToString();if (str.Length>0) lst=str;  	str = dt.Rows [RowIndex] ["sampletime"].ToString ();  	if (str.Length > 0)  		lst.DateAndTime = str;  	str = dt.Rows [RowIndex] ["Ele_C"].ToString ();  	if (str.Length > 0)  		lst.Ele_C = str;  	str = dt.Rows [RowIndex] ["Ele_Si"].ToString ();  	if (str.Length > 0)  		lst.Ele_Si = str;  	str = dt.Rows [RowIndex] ["Ele_Mn"].ToString ();  	if (str.Length > 0)  		lst.Ele_Mn = str;  	str = dt.Rows [RowIndex] ["Ele_S"].ToString ();  	if (str.Length > 0)  		lst.Ele_S = str;  	str = dt.Rows [RowIndex] ["Ele_P"].ToString ();  	if (str.Length > 0)  		lst.Ele_P = str;  	str = dt.Rows [RowIndex] ["Ele_Cu"].ToString ();  	if (str.Length > 0)  		lst.Ele_Cu = str;  	str = dt.Rows [RowIndex] ["Ele_As"].ToString ();  	if (str.Length > 0)  		lst.Ele_As = str;  	str = dt.Rows [RowIndex] ["Ele_Sn"].ToString ();  	if (str.Length > 0)  		lst.Ele_Sn = str;  	lst.Ele_Cu5As8Sn = (Convert.ToSingle (lst.Ele_Cu) + 5 * Convert.ToSingle (lst.Ele_As) + 8 * Convert.ToSingle (lst.Ele_Sn)).ToString ();  	str = dt.Rows [RowIndex] ["Ele_Cr"].ToString ();  	if (str.Length > 0)  		lst.Ele_Cr = str;  	str = dt.Rows [RowIndex] ["Ele_Ni"].ToString ();  	if (str.Length > 0)  		lst.Ele_Ni = str;  	str = dt.Rows [RowIndex] ["Ele_Mo"].ToString ();  	if (str.Length > 0)  		lst.Ele_Mo = str;  	str = dt.Rows [RowIndex] ["Ele_Ti"].ToString ();  	if (str.Length > 0)  		lst.Ele_Ti = str;  	str = dt.Rows [RowIndex] ["Ele_Nb"].ToString ();  	if (str.Length > 0)  		lst.Ele_Nb = str;  	str = dt.Rows [RowIndex] ["Ele_Pb"].ToString ();  	if (str.Length > 0)  		lst.Ele_Pb = str;  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRKeyEvents,The following statement contains a magic number: lst.Ele_Cu5As8Sn = (Convert.ToSingle (lst.Ele_Cu) + 5 * Convert.ToSingle (lst.Ele_As) + 8 * Convert.ToSingle (lst.Ele_Sn)).ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRKeyEvents,The following statement contains a magic number: lst.Ele_Cu5As8Sn = (Convert.ToSingle (lst.Ele_Cu) + 5 * Convert.ToSingle (lst.Ele_As) + 8 * Convert.ToSingle (lst.Ele_Sn)).ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRKeyEvents,The following statement contains a magic number: for (int I = 0; I < LST.Count; I++) {  	if (DateTime.TryParse (LST [I].DateAndTime' out cDateTime)) {  		ts = cDateTime - StartDateTime;  		LST [I].Duration = float.Parse ((ts.TotalSeconds / 60.0).ToString ("#0.00"));  	}  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRKeyEvents,The following statement contains a magic number: if (DateTime.TryParse (LST [I].DateAndTime' out cDateTime)) {  	ts = cDateTime - StartDateTime;  	LST [I].Duration = float.Parse ((ts.TotalSeconds / 60.0).ToString ("#0.00"));  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRKeyEvents,The following statement contains a magic number: LST [I].Duration = float.Parse ((ts.TotalSeconds / 60.0).ToString ("#0.00"));  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRMixerHeightSpeed,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	KRMixerHeightSpeed MHS = new KRMixerHeightSpeed ();  	MHS.DateAndTime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = MHS.DateAndTime - TimeStart;  	MHS.sngDuration = (float)ts.TotalMilliseconds / 60000;  	MHS.DateTimeDuration = MHS.DateAndTime.Year + "/" + MHS.DateAndTime.Month + "/" + MHS.DateAndTime.Day + " " + MHS.DateAndTime.Hour + ":" + MHS.DateAndTime.Minute + ":" + MHS.DateAndTime.Second + "(" + MHS.sngDuration + ")";  	MHS.Height = Convert.ToSingle (dt.Rows [I] [1]);  	MHS.Speed = Convert.ToSingle (dt.Rows [I] [2]);  	LST.Add (MHS);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRMixerHeightSpeed,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	KRMixerHeightSpeed MHS = new KRMixerHeightSpeed ();  	MHS.DateAndTime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = MHS.DateAndTime - TimeStart;  	MHS.sngDuration = (float)ts.TotalMilliseconds / 60000;  	MHS.DateTimeDuration = MHS.DateAndTime.Year + "/" + MHS.DateAndTime.Month + "/" + MHS.DateAndTime.Day + " " + MHS.DateAndTime.Hour + ":" + MHS.DateAndTime.Minute + ":" + MHS.DateAndTime.Second + "(" + MHS.sngDuration + ")";  	MHS.Height = Convert.ToSingle (dt.Rows [I] [1]);  	MHS.Speed = Convert.ToSingle (dt.Rows [I] [2]);  	LST.Add (MHS);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRMixerHeightSpeed,The following statement contains a magic number: MHS.sngDuration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetKRMixerHeightSpeed,The following statement contains a magic number: MHS.Speed = Convert.ToSingle (dt.Rows [I] [2]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOFKeyEvents,The following statement contains a magic number: for (int I = 0; I < LST.Count; I++) {  	if (DateTime.TryParse (LST [I].Datetime' out cDateTime)) {  		ts = cDateTime - StartDateTime;  		LST [I].Duration = float.Parse ((ts.TotalSeconds / 60.0).ToString ("#0.00"));  	}  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOFKeyEvents,The following statement contains a magic number: if (DateTime.TryParse (LST [I].Datetime' out cDateTime)) {  	ts = cDateTime - StartDateTime;  	LST [I].Duration = float.Parse ((ts.TotalSeconds / 60.0).ToString ("#0.00"));  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOFKeyEvents,The following statement contains a magic number: LST [I].Duration = float.Parse ((ts.TotalSeconds / 60.0).ToString ("#0.00"));  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_KeyEvents,The following statement contains a magic number: for (int I = 0; I < LST.Count; I++) {  	if (DateTime.TryParse (LST [I].datetime' out cDateTime)) {  		ts = cDateTime - StartDateTime;  		LST [I].Duration = float.Parse ((ts.TotalSeconds / 60.0).ToString ("#0.00"));  	}  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_KeyEvents,The following statement contains a magic number: if (DateTime.TryParse (LST [I].datetime' out cDateTime)) {  	ts = cDateTime - StartDateTime;  	LST [I].Duration = float.Parse ((ts.TotalSeconds / 60.0).ToString ("#0.00"));  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_KeyEvents,The following statement contains a magic number: LST [I].Duration = float.Parse ((ts.TotalSeconds / 60.0).ToString ("#0.00"));  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRHKeyEvents,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	str = dt.Rows [I] ["arrive_mainpos_time"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "到达时间";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	//就绪时间  	StartDateTime = Convert.ToDateTime (lst.DateAndTime);  	str = dt.Rows [I] ["hook_arr_ladle_time"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "吊钩到达时间";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["ladle_up_time"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "钢包上升时间";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["heat_start"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "开始加热时间";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["heat_end"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "结束加热时间";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["ladle_down_time"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "钢包下降时间";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["hook_leave_ladle_time"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "吊钩离开钢包时间";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["arr_bwz_time"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "到达bwz时间";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["arr_departpos_time"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "到达离开位时间";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["depart_time"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "离开时间";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	for (int J = 1; J <= 5; J++) {  		str = dt.Rows [I] ["dati_temp_" + J].ToString ();  		if (str.Length > 0) {  			lst = new RH_KeyEvens ();  			RH_KeyEvens_Ini (ref lst);  			lst.Decription = "第" + J + "定温定氧";  			lst.DateAndTime = str;  			str = dt.Rows [I] ["steel_temp_" + J].ToString ();  			if (str.Length > 0)  				lst.Temp = str;  			str = dt.Rows [I] ["o2_activity_" + J].ToString ();  			if (str.Length > 0)  				lst.O2ppm = str;  			LST.Add (lst);  		}  	}  	str = dt.Rows [I] ["dati_o2_start"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "吹氧开始";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["dati_o2_end"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "吹氧结束";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["dati_des_start"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "处理开始";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["dati_des_end"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "处理结束";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["stir_ar_start"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "搅拌开始";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  	str = dt.Rows [I] ["stir_ar_end"].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "搅拌结束";  		lst.DateAndTime = str;  		LST.Add (lst);  	}  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRHKeyEvents,The following statement contains a magic number: for (int J = 1; J <= 5; J++) {  	str = dt.Rows [I] ["dati_temp_" + J].ToString ();  	if (str.Length > 0) {  		lst = new RH_KeyEvens ();  		RH_KeyEvens_Ini (ref lst);  		lst.Decription = "第" + J + "定温定氧";  		lst.DateAndTime = str;  		str = dt.Rows [I] ["steel_temp_" + J].ToString ();  		if (str.Length > 0)  			lst.Temp = str;  		str = dt.Rows [I] ["o2_activity_" + J].ToString ();  		if (str.Length > 0)  			lst.O2ppm = str;  		LST.Add (lst);  	}  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: try {  	if (strDateTime.Length >= 4)  		ReDate = strDateTime.Substring (0' 4);  	if (strDateTime.Length >= 6)  		ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  	if (strDateTime.Length >= 8)  		ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  	if (strDateTime.Length >= 10)  		ReDate = ReDate + " " + strDateTime.Substring (8' 2);  	if (strDateTime.Length >= 12)  		ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  	if (strDateTime.Length >= 14)  		ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  	return ReDate;  }  catch (Exception ex) {  	ex.Message.ToString ();  	return strDateTime;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 4)  	ReDate = strDateTime.Substring (0' 4);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 4)  	ReDate = strDateTime.Substring (0' 4);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: ReDate = strDateTime.Substring (0' 4);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 6)  	ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 6)  	ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 6)  	ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: ReDate = ReDate + "/" + strDateTime.Substring (4' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 8)  	ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 8)  	ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 8)  	ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: ReDate = ReDate + "/" + strDateTime.Substring (6' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 10)  	ReDate = ReDate + " " + strDateTime.Substring (8' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 10)  	ReDate = ReDate + " " + strDateTime.Substring (8' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 10)  	ReDate = ReDate + " " + strDateTime.Substring (8' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: ReDate = ReDate + " " + strDateTime.Substring (8' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: ReDate = ReDate + " " + strDateTime.Substring (8' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 12)  	ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 12)  	ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 12)  	ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: ReDate = ReDate + ":" + strDateTime.Substring (10' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 14)  	ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 14)  	ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: if (strDateTime.Length >= 14)  	ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,ChageString2Date,The following statement contains a magic number: ReDate = ReDate + ":" + strDateTime.Substring (12' 2);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Vacuum_CycGas,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Vacuum_CycGas,The following statement contains a magic number: stuDrawPicInfo.YSN [TagNo] = 12;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Vacuum_CycGas,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 120;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Vacuum_CycGas,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 300;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Vacuum_CycGas,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 3000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Vacuum_CycGas,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 400;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Vacuum_CycGas,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 400;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Vacuum_CycGas,The following statement contains a magic number: tags [2] = "LYQ210.RH" + TreatPos + ".CycBlowingO2Flow";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Vacuum_CycGas,The following statement contains a magic number: tags [3] = "LYQ210.RH" + TreatPos + ".ProcVolPlug1Stir";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Vacuum_CycGas,The following statement contains a magic number: tags [4] = "LYQ210.RH" + TreatPos + ".ProcVolPlug2Stir";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Flue,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Flue,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 1500;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Flue,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 300;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Flue,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 3000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Flue,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 1200;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Flue,The following statement contains a magic number: stuDrawPicInfo.YSN [TagNo] = 12;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Flue,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 120;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Flue,The following statement contains a magic number: tags [2] = "LYQ210.RH" + TreatPos + ".FlueGasCO";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Flue,The following statement contains a magic number: tags [3] = "LYQ210.RH" + TreatPos + ".FlueGasCO2";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_RH_HisDB_Flue,The following statement contains a magic number: tags [4] = "LYQ210.RH" + TreatPos + ".FlueGasH2";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_CC,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_CC,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_CC,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_CC,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (0' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_CC,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_CC,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_CC,The following statement contains a magic number: cell.Colspan = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (0' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: if (lst.Count > 0) {  	//这里开始写基本信息  	cell = new iTextSharp.text.Cell (new Paragraph ("铸坯号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Slab_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("炉号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Heat_ID' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("钢种"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Steel_grade' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("铸机号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].CCM' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("流号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Strand_no' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("PROD_COUNTER"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Prod_counter' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("PROD_NO"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Prod_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯头锥度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Taper_start' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯尾锥度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Taper_end' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("坯长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Length' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯宽"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Width' FontSong));  	table.addCell (cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("坯头宽度"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].WIDTH_HEAD' FontSong)); table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("坯尾宽度"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].WIDTH_TAIL' FontSong)); table.addCell(cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯厚"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Thickness' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯重"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Weight' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("开始时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Start_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("结束时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Stop_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("浇铸时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	TimeSpan ts = Convert.ToDateTime (lst [0].Stop_time) - Convert.ToDateTime (lst [0].Start_time);  	cell = new iTextSharp.text.Cell (new Paragraph (ts.TotalMinutes.ToString ("#0.0") + "分钟"' FontSong));  	cell.Colspan = 3;  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("浇铸长度位置"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Start_cast_pos + "->" + lst [0].Stop_cast_pos' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("SAMPLE_WGT"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].SAMPLE_WGT' FontSong)); table.addCell(cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("DEFECT_LEVEL"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Defect_level' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("手动切割"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Manual_cut_flg' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("切割时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Cut_date' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: if (lst.Count > 0) {  	//这里开始写基本信息  	cell = new iTextSharp.text.Cell (new Paragraph ("铸坯号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Slab_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("炉号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Heat_ID' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("钢种"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Steel_grade' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("铸机号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].CCM' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("流号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Strand_no' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("PROD_COUNTER"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Prod_counter' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("PROD_NO"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Prod_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯头锥度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Taper_start' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯尾锥度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Taper_end' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("坯长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Length' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯宽"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Width' FontSong));  	table.addCell (cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("坯头宽度"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].WIDTH_HEAD' FontSong)); table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("坯尾宽度"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].WIDTH_TAIL' FontSong)); table.addCell(cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯厚"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Thickness' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯重"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Weight' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("开始时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Start_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("结束时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Stop_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("浇铸时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	TimeSpan ts = Convert.ToDateTime (lst [0].Stop_time) - Convert.ToDateTime (lst [0].Start_time);  	cell = new iTextSharp.text.Cell (new Paragraph (ts.TotalMinutes.ToString ("#0.0") + "分钟"' FontSong));  	cell.Colspan = 3;  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("浇铸长度位置"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Start_cast_pos + "->" + lst [0].Stop_cast_pos' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("SAMPLE_WGT"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].SAMPLE_WGT' FontSong)); table.addCell(cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("DEFECT_LEVEL"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Defect_level' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("手动切割"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Manual_cut_flg' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("切割时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Cut_date' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: if (lst.Count > 0) {  	//这里开始写基本信息  	cell = new iTextSharp.text.Cell (new Paragraph ("铸坯号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Slab_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("炉号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Heat_ID' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("钢种"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Steel_grade' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("铸机号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].CCM' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("流号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Strand_no' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("PROD_COUNTER"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Prod_counter' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("PROD_NO"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Prod_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯头锥度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Taper_start' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯尾锥度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Taper_end' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("坯长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Length' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯宽"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Width' FontSong));  	table.addCell (cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("坯头宽度"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].WIDTH_HEAD' FontSong)); table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("坯尾宽度"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].WIDTH_TAIL' FontSong)); table.addCell(cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯厚"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Thickness' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯重"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Weight' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("开始时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Start_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("结束时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Stop_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("浇铸时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	TimeSpan ts = Convert.ToDateTime (lst [0].Stop_time) - Convert.ToDateTime (lst [0].Start_time);  	cell = new iTextSharp.text.Cell (new Paragraph (ts.TotalMinutes.ToString ("#0.0") + "分钟"' FontSong));  	cell.Colspan = 3;  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("浇铸长度位置"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Start_cast_pos + "->" + lst [0].Stop_cast_pos' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("SAMPLE_WGT"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].SAMPLE_WGT' FontSong)); table.addCell(cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("DEFECT_LEVEL"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Defect_level' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("手动切割"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Manual_cut_flg' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("切割时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Cut_date' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: if (lst.Count > 0) {  	//这里开始写基本信息  	cell = new iTextSharp.text.Cell (new Paragraph ("铸坯号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Slab_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("炉号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Heat_ID' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("钢种"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Steel_grade' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("铸机号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].CCM' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("流号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Strand_no' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("PROD_COUNTER"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Prod_counter' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("PROD_NO"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Prod_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯头锥度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Taper_start' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯尾锥度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Taper_end' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("坯长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Length' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯宽"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Width' FontSong));  	table.addCell (cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("坯头宽度"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].WIDTH_HEAD' FontSong)); table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("坯尾宽度"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].WIDTH_TAIL' FontSong)); table.addCell(cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯厚"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Thickness' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯重"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Weight' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("开始时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Start_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("结束时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Stop_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("浇铸时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	TimeSpan ts = Convert.ToDateTime (lst [0].Stop_time) - Convert.ToDateTime (lst [0].Start_time);  	cell = new iTextSharp.text.Cell (new Paragraph (ts.TotalMinutes.ToString ("#0.0") + "分钟"' FontSong));  	cell.Colspan = 3;  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("浇铸长度位置"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Start_cast_pos + "->" + lst [0].Stop_cast_pos' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("SAMPLE_WGT"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].SAMPLE_WGT' FontSong)); table.addCell(cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("DEFECT_LEVEL"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Defect_level' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("手动切割"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Manual_cut_flg' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("切割时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Cut_date' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: if (lst.Count > 0) {  	//这里开始写基本信息  	cell = new iTextSharp.text.Cell (new Paragraph ("铸坯号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Slab_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("炉号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Heat_ID' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("钢种"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Steel_grade' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("铸机号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].CCM' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("流号"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Strand_no' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("PROD_COUNTER"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Prod_counter' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("PROD_NO"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Prod_no' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯头锥度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Taper_start' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯尾锥度"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Taper_end' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("坯长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Length' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯宽"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Width' FontSong));  	table.addCell (cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("坯头宽度"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].WIDTH_HEAD' FontSong)); table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("坯尾宽度"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].WIDTH_TAIL' FontSong)); table.addCell(cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯厚"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Thickness' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("坯重"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Weight' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (" "' FontSong));  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("开始时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Start_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("结束时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Stop_time' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("浇铸时长"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	TimeSpan ts = Convert.ToDateTime (lst [0].Stop_time) - Convert.ToDateTime (lst [0].Start_time);  	cell = new iTextSharp.text.Cell (new Paragraph (ts.TotalMinutes.ToString ("#0.0") + "分钟"' FontSong));  	cell.Colspan = 3;  	table.addCell (cell);  	//新行  	cell = new iTextSharp.text.Cell (new Paragraph ("浇铸长度位置"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Start_cast_pos + "->" + lst [0].Stop_cast_pos' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  	//cell = new iTextSharp.text.Cell(new Paragraph("SAMPLE_WGT"' FontKai)); cell.BackgroundColor = Color_DescCell; table.addCell(cell);  	//cell = new iTextSharp.text.Cell(new Paragraph(lst[0].SAMPLE_WGT' FontSong)); table.addCell(cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("DEFECT_LEVEL"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Defect_level' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("手动切割"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Manual_cut_flg' FontSong));  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph ("切割时间"' FontKai));  	cell.BackgroundColor = Color_DescCell;  	table.addCell (cell);  	cell = new iTextSharp.text.Cell (new Paragraph (lst [0].Cut_date' FontSong));  	cell.Colspan = 2;  	table.addCell (cell);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: cell.Colspan = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: cell.Colspan = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: cell.Colspan = 3;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: cell.Colspan = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab,The following statement contains a magic number: cell.Colspan = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_Casting,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_Casting,The following statement contains a magic number: stuDrawPicInfo.TagDecimalPlaces [TagNo] = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_Casting,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 50;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_Casting,The following statement contains a magic number: tags [2] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".CastingSupperHeatValue";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_Weight,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_Weight,The following statement contains a magic number: stuDrawPicInfo.TagDecimalPlaces [TagNo] = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_Weight,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 250;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_Weight,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 80;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_Weight,The following statement contains a magic number: tags [2] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".TD_WEIGHT";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD,The following statement contains a magic number: stuDrawPicInfo.TagDecimalPlaces [TagNo] = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 300;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD,The following statement contains a magic number: stuDrawPicInfo.TagMin [TagNo] = -10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 400;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD,The following statement contains a magic number: tags [2] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_LEVAL_DEV";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD,The following statement contains a magic number: tags [3] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MEMS_Current";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD,The following statement contains a magic number: tags [4] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MEMS_Frequency";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_WaterFlux,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_WaterFlux,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 50;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_WaterFlux,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 25000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_WaterFlux,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 25000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_WaterFlux,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 25000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_WaterFlux,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 25000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_WaterFlux,The following statement contains a magic number: tags [02] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_Loose_face_water_flow";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_WaterFlux,The following statement contains a magic number: tags [03] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_Right_face_water_flow";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_WaterFlux,The following statement contains a magic number: tags [04] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_Left_face_water_flow";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_DiffTemp,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_DiffTemp,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 20;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_DiffTemp,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 20;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_DiffTemp,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 20;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_DiffTemp,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 20;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_DiffTemp,The following statement contains a magic number: tags [02] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_Right_face_water_delta_T";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_MD_Cooling_DiffTemp,The following statement contains a magic number: tags [03] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_Left_face_water_delta_T";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_SCS,The following statement contains a magic number: for (int I = 0; I < DisSCS_LY210_CCM1.Count; I++) {  	SegmentStartTime [I] = start_time.AddSeconds (SecondPerMM * DisSCS_LY210_CCM1 [I]);  	SegmentEndTime [I] = stop_time.AddSeconds (SecondPerMM * DisSCS_LY210_CCM1 [I]);  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	int TagNo = 1;  	stuDrawPicInfo.TagDescription [TagNo] = "二冷" + I.ToString () + "段冷却水流量";  	stuDrawPicInfo.TagUnit [TagNo] = "m3/h";  	stuDrawPicInfo.TagDecimalPlaces [TagNo] = 1;  	stuDrawPicInfo.TagFormat [TagNo] = "#0.0";  	stuDrawPicInfo.YAxisIsLeft [TagNo] = false;  	stuDrawPicInfo.AutoSetRang [TagNo] = true;  	stuDrawPicInfo.TagMin [TagNo] = 0;  	stuDrawPicInfo.TagMax [TagNo] = 20;  	//绘图的数据  	string[] tags = new string[1];  	tags [00] = "LYQ210.CCM" + CCM + "S" + strand_no + "." + HisNameSCS_LY210_CCM1 [I];  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' SegmentStartTime [I]' SegmentEndTime [I]);  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (SlabID + "铸坯 浇铸过程参数"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_SCS,The following statement contains a magic number: for (int I = 0; I < DisSCS_LY210_CCM1.Count; I++) {  	SegmentStartTime [I] = start_time.AddSeconds (SecondPerMM * DisSCS_LY210_CCM1 [I]);  	SegmentEndTime [I] = stop_time.AddSeconds (SecondPerMM * DisSCS_LY210_CCM1 [I]);  	//定义  	ClsDuHisPic.StuDrawPicInfo stuDrawPicInfo = new ClsDuHisPic.StuDrawPicInfo ();  	//使用系统的初始化函数  	clsDuHisPic.Initialize_StuDrawPicInfo (ref stuDrawPicInfo);  	//更改其中某些配置  	stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  	stuDrawPicInfo.IsDrawEveryYAxis = true;  	stuDrawPicInfo.IsDisplayRelativeTime = true;  	int TagNo = 1;  	stuDrawPicInfo.TagDescription [TagNo] = "二冷" + I.ToString () + "段冷却水流量";  	stuDrawPicInfo.TagUnit [TagNo] = "m3/h";  	stuDrawPicInfo.TagDecimalPlaces [TagNo] = 1;  	stuDrawPicInfo.TagFormat [TagNo] = "#0.0";  	stuDrawPicInfo.YAxisIsLeft [TagNo] = false;  	stuDrawPicInfo.AutoSetRang [TagNo] = true;  	stuDrawPicInfo.TagMin [TagNo] = 0;  	stuDrawPicInfo.TagMax [TagNo] = 20;  	//绘图的数据  	string[] tags = new string[1];  	tags [00] = "LYQ210.CCM" + CCM + "S" + strand_no + "." + HisNameSCS_LY210_CCM1 [I];  	stuDrawPicInfo.dt = sqt.ReadDatatable_HisDB (tags' SegmentStartTime [I]' SegmentEndTime [I]);  	//输出图像  	sqt.DrawstuDrawPicInfo2pdfDocument (SlabID + "铸坯 浇铸过程参数"' stuDrawPicInfo' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_SCS,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetReportPdf_Slab_HisDB_SCS,The following statement contains a magic number: stuDrawPicInfo.TagMax [TagNo] = 20;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: tags [02] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_Loose_face_water_flow";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: tags [03] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_Right_face_water_flow";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: tags [04] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_Left_face_water_flow";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: tags [05] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_Fix_face_water_delta_T";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: tags [06] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_Loose_face_water_delta_T";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: tags [07] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_Right_face_water_delta_T";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: tags [08] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_Left_face_water_delta_T";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: tags [09] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_LEFT_FACE_EXTRACT";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: tags [10] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_LOSE_FACE_EXTRACT";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: tags [11] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_RIGHT_FACE_EXTRACT";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: tags [12] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_FIX_FACE_EXTRACT";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CC_MDCoolHisDB ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterInTempure = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Fix = Convert.ToSingle (obj);  	// MD_Fix_face_water_flow 结晶器冷却水流量(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_flow;//	结晶器冷却水流量(松开面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Right = Convert.ToSingle (obj);  	//	MD_Right_face_water_flow 结晶器冷却水流量(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterFlux_Left = Convert.ToSingle (obj);  	//	MD_Left_face_water_flow结晶器冷却水流量(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Fix = Convert.ToSingle (obj);  	//  MD_Fix_face_water_delta_T;//	结晶器冷却水温差(固定面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Loose = Convert.ToSingle (obj);  	//MD_Loose_face_water_delta_T;//	结晶器冷却水温差(松散面)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Right = Convert.ToSingle (obj);  	// MD_Right_face_water_delta_T;//	结晶器冷却水温差(右侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CoolWaterDiffTemp_Left = Convert.ToSingle (obj);  	// MD_Left_face_water_delta_T;//	结晶器冷却水温差(左侧)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Fix = Convert.ToSingle (obj);  	//MD_LEFT_FACE_EXTRACT;//	结晶器冷却：固定面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Loose = Convert.ToSingle (obj);  	//MD_LOSE_FACE_EXTRACT;//	结晶器冷却：松散面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Right = Convert.ToSingle (obj);  	//MD_RIGHT_FACE_EXTRACT	;//结晶器冷却：右侧面热流密度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HeatFlux_Left = Convert.ToSingle (obj);  	//MD_FIX_FACE_EXTRACT;//结晶器冷却：左侧面热流密度          	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_MDCoolHisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: tags [02] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".CastingSupperHeatValue";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: tags [03] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".CastingTempture";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: tags [04] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".LD_WEIGHT";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: tags [05] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_LEVAL";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: tags [06] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_LEVAL_DEV";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: tags [07] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MD_SEN_Immersion";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: tags [08] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MEMS_Current";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: tags [09] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".MEMS_Frequency";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: tags [10] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".NOZZLE_AR_FLUX";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: tags [11] = "LYQ210.CCM" + CCM + "S" + StrandNo + ".TD_WEIGHT";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	CC_HisData0 lst = new CC_HisData0 ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CastingLength = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CastingSpeed = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.CastingSupperHeatValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.CastingTempture = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.LD_WEIGHT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL = Convert.ToSingle (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL_DEV = Convert.ToSingle (obj);  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.MD_SEN_Immersion = Convert.ToSingle (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Current = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Frequency = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.NOZZLE_AR_FLUX = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TD_WEIGHT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	CC_HisData0 lst = new CC_HisData0 ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CastingLength = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CastingSpeed = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.CastingSupperHeatValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.CastingTempture = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.LD_WEIGHT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL = Convert.ToSingle (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL_DEV = Convert.ToSingle (obj);  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.MD_SEN_Immersion = Convert.ToSingle (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Current = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Frequency = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.NOZZLE_AR_FLUX = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TD_WEIGHT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	CC_HisData0 lst = new CC_HisData0 ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CastingLength = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CastingSpeed = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.CastingSupperHeatValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.CastingTempture = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.LD_WEIGHT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL = Convert.ToSingle (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL_DEV = Convert.ToSingle (obj);  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.MD_SEN_Immersion = Convert.ToSingle (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Current = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Frequency = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.NOZZLE_AR_FLUX = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TD_WEIGHT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	CC_HisData0 lst = new CC_HisData0 ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CastingLength = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CastingSpeed = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.CastingSupperHeatValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.CastingTempture = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.LD_WEIGHT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL = Convert.ToSingle (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL_DEV = Convert.ToSingle (obj);  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.MD_SEN_Immersion = Convert.ToSingle (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Current = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Frequency = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.NOZZLE_AR_FLUX = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TD_WEIGHT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	CC_HisData0 lst = new CC_HisData0 ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CastingLength = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CastingSpeed = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.CastingSupperHeatValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.CastingTempture = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.LD_WEIGHT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL = Convert.ToSingle (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL_DEV = Convert.ToSingle (obj);  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.MD_SEN_Immersion = Convert.ToSingle (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Current = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Frequency = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.NOZZLE_AR_FLUX = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TD_WEIGHT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	CC_HisData0 lst = new CC_HisData0 ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CastingLength = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CastingSpeed = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.CastingSupperHeatValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.CastingTempture = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.LD_WEIGHT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL = Convert.ToSingle (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL_DEV = Convert.ToSingle (obj);  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.MD_SEN_Immersion = Convert.ToSingle (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Current = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Frequency = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.NOZZLE_AR_FLUX = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TD_WEIGHT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	CC_HisData0 lst = new CC_HisData0 ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CastingLength = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CastingSpeed = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.CastingSupperHeatValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.CastingTempture = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.LD_WEIGHT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL = Convert.ToSingle (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL_DEV = Convert.ToSingle (obj);  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.MD_SEN_Immersion = Convert.ToSingle (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Current = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Frequency = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.NOZZLE_AR_FLUX = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TD_WEIGHT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	CC_HisData0 lst = new CC_HisData0 ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CastingLength = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CastingSpeed = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.CastingSupperHeatValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.CastingTempture = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.LD_WEIGHT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL = Convert.ToSingle (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL_DEV = Convert.ToSingle (obj);  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.MD_SEN_Immersion = Convert.ToSingle (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Current = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Frequency = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.NOZZLE_AR_FLUX = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TD_WEIGHT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	CC_HisData0 lst = new CC_HisData0 ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CastingLength = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CastingSpeed = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.CastingSupperHeatValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.CastingTempture = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.LD_WEIGHT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL = Convert.ToSingle (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL_DEV = Convert.ToSingle (obj);  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.MD_SEN_Immersion = Convert.ToSingle (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Current = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Frequency = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.NOZZLE_AR_FLUX = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TD_WEIGHT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	CC_HisData0 lst = new CC_HisData0 ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CastingLength = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CastingSpeed = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.CastingSupperHeatValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.CastingTempture = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.LD_WEIGHT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL = Convert.ToSingle (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL_DEV = Convert.ToSingle (obj);  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.MD_SEN_Immersion = Convert.ToSingle (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Current = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Frequency = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.NOZZLE_AR_FLUX = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TD_WEIGHT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	CC_HisData0 lst = new CC_HisData0 ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CastingLength = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CastingSpeed = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.CastingSupperHeatValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.CastingTempture = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.LD_WEIGHT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL = Convert.ToSingle (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL_DEV = Convert.ToSingle (obj);  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.MD_SEN_Immersion = Convert.ToSingle (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Current = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Frequency = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.NOZZLE_AR_FLUX = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TD_WEIGHT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	CC_HisData0 lst = new CC_HisData0 ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CastingLength = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.CastingSpeed = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.CastingSupperHeatValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.CastingTempture = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.LD_WEIGHT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL = Convert.ToSingle (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.MD_LEVAL_DEV = Convert.ToSingle (obj);  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.MD_SEN_Immersion = Convert.ToSingle (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Current = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.MEMS_Frequency = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.NOZZLE_AR_FLUX = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TD_WEIGHT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [04];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [05];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [06];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [07];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [08];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [09];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [10];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [11];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetCC_HisData0_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [12];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: tags [2] = "LYQ210.BOF" + bof_campaign + ".ContentCO2";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: tags [3] = "LYQ210.BOF" + bof_campaign + ".ACT_INCLINE_ANGLE";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: tags [4] = "LYQ210.BOF" + bof_campaign + ".ACT_LANCE_HEIGHT";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: tags [5] = "LYQ210.BOF" + bof_campaign + ".ACT_O2_FLUX";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: tags [6] = "LYQ210.BOF" + bof_campaign + ".ACT_N2_FLUX";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: tags [7] = "LYQ210.BOF" + bof_campaign + ".ACT_AR_FLUX";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: tags [8] = "LYQ210.BOF" + bof_campaign + ".ACT_BATH_LEVEL";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	BOF_HisDB lst = new BOF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalSeconds / 60;  	lst.O2 = Convert.ToSingle (dt.Rows [I] [1]);  	lst.CO = Convert.ToSingle (dt.Rows [I] [2]);  	lst.CO2 = Convert.ToSingle (dt.Rows [I] [3]);  	lst.ACT_INCLINE_ANGLE = Convert.ToSingle (dt.Rows [I] [4]);  	lst.ACT_LANCE_HEIGHT = Convert.ToSingle (dt.Rows [I] [5]);  	lst.ACT_O2_FLUX = Convert.ToSingle (dt.Rows [I] [6]);  	lst.ACT_N2_FLUX = Convert.ToSingle (dt.Rows [I] [7]);  	lst.ACT_AR_FLUX = Convert.ToSingle (dt.Rows [I] [8]);  	lst.ACT_BATH_LEVEL = Convert.ToSingle (dt.Rows [I] [9]);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	BOF_HisDB lst = new BOF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalSeconds / 60;  	lst.O2 = Convert.ToSingle (dt.Rows [I] [1]);  	lst.CO = Convert.ToSingle (dt.Rows [I] [2]);  	lst.CO2 = Convert.ToSingle (dt.Rows [I] [3]);  	lst.ACT_INCLINE_ANGLE = Convert.ToSingle (dt.Rows [I] [4]);  	lst.ACT_LANCE_HEIGHT = Convert.ToSingle (dt.Rows [I] [5]);  	lst.ACT_O2_FLUX = Convert.ToSingle (dt.Rows [I] [6]);  	lst.ACT_N2_FLUX = Convert.ToSingle (dt.Rows [I] [7]);  	lst.ACT_AR_FLUX = Convert.ToSingle (dt.Rows [I] [8]);  	lst.ACT_BATH_LEVEL = Convert.ToSingle (dt.Rows [I] [9]);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	BOF_HisDB lst = new BOF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalSeconds / 60;  	lst.O2 = Convert.ToSingle (dt.Rows [I] [1]);  	lst.CO = Convert.ToSingle (dt.Rows [I] [2]);  	lst.CO2 = Convert.ToSingle (dt.Rows [I] [3]);  	lst.ACT_INCLINE_ANGLE = Convert.ToSingle (dt.Rows [I] [4]);  	lst.ACT_LANCE_HEIGHT = Convert.ToSingle (dt.Rows [I] [5]);  	lst.ACT_O2_FLUX = Convert.ToSingle (dt.Rows [I] [6]);  	lst.ACT_N2_FLUX = Convert.ToSingle (dt.Rows [I] [7]);  	lst.ACT_AR_FLUX = Convert.ToSingle (dt.Rows [I] [8]);  	lst.ACT_BATH_LEVEL = Convert.ToSingle (dt.Rows [I] [9]);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	BOF_HisDB lst = new BOF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalSeconds / 60;  	lst.O2 = Convert.ToSingle (dt.Rows [I] [1]);  	lst.CO = Convert.ToSingle (dt.Rows [I] [2]);  	lst.CO2 = Convert.ToSingle (dt.Rows [I] [3]);  	lst.ACT_INCLINE_ANGLE = Convert.ToSingle (dt.Rows [I] [4]);  	lst.ACT_LANCE_HEIGHT = Convert.ToSingle (dt.Rows [I] [5]);  	lst.ACT_O2_FLUX = Convert.ToSingle (dt.Rows [I] [6]);  	lst.ACT_N2_FLUX = Convert.ToSingle (dt.Rows [I] [7]);  	lst.ACT_AR_FLUX = Convert.ToSingle (dt.Rows [I] [8]);  	lst.ACT_BATH_LEVEL = Convert.ToSingle (dt.Rows [I] [9]);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	BOF_HisDB lst = new BOF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalSeconds / 60;  	lst.O2 = Convert.ToSingle (dt.Rows [I] [1]);  	lst.CO = Convert.ToSingle (dt.Rows [I] [2]);  	lst.CO2 = Convert.ToSingle (dt.Rows [I] [3]);  	lst.ACT_INCLINE_ANGLE = Convert.ToSingle (dt.Rows [I] [4]);  	lst.ACT_LANCE_HEIGHT = Convert.ToSingle (dt.Rows [I] [5]);  	lst.ACT_O2_FLUX = Convert.ToSingle (dt.Rows [I] [6]);  	lst.ACT_N2_FLUX = Convert.ToSingle (dt.Rows [I] [7]);  	lst.ACT_AR_FLUX = Convert.ToSingle (dt.Rows [I] [8]);  	lst.ACT_BATH_LEVEL = Convert.ToSingle (dt.Rows [I] [9]);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	BOF_HisDB lst = new BOF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalSeconds / 60;  	lst.O2 = Convert.ToSingle (dt.Rows [I] [1]);  	lst.CO = Convert.ToSingle (dt.Rows [I] [2]);  	lst.CO2 = Convert.ToSingle (dt.Rows [I] [3]);  	lst.ACT_INCLINE_ANGLE = Convert.ToSingle (dt.Rows [I] [4]);  	lst.ACT_LANCE_HEIGHT = Convert.ToSingle (dt.Rows [I] [5]);  	lst.ACT_O2_FLUX = Convert.ToSingle (dt.Rows [I] [6]);  	lst.ACT_N2_FLUX = Convert.ToSingle (dt.Rows [I] [7]);  	lst.ACT_AR_FLUX = Convert.ToSingle (dt.Rows [I] [8]);  	lst.ACT_BATH_LEVEL = Convert.ToSingle (dt.Rows [I] [9]);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	BOF_HisDB lst = new BOF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalSeconds / 60;  	lst.O2 = Convert.ToSingle (dt.Rows [I] [1]);  	lst.CO = Convert.ToSingle (dt.Rows [I] [2]);  	lst.CO2 = Convert.ToSingle (dt.Rows [I] [3]);  	lst.ACT_INCLINE_ANGLE = Convert.ToSingle (dt.Rows [I] [4]);  	lst.ACT_LANCE_HEIGHT = Convert.ToSingle (dt.Rows [I] [5]);  	lst.ACT_O2_FLUX = Convert.ToSingle (dt.Rows [I] [6]);  	lst.ACT_N2_FLUX = Convert.ToSingle (dt.Rows [I] [7]);  	lst.ACT_AR_FLUX = Convert.ToSingle (dt.Rows [I] [8]);  	lst.ACT_BATH_LEVEL = Convert.ToSingle (dt.Rows [I] [9]);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	BOF_HisDB lst = new BOF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalSeconds / 60;  	lst.O2 = Convert.ToSingle (dt.Rows [I] [1]);  	lst.CO = Convert.ToSingle (dt.Rows [I] [2]);  	lst.CO2 = Convert.ToSingle (dt.Rows [I] [3]);  	lst.ACT_INCLINE_ANGLE = Convert.ToSingle (dt.Rows [I] [4]);  	lst.ACT_LANCE_HEIGHT = Convert.ToSingle (dt.Rows [I] [5]);  	lst.ACT_O2_FLUX = Convert.ToSingle (dt.Rows [I] [6]);  	lst.ACT_N2_FLUX = Convert.ToSingle (dt.Rows [I] [7]);  	lst.ACT_AR_FLUX = Convert.ToSingle (dt.Rows [I] [8]);  	lst.ACT_BATH_LEVEL = Convert.ToSingle (dt.Rows [I] [9]);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	BOF_HisDB lst = new BOF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalSeconds / 60;  	lst.O2 = Convert.ToSingle (dt.Rows [I] [1]);  	lst.CO = Convert.ToSingle (dt.Rows [I] [2]);  	lst.CO2 = Convert.ToSingle (dt.Rows [I] [3]);  	lst.ACT_INCLINE_ANGLE = Convert.ToSingle (dt.Rows [I] [4]);  	lst.ACT_LANCE_HEIGHT = Convert.ToSingle (dt.Rows [I] [5]);  	lst.ACT_O2_FLUX = Convert.ToSingle (dt.Rows [I] [6]);  	lst.ACT_N2_FLUX = Convert.ToSingle (dt.Rows [I] [7]);  	lst.ACT_AR_FLUX = Convert.ToSingle (dt.Rows [I] [8]);  	lst.ACT_BATH_LEVEL = Convert.ToSingle (dt.Rows [I] [9]);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: lst.Duration = (float)ts.TotalSeconds / 60;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: lst.CO = Convert.ToSingle (dt.Rows [I] [2]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: lst.CO2 = Convert.ToSingle (dt.Rows [I] [3]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: lst.ACT_INCLINE_ANGLE = Convert.ToSingle (dt.Rows [I] [4]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: lst.ACT_LANCE_HEIGHT = Convert.ToSingle (dt.Rows [I] [5]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: lst.ACT_O2_FLUX = Convert.ToSingle (dt.Rows [I] [6]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: lst.ACT_N2_FLUX = Convert.ToSingle (dt.Rows [I] [7]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: lst.ACT_AR_FLUX = Convert.ToSingle (dt.Rows [I] [8]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetBOF_WasteGas_HisDB,The following statement contains a magic number: lst.ACT_BATH_LEVEL = Convert.ToSingle (dt.Rows [I] [9]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: tags [02] = "LYQ210.LF" + LF_Station + ".EleTran_PriSide_Curr_A";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: tags [03] = "LYQ210.LF" + LF_Station + ".EleTran_SecSide_Voltage_A";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: tags [04] = "LYQ210.LF" + LF_Station + ".EleTran_SecSide_Curr_A";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: tags [05] = "LYQ210.LF" + LF_Station + ".EleTran_SecSide_Curr_B";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: tags [06] = "LYQ210.LF" + LF_Station + ".EleTran_SecSide_Curr_C";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: tags [07] = "LYQ210.LF" + LF_Station + ".Trolley" + TrolleyNo + "_BotGasType";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: tags [08] = "LYQ210.LF" + LF_Station + ".Trolley" + TrolleyNo + "_BotGasPrss";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: tags [09] = "LYQ210.LF" + LF_Station + ".Trolley" + TrolleyNo + "_BotGasFlux";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: tags [10] = "LYQ210.LF" + LF_Station + ".Trolley" + TrolleyNo + "_TopGasType";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: tags [11] = "LYQ210.LF" + LF_Station + ".Trolley" + TrolleyNo + "_TopGasPrss";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: tags [12] = "LYQ210.LF" + LF_Station + ".Trolley" + TrolleyNo + "_TopGasFlux";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new LF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.SetTapNo = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PriSideVoltageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PriSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SecSideVlotageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentC = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BotGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BotGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TopGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.TopGasFlux = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new LF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.SetTapNo = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PriSideVoltageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PriSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SecSideVlotageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentC = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BotGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BotGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TopGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.TopGasFlux = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new LF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.SetTapNo = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PriSideVoltageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PriSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SecSideVlotageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentC = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BotGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BotGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TopGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.TopGasFlux = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new LF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.SetTapNo = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PriSideVoltageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PriSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SecSideVlotageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentC = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BotGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BotGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TopGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.TopGasFlux = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new LF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.SetTapNo = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PriSideVoltageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PriSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SecSideVlotageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentC = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BotGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BotGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TopGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.TopGasFlux = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new LF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.SetTapNo = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PriSideVoltageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PriSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SecSideVlotageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentC = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BotGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BotGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TopGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.TopGasFlux = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new LF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.SetTapNo = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PriSideVoltageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PriSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SecSideVlotageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentC = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BotGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BotGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TopGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.TopGasFlux = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new LF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.SetTapNo = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PriSideVoltageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PriSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SecSideVlotageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentC = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BotGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BotGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TopGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.TopGasFlux = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new LF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.SetTapNo = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PriSideVoltageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PriSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SecSideVlotageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentC = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BotGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BotGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TopGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.TopGasFlux = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new LF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.SetTapNo = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PriSideVoltageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PriSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SecSideVlotageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentC = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BotGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BotGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TopGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.TopGasFlux = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new LF_HisDB ();  	TimeSpan ts = Convert.ToDateTime (dt.Rows [I] [0]) - TimeStart;  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.SetTapNo = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PriSideVoltageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PriSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SecSideVlotageA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentA = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentB = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SecSideCurrentC = Convert.ToInt32 (obj);  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BotGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BotGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.TopGasPrss = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.TopGasFlux = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [04];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [05];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [06];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [07];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [09];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [10];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [12];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetLF_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [13];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: tags [2] = "LYQ210.RH" + RH_Station + ".CycBlowingO2Flow";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: tags [3] = "LYQ210.RH" + RH_Station + ".FluxAr";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: tags [4] = "LYQ210.RH" + RH_Station + ".FluxN2";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: tags [5] = "LYQ210.RH" + RH_Station + ".FluxO2";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: tags [6] = "LYQ210.RH" + RH_Station + ".FlueGasAr";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: tags [7] = "LYQ210.RH" + RH_Station + ".FlueGasCO";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: tags [8] = "LYQ210.RH" + RH_Station + ".FlueGasCO2";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: tags [9] = "LYQ210.RH" + RH_Station + ".FlueGasFlux";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: tags [10] = "LYQ210.RH" + RH_Station + ".FlueGasH2";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: tags [11] = "LYQ210.RH" + RH_Station + ".ProcVolPlug1Stir";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: tags [12] = "LYQ210.RH" + RH_Station + ".ProcVolPlug2Stir";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	RH_HisDB lst = new RH_HisDB ();  	lst.datetime = Convert.ToDateTime (dt.Rows [I] [0]);  	TimeSpan ts = Convert.ToDateTime (lst.datetime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	obj = dt.Rows [I] [1];  	if (null != obj)  		lst.VacuumValue = Convert.ToSingle (obj);  	obj = dt.Rows [I] [2];  	if (null != obj)  		lst.CycArFlowLift = Convert.ToSingle (obj);  	obj = dt.Rows [I] [3];  	if (obj.ToString ().Length > 0)  		lst.CycBlowingO2Flow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [4];  	if (null != obj)  		lst.FluxAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [5];  	if (null != obj)  		lst.FluxN2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [6];  	if (obj.ToString ().Length > 0)  		lst.FluxO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [7];  	if (null != obj)  		lst.FlueGasAr = Convert.ToSingle (obj);  	obj = dt.Rows [I] [8];  	if (null != obj)  		lst.FlueGasCO = Convert.ToSingle (obj);  	obj = dt.Rows [I] [9];  	if (null != obj)  		lst.FlueGasCO2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [10];  	if (null != obj)  		lst.FlueGasFlux = Convert.ToSingle (obj);  	obj = dt.Rows [I] [11];  	if (null != obj)  		lst.FlueGasH2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug1Stir = Convert.ToSingle (obj);  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.ProcVolPlug2Stir = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [2];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [3];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [4];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [5];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [6];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [7];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [8];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [9];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [10];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [11];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [12];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetRH_HisDB,The following statement contains a magic number: obj = dt.Rows [I] [13];  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHeatIDList,The following statement contains a magic number: if (schStartTime.Length > 5)  	strSQL = strSQL + " AND ready_time >= to_date('" + schStartTime + " 00:00:01'' 'yyyy-mm-dd hh24:mi:ss')" + " AND ready_time <= to_date('" + schEndTime + " 23:59:59'' 'yyyy-mm-dd hh24:mi:ss')";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHeatIDList,The following statement contains a magic number: if (SteelGrade.Length > 2)  	strSQL = strSQL + " AND steel_grade='" + SteelGrade + "'";  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHEAT_TRACK_ByDataRow,The following statement contains a magic number: switch (DEVICE_NO.Substring (0' 2)) {  case "MI":  	lst.MI_Station = "1#";  	lst.MI_Arrive_Time = dr ["start_time"].ToString ();  	lst.MI_Leave_Time = dr ["stop_time"].ToString ();  	if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) {  		ts = Leave_Time - Arrive_Time;  		lst.MI_Duration = ts.TotalMinutes.ToString ("#0.0");  	}  	break;  case "KR":  	lst.KR_Station = DEVICE_NO.Substring (DEVICE_NO.Length - 1) + "#";  	lst.KR_Arrive_Time = dr ["start_time"].ToString ();  	lst.KR_Leave_Time = dr ["stop_time"].ToString ();  	if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) {  		ts = Leave_Time - Arrive_Time;  		lst.KR_Duration = ts.TotalMinutes.ToString ("#0.0");  	}  	break;  case "BO":  	lst.BOF_Station = DEVICE_NO.Substring (DEVICE_NO.Length - 1) + "#";  	lst.BOF_Arrive_Time = dr ["start_time"].ToString ();  	lst.BOF_Leave_Time = dr ["stop_time"].ToString ();  	if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) {  		ts = Leave_Time - Arrive_Time;  		lst.BOF_Duration = ts.TotalMinutes.ToString ("#0.0");  	}  	break;  case "LF":  	lst.LF_Station = DEVICE_NO.Substring (DEVICE_NO.Length - 1) + "#";  	lst.LF_Arrive_Time = dr ["start_time"].ToString ();  	lst.LF_Leave_Time = dr ["stop_time"].ToString ();  	if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) {  		ts = Leave_Time - Arrive_Time;  		lst.LF_Duration = ts.TotalMinutes.ToString ("#0.0");  	}  	break;  case "RH":  	lst.RH_Station = DEVICE_NO.Substring (DEVICE_NO.Length - 1) + "#";  	lst.RH_Arrive_Time = dr ["start_time"].ToString ();  	lst.RH_Leave_Time = dr ["stop_time"].ToString ();  	if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) {  		ts = Leave_Time - Arrive_Time;  		lst.RH_Duration = ts.TotalMinutes.ToString ("#0.0");  	}  	break;  case "CC":  	lst.CC_Station = DEVICE_NO.Substring (DEVICE_NO.Length - 1) + "#";  	lst.CC_Arrive_Time = dr ["start_time"].ToString ();  	lst.CC_Leave_Time = dr ["stop_time"].ToString ();  	if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) {  		ts = Leave_Time - Arrive_Time;  		lst.CC_Duration = ts.TotalMinutes.ToString ("#0.0");  	}  	break;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,DefinePdfFont,The following statement contains a magic number: FontHei = new iTextSharp.text.Font (bfHei' 32' 1);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,DefinePdfFont,The following statement contains a magic number: FontKai = new iTextSharp.text.Font (bfKai' 32' 1);  
Magic Number,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,DefinePdfFont,The following statement contains a magic number: FontSong = new iTextSharp.text.Font (bfSun' 32' 1);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_PreHeat,The following statement contains a magic number: tags [02] = "LYQ2250.HF" + HF_Station + ".PSBottomA";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_PreHeat,The following statement contains a magic number: tags [03] = "LYQ2250.HF" + HF_Station + ".PSBottomB";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_PreHeat,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_PreHeat,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_PreHeat,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_PreHeat,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_PreHeat,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_PreHeat,The following statement contains a magic number: str = dt.Rows [I] [02].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_PreHeat,The following statement contains a magic number: str = dt.Rows [I] [03].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_PreHeat,The following statement contains a magic number: str = dt.Rows [I] [04].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_SZ1,The following statement contains a magic number: tags [02] = "LYQ2250.HF" + HF_Station + ".SZ1BottomA";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_SZ1,The following statement contains a magic number: tags [03] = "LYQ2250.HF" + HF_Station + ".SZ1BottomB";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_SZ1,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	HisDB_HF lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列                	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_SZ1,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	HisDB_HF lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列                	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_SZ1,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	HisDB_HF lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列                	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_SZ1,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	HisDB_HF lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列                	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_SZ1,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_SZ1,The following statement contains a magic number: str = dt.Rows [I] [02].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_SZ1,The following statement contains a magic number: str = dt.Rows [I] [03].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_SZ1,The following statement contains a magic number: str = dt.Rows [I] [04].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ1,The following statement contains a magic number: tags [2] = "LYQ2250.HF" + HF_Station + ".HZ1BottomA";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ1,The following statement contains a magic number: tags [3] = "LYQ2250.HF" + HF_Station + ".HZ1BottomB";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ1,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	HisDB_HF lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ1,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	HisDB_HF lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ1,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	HisDB_HF lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ1,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	HisDB_HF lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ1,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ1,The following statement contains a magic number: str = dt.Rows [I] [02].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ1,The following statement contains a magic number: str = dt.Rows [I] [03].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ1,The following statement contains a magic number: str = dt.Rows [I] [04].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ2,The following statement contains a magic number: tags [02] = "LYQ2250.HF" + HF_Station + ".HZ2BottomA";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ2,The following statement contains a magic number: tags [03] = "LYQ2250.HF" + HF_Station + ".HZ2BottomB";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ2,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	HisDB_HF lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalSeconds;  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ2,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	HisDB_HF lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalSeconds;  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ2,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	HisDB_HF lst = new HisDB_HF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalSeconds;  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.TopA = Convert.ToSingle (str);  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.TopB = Convert.ToSingle (str);  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BottomA = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.BottomB = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ2,The following statement contains a magic number: str = dt.Rows [I] [02].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ2,The following statement contains a magic number: str = dt.Rows [I] [03].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHisDB_HF_HZ2,The following statement contains a magic number: str = dt.Rows [I] [04].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetLY2250SlabNoInfo,The following statement contains a magic number: if (SteelGrade.Length > 2)  	strSQL = strSQL + " AND Steel_Grade='" + SteelGrade + "'";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [02] = "LYQ2250.F" + FR_ID + ".BS";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [03] = "LYQ2250.F" + FR_ID + ".DraftSet";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [04] = "LYQ2250.F" + FR_ID + ".DSGap";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [05] = "LYQ2250.F" + FR_ID + ".FS";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [06] = "LYQ2250.F" + FR_ID + ".GapSet";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [07] = "LYQ2250.F" + FR_ID + ".LENGTH";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [08] = "LYQ2250.F" + FR_ID + ".OilFilm";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [09] = "LYQ2250.F" + FR_ID + ".OSGap";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [10] = "LYQ2250.F" + FR_ID + ".RollForce";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [11] = "LYQ2250.F" + FR_ID + ".RollForceSet";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [12] = "LYQ2250.F" + FR_ID + ".ShiftBot";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [13] = "LYQ2250.F" + FR_ID + ".ShiftSet";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [14] = "LYQ2250.F" + FR_ID + ".ShiftTop";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [15] = "LYQ2250.F" + FR_ID + ".Speed";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [16] = "LYQ2250.F" + FR_ID + ".SpeedSet";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [17] = "LYQ2250.F" + FR_ID + ".Tension";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [18] = "LYQ2250.F" + FR_ID + ".TensionSet";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [19] = "LYQ2250.F" + FR_ID + ".Torque";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [20] = "LYQ2250.F" + FR_ID + ".WaterFlow";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [21] = "LYQ2250.F" + FR_ID + ".WRWaterFlow";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [22] = "LYQ2250.F" + FR_ID + ".AGC_ON";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [23] = "LYQ2250.F" + FR_ID + ".ON";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: tags [24] = "LYQ2250.F" + FR_ID + ".WaterOn";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_FR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.BendForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.BS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.DraftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FS = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.GapSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.OilFilm = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.RollForceSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.ShiftBot = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.ShiftSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.ShiftTop = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Speed = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.SpeedSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Tension = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.TensionSet = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Torque = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.WaterFlow = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.WRWaterFlow = Convert.ToSingle (str);  	//  	lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  	//数字量  	lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  	//数字量  	lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  	//数字量  	//只有长度大于0才采集  	if (lst.LENGTH > 0)  		LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [02].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [03].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [04].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [05].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [06].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [07].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [08].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [09].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [10].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [11].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [12].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [13].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [14].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [15].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [16].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [17].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [18].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [19].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [20].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [21].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: str = dt.Rows [I] [22].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: lst.AGC_ON = Convert.ToBoolean (dt.Rows [I] [23]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: lst.ON = Convert.ToBoolean (dt.Rows [I] [24]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_FR,The following statement contains a magic number: lst.WaterOn = Convert.ToBoolean (dt.Rows [I] [25]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [02] = "LYQ2250.UFC.Hpress_All_Water_press_1";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [03] = "LYQ2250.UFC.Hpress1_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [04] = "LYQ2250.UFC.Hpress1_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [05] = "LYQ2250.UFC.Hpress2_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [06] = "LYQ2250.UFC.Hpress2_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [07] = "LYQ2250.UFC.Hpress3_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [08] = "LYQ2250.UFC.Hpress3_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [09] = "LYQ2250.UFC.Hpress4_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [10] = "LYQ2250.UFC.Hpress4_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [11] = "LYQ2250.UFC.Hpress5_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [12] = "LYQ2250.UFC.Hpress5_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [13] = "LYQ2250.UFC.Hpres6_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [14] = "LYQ2250.UFC.Hpress6_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [15] = "LYQ2250.UFC.Hpres7_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [16] = "LYQ2250.UFC.Hpress7_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [17] = "LYQ2250.UFC.Hpres8_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [18] = "LYQ2250.UFC.Hpres8_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [19] = "LYQ2250.UFC.Hpres9_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [20] = "LYQ2250.UFC.Hpres9_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [21] = "LYQ2250.UFC.Hpres10_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [22] = "LYQ2250.UFC.Hpres10_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [23] = "LYQ2250.UFC.Hpres11_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [24] = "LYQ2250.UFC.Hpres11_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [25] = "LYQ2250.UFC.Hpres12_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [26] = "LYQ2250.UFC.Hpres12_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [27] = "LYQ2250.UFC.Hpres13_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [28] = "LYQ2250.UFC.Hpres13_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [29] = "LYQ2250.UFC.Hpres14_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [30] = "LYQ2250.UFC.Hpres14_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [31] = "LYQ2250.UFC.Hpres15_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [32] = "LYQ2250.UFC.Hpres15_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [33] = "LYQ2250.UFC.Hpres16_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [34] = "LYQ2250.UFC.Hpres16_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [35] = "LYQ2250.UFC.Hpres17_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [36] = "LYQ2250.UFC.Hpres17_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [37] = "LYQ2250.UFC.Hpres18_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [38] = "LYQ2250.UFC.Hpres18_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [39] = "LYQ2250.UFC.Hpres19_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [40] = "LYQ2250.UFC.Hpres19_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [41] = "LYQ2250.UFC.Hpres20_Dn_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: tags [42] = "LYQ2250.UFC.Hpres20_Up_flux_act";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_UFC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.UFCTselect = Convert.ToSingle (str);  	//	Analog	超快冷出口温度  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.Water_temperature = Convert.ToSingle (str);  	//	Analog	超快冷水温  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.Hpress_All_Water_press_1 = Convert.ToSingle (str);  	//	Analog	超快冷水压  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#下集管流量  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.Hpress1_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷1#上集管流量  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#下集管流量  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.Hpress2_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷2#上集管流量  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#下集管流量  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.Hpress3_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷3#上集管流量  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#下集管流量  	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.Hpress4_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷4#上集管流量  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#下集管流量  	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.Hpress5_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷5#上集管流量  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.Hpres6_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#上集管流量  	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.Hpress6_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷6#下集管流量  	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.Hpres7_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#上集管流量  	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.Hpress7_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷7#下集管流量  	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#上集管流量  	str = dt.Rows [I] [19].ToString ();  	if (str.Length > 0)  		lst.Hpres8_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷8#下集管流量  	str = dt.Rows [I] [20].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#下集管流量  	str = dt.Rows [I] [21].ToString ();  	if (str.Length > 0)  		lst.Hpres9_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷9#上集管流量  	str = dt.Rows [I] [22].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#下集管流量  	str = dt.Rows [I] [23].ToString ();  	if (str.Length > 0)  		lst.Hpres10_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷10#上集管流量  	str = dt.Rows [I] [24].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#下集管流量  	str = dt.Rows [I] [25].ToString ();  	if (str.Length > 0)  		lst.Hpres11_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷11#上集管流量  	str = dt.Rows [I] [26].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#下集管流量  	str = dt.Rows [I] [27].ToString ();  	if (str.Length > 0)  		lst.Hpres12_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷12#上集管流量  	str = dt.Rows [I] [28].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#下集管流量  	str = dt.Rows [I] [29].ToString ();  	if (str.Length > 0)  		lst.Hpres13_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷13#上集管流量  	str = dt.Rows [I] [30].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#下集管流量  	str = dt.Rows [I] [31].ToString ();  	if (str.Length > 0)  		lst.Hpres14_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷14#上集管流量  	str = dt.Rows [I] [32].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#下集管流量  	str = dt.Rows [I] [33].ToString ();  	if (str.Length > 0)  		lst.Hpres15_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷15#上集管流量  	str = dt.Rows [I] [34].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#下集管流量  	str = dt.Rows [I] [35].ToString ();  	if (str.Length > 0)  		lst.Hpres16_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷16#上集管流量  	str = dt.Rows [I] [36].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#下集管流量  	str = dt.Rows [I] [37].ToString ();  	if (str.Length > 0)  		lst.Hpres17_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷17#上集管流量  	str = dt.Rows [I] [38].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#下集管流量  	str = dt.Rows [I] [39].ToString ();  	if (str.Length > 0)  		lst.Hpres18_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷18#上集管流量  	str = dt.Rows [I] [40].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#下集管流量  	str = dt.Rows [I] [41].ToString ();  	if (str.Length > 0)  		lst.Hpres19_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷19#上集管流量  	str = dt.Rows [I] [42].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Dn_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#下集管流量  	str = dt.Rows [I] [43].ToString ();  	if (str.Length > 0)  		lst.Hpres20_Up_flux_act = Convert.ToSingle (str);  	//	Analog	超快冷20#上集管流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [02].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [03].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [04].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [05].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [06].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [07].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [08].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [09].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [10].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [11].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [12].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [13].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [14].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [15].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [16].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [17].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [18].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [19].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [20].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [21].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [22].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [23].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [24].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [25].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [26].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [27].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [28].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [29].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [30].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [31].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [32].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [33].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [34].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [35].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [36].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [37].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [38].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [39].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [40].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [41].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [42].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_UFC,The following statement contains a magic number: str = dt.Rows [I] [43].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: tags [02] = "LYQ2250.CTC.CT_SPEED";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: tags [03] = "LYQ2250.CTC.CT_TARGET";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: tags [04] = "LYQ2250.CTC.FDT";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: tags [05] = "LYQ2250.CTC.FET";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: tags [06] = "LYQ2250.CTC.MT";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: tags [07] = "LYQ2250.CTC.MT_LENGTH";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: tags [08] = "LYQ2250.CTC.MT_SPEED";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: tags [09] = "LYQ2250.CTC.CT_ENABLE";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: tags [10] = "LYQ2250.CTC.CT_ON";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: tags [11] = "LYQ2250.CTC.MT_ON";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_CTC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.CT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.CT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.CT_SPEED = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.CT_TARGET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.FDT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MT_SPEED = Convert.ToSingle (str);  	//  	lst.CT_ENABLE = Convert.ToBoolean (dt.Rows [I] [10]);  	//  	lst.CT_ON = Convert.ToBoolean (dt.Rows [I] [11]);  	//  	lst.MT_ON = Convert.ToBoolean (dt.Rows [I] [12]);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_CTC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.CT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.CT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.CT_SPEED = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.CT_TARGET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.FDT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MT_SPEED = Convert.ToSingle (str);  	//  	lst.CT_ENABLE = Convert.ToBoolean (dt.Rows [I] [10]);  	//  	lst.CT_ON = Convert.ToBoolean (dt.Rows [I] [11]);  	//  	lst.MT_ON = Convert.ToBoolean (dt.Rows [I] [12]);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_CTC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.CT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.CT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.CT_SPEED = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.CT_TARGET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.FDT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MT_SPEED = Convert.ToSingle (str);  	//  	lst.CT_ENABLE = Convert.ToBoolean (dt.Rows [I] [10]);  	//  	lst.CT_ON = Convert.ToBoolean (dt.Rows [I] [11]);  	//  	lst.MT_ON = Convert.ToBoolean (dt.Rows [I] [12]);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_CTC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.CT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.CT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.CT_SPEED = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.CT_TARGET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.FDT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MT_SPEED = Convert.ToSingle (str);  	//  	lst.CT_ENABLE = Convert.ToBoolean (dt.Rows [I] [10]);  	//  	lst.CT_ON = Convert.ToBoolean (dt.Rows [I] [11]);  	//  	lst.MT_ON = Convert.ToBoolean (dt.Rows [I] [12]);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_CTC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.CT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.CT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.CT_SPEED = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.CT_TARGET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.FDT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MT_SPEED = Convert.ToSingle (str);  	//  	lst.CT_ENABLE = Convert.ToBoolean (dt.Rows [I] [10]);  	//  	lst.CT_ON = Convert.ToBoolean (dt.Rows [I] [11]);  	//  	lst.MT_ON = Convert.ToBoolean (dt.Rows [I] [12]);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_CTC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.CT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.CT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.CT_SPEED = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.CT_TARGET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.FDT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MT_SPEED = Convert.ToSingle (str);  	//  	lst.CT_ENABLE = Convert.ToBoolean (dt.Rows [I] [10]);  	//  	lst.CT_ON = Convert.ToBoolean (dt.Rows [I] [11]);  	//  	lst.MT_ON = Convert.ToBoolean (dt.Rows [I] [12]);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_CTC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.CT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.CT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.CT_SPEED = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.CT_TARGET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.FDT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MT_SPEED = Convert.ToSingle (str);  	//  	lst.CT_ENABLE = Convert.ToBoolean (dt.Rows [I] [10]);  	//  	lst.CT_ON = Convert.ToBoolean (dt.Rows [I] [11]);  	//  	lst.MT_ON = Convert.ToBoolean (dt.Rows [I] [12]);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_CTC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.CT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.CT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.CT_SPEED = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.CT_TARGET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.FDT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MT_SPEED = Convert.ToSingle (str);  	//  	lst.CT_ENABLE = Convert.ToBoolean (dt.Rows [I] [10]);  	//  	lst.CT_ON = Convert.ToBoolean (dt.Rows [I] [11]);  	//  	lst.MT_ON = Convert.ToBoolean (dt.Rows [I] [12]);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_CTC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.CT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.CT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.CT_SPEED = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.CT_TARGET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.FDT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MT_SPEED = Convert.ToSingle (str);  	//  	lst.CT_ENABLE = Convert.ToBoolean (dt.Rows [I] [10]);  	//  	lst.CT_ON = Convert.ToBoolean (dt.Rows [I] [11]);  	//  	lst.MT_ON = Convert.ToBoolean (dt.Rows [I] [12]);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_CTC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.CT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.CT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.CT_SPEED = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.CT_TARGET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.FDT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MT_SPEED = Convert.ToSingle (str);  	//  	lst.CT_ENABLE = Convert.ToBoolean (dt.Rows [I] [10]);  	//  	lst.CT_ON = Convert.ToBoolean (dt.Rows [I] [11]);  	//  	lst.MT_ON = Convert.ToBoolean (dt.Rows [I] [12]);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HisDB_CTC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.CT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.CT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.CT_SPEED = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.CT_TARGET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.FDT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.FET = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MT = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MT_LENGTH = Convert.ToSingle (str);  	//  	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MT_SPEED = Convert.ToSingle (str);  	//  	lst.CT_ENABLE = Convert.ToBoolean (dt.Rows [I] [10]);  	//  	lst.CT_ON = Convert.ToBoolean (dt.Rows [I] [11]);  	//  	lst.MT_ON = Convert.ToBoolean (dt.Rows [I] [12]);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: str = dt.Rows [I] [02].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: str = dt.Rows [I] [03].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: str = dt.Rows [I] [04].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: str = dt.Rows [I] [05].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: str = dt.Rows [I] [06].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: str = dt.Rows [I] [07].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: str = dt.Rows [I] [08].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: str = dt.Rows [I] [09].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: lst.CT_ENABLE = Convert.ToBoolean (dt.Rows [I] [10]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: lst.CT_ON = Convert.ToBoolean (dt.Rows [I] [11]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_CTC,The following statement contains a magic number: lst.MT_ON = Convert.ToBoolean (dt.Rows [I] [12]);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HF,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HF,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HF,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HF,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (0' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HF,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HF,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_HF,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_RM,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_RM,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_RM,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_RM,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (0' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_RM,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_RM,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_RM,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_RM,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_FR,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_FR,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_FR,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_FR,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (0' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_FR,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_FR,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_FR,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_FR,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_FR,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_FR,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_UFC,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_UFC,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_UFC,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_UFC,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_UFC,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_UFC,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_CTC,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_CTC,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_CTC,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_CTC,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (0' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_CTC,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_CTC,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_CTC,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_CTC,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetReportPdf_HisDB_CTC,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,DefinePdfFont,The following statement contains a magic number: FontHei = new iTextSharp.text.Font (bfHei' 32' 1);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,DefinePdfFont,The following statement contains a magic number: FontKai = new iTextSharp.text.Font (bfKai' 32' 1);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,DefinePdfFont,The following statement contains a magic number: FontSong = new iTextSharp.text.Font (bfSun' 32' 1);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,DefinePdfFont,The following statement contains a magic number: FontSong10 = new iTextSharp.text.Font (bfSun' 10' 1);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,DefinePdfFont,The following statement contains a magic number: FontCaption = new iTextSharp.text.Font (bfKai' 12' 1);  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: tags [2] = "LYQ2250.R1.OSGap";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: tags [3] = "LYQ2250.R1.Pass";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: tags [4] = "LYQ2250.R1.RollForce";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: tags [5] = "LYQ2250.R1.SpeedBot";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: tags [6] = "LYQ2250.R1.SpeedTop";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: tags [7] = "LYQ2250.R1.TorqueBot";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: tags [8] = "LYQ2250.R1.TorqueTop";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: tags [9] = "LYQ2250.R1.BarLength";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: tags [10] = "LYQ2250.R1.BarThick";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: tags [11] = "LYQ2250.R1.BarWidth";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: tags [12] = "LYQ2250.R1.BendForce";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: for (int RowIndex = 0; RowIndex < dt.Rows.Count; RowIndex++) {  	lst = new HRM_HisDB_RM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [RowIndex] [0]);  	str = dt.Rows [RowIndex] [1].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [2].ToString ();  	if (str.Length > 0)  		lst.Length = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [3].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [4].ToString ();  	if (str.Length > 0)  		lst.Pass = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [5].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [6].ToString ();  	if (str.Length > 0)  		lst.SpeedBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [7].ToString ();  	if (str.Length > 0)  		lst.SpeedTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [8].ToString ();  	if (str.Length > 0)  		lst.TorqueBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [9].ToString ();  	if (str.Length > 0)  		lst.TorqueTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [10].ToString ();  	if (str.Length > 0)  		lst.BarLength = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [11].ToString ();  	if (str.Length > 0)  		lst.BarThick = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [12].ToString ();  	if (str.Length > 0)  		lst.BarWidth = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [13].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: for (int RowIndex = 0; RowIndex < dt.Rows.Count; RowIndex++) {  	lst = new HRM_HisDB_RM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [RowIndex] [0]);  	str = dt.Rows [RowIndex] [1].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [2].ToString ();  	if (str.Length > 0)  		lst.Length = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [3].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [4].ToString ();  	if (str.Length > 0)  		lst.Pass = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [5].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [6].ToString ();  	if (str.Length > 0)  		lst.SpeedBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [7].ToString ();  	if (str.Length > 0)  		lst.SpeedTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [8].ToString ();  	if (str.Length > 0)  		lst.TorqueBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [9].ToString ();  	if (str.Length > 0)  		lst.TorqueTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [10].ToString ();  	if (str.Length > 0)  		lst.BarLength = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [11].ToString ();  	if (str.Length > 0)  		lst.BarThick = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [12].ToString ();  	if (str.Length > 0)  		lst.BarWidth = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [13].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: for (int RowIndex = 0; RowIndex < dt.Rows.Count; RowIndex++) {  	lst = new HRM_HisDB_RM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [RowIndex] [0]);  	str = dt.Rows [RowIndex] [1].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [2].ToString ();  	if (str.Length > 0)  		lst.Length = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [3].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [4].ToString ();  	if (str.Length > 0)  		lst.Pass = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [5].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [6].ToString ();  	if (str.Length > 0)  		lst.SpeedBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [7].ToString ();  	if (str.Length > 0)  		lst.SpeedTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [8].ToString ();  	if (str.Length > 0)  		lst.TorqueBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [9].ToString ();  	if (str.Length > 0)  		lst.TorqueTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [10].ToString ();  	if (str.Length > 0)  		lst.BarLength = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [11].ToString ();  	if (str.Length > 0)  		lst.BarThick = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [12].ToString ();  	if (str.Length > 0)  		lst.BarWidth = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [13].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: for (int RowIndex = 0; RowIndex < dt.Rows.Count; RowIndex++) {  	lst = new HRM_HisDB_RM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [RowIndex] [0]);  	str = dt.Rows [RowIndex] [1].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [2].ToString ();  	if (str.Length > 0)  		lst.Length = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [3].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [4].ToString ();  	if (str.Length > 0)  		lst.Pass = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [5].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [6].ToString ();  	if (str.Length > 0)  		lst.SpeedBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [7].ToString ();  	if (str.Length > 0)  		lst.SpeedTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [8].ToString ();  	if (str.Length > 0)  		lst.TorqueBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [9].ToString ();  	if (str.Length > 0)  		lst.TorqueTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [10].ToString ();  	if (str.Length > 0)  		lst.BarLength = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [11].ToString ();  	if (str.Length > 0)  		lst.BarThick = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [12].ToString ();  	if (str.Length > 0)  		lst.BarWidth = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [13].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: for (int RowIndex = 0; RowIndex < dt.Rows.Count; RowIndex++) {  	lst = new HRM_HisDB_RM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [RowIndex] [0]);  	str = dt.Rows [RowIndex] [1].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [2].ToString ();  	if (str.Length > 0)  		lst.Length = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [3].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [4].ToString ();  	if (str.Length > 0)  		lst.Pass = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [5].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [6].ToString ();  	if (str.Length > 0)  		lst.SpeedBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [7].ToString ();  	if (str.Length > 0)  		lst.SpeedTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [8].ToString ();  	if (str.Length > 0)  		lst.TorqueBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [9].ToString ();  	if (str.Length > 0)  		lst.TorqueTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [10].ToString ();  	if (str.Length > 0)  		lst.BarLength = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [11].ToString ();  	if (str.Length > 0)  		lst.BarThick = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [12].ToString ();  	if (str.Length > 0)  		lst.BarWidth = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [13].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: for (int RowIndex = 0; RowIndex < dt.Rows.Count; RowIndex++) {  	lst = new HRM_HisDB_RM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [RowIndex] [0]);  	str = dt.Rows [RowIndex] [1].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [2].ToString ();  	if (str.Length > 0)  		lst.Length = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [3].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [4].ToString ();  	if (str.Length > 0)  		lst.Pass = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [5].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [6].ToString ();  	if (str.Length > 0)  		lst.SpeedBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [7].ToString ();  	if (str.Length > 0)  		lst.SpeedTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [8].ToString ();  	if (str.Length > 0)  		lst.TorqueBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [9].ToString ();  	if (str.Length > 0)  		lst.TorqueTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [10].ToString ();  	if (str.Length > 0)  		lst.BarLength = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [11].ToString ();  	if (str.Length > 0)  		lst.BarThick = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [12].ToString ();  	if (str.Length > 0)  		lst.BarWidth = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [13].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: for (int RowIndex = 0; RowIndex < dt.Rows.Count; RowIndex++) {  	lst = new HRM_HisDB_RM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [RowIndex] [0]);  	str = dt.Rows [RowIndex] [1].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [2].ToString ();  	if (str.Length > 0)  		lst.Length = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [3].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [4].ToString ();  	if (str.Length > 0)  		lst.Pass = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [5].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [6].ToString ();  	if (str.Length > 0)  		lst.SpeedBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [7].ToString ();  	if (str.Length > 0)  		lst.SpeedTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [8].ToString ();  	if (str.Length > 0)  		lst.TorqueBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [9].ToString ();  	if (str.Length > 0)  		lst.TorqueTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [10].ToString ();  	if (str.Length > 0)  		lst.BarLength = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [11].ToString ();  	if (str.Length > 0)  		lst.BarThick = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [12].ToString ();  	if (str.Length > 0)  		lst.BarWidth = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [13].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: for (int RowIndex = 0; RowIndex < dt.Rows.Count; RowIndex++) {  	lst = new HRM_HisDB_RM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [RowIndex] [0]);  	str = dt.Rows [RowIndex] [1].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [2].ToString ();  	if (str.Length > 0)  		lst.Length = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [3].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [4].ToString ();  	if (str.Length > 0)  		lst.Pass = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [5].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [6].ToString ();  	if (str.Length > 0)  		lst.SpeedBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [7].ToString ();  	if (str.Length > 0)  		lst.SpeedTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [8].ToString ();  	if (str.Length > 0)  		lst.TorqueBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [9].ToString ();  	if (str.Length > 0)  		lst.TorqueTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [10].ToString ();  	if (str.Length > 0)  		lst.BarLength = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [11].ToString ();  	if (str.Length > 0)  		lst.BarThick = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [12].ToString ();  	if (str.Length > 0)  		lst.BarWidth = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [13].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: for (int RowIndex = 0; RowIndex < dt.Rows.Count; RowIndex++) {  	lst = new HRM_HisDB_RM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [RowIndex] [0]);  	str = dt.Rows [RowIndex] [1].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [2].ToString ();  	if (str.Length > 0)  		lst.Length = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [3].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [4].ToString ();  	if (str.Length > 0)  		lst.Pass = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [5].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [6].ToString ();  	if (str.Length > 0)  		lst.SpeedBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [7].ToString ();  	if (str.Length > 0)  		lst.SpeedTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [8].ToString ();  	if (str.Length > 0)  		lst.TorqueBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [9].ToString ();  	if (str.Length > 0)  		lst.TorqueTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [10].ToString ();  	if (str.Length > 0)  		lst.BarLength = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [11].ToString ();  	if (str.Length > 0)  		lst.BarThick = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [12].ToString ();  	if (str.Length > 0)  		lst.BarWidth = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [13].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: for (int RowIndex = 0; RowIndex < dt.Rows.Count; RowIndex++) {  	lst = new HRM_HisDB_RM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [RowIndex] [0]);  	str = dt.Rows [RowIndex] [1].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [2].ToString ();  	if (str.Length > 0)  		lst.Length = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [3].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [4].ToString ();  	if (str.Length > 0)  		lst.Pass = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [5].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [6].ToString ();  	if (str.Length > 0)  		lst.SpeedBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [7].ToString ();  	if (str.Length > 0)  		lst.SpeedTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [8].ToString ();  	if (str.Length > 0)  		lst.TorqueBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [9].ToString ();  	if (str.Length > 0)  		lst.TorqueTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [10].ToString ();  	if (str.Length > 0)  		lst.BarLength = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [11].ToString ();  	if (str.Length > 0)  		lst.BarThick = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [12].ToString ();  	if (str.Length > 0)  		lst.BarWidth = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [13].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: for (int RowIndex = 0; RowIndex < dt.Rows.Count; RowIndex++) {  	lst = new HRM_HisDB_RM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [RowIndex] [0]);  	str = dt.Rows [RowIndex] [1].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [2].ToString ();  	if (str.Length > 0)  		lst.Length = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [3].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [4].ToString ();  	if (str.Length > 0)  		lst.Pass = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [5].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [6].ToString ();  	if (str.Length > 0)  		lst.SpeedBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [7].ToString ();  	if (str.Length > 0)  		lst.SpeedTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [8].ToString ();  	if (str.Length > 0)  		lst.TorqueBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [9].ToString ();  	if (str.Length > 0)  		lst.TorqueTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [10].ToString ();  	if (str.Length > 0)  		lst.BarLength = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [11].ToString ();  	if (str.Length > 0)  		lst.BarThick = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [12].ToString ();  	if (str.Length > 0)  		lst.BarWidth = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [13].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: for (int RowIndex = 0; RowIndex < dt.Rows.Count; RowIndex++) {  	lst = new HRM_HisDB_RM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [RowIndex] [0]);  	str = dt.Rows [RowIndex] [1].ToString ();  	if (str.Length > 0)  		lst.DSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [2].ToString ();  	if (str.Length > 0)  		lst.Length = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [3].ToString ();  	if (str.Length > 0)  		lst.OSGap = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [4].ToString ();  	if (str.Length > 0)  		lst.Pass = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [5].ToString ();  	if (str.Length > 0)  		lst.RollForce = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [6].ToString ();  	if (str.Length > 0)  		lst.SpeedBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [7].ToString ();  	if (str.Length > 0)  		lst.SpeedTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [8].ToString ();  	if (str.Length > 0)  		lst.TorqueBot = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [9].ToString ();  	if (str.Length > 0)  		lst.TorqueTop = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [10].ToString ();  	if (str.Length > 0)  		lst.BarLength = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [11].ToString ();  	if (str.Length > 0)  		lst.BarThick = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [12].ToString ();  	if (str.Length > 0)  		lst.BarWidth = Convert.ToSingle (str);  	str = dt.Rows [RowIndex] [13].ToString ();  	if (str.Length > 0)  		lst.BendForce = Convert.ToSingle (str);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: str = dt.Rows [RowIndex] [2].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: str = dt.Rows [RowIndex] [3].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: str = dt.Rows [RowIndex] [4].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: str = dt.Rows [RowIndex] [5].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: str = dt.Rows [RowIndex] [6].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: str = dt.Rows [RowIndex] [7].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: str = dt.Rows [RowIndex] [8].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: str = dt.Rows [RowIndex] [9].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: str = dt.Rows [RowIndex] [10].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: str = dt.Rows [RowIndex] [11].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: str = dt.Rows [RowIndex] [12].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_RM,The following statement contains a magic number: str = dt.Rows [RowIndex] [13].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [02] = "LYQ2250.DC" + DC_ID + ".COILING_TENSION";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [03] = "LYQ2250.DC" + DC_ID + ".LENGTH";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [04] = "LYQ2250.DC" + DC_ID + ".LENGTH_B";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [05] = "LYQ2250.DC" + DC_ID + ".LENGTH_C";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [06] = "LYQ2250.DC" + DC_ID + ".MANDREL_SPEED";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [07] = "LYQ2250.DC" + DC_ID + ".MANDREL_TORQUE";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [08] = "LYQ2250.DC" + DC_ID + ".MD_SPEED_SET";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [09] = "LYQ2250.DC" + DC_ID + ".MD_TENSION";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [10] = "LYQ2250.DC" + DC_ID + ".MD_TENSION_SET";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [11] = "LYQ2250.DC" + DC_ID + ".MD_TORQUE";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [12] = "LYQ2250.DC" + DC_ID + ".PR_LEAD_RATIO";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [13] = "LYQ2250.DC" + DC_ID + ".STRIP_SPEED";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [14] = "LYQ2250.DC" + DC_ID + ".THICK_SET";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [15] = "LYQ2250.DC" + DC_ID + ".WRAPER_ROLL1_SPEED";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [16] = "LYQ2250.DC" + DC_ID + ".WRAPER_ROLL2_SPEED";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: tags [17] = "LYQ2250.DC" + DC_ID + ".WRAPER_ROLL3_SPEED";  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new HRM_HisDB_DC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	str = dt.Rows [I] [01].ToString ();  	if (str.Length > 0)  		lst.COIL_DIAMETER = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [02].ToString ();  	if (str.Length > 0)  		lst.COIL_WIDTH = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [03].ToString ();  	if (str.Length > 0)  		lst.COILING_TENSION = Convert.ToSingle (str);  	str = dt.Rows [I] [04].ToString ();  	if (str.Length > 0)  		lst.LENGTH = Convert.ToSingle (str);  	//		   	str = dt.Rows [I] [05].ToString ();  	if (str.Length > 0)  		lst.LENGTH_B = Convert.ToSingle (str);  	//	   	str = dt.Rows [I] [06].ToString ();  	if (str.Length > 0)  		lst.LENGTH_C = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [07].ToString ();  	if (str.Length > 0)  		lst.MANDREL_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [08].ToString ();  	if (str.Length > 0)  		lst.MANDREL_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [09].ToString ();  	if (str.Length > 0)  		lst.MD_SPEED_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [10].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [11].ToString ();  	if (str.Length > 0)  		lst.MD_TENSION_SET = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [12].ToString ();  	if (str.Length > 0)  		lst.MD_TORQUE = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [13].ToString ();  	if (str.Length > 0)  		lst.PR_LEAD_RATIO = Convert.ToSingle (str);  	// 	  	str = dt.Rows [I] [14].ToString ();  	if (str.Length > 0)  		lst.STRIP_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [15].ToString ();  	if (str.Length > 0)  		lst.THICK_SET = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [16].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL1_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [17].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL2_SPEED = Convert.ToSingle (str);  	//   	str = dt.Rows [I] [18].ToString ();  	if (str.Length > 0)  		lst.WRAPER_ROLL3_SPEED = Convert.ToSingle (str);  	// 	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [02].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [03].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [04].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [05].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [06].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [07].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [08].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [09].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [10].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [11].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [12].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [13].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [14].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [15].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [16].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [17].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLY2250,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY2250.cs,GetHRM_HisDB_DC,The following statement contains a magic number: str = dt.Rows [I] [18].ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PEDIGREE,The following statement contains a magic number: do {  	//作为其他工序的出口料  	string strSQL = " SELECT * FROM CRM_COIL_TRACK_VIEW" + " WHERE out_mat_id='" + CoilID_Pre + "'";  	DataTable dt = sqt.ReadDatatable_OraDB (strSQL);  	if (dt.Rows.Count <= 0)  		break;  	else {  		lst = new Mat_Pedigree ();  		str = dt.Rows [0] ["OUT_MAT_ID"].ToString ();  		if (str.Trim ().Length > 0)  			lst.OUT_MAT_ID = str;  		str = dt.Rows [0] ["IN_MAT_ID1"].ToString ();  		if (str.Trim ().Length > 0)  			lst.IN_MAT_ID1 = str;  		str = dt.Rows [0] ["IN_MAT_ID2"].ToString ();  		if (str.Trim ().Length > 0)  			lst.IN_MAT_ID2 = str;  		str = dt.Rows [0] ["DEVICE_NO"].ToString ();  		if (str.Trim ().Length > 0)  			lst.DEVICE_NO = str;  		str = dt.Rows [0] ["PROCESS_CODE"].ToString ();  		if (str.Trim ().Length > 0)  			lst.PROCESS_CODE = str;  		str = dt.Rows [0] ["START_TIME"].ToString ();  		if (str.Trim ().Length > 0)  			lst.START_TIME = Convert.ToDateTime (str);  		str = dt.Rows [0] ["STOP_TIME"].ToString ();  		if (str.Trim ().Length > 0)  			lst.STOP_TIME = Convert.ToDateTime (str);  		str = dt.Rows [0] ["START_LOC"].ToString ();  		if (str.Trim ().Length > 0)  			lst.START_LOC = str;  		str = dt.Rows [0] ["MAT1_LENTH"].ToString ();  		if (str.Trim ().Length > 0)  			lst.MAT1_LENTH = str;  		str = dt.Rows [0] ["MAT2_LENGTH"].ToString ();  		if (str.Trim ().Length > 0)  			lst.MAT2_LENGTH = str;  		LST.Add (lst);  		//如果不幸的，出口料和入口料代号相同，就会先入死循环  		if (LST.Count > 10)  			break;  		//然后把出料作为入料，再次查找  		CoilID_Pre = lst.IN_MAT_ID1;  	}  }  while (true);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PEDIGREE,The following statement contains a magic number: if (dt.Rows.Count <= 0)  	break;  else {  	lst = new Mat_Pedigree ();  	str = dt.Rows [0] ["OUT_MAT_ID"].ToString ();  	if (str.Trim ().Length > 0)  		lst.OUT_MAT_ID = str;  	str = dt.Rows [0] ["IN_MAT_ID1"].ToString ();  	if (str.Trim ().Length > 0)  		lst.IN_MAT_ID1 = str;  	str = dt.Rows [0] ["IN_MAT_ID2"].ToString ();  	if (str.Trim ().Length > 0)  		lst.IN_MAT_ID2 = str;  	str = dt.Rows [0] ["DEVICE_NO"].ToString ();  	if (str.Trim ().Length > 0)  		lst.DEVICE_NO = str;  	str = dt.Rows [0] ["PROCESS_CODE"].ToString ();  	if (str.Trim ().Length > 0)  		lst.PROCESS_CODE = str;  	str = dt.Rows [0] ["START_TIME"].ToString ();  	if (str.Trim ().Length > 0)  		lst.START_TIME = Convert.ToDateTime (str);  	str = dt.Rows [0] ["STOP_TIME"].ToString ();  	if (str.Trim ().Length > 0)  		lst.STOP_TIME = Convert.ToDateTime (str);  	str = dt.Rows [0] ["START_LOC"].ToString ();  	if (str.Trim ().Length > 0)  		lst.START_LOC = str;  	str = dt.Rows [0] ["MAT1_LENTH"].ToString ();  	if (str.Trim ().Length > 0)  		lst.MAT1_LENTH = str;  	str = dt.Rows [0] ["MAT2_LENGTH"].ToString ();  	if (str.Trim ().Length > 0)  		lst.MAT2_LENGTH = str;  	LST.Add (lst);  	//如果不幸的，出口料和入口料代号相同，就会先入死循环  	if (LST.Count > 10)  		break;  	//然后把出料作为入料，再次查找  	CoilID_Pre = lst.IN_MAT_ID1;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PEDIGREE,The following statement contains a magic number: if (LST.Count > 10)  	break;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PEDIGREE,The following statement contains a magic number: do {  	//作为其他工序的入口料  	string strSQL = " SELECT * FROM CRM_COIL_TRACK_VIEW" + " WHERE in_mat_id1='" + CoilID_Next + "'" + " OR in_mat_id2='" + CoilID_Next + "'";  	DataTable dt = sqt.ReadDatatable_OraDB (strSQL);  	if (dt.Rows.Count <= 0)  		break;  	else {  		lst = new Mat_Pedigree ();  		str = dt.Rows [0] ["OUT_MAT_ID"].ToString ();  		if (str.Trim ().Length > 0)  			lst.OUT_MAT_ID = str;  		str = dt.Rows [0] ["IN_MAT_ID1"].ToString ();  		if (str.Trim ().Length > 0)  			lst.IN_MAT_ID1 = str;  		str = dt.Rows [0] ["IN_MAT_ID2"].ToString ();  		if (str.Trim ().Length > 0)  			lst.IN_MAT_ID2 = str;  		str = dt.Rows [0] ["DEVICE_NO"].ToString ();  		if (str.Trim ().Length > 0)  			lst.DEVICE_NO = str;  		str = dt.Rows [0] ["PROCESS_CODE"].ToString ();  		if (str.Trim ().Length > 0)  			lst.PROCESS_CODE = str;  		str = dt.Rows [0] ["START_TIME"].ToString ();  		if (str.Trim ().Length > 0)  			lst.START_TIME = Convert.ToDateTime (str);  		str = dt.Rows [0] ["STOP_TIME"].ToString ();  		if (str.Trim ().Length > 0)  			lst.STOP_TIME = Convert.ToDateTime (str);  		str = dt.Rows [0] ["START_LOC"].ToString ();  		if (str.Trim ().Length > 0)  			lst.START_LOC = str;  		str = dt.Rows [0] ["MAT1_LENTH"].ToString ();  		if (str.Trim ().Length > 0)  			lst.MAT1_LENTH = str;  		str = dt.Rows [0] ["MAT2_LENGTH"].ToString ();  		if (str.Trim ().Length > 0)  			lst.MAT2_LENGTH = str;  		LST.Add (lst);  		//如果不幸的，出口料和入口料代号相同，就会先入死循环  		if (LST.Count > 10)  			break;  		//然后把出料作为入料，再次查找  		CoilID_Next = lst.OUT_MAT_ID;  	}  }  while (true);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PEDIGREE,The following statement contains a magic number: if (dt.Rows.Count <= 0)  	break;  else {  	lst = new Mat_Pedigree ();  	str = dt.Rows [0] ["OUT_MAT_ID"].ToString ();  	if (str.Trim ().Length > 0)  		lst.OUT_MAT_ID = str;  	str = dt.Rows [0] ["IN_MAT_ID1"].ToString ();  	if (str.Trim ().Length > 0)  		lst.IN_MAT_ID1 = str;  	str = dt.Rows [0] ["IN_MAT_ID2"].ToString ();  	if (str.Trim ().Length > 0)  		lst.IN_MAT_ID2 = str;  	str = dt.Rows [0] ["DEVICE_NO"].ToString ();  	if (str.Trim ().Length > 0)  		lst.DEVICE_NO = str;  	str = dt.Rows [0] ["PROCESS_CODE"].ToString ();  	if (str.Trim ().Length > 0)  		lst.PROCESS_CODE = str;  	str = dt.Rows [0] ["START_TIME"].ToString ();  	if (str.Trim ().Length > 0)  		lst.START_TIME = Convert.ToDateTime (str);  	str = dt.Rows [0] ["STOP_TIME"].ToString ();  	if (str.Trim ().Length > 0)  		lst.STOP_TIME = Convert.ToDateTime (str);  	str = dt.Rows [0] ["START_LOC"].ToString ();  	if (str.Trim ().Length > 0)  		lst.START_LOC = str;  	str = dt.Rows [0] ["MAT1_LENTH"].ToString ();  	if (str.Trim ().Length > 0)  		lst.MAT1_LENTH = str;  	str = dt.Rows [0] ["MAT2_LENGTH"].ToString ();  	if (str.Trim ().Length > 0)  		lst.MAT2_LENGTH = str;  	LST.Add (lst);  	//如果不幸的，出口料和入口料代号相同，就会先入死循环  	if (LST.Count > 10)  		break;  	//然后把出料作为入料，再次查找  	CoilID_Next = lst.OUT_MAT_ID;  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PEDIGREE,The following statement contains a magic number: if (LST.Count > 10)  	break;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_KeyEvents_PLTCM,The following statement contains a magic number: if (dt.Rows.Count > 0) {  	NextCoilID = dt.Rows [0] ["mat_no"].ToString ();  	NextLST_Info = GetCRM_CoilInfo_PLTCM (NextCoilID);  }  else {  	CRM_CoilInfo_PLTCM Nextlst_Info = new CRM_CoilInfo_PLTCM ();  	NextLST_Info.Add (Nextlst_Info);  	NextLST_Info [0].TCM_EntryTime = TCM_EntryTime.AddHours (0.1).ToString ();  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_KeyEvents_PLTCM,The following statement contains a magic number: NextLST_Info [0].TCM_EntryTime = TCM_EntryTime.AddHours (0.1).ToString ();  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_KeyEvents_PLTCM,The following statement contains a magic number: for (int I = 0; I < LST.Count; I++) {  	if (DateTime.TryParse (LST [I].DateAndTime' out cDateTime)) {  		ts = cDateTime - StartDateTime;  		LST [I].Duration = float.Parse ((ts.TotalSeconds / 60.0).ToString ("#0.00"));  	}  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_KeyEvents_PLTCM,The following statement contains a magic number: if (DateTime.TryParse (LST [I].DateAndTime' out cDateTime)) {  	ts = cDateTime - StartDateTime;  	LST [I].Duration = float.Parse ((ts.TotalSeconds / 60.0).ToString ("#0.00"));  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_KeyEvents_PLTCM,The following statement contains a magic number: LST [I].Duration = float.Parse ((ts.TotalSeconds / 60.0).ToString ("#0.00"));  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRMCoilTrack,The following statement contains a magic number: sqt.CheckDateRange (strStartTime' ref strEndTime' 7);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: tags [02] = "LYQCRM.AF_BASE_" + AFID + ".H2_FLOW_RATE_ACT";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: tags [03] = "LYQCRM.AF_BASE_" + AFID + ".N2_FLOW_RATE_ACT";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: tags [04] = "LYQCRM.AF_BASE_" + AFID + ".O2_ACT";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: tags [05] = "LYQCRM.AF_BASE_" + AFID + ".RECIRC_RPM_ACT";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_AF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CTL_TEMP_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HH_TEMP_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.H2_FLOW_RATE_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.N2_FLOW_RATE_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.O2_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.RECIRC_RPM_ACT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_AF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CTL_TEMP_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HH_TEMP_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.H2_FLOW_RATE_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.N2_FLOW_RATE_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.O2_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.RECIRC_RPM_ACT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_AF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CTL_TEMP_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HH_TEMP_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.H2_FLOW_RATE_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.N2_FLOW_RATE_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.O2_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.RECIRC_RPM_ACT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_AF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CTL_TEMP_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HH_TEMP_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.H2_FLOW_RATE_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.N2_FLOW_RATE_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.O2_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.RECIRC_RPM_ACT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_AF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CTL_TEMP_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HH_TEMP_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.H2_FLOW_RATE_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.N2_FLOW_RATE_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.O2_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.RECIRC_RPM_ACT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_AF ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.CTL_TEMP_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.HH_TEMP_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.H2_FLOW_RATE_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.N2_FLOW_RATE_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.O2_ACT = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.RECIRC_RPM_ACT = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: obj = dt.Rows [I] [04];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: obj = dt.Rows [I] [05];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_AF,The following statement contains a magic number: obj = dt.Rows [I] [06];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_AF,The following statement contains a magic number: FontHei.Size = 16;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_AF,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_AF,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_AF,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_AF,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (0' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_AF,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_AF,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL,The following statement contains a magic number: table.Padding = 5;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (0' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_CGL,The following statement contains a magic number: FontHei.Size = 16;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_CGL,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_CGL,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_CGL,The following statement contains a magic number: table.Padding = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_CGL,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (0' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_CGL,The following statement contains a magic number: FontKai.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_CGL,The following statement contains a magic number: FontSong.Size = 9;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_thick,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_thick,The following statement contains a magic number: stuDrawPicInfo.TagDecimalPlaces [YAxisNo] = 2;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_thick,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 3;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_thick,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_CoatingWeight,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_CoatingWeight,The following statement contains a magic number: tags [02] = "LYQCRM.CGL_ZIN.FD_Act_coating_weight_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_CoatingWeight,The following statement contains a magic number: tags [03] = "LYQCRM.CGL_ZIN.BW_Act_coating_weight_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_CoatingWeight,The following statement contains a magic number: tags [04] = "LYQCRM.CGL_ZIN.BC_Act_coating_weight_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_CoatingWeight,The following statement contains a magic number: tags [05] = "LYQCRM.CGL_ZIN.BDW_Act_coating_weight_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_GI_POWER,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_GI_POWER,The following statement contains a magic number: tags [02] = "LYQCRM.CGL_ZIN.GI_AZINC_POWER_Len25";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_GI_POWER,The following statement contains a magic number: tags [03] = "LYQCRM.CGL_ZIN.GI_BZINC_POWER_Len25";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_GI_Tempture,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_GI_Tempture,The following statement contains a magic number: stuDrawPicInfo.TagMin [YAxisNo] = 400;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_GI_Tempture,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 700;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_GI_Tempture,The following statement contains a magic number: tags [02] = "LYQCRM.CGL_ZIN.GI_zinc_pot_temLen25";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_GI_Tension,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_SPM_ParaA,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_SPM_ParaA,The following statement contains a magic number: tags [02] = "LYQCRM.CGL_SPM.SPM_Anti_crease_height_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_SPM_ParaA,The following statement contains a magic number: tags [03] = "LYQCRM.CGL_SPM.SPM_Anti_quiver_height_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_SPM_ParaA,The following statement contains a magic number: tags [04] = "LYQCRM.CGL_SPM.SPM_DS_gap_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_SPM_ParaA,The following statement contains a magic number: tags [05] = "LYQCRM.CGL_SPM.SPM_WS_gap_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_SPM_ParaB,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_SPM_ParaB,The following statement contains a magic number: tags [02] = "LYQCRM.CGL_SPM.SPM_entry_Tension_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_SPM_ParaB,The following statement contains a magic number: tags [03] = "LYQCRM.CGL_SPM.SPM_exit_Tension_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_SPM_ParaB,The following statement contains a magic number: tags [04] = "LYQCRM.CGL_SPM.SPM_rolling_force_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_CGL_SPM_ParaB,The following statement contains a magic number: tags [05] = "LYQCRM.CGL_SPM.SPM_WS_force_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: FontHei.Size = 14;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: table.WidthPercentage = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: table.Padding = 3;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: table.BorderColor = new iTextSharp.text.Color (0' 255' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: table.DefaultCellBorderColor = new iTextSharp.text.Color (255' 0' 255);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: GetReportPdf_HisDB_TCM_ASC_Iunit (CoilID' 1' 5' TCM_IN' TCM_OUT' ref pdfDocument);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: GetReportPdf_HisDB_TCM_ASC_Iunit (CoilID' 6' 10' TCM_IN' TCM_OUT' ref pdfDocument);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: GetReportPdf_HisDB_TCM_ASC_Iunit (CoilID' 6' 10' TCM_IN' TCM_OUT' ref pdfDocument);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: GetReportPdf_HisDB_TCM_ASC_Iunit (CoilID' 11' 15' TCM_IN' TCM_OUT' ref pdfDocument);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: GetReportPdf_HisDB_TCM_ASC_Iunit (CoilID' 11' 15' TCM_IN' TCM_OUT' ref pdfDocument);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: GetReportPdf_HisDB_TCM_ASC_Iunit (CoilID' 16' 20' TCM_IN' TCM_OUT' ref pdfDocument);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: GetReportPdf_HisDB_TCM_ASC_Iunit (CoilID' 16' 20' TCM_IN' TCM_OUT' ref pdfDocument);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: GetReportPdf_HisDB_TCM_ASC_Iunit (CoilID' 21' 25' TCM_IN' TCM_OUT' ref pdfDocument);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: GetReportPdf_HisDB_TCM_ASC_Iunit (CoilID' 21' 25' TCM_IN' TCM_OUT' ref pdfDocument);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: GetReportPdf_HisDB_TCM_ASC_Iunit (CoilID' 26' 31' TCM_IN' TCM_OUT' ref pdfDocument);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: GetReportPdf_HisDB_TCM_ASC_Iunit (CoilID' 26' 31' TCM_IN' TCM_OUT' ref pdfDocument);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_PL_KeyEvents,The following statement contains a magic number: for (int I = 0; I <= 4; I++) {  	GetReportPdf_HisDB_TCM_FR_Gap (CoilID' I.ToString ()' TCM_IN' TCM_OUT' ref pdfDocument);  	GetReportPdf_HisDB_TCM_FR_Para (CoilID' I.ToString ()' TCM_IN' TCM_OUT' ref pdfDocument);  	GetReportPdf_HisDB_TCM_FR_RollingForce (CoilID' I.ToString ()' TCM_IN' TCM_OUT' ref pdfDocument);  	GetReportPdf_HisDB_TCM_FR_Tension (CoilID' I.ToString ()' TCM_IN' TCM_OUT' ref pdfDocument);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: stuDrawPicInfo.TagMin [YAxisNo] = 400;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: stuDrawPicInfo.TagMin [YAxisNo] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 1500;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 500;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 500;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: stuDrawPicInfo.TagMin [YAxisNo] = 400;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: tags [02] = "LYQCRM.PL_PT" + PL_PT_ID + ".EntAcidFlow";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: tags [03] = "LYQCRM.PL_PT" + PL_PT_ID + ".WasterAcidFlow";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: tags [04] = "LYQCRM.PL_PT" + PL_PT_ID + ".InhibitorFlow";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PT,The following statement contains a magic number: tags [05] = "LYQCRM.PL_PT" + PL_PT_ID + ".Temperature";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PC,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PC,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 300;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PC,The following statement contains a magic number: stuDrawPicInfo.TagMin [YAxisNo] = 40;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PC,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PC,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PC,The following statement contains a magic number: stuDrawPicInfo.TagMin [YAxisNo] = 30;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PC,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 60;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PC,The following statement contains a magic number: tags [02] = "LYQCRM.PL_PC" + PL_PC_ID + ".Level";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_PC,The following statement contains a magic number: tags [03] = "LYQCRM.PL_PC" + PL_PC_ID + ".Temperature";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_RT,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_RT,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_RT,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_RT,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 200;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_PL_RT,The following statement contains a magic number: tags [02] = "LYQCRM.PL_RT4.WaterFlow";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_ParaSet,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_ParaSet,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_ParaSet,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 100;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_ParaSet,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 200;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_ParaSet,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 200;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_ParaSet,The following statement contains a magic number: stuDrawPicInfo.TagMax [YAxisNo] = 200;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_ParaSet,The following statement contains a magic number: tags [02] = "LYQCRM.TCM_ASC.c";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_ParaSet,The following statement contains a magic number: tags [03] = "LYQCRM.TCM_ASC.Gain";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_ParaSet,The following statement contains a magic number: tags [04] = "LYQCRM.TCM_ASC.Mode";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_ASC_Iunit,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Gap,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Gap,The following statement contains a magic number: tags [02] = "LYQCRM.TCM_F" + FR_ID + ".IMRbShift";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Gap,The following statement contains a magic number: tags [03] = "LYQCRM.TCM_F" + FR_ID + ".IMRtShift";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Gap,The following statement contains a magic number: tags [04] = "LYQCRM.TCM_F" + FR_ID + ".WSGap";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Gap,The following statement contains a magic number: tags [05] = "LYQCRM.TCM_F" + FR_ID + ".ThickDif";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_RollingForce,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_RollingForce,The following statement contains a magic number: tags [02] = "LYQCRM.TCM_F" + FR_ID + ".IMRBender";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_RollingForce,The following statement contains a magic number: tags [03] = "LYQCRM.TCM_F" + FR_ID + ".Reduction";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_RollingForce,The following statement contains a magic number: tags [04] = "LYQCRM.TCM_F" + FR_ID + ".WRBender";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Tension,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Tension,The following statement contains a magic number: tags [02] = "LYQCRM.TCM_F" + FR_ID + ".UTension";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Para,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Para,The following statement contains a magic number: tags [02] = "LYQCRM.TCM_F" + FR_ID + ".Leveling";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Para,The following statement contains a magic number: tags [03] = "LYQCRM.TCM_F" + FR_ID + ".Torque";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_TCM_FR_Para,The following statement contains a magic number: tags [04] = "LYQCRM.TCM_F" + FR_ID + ".Speed";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The following statement contains a magic number: stuDrawPicInfo.YSN [1] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The following statement contains a magic number: stuDrawPicInfo.TagMax [1] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The following statement contains a magic number: stuDrawPicInfo.TagDescription [2] = "加热罩温度";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The following statement contains a magic number: stuDrawPicInfo.TagUnit [2] = "℃";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The following statement contains a magic number: stuDrawPicInfo.YAxisIsLeft [2] = true;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The following statement contains a magic number: stuDrawPicInfo.AutoSetRang [2] = false;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The following statement contains a magic number: stuDrawPicInfo.YSN [2] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The following statement contains a magic number: stuDrawPicInfo.YSN [2] = 10;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The following statement contains a magic number: stuDrawPicInfo.TagMin [2] = 0;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The following statement contains a magic number: stuDrawPicInfo.TagMax [2] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_Heat,The following statement contains a magic number: stuDrawPicInfo.TagMax [2] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_OxyRota,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_OxyRota,The following statement contains a magic number: stuDrawPicInfo.TagMax [1] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_OxyRota,The following statement contains a magic number: stuDrawPicInfo.TagDescription [2] = "风机转速";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_OxyRota,The following statement contains a magic number: stuDrawPicInfo.TagUnit [2] = "rad/min";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_OxyRota,The following statement contains a magic number: stuDrawPicInfo.YAxisIsLeft [2] = false;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_OxyRota,The following statement contains a magic number: stuDrawPicInfo.AutoSetRang [2] = true;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_OxyRota,The following statement contains a magic number: stuDrawPicInfo.TagMin [2] = 0;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_OxyRota,The following statement contains a magic number: stuDrawPicInfo.TagMax [2] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_OxyRota,The following statement contains a magic number: stuDrawPicInfo.TagMax [2] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_GasFlux,The following statement contains a magic number: stuDrawPicInfo.PicTextFont = new System.Drawing.Font ("System"' 12);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_GasFlux,The following statement contains a magic number: stuDrawPicInfo.TagMax [1] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_GasFlux,The following statement contains a magic number: stuDrawPicInfo.TagDescription [2] = "氮气N2流量";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_GasFlux,The following statement contains a magic number: stuDrawPicInfo.TagUnit [2] = "m3/h";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_GasFlux,The following statement contains a magic number: stuDrawPicInfo.YAxisIsLeft [2] = false;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_GasFlux,The following statement contains a magic number: stuDrawPicInfo.AutoSetRang [2] = true;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_GasFlux,The following statement contains a magic number: stuDrawPicInfo.TagMin [2] = 0;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_GasFlux,The following statement contains a magic number: stuDrawPicInfo.TagMax [2] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetReportPdf_HisDB_AF_GasFlux,The following statement contains a magic number: stuDrawPicInfo.TagMax [2] = 1000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: tags [02] = "LYQCRM.PL_BR3.Tension";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: tags [03] = "LYQCRM.PL_DLP1.Tension";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: tags [04] = "LYQCRM.PL_DLP2.Tension";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: tags [05] = "LYQCRM.PL_ELP.Tension";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_BR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.BR1_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.BR2_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.BR3_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.DLP1_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.DLP2_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ELP_Tension = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_BR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.BR1_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.BR2_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.BR3_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.DLP1_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.DLP2_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ELP_Tension = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_BR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.BR1_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.BR2_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.BR3_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.DLP1_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.DLP2_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ELP_Tension = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_BR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.BR1_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.BR2_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.BR3_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.DLP1_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.DLP2_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ELP_Tension = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_BR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.BR1_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.BR2_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.BR3_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.DLP1_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.DLP2_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ELP_Tension = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_BR ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.BR1_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.BR2_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.BR3_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.DLP1_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.DLP2_Tension = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ELP_Tension = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: obj = dt.Rows [I] [04];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: obj = dt.Rows [I] [05];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_BR,The following statement contains a magic number: obj = dt.Rows [I] [06];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: tags [02] = "LYQCRM.PL_PC" + PL_PC_ID + ".FECL2";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: tags [03] = "LYQCRM.PL_PC" + PL_PC_ID + ".WaterFlow";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: tags [04] = "LYQCRM.PL_PC" + PL_PC_ID + ".Level";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: tags [05] = "LYQCRM.PL_PC" + PL_PC_ID + ".Temperature";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: tags [06] = "LYQCRM.PL_PC" + PL_PC_ID + ".HCL";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.AcidFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.AddAcidFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FECL2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.WaterFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.HCL = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.AcidFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.AddAcidFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FECL2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.WaterFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.HCL = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.AcidFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.AddAcidFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FECL2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.WaterFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.HCL = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.AcidFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.AddAcidFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FECL2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.WaterFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.HCL = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.AcidFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.AddAcidFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FECL2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.WaterFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.HCL = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.AcidFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.AddAcidFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FECL2 = Convert.ToSingle (obj);  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.WaterFlow = Convert.ToSingle (obj);  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.HCL = Convert.ToSingle (obj);  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: obj = dt.Rows [I] [04];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: obj = dt.Rows [I] [05];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PC,The following statement contains a magic number: obj = dt.Rows [I] [06];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: tags [02] = "LYQCRM.PL_PT" + PL_PT_ID + ".DensityRatio";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: tags [03] = "LYQCRM.PL_PT" + PL_PT_ID + ".EntAcidFlow";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: tags [04] = "LYQCRM.PL_PT" + PL_PT_ID + ".WasterAcidFlow";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: tags [05] = "LYQCRM.PL_PT" + PL_PT_ID + ".ExtAcidFlow";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: tags [06] = "LYQCRM.PL_PT" + PL_PT_ID + ".InhibitorFlow";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: tags [07] = "LYQCRM.PL_PT" + PL_PT_ID + ".Temperature";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PT ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Conductivity = Convert.ToSingle (obj);  	//	酸罐酸液电导率	LYQCRM.PL_PT1.Conductivity  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Density = Convert.ToSingle (obj);  	//	酸液浓度	LYQCRM.PL_PT1.Density  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.DensityRatio = Convert.ToSingle (obj);  	//	酸罐酸液比重	LYQCRM.PL_PT1.DensityRatio  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.EntAcidFlow = Convert.ToSingle (obj);  	//	酸槽入口酸流量	LYQCRM.PL_PT1.EntAcidFlow  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.WasterAcidFlow = Convert.ToSingle (obj);  	//	废酸流量	LYQCRM.PL_PT1.WasterAcidFlow  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ExtAcidFlow = Convert.ToSingle (obj);  	//	酸槽出口酸流量	LYQCRM.PL_PT1.ExtAcidFlow          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.InhibitorFlow = Convert.ToSingle (obj);  	//	缓蚀剂流量	LYQCRM.PL_PT1.InhibitorFlow  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	//	酸液温度	LYQCRM.PL_PT1.Temperature   	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PT ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Conductivity = Convert.ToSingle (obj);  	//	酸罐酸液电导率	LYQCRM.PL_PT1.Conductivity  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Density = Convert.ToSingle (obj);  	//	酸液浓度	LYQCRM.PL_PT1.Density  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.DensityRatio = Convert.ToSingle (obj);  	//	酸罐酸液比重	LYQCRM.PL_PT1.DensityRatio  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.EntAcidFlow = Convert.ToSingle (obj);  	//	酸槽入口酸流量	LYQCRM.PL_PT1.EntAcidFlow  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.WasterAcidFlow = Convert.ToSingle (obj);  	//	废酸流量	LYQCRM.PL_PT1.WasterAcidFlow  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ExtAcidFlow = Convert.ToSingle (obj);  	//	酸槽出口酸流量	LYQCRM.PL_PT1.ExtAcidFlow          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.InhibitorFlow = Convert.ToSingle (obj);  	//	缓蚀剂流量	LYQCRM.PL_PT1.InhibitorFlow  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	//	酸液温度	LYQCRM.PL_PT1.Temperature   	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PT ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Conductivity = Convert.ToSingle (obj);  	//	酸罐酸液电导率	LYQCRM.PL_PT1.Conductivity  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Density = Convert.ToSingle (obj);  	//	酸液浓度	LYQCRM.PL_PT1.Density  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.DensityRatio = Convert.ToSingle (obj);  	//	酸罐酸液比重	LYQCRM.PL_PT1.DensityRatio  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.EntAcidFlow = Convert.ToSingle (obj);  	//	酸槽入口酸流量	LYQCRM.PL_PT1.EntAcidFlow  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.WasterAcidFlow = Convert.ToSingle (obj);  	//	废酸流量	LYQCRM.PL_PT1.WasterAcidFlow  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ExtAcidFlow = Convert.ToSingle (obj);  	//	酸槽出口酸流量	LYQCRM.PL_PT1.ExtAcidFlow          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.InhibitorFlow = Convert.ToSingle (obj);  	//	缓蚀剂流量	LYQCRM.PL_PT1.InhibitorFlow  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	//	酸液温度	LYQCRM.PL_PT1.Temperature   	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PT ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Conductivity = Convert.ToSingle (obj);  	//	酸罐酸液电导率	LYQCRM.PL_PT1.Conductivity  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Density = Convert.ToSingle (obj);  	//	酸液浓度	LYQCRM.PL_PT1.Density  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.DensityRatio = Convert.ToSingle (obj);  	//	酸罐酸液比重	LYQCRM.PL_PT1.DensityRatio  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.EntAcidFlow = Convert.ToSingle (obj);  	//	酸槽入口酸流量	LYQCRM.PL_PT1.EntAcidFlow  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.WasterAcidFlow = Convert.ToSingle (obj);  	//	废酸流量	LYQCRM.PL_PT1.WasterAcidFlow  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ExtAcidFlow = Convert.ToSingle (obj);  	//	酸槽出口酸流量	LYQCRM.PL_PT1.ExtAcidFlow          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.InhibitorFlow = Convert.ToSingle (obj);  	//	缓蚀剂流量	LYQCRM.PL_PT1.InhibitorFlow  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	//	酸液温度	LYQCRM.PL_PT1.Temperature   	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PT ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Conductivity = Convert.ToSingle (obj);  	//	酸罐酸液电导率	LYQCRM.PL_PT1.Conductivity  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Density = Convert.ToSingle (obj);  	//	酸液浓度	LYQCRM.PL_PT1.Density  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.DensityRatio = Convert.ToSingle (obj);  	//	酸罐酸液比重	LYQCRM.PL_PT1.DensityRatio  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.EntAcidFlow = Convert.ToSingle (obj);  	//	酸槽入口酸流量	LYQCRM.PL_PT1.EntAcidFlow  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.WasterAcidFlow = Convert.ToSingle (obj);  	//	废酸流量	LYQCRM.PL_PT1.WasterAcidFlow  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ExtAcidFlow = Convert.ToSingle (obj);  	//	酸槽出口酸流量	LYQCRM.PL_PT1.ExtAcidFlow          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.InhibitorFlow = Convert.ToSingle (obj);  	//	缓蚀剂流量	LYQCRM.PL_PT1.InhibitorFlow  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	//	酸液温度	LYQCRM.PL_PT1.Temperature   	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PT ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Conductivity = Convert.ToSingle (obj);  	//	酸罐酸液电导率	LYQCRM.PL_PT1.Conductivity  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Density = Convert.ToSingle (obj);  	//	酸液浓度	LYQCRM.PL_PT1.Density  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.DensityRatio = Convert.ToSingle (obj);  	//	酸罐酸液比重	LYQCRM.PL_PT1.DensityRatio  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.EntAcidFlow = Convert.ToSingle (obj);  	//	酸槽入口酸流量	LYQCRM.PL_PT1.EntAcidFlow  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.WasterAcidFlow = Convert.ToSingle (obj);  	//	废酸流量	LYQCRM.PL_PT1.WasterAcidFlow  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ExtAcidFlow = Convert.ToSingle (obj);  	//	酸槽出口酸流量	LYQCRM.PL_PT1.ExtAcidFlow          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.InhibitorFlow = Convert.ToSingle (obj);  	//	缓蚀剂流量	LYQCRM.PL_PT1.InhibitorFlow  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	//	酸液温度	LYQCRM.PL_PT1.Temperature   	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PT ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Conductivity = Convert.ToSingle (obj);  	//	酸罐酸液电导率	LYQCRM.PL_PT1.Conductivity  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Density = Convert.ToSingle (obj);  	//	酸液浓度	LYQCRM.PL_PT1.Density  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.DensityRatio = Convert.ToSingle (obj);  	//	酸罐酸液比重	LYQCRM.PL_PT1.DensityRatio  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.EntAcidFlow = Convert.ToSingle (obj);  	//	酸槽入口酸流量	LYQCRM.PL_PT1.EntAcidFlow  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.WasterAcidFlow = Convert.ToSingle (obj);  	//	废酸流量	LYQCRM.PL_PT1.WasterAcidFlow  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ExtAcidFlow = Convert.ToSingle (obj);  	//	酸槽出口酸流量	LYQCRM.PL_PT1.ExtAcidFlow          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.InhibitorFlow = Convert.ToSingle (obj);  	//	缓蚀剂流量	LYQCRM.PL_PT1.InhibitorFlow  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	//	酸液温度	LYQCRM.PL_PT1.Temperature   	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PT ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Conductivity = Convert.ToSingle (obj);  	//	酸罐酸液电导率	LYQCRM.PL_PT1.Conductivity  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Density = Convert.ToSingle (obj);  	//	酸液浓度	LYQCRM.PL_PT1.Density  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.DensityRatio = Convert.ToSingle (obj);  	//	酸罐酸液比重	LYQCRM.PL_PT1.DensityRatio  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.EntAcidFlow = Convert.ToSingle (obj);  	//	酸槽入口酸流量	LYQCRM.PL_PT1.EntAcidFlow  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.WasterAcidFlow = Convert.ToSingle (obj);  	//	废酸流量	LYQCRM.PL_PT1.WasterAcidFlow  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.ExtAcidFlow = Convert.ToSingle (obj);  	//	酸槽出口酸流量	LYQCRM.PL_PT1.ExtAcidFlow          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.InhibitorFlow = Convert.ToSingle (obj);  	//	缓蚀剂流量	LYQCRM.PL_PT1.InhibitorFlow  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	//	酸液温度	LYQCRM.PL_PT1.Temperature   	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: obj = dt.Rows [I] [04];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: obj = dt.Rows [I] [05];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: obj = dt.Rows [I] [06];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: obj = dt.Rows [I] [07];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PT,The following statement contains a magic number: obj = dt.Rows [I] [08];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_RT,The following statement contains a magic number: tags [02] = "LYQCRM.PL_RT4.WaterFlow";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_RT,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_RT ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.PH = Convert.ToSingle (obj);  	//	漂洗槽PH值          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	//漂洗槽温度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.WaterFlow = Convert.ToSingle (obj);  	//漂洗槽加水流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_RT,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_RT ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.PH = Convert.ToSingle (obj);  	//	漂洗槽PH值          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	//漂洗槽温度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.WaterFlow = Convert.ToSingle (obj);  	//漂洗槽加水流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_RT,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_RT ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.PH = Convert.ToSingle (obj);  	//	漂洗槽PH值          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Temperature = Convert.ToSingle (obj);  	//漂洗槽温度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.WaterFlow = Convert.ToSingle (obj);  	//漂洗槽加水流量  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_RT,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_RT,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_RT,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: tags [02] = "LYQCRM.PL_PH1.PHValue";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: tags [03] = "LYQCRM.PL_PH2.EntTemp";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: tags [04] = "LYQCRM.PL_PH2.Temperature";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: tags [05] = "LYQCRM.PL_PH2.PHValue";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: tags [06] = "LYQCRM.PL_PH3.EntTemp";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: tags [07] = "LYQCRM.PL_PH3.Temperature";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: tags [08] = "LYQCRM.PL_PH3.PHValue";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PH ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.PH1_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PH1_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PH1_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.PH2_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.PH2_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.PH2_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.PH3_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.PH3_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.PH3_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PH ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.PH1_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PH1_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PH1_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.PH2_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.PH2_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.PH2_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.PH3_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.PH3_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.PH3_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PH ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.PH1_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PH1_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PH1_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.PH2_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.PH2_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.PH2_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.PH3_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.PH3_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.PH3_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PH ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.PH1_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PH1_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PH1_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.PH2_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.PH2_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.PH2_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.PH3_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.PH3_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.PH3_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PH ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.PH1_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PH1_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PH1_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.PH2_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.PH2_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.PH2_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.PH3_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.PH3_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.PH3_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PH ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.PH1_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PH1_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PH1_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.PH2_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.PH2_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.PH2_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.PH3_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.PH3_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.PH3_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PH ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.PH1_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PH1_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PH1_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.PH2_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.PH2_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.PH2_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.PH3_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.PH3_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.PH3_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PH ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.PH1_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PH1_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PH1_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.PH2_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.PH2_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.PH2_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.PH3_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.PH3_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.PH3_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_PL_PH ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.PH1_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.PH1_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.PH1_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.PH2_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.PH2_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.PH2_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.PH3_EntTemp = Convert.ToDouble (obj);  	//	槽石墨加热器入口温度          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.PH3_Temperature = Convert.ToDouble (obj);  	//	槽石墨加热器出口温度  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.PH3_PHValue = Convert.ToDouble (obj);  	//	槽石墨加热器冷凝水PH值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: obj = dt.Rows [I] [04];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: obj = dt.Rows [I] [05];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: obj = dt.Rows [I] [06];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: obj = dt.Rows [I] [07];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: obj = dt.Rows [I] [08];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_PL_PH,The following statement contains a magic number: obj = dt.Rows [I] [09];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [02] = "LYQCRM.CGL_ZIN.COATING_WEIGHT_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [03] = "LYQCRM.CGL_ZIN.TOAVERAGE_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [04] = "LYQCRM.CGL_ZIN.BOTTOM_AVERAGE_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [05] = "LYQCRM.CGL_ZIN.FW_Act_coating_weight_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [06] = "LYQCRM.CGL_ZIN.FC_Act_coating_weight_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [07] = "LYQCRM.CGL_ZIN.FD_Act_coating_weight_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [08] = "LYQCRM.CGL_ZIN.BW_Act_coating_weight_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [09] = "LYQCRM.CGL_ZIN.BC_Act_coating_weight_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [10] = "LYQCRM.CGL_ZIN.BDW_Act_coating_weight_Len30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [11] = "LYQCRM.CGL_ZIN.GI_AZINC_POWER_Len25";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [12] = "LYQCRM.CGL_ZIN.GI_BZINC_POWER_Len25";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [13] = "LYQCRM.CGL_ZIN.GI_mainzinc_POW_Len25";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [14] = "LYQCRM.CGL_ZIN.GI_YUzinc_POW_Len25";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [15] = "LYQCRM.CGL_ZIN.GI_mainzinc_temLen25";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [16] = "LYQCRM.CGL_ZIN.GI_yuzinc_temLen25";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [17] = "LYQCRM.CGL_ZIN.GI_zinc_pot_temLen25";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [18] = "LYQCRM.CGL_ZIN.QTK_water_Temp_Len29";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: tags [19] = "LYQCRM.CGL_ZIN.Zinc_Tension_Len25";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_ZIN ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_1TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(1#TR)  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Act_thick_2TR_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	成品带钢厚度(2#TR)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.COATING_WEIGHT_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	计划镀层重量   	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.TOAVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量上表面  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.BOTTOM_AVERAGE_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层重量下表面  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.FW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面左  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.FC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面中  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.FD_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层上面右  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.BW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面左   	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.BC_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面中  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.BDW_Act_coating_weight_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	实际镀层下面右  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.GI_AZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅A感应器功率  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.GI_BZINC_POWER_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅B感应器功率  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锅感应器功率  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.GI_YUzinc_POW_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅感应器功率  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.GI_mainzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL主锌锅温度              	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.GI_yuzinc_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GL预熔锅温度  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.GI_zinc_pot_temLen25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	GI锌锅温度  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.QTK_water_Temp_Len29 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	水淬槽水温  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Zinc_Tension_Len25 = Convert.ToDouble (obj);  	//LYQCRM.CGL_ZIN	锌锅段张力  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [04];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [05];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [06];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [07];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [08];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [09];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [10];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [11];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [12];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [13];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [14];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [15];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [16];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [17];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [18];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [19];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_ZIN,The following statement contains a magic number: obj = dt.Rows [I] [20];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: tags [06] = "LYQCRM.CGL_SPM.SPM_elongation_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: tags [02] = "LYQCRM.CGL_SPM.SPM_Anti_quiver_height_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: tags [05] = "LYQCRM.CGL_SPM.SPM_DS_gap_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: tags [11] = "LYQCRM.CGL_SPM.SPM_WS_gap_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: tags [03] = "LYQCRM.CGL_SPM.SPM_bending_force_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: tags [04] = "LYQCRM.CGL_SPM.SPM_DS_force_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: tags [07] = "LYQCRM.CGL_SPM.SPM_entry_Tension_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: tags [08] = "LYQCRM.CGL_SPM.SPM_exit_Tension_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: tags [09] = "LYQCRM.CGL_SPM.SPM_rolling_force_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: tags [10] = "LYQCRM.CGL_SPM.SPM_WS_force_Len31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Process_Act_Speed_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	中央段速度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_crease_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防皱辊高度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_quiver_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防颤辊高度  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SPM_bending_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机弯辊力  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SPM_elongation_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机延伸率  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.SPM_entry_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机入口张力  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.SPM_exit_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机出口张力  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.SPM_rolling_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机轧制力  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Process_Act_Speed_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	中央段速度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_crease_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防皱辊高度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_quiver_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防颤辊高度  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SPM_bending_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机弯辊力  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SPM_elongation_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机延伸率  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.SPM_entry_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机入口张力  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.SPM_exit_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机出口张力  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.SPM_rolling_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机轧制力  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Process_Act_Speed_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	中央段速度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_crease_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防皱辊高度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_quiver_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防颤辊高度  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SPM_bending_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机弯辊力  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SPM_elongation_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机延伸率  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.SPM_entry_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机入口张力  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.SPM_exit_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机出口张力  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.SPM_rolling_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机轧制力  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Process_Act_Speed_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	中央段速度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_crease_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防皱辊高度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_quiver_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防颤辊高度  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SPM_bending_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机弯辊力  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SPM_elongation_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机延伸率  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.SPM_entry_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机入口张力  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.SPM_exit_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机出口张力  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.SPM_rolling_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机轧制力  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Process_Act_Speed_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	中央段速度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_crease_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防皱辊高度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_quiver_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防颤辊高度  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SPM_bending_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机弯辊力  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SPM_elongation_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机延伸率  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.SPM_entry_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机入口张力  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.SPM_exit_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机出口张力  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.SPM_rolling_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机轧制力  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Process_Act_Speed_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	中央段速度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_crease_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防皱辊高度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_quiver_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防颤辊高度  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SPM_bending_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机弯辊力  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SPM_elongation_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机延伸率  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.SPM_entry_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机入口张力  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.SPM_exit_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机出口张力  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.SPM_rolling_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机轧制力  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Process_Act_Speed_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	中央段速度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_crease_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防皱辊高度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_quiver_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防颤辊高度  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SPM_bending_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机弯辊力  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SPM_elongation_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机延伸率  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.SPM_entry_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机入口张力  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.SPM_exit_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机出口张力  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.SPM_rolling_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机轧制力  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Process_Act_Speed_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	中央段速度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_crease_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防皱辊高度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_quiver_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防颤辊高度  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SPM_bending_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机弯辊力  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SPM_elongation_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机延伸率  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.SPM_entry_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机入口张力  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.SPM_exit_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机出口张力  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.SPM_rolling_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机轧制力  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Process_Act_Speed_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	中央段速度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_crease_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防皱辊高度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_quiver_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防颤辊高度  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SPM_bending_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机弯辊力  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SPM_elongation_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机延伸率  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.SPM_entry_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机入口张力  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.SPM_exit_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机出口张力  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.SPM_rolling_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机轧制力  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Process_Act_Speed_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	中央段速度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_crease_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防皱辊高度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_quiver_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防颤辊高度  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SPM_bending_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机弯辊力  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SPM_elongation_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机延伸率  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.SPM_entry_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机入口张力  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.SPM_exit_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机出口张力  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.SPM_rolling_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机轧制力  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Process_Act_Speed_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	中央段速度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_crease_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防皱辊高度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_quiver_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防颤辊高度  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SPM_bending_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机弯辊力  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SPM_elongation_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机延伸率  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.SPM_entry_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机入口张力  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.SPM_exit_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机出口张力  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.SPM_rolling_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机轧制力  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_CGL_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Process_Act_Speed_Len30 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	中央段速度  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_crease_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防皱辊高度  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.SPM_Anti_quiver_height_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机防颤辊高度  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.SPM_bending_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机弯辊力  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.SPM_DS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.SPM_elongation_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机延伸率  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.SPM_entry_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机入口张力  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.SPM_exit_Tension_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机出口张力  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.SPM_rolling_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机轧制力  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_force_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧轧制力  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.SPM_WS_gap_Len31 = Convert.ToDouble (obj);  	//LYQCRM.CGL_SPM	光整机工作侧辊缝值  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: obj = dt.Rows [I] [04];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: obj = dt.Rows [I] [05];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: obj = dt.Rows [I] [06];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: obj = dt.Rows [I] [07];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: obj = dt.Rows [I] [08];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: obj = dt.Rows [I] [09];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: obj = dt.Rows [I] [10];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: obj = dt.Rows [I] [11];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_CGL_SPM,The following statement contains a magic number: obj = dt.Rows [I] [12];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [02] = "LYQCRM.TCM_ASC.c";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [03] = "LYQCRM.TCM_ASC.Gain";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [04] = "LYQCRM.TCM_ASC.Mode";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [05] = "LYQCRM.TCM_ASC.Iunit1";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [06] = "LYQCRM.TCM_ASC.Iunit2";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [07] = "LYQCRM.TCM_ASC.Iunit3";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [08] = "LYQCRM.TCM_ASC.Iunit4";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [09] = "LYQCRM.TCM_ASC.Iunit5";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [10] = "LYQCRM.TCM_ASC.Iunit6";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [11] = "LYQCRM.TCM_ASC.Iunit7";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [12] = "LYQCRM.TCM_ASC.Iunit8";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [13] = "LYQCRM.TCM_ASC.Iunit9";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [14] = "LYQCRM.TCM_ASC.Iunit10";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [15] = "LYQCRM.TCM_ASC.Iunit11";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [16] = "LYQCRM.TCM_ASC.Iunit12";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [17] = "LYQCRM.TCM_ASC.Iunit13";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [18] = "LYQCRM.TCM_ASC.Iunit14";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [19] = "LYQCRM.TCM_ASC.Iunit15";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [20] = "LYQCRM.TCM_ASC.Iunit16";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [21] = "LYQCRM.TCM_ASC.Iunit17";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [22] = "LYQCRM.TCM_ASC.Iunit18";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [23] = "LYQCRM.TCM_ASC.Iunit19";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [24] = "LYQCRM.TCM_ASC.Iunit20";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [25] = "LYQCRM.TCM_ASC.Iunit21";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [26] = "LYQCRM.TCM_ASC.Iunit22";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [27] = "LYQCRM.TCM_ASC.Iunit23";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [28] = "LYQCRM.TCM_ASC.Iunit24";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [29] = "LYQCRM.TCM_ASC.Iunit25";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [30] = "LYQCRM.TCM_ASC.Iunit26";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [31] = "LYQCRM.TCM_ASC.Iunit27";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [32] = "LYQCRM.TCM_ASC.Iunit28";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [33] = "LYQCRM.TCM_ASC.Iunit29";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [34] = "LYQCRM.TCM_ASC.Iunit30";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: tags [35] = "LYQCRM.TCM_ASC.Iunit31";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_ASC ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.a = Convert.ToDouble (obj);  	//	板形系数a          	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.b = Convert.ToDouble (obj);  	//	板形系数b         	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.c = Convert.ToDouble (obj);  	//	板形系数c         	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Gain = Convert.ToDouble (obj);  	//	ASC增益  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Mode = Convert.ToDouble (obj);  	//	ASC模式   	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.Iunit1 = Convert.ToDouble (obj);  	//	板形仪1区平直度I-unit          	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.Iunit2 = Convert.ToDouble (obj);  	//	板形仪2区平直度I-unit          	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.Iunit3 = Convert.ToDouble (obj);  	//	板形仪3区平直度I-unit         	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Iunit4 = Convert.ToDouble (obj);  	//	板形仪4区平直度I-unit          	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Iunit5 = Convert.ToDouble (obj);  	//	板形仪5区平直度I-unit  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.Iunit6 = Convert.ToDouble (obj);  	//	板形仪6区平直度I-unit          	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.Iunit7 = Convert.ToDouble (obj);  	//	板形仪7区平直度I-unit        	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Iunit8 = Convert.ToDouble (obj);  	//	板形仪8区平直度I-unit          	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Iunit9 = Convert.ToDouble (obj);  	//	板形仪9区平直度I-unit          	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.Iunit10 = Convert.ToDouble (obj);  	//	板形仪10区平直度I-unit  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Iunit11 = Convert.ToDouble (obj);  	//	板形仪11区平直度I-unit         	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.Iunit12 = Convert.ToDouble (obj);  	//	板形仪12区平直度I-unit          	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.Iunit13 = Convert.ToDouble (obj);  	//	板形仪13区平直度I-unit         	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.Iunit14 = Convert.ToDouble (obj);  	//	板形仪14区平直度I-unit          	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.Iunit15 = Convert.ToDouble (obj);  	//	板形仪15区平直度I-unit  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Iunit16 = Convert.ToDouble (obj);  	//	板形仪16区平直度I-unit          	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.Iunit17 = Convert.ToDouble (obj);  	//	板形仪17区平直度I-unit          	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.Iunit18 = Convert.ToDouble (obj);  	//	板形仪18区平直度I-unit          	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.Iunit19 = Convert.ToDouble (obj);  	//	板形仪19区平直度I-unit  	obj = dt.Rows [I] [25];  	if (obj.ToString ().Length > 0)  		lst.Iunit20 = Convert.ToDouble (obj);  	//	板形仪20区平直度I-unit  	obj = dt.Rows [I] [26];  	if (obj.ToString ().Length > 0)  		lst.Iunit21 = Convert.ToDouble (obj);  	//	板形仪21区平直度I-unit         	obj = dt.Rows [I] [27];  	if (obj.ToString ().Length > 0)  		lst.Iunit22 = Convert.ToDouble (obj);  	//	板形仪22区平直度I-unit          	obj = dt.Rows [I] [28];  	if (obj.ToString ().Length > 0)  		lst.Iunit23 = Convert.ToDouble (obj);  	//	板形仪23区平直度I-unit          	obj = dt.Rows [I] [29];  	if (obj.ToString ().Length > 0)  		lst.Iunit24 = Convert.ToDouble (obj);  	//	板形仪24区平直度I-unit          	obj = dt.Rows [I] [30];  	if (obj.ToString ().Length > 0)  		lst.Iunit25 = Convert.ToDouble (obj);  	//	板形仪25区平直度I-unit  	obj = dt.Rows [I] [31];  	if (obj.ToString ().Length > 0)  		lst.Iunit26 = Convert.ToDouble (obj);  	//	板形仪26区平直度I-unit          	obj = dt.Rows [I] [32];  	if (obj.ToString ().Length > 0)  		lst.Iunit27 = Convert.ToDouble (obj);  	//	板形仪27区平直度I-unit          	obj = dt.Rows [I] [33];  	if (obj.ToString ().Length > 0)  		lst.Iunit28 = Convert.ToDouble (obj);  	//	板形仪28区平直度I-unit         	obj = dt.Rows [I] [34];  	if (obj.ToString ().Length > 0)  		lst.Iunit29 = Convert.ToDouble (obj);  	//	板形仪29区平直度I-unit                 	obj = dt.Rows [I] [35];  	if (obj.ToString ().Length > 0)  		lst.Iunit30 = Convert.ToDouble (obj);  	//	板形仪30区平直度I-unit  	obj = dt.Rows [I] [36];  	if (obj.ToString ().Length > 0)  		lst.Iunit31 = Convert.ToDouble (obj);  	//	板形仪31区平直度I-unit  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [04];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [05];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [06];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [07];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [08];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [09];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [10];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [11];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [12];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [13];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [14];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [15];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [16];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [17];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [18];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [19];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [20];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [21];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [22];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [23];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [24];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [25];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [26];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [27];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [28];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [29];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [30];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [31];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [32];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [33];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [34];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [35];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_ASC,The following statement contains a magic number: obj = dt.Rows [I] [36];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [02] = "LYQCRM.TCM_F" + F + ".FGCGap";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [03] = "LYQCRM.TCM_F" + F + ".Fslip";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [04] = "LYQCRM.TCM_F" + F + ".IMRBender";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [05] = "LYQCRM.TCM_F" + F + ".IMRBenderSet";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [06] = "LYQCRM.TCM_F" + F + ".IMRbShift";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [07] = "LYQCRM.TCM_F" + F + ".IMRtShift";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [08] = "LYQCRM.TCM_F" + F + ".Leveling";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [09] = "LYQCRM.TCM_F" + F + ".Reduction";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [10] = "LYQCRM.TCM_F" + F + ".RFDif";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [11] = "LYQCRM.TCM_F" + F + ".RForceSet";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [12] = "LYQCRM.TCM_F" + F + ".RollForce";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [13] = "LYQCRM.TCM_F" + F + ".Speed";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [14] = "LYQCRM.TCM_F" + F + ".SpeedSet";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [15] = "LYQCRM.TCM_F" + F + ".Tension";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [16] = "LYQCRM.TCM_F" + F + ".TensionDif";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [17] = "LYQCRM.TCM_F" + F + ".TensionSet";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [18] = "LYQCRM.TCM_F" + F + ".ThickDif";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [19] = "LYQCRM.TCM_F" + F + ".ThickSet";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [20] = "LYQCRM.TCM_F" + F + ".Torque";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [21] = "LYQCRM.TCM_F" + F + ".UTension";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [22] = "LYQCRM.TCM_F" + F + ".WRBender";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: tags [23] = "LYQCRM.TCM_F" + F + ".WSGap";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_TCM_F ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	TimeSpan ts = Convert.ToDateTime (lst.DateAndTime) - TimeStart;  	lst.Duration = (float)ts.TotalMilliseconds / 60000;  	//dt.Rows[I][00]是时间列  	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.Current = Convert.ToDouble (obj);  	//	轧机主电机电流  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.DSGap = Convert.ToDouble (obj);  	//	轧机传动侧辊缝(mm)  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.FGCGap = Convert.ToDouble (obj);  	//	机架FGC辊缝  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Fslip = Convert.ToDouble (obj);  	//	机架前滑  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.IMRBender = Convert.ToDouble (obj);  	//	中间辊弯辊力  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.IMRBenderSet = Convert.ToDouble (obj);  	//	中间辊弯辊力设定  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.IMRbShift = Convert.ToDouble (obj);  	//	机架中间辊下辊串辊量  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.IMRtShift = Convert.ToDouble (obj);  	//	机架中间辊上辊串辊量  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.Leveling = Convert.ToDouble (obj);  	//	轧机倾斜  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.Reduction = Convert.ToDouble (obj);  	//	机架压下分配量  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RFDif = Convert.ToDouble (obj);  	//	轧机轧制压力差（WS-DS）  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RForceSet = Convert.ToDouble (obj);  	//	轧机轧制力设定  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.RollForce = Convert.ToDouble (obj);  	//	轧机轧制压力  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.Speed = Convert.ToDouble (obj);  	//轧机速度  	obj = dt.Rows [I] [15];  	if (obj.ToString ().Length > 0)  		lst.SpeedSet = Convert.ToDouble (obj);  	//	轧机速度设定  	obj = dt.Rows [I] [16];  	if (obj.ToString ().Length > 0)  		lst.Tension = Convert.ToDouble (obj);  	//	轧机间张力  	obj = dt.Rows [I] [17];  	if (obj.ToString ().Length > 0)  		lst.TensionDif = Convert.ToDouble (obj);  	//	轧机间张力差（WS-DS）  	obj = dt.Rows [I] [18];  	if (obj.ToString ().Length > 0)  		lst.TensionSet = Convert.ToDouble (obj);  	//	轧机间张力设定  	obj = dt.Rows [I] [19];  	if (obj.ToString ().Length > 0)  		lst.ThickDif = Convert.ToDouble (obj);  	//	轧机出口厚度偏差  	obj = dt.Rows [I] [20];  	if (obj.ToString ().Length > 0)  		lst.ThickSet = Convert.ToDouble (obj);  	//	轧机出口厚度设定  	obj = dt.Rows [I] [21];  	if (obj.ToString ().Length > 0)  		lst.Torque = Convert.ToDouble (obj);  	//轧机扭矩  	obj = dt.Rows [I] [22];  	if (obj.ToString ().Length > 0)  		lst.UTension = Convert.ToDouble (obj);  	//轧机单位张力  	obj = dt.Rows [I] [23];  	if (obj.ToString ().Length > 0)  		lst.WRBender = Convert.ToDouble (obj);  	//工作辊弯辊力  	obj = dt.Rows [I] [24];  	if (obj.ToString ().Length > 0)  		lst.WSGap = Convert.ToDouble (obj);  	//轧机工作侧辊缝(mm)	  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: lst.Duration = (float)ts.TotalMilliseconds / 60000;  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [04];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [05];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [06];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [07];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [08];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [09];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [10];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [11];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [12];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [13];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [14];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [15];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [16];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [17];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [18];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [19];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [20];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [21];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [22];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [23];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_TCM_F,The following statement contains a magic number: obj = dt.Rows [I] [24];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: tags [02] = "LYQCRM.SPM.Enbri_Top_Tension";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: tags [03] = "LYQCRM.SPM.Exbri_Bot_Tension";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: tags [04] = "LYQCRM.SPM.Exbri_Top_Tension";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: tags [05] = "LYQCRM.SPM.MILL_Speed_Act";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: tags [06] = "LYQCRM.SPM.POR_Tension";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: tags [07] = "LYQCRM.SPM.RBC1A_VAL_ACT";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: tags [08] = "LYQCRM.SPM.RGC01_ELG_REF";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: tags [09] = "LYQCRM.SPM.RGC01_StripWidth";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: tags [10] = "LYQCRM.SPM.RGC01_TLT_ACT";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: tags [11] = "LYQCRM.SPM.RGC01_TRF_ACT";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: tags [12] = "LYQCRM.SPM.Strip_Thickness";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: tags [13] = "LYQCRM.SPM.TER_Tension";  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: for (int I = 0; I < dt.Rows.Count; I++) {  	lst = new CRM_HisDB_SPM ();  	lst.DateAndTime = Convert.ToDateTime (dt.Rows [I] [00]);  	//dt.Rows[I][00]是时间列                 	obj = dt.Rows [I] [01];  	if (obj.ToString ().Length > 0)  		lst.ELG1_ELG_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [02];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [03];  	if (obj.ToString ().Length > 0)  		lst.Enbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [04];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Bot_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [05];  	if (obj.ToString ().Length > 0)  		lst.Exbri_Top_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [06];  	if (obj.ToString ().Length > 0)  		lst.MILL_Speed_Act = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [07];  	if (obj.ToString ().Length > 0)  		lst.POR_Tension = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [08];  	if (obj.ToString ().Length > 0)  		lst.RBC1A_VAL_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [09];  	if (obj.ToString ().Length > 0)  		lst.RGC01_ELG_REF = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [10];  	if (obj.ToString ().Length > 0)  		lst.RGC01_StripWidth = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [11];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TLT_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [12];  	if (obj.ToString ().Length > 0)  		lst.RGC01_TRF_ACT = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [13];  	if (obj.ToString ().Length > 0)  		lst.Strip_Thickness = Convert.ToDouble (obj);  	//  	obj = dt.Rows [I] [14];  	if (obj.ToString ().Length > 0)  		lst.TER_Tension = Convert.ToDouble (obj);  	//  	LST.Add (lst);  }  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [02];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [03];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [04];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [05];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [06];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [07];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [08];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [09];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [10];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [11];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [12];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [13];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_HisDB_SPM,The following statement contains a magic number: obj = dt.Rows [I] [14];  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,DefinePdfFont,The following statement contains a magic number: FontHei = new iTextSharp.text.Font (bfHei' 32' 1);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,DefinePdfFont,The following statement contains a magic number: FontKai = new iTextSharp.text.Font (bfKai' 32' 1);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,DefinePdfFont,The following statement contains a magic number: FontSong = new iTextSharp.text.Font (bfSun' 32' 1);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,DefinePdfFont,The following statement contains a magic number: FontSong10 = new iTextSharp.text.Font (bfSun' 10' 1);  
Magic Number,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,DefinePdfFont,The following statement contains a magic number: FontCaption = new iTextSharp.text.Font (bfKai' 12' 1);  
Duplicate Code,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PEDIGREE,The method contains a code clone-set at the following line numbers (starting from the method definition): ((10' 49)' (59' 98))
Missing Default,QtDataTrace.Access,QtDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\QtDataTraceService.cs,GetQtData,The following switch statement is missing a default case: switch (tablename) {  case "SM_ELEM_ANA":  	sql = string.Format ("select {0} from {1} where rowid in (select rowid from SM_ELEM_ANA_DA where {2} and processcode_da = \'{3}\')"' columnname' tablename' whereClause' arg.ProcessCode);  	break;  case "HRM_L2_COILREPORTS":  	sql = string.Format ("select {0} from {1} where slab_id in (select slab_id from HRM_L2_COILREPORTS_DA where {2})"' columnname' tablename' whereClause);  	break;  case "SM_LF_HEAT":  	sql = string.Format ("select {0} from {1} where rowid in (select rowid from SM_LF_HEAT_DA where {2})"' columnname' tablename' whereClause);  	break;  case "SM_BOF_HEAT":  	sql = string.Format ("select {0} from {1} where rowid in (select rowid from SM_BOF_HEAT_DA where {2})"' columnname' tablename' whereClause);  	break;  case "SM_RH_HEAT":  	sql = string.Format ("select {0} from {1} where rowid in (select rowid from SM_RH_HEAT_DA where {2})"' columnname' tablename' whereClause);  	break;  }  
Missing Default,QtDataTrace.Access,SingleQtTableLY210,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLY210.cs,GetHEAT_TRACK_ByDataRow,The following switch statement is missing a default case: switch (DEVICE_NO.Substring (0' 2)) {  case "MI":  	lst.MI_Station = "1#";  	lst.MI_Arrive_Time = dr ["start_time"].ToString ();  	lst.MI_Leave_Time = dr ["stop_time"].ToString ();  	if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) {  		ts = Leave_Time - Arrive_Time;  		lst.MI_Duration = ts.TotalMinutes.ToString ("#0.0");  	}  	break;  case "KR":  	lst.KR_Station = DEVICE_NO.Substring (DEVICE_NO.Length - 1) + "#";  	lst.KR_Arrive_Time = dr ["start_time"].ToString ();  	lst.KR_Leave_Time = dr ["stop_time"].ToString ();  	if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) {  		ts = Leave_Time - Arrive_Time;  		lst.KR_Duration = ts.TotalMinutes.ToString ("#0.0");  	}  	break;  case "BO":  	lst.BOF_Station = DEVICE_NO.Substring (DEVICE_NO.Length - 1) + "#";  	lst.BOF_Arrive_Time = dr ["start_time"].ToString ();  	lst.BOF_Leave_Time = dr ["stop_time"].ToString ();  	if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) {  		ts = Leave_Time - Arrive_Time;  		lst.BOF_Duration = ts.TotalMinutes.ToString ("#0.0");  	}  	break;  case "LF":  	lst.LF_Station = DEVICE_NO.Substring (DEVICE_NO.Length - 1) + "#";  	lst.LF_Arrive_Time = dr ["start_time"].ToString ();  	lst.LF_Leave_Time = dr ["stop_time"].ToString ();  	if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) {  		ts = Leave_Time - Arrive_Time;  		lst.LF_Duration = ts.TotalMinutes.ToString ("#0.0");  	}  	break;  case "RH":  	lst.RH_Station = DEVICE_NO.Substring (DEVICE_NO.Length - 1) + "#";  	lst.RH_Arrive_Time = dr ["start_time"].ToString ();  	lst.RH_Leave_Time = dr ["stop_time"].ToString ();  	if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) {  		ts = Leave_Time - Arrive_Time;  		lst.RH_Duration = ts.TotalMinutes.ToString ("#0.0");  	}  	break;  case "CC":  	lst.CC_Station = DEVICE_NO.Substring (DEVICE_NO.Length - 1) + "#";  	lst.CC_Arrive_Time = dr ["start_time"].ToString ();  	lst.CC_Leave_Time = dr ["stop_time"].ToString ();  	if (DateTime.TryParse (dr ["start_time"].ToString ()' out Arrive_Time) && DateTime.TryParse (dr ["stop_time"].ToString ()' out Leave_Time)) {  		ts = Leave_Time - Arrive_Time;  		lst.CC_Duration = ts.TotalMinutes.ToString ("#0.0");  	}  	break;  }  
Missing Default,QtDataTrace.Access,SingleQtTableLYCRM,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.Access\SingleQtTableLYCRM.cs,GetCRM_CoilInfo_PLTCM,The following switch statement is missing a default case: switch (EquiID) {  //这里边的IF条件，是因为有许多重复的消息  //步进式送卷机，进入到拆卷系统  case "CV1 ":  	if (lst.Conveyor01_Time.Length <= 0)  		lst.Conveyor01_Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "CV2 ":  	if (lst.Conveyor02_Time.Length <= 0)  		lst.Conveyor02_Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "CV3 ":  	if (lst.Conveyor03_Time.Length <= 0)  		lst.Conveyor03_Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "CV4 ":  	if (lst.Conveyor04_Time.Length <= 0)  		lst.Conveyor04_Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "CV5 ":  	if (lst.Conveyor05_Time.Length <= 0)  		lst.Conveyor05_Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "CV6 ":  	if (lst.Conveyor06_Time.Length <= 0)  		lst.Conveyor06_Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "CV7 ":  	if (lst.Conveyor07_Time.Length <= 0)  		lst.Conveyor07_Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "CV8 ":  	if (lst.Conveyor08_Time.Length <= 0)  		lst.Conveyor08_Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "CV9 ":  	if (lst.Conveyor09_Time.Length <= 0)  		lst.Conveyor09_Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  //传送  case "CT1 ":  	if (lst.CoilTransfer.Length <= 0) {  		lst.CoilTransfer = "1";  		lst.CoilTransTime = dt.Rows [RowIndex] ["start_time"].ToString ();  	}  	break;  case "CT2 ":  	if (lst.CoilTransfer.Length <= 0) {  		lst.CoilTransfer = "2";  		lst.CoilTransTime = dt.Rows [RowIndex] ["start_time"].ToString ();  	}  	break;  case "ECC1":  	//Coil cars 钢卷台车  	if (lst.CoilCar.Length <= 0) {  		lst.CoilCar = "1";  		lst.CoilCarsTime = dt.Rows [RowIndex] ["start_time"].ToString ();  	}  	break;  case "ECC2":  	//Coil cars 钢卷台车  	if (lst.CoilCar.Length <= 0) {  		lst.CoilCar = "2";  		lst.CoilCarsTime = dt.Rows [RowIndex] ["start_time"].ToString ();  	}  	break;  //开卷  case "POR1":  	if (lst.DeCoiler.Length <= 0) {  		lst.DeCoiler = "1";  		lst.DeCoilTime = dt.Rows [RowIndex] ["start_time"].ToString ();  	}  	break;  case "POR2":  	if (lst.DeCoiler.Length <= 0) {  		lst.DeCoiler = "2";  		lst.DeCoilTime = dt.Rows [RowIndex] ["start_time"].ToString ();  	}  	break;  case "WX01":  	//Welder 焊接机  	if (lst.WelderTime.Length <= 0)  		lst.WelderTime = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "WX02":  	//EntryLooperTime;//入口活套进入时间  	if (lst.EntryLooperTime_IN.Length <= 0)  		lst.EntryLooperTime_IN = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  //以下点不跟踪  //WPDX3 Entry looper 12.5% length  //WPDX4 Entry looper 25% length  //WPDX5 Entry looper 37.5% length  //WPDX6 Entry looper 50% length  //WPDX7 Entry looper 62.5% length  //WPDX8 Entry looper 75% length  //WPDX9 Entry looper 87.5% length  case "WX10":  	//EntryLooperTime;//入口活套退出时间  	if (lst.EntryLooperTime_OUT.Length <= 0)  		lst.EntryLooperTime_OUT = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "WX11":  	// WPD1 张紧辊1#   	if (lst.WPD1Time.Length <= 0)  		lst.WPD1Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "WX12":  	// T/L位置 张力平整机  	if (lst.TensionLevelerTime.Length <= 0)  		lst.TensionLevelerTime = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "WX13":  	//PL entry position 进入酸洗池  	if (lst.PL_EntryTime.Length <= 0)  		lst.PL_EntryTime = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "WX14":  	//酸洗池退出时间   	if (lst.PL_ExitTime.Length <= 0)  		lst.PL_ExitTime = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "WX15":  	//#1 Delivery looper entry position 出口活套进入时间  	if (lst.ExitLooper01Time_IN.Length <= 0)  		lst.ExitLooper01Time_IN = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  //以下点不跟踪  //WPDX16 #1 Delivery looper 25% length  //WPDX17 #1 Delivery looper 50% length  //WPDX18 #1 Delivery looper 75% length  case "WX19":  	//#1 Delivery looper exit position 1#出口活套退出时间  	if (lst.ExitLooper01Time_OUT.Length <= 0)  		lst.ExitLooper01Time_OUT = dt.Rows [RowIndex] ["start_time"].ToString ();  	//同时也是2#张紧辊的进入时间  	if (lst.WPD2Time.Length <= 0)  		lst.WPD2Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "WX20":  	//Notcher Entry 月牙剪  	if (lst.NotcherEntryTime.Length <= 0)  		lst.NotcherEntryTime = dt.Rows [RowIndex] ["start_time"].ToString ();  	//同时也是3#张紧辊的进入时间  	if (lst.WPD3Time.Length <= 0)  		lst.WPD3Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "WX21":  	//#2 Delivery looper entry position 2#出口活套进入时间  	if (lst.ExitLooper02Time_IN.Length <= 0)  		lst.ExitLooper02Time_IN = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  //以下点不跟踪  //WPDX22 #2 Delivery looper 25% length  //WPDX23 #2 Delivery looper 50% length  //WPDX24 #2 Delivery looper 75% length  case "WX25":  	//#2 Delivery looper Exit position 2#出口活套退出时间  	if (lst.ExitLooper02Time_OUT.Length <= 0)  		lst.ExitLooper02Time_OUT = dt.Rows [RowIndex] ["start_time"].ToString ();  	//同时也是4#张紧辊的进入时间  	if (lst.WPD4Time.Length <= 0)  		lst.WPD4Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  case "WX26":  	//TCM entry进入轧机实际  	if (lst.TCM_EntryTime.Length <= 0)  		lst.TCM_EntryTime = dt.Rows [RowIndex] ["start_time"].ToString ();  	//同时也是5#张紧辊的进入时间  	if (lst.WPD5Time.Length <= 0)  		lst.WPD5Time = dt.Rows [RowIndex] ["start_time"].ToString ();  	break;  }  
