Implementation smell,Namespace,Class,File,Method,Description
Complex Method,QtDataTrace.AnalyzeService,LocalizationDataBackUpService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataBackUpService.cs,SaveTable,Cyclomatic complexity of the method is 18
Complex Method,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Start,Cyclomatic complexity of the method is 13
Complex Method,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,threadMethod_Merge,Cyclomatic complexity of the method is 9
Complex Method,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,threadMethod_Single,Cyclomatic complexity of the method is 8
Complex Method,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,threadMethod_Back,Cyclomatic complexity of the method is 8
Complex Method,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,threadMethod_Pre,Cyclomatic complexity of the method is 11
Complex Method,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,buildBackTraceTree,Cyclomatic complexity of the method is 10
Complex Method,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,buildPreTraceTree,Cyclomatic complexity of the method is 9
Complex Method,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,Cyclomatic complexity of the method is 16
Long Parameter List,QtDataTrace.AnalyzeService,KMeansAnalyzeFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeBLL.cs,KMeansAnalyzeFactory,The method has 9 parameters.
Long Parameter List,QtDataTrace.AnalyzeService,ContourPlotFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeBLL.cs,ContourPlotFactory,The method has 8 parameters.
Long Parameter List,QtDataTrace.AnalyzeService,RpartFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeBLL.cs,RpartFactory,The method has 7 parameters.
Long Parameter List,QtDataTrace.AnalyzeService,LmRegressFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeBLL.cs,LmRegressFactory,The method has 5 parameters.
Long Parameter List,QtDataTrace.AnalyzeService,LocalizationDataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeService.cs,CCTStart,The method has 7 parameters.
Long Parameter List,QtDataTrace.AnalyzeService,LocalizationDataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeService.cs,KMeansStart,The method has 13 parameters.
Long Parameter List,QtDataTrace.AnalyzeService,LocalizationDataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeService.cs,ContourPlotStart,The method has 12 parameters.
Long Parameter List,QtDataTrace.AnalyzeService,LocalizationDataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeService.cs,RpartStart,The method has 11 parameters.
Long Parameter List,QtDataTrace.AnalyzeService,LocalizationDataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeService.cs,LmRegressStart,The method has 9 parameters.
Long Parameter List,QtDataTrace.AnalyzeService,LocalizationDataBackUpService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataBackUpService.cs,SaveTable,The method has 5 parameters.
Long Parameter List,QtDataTrace.AnalyzeService,LocalizationDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceService.cs,NewDataTrace,The method has 5 parameters.
Long Statement,QtDataTrace.AnalyzeService,LocalizationDataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeService.cs,KMeansStart,The length of the statement  "		factory = new KMeansAnalyzeFactory (new ChoosedData (data' selected)' properties' maxcount' minclustercount' maxclustercount' m' s' initialmode' maxthread); " is 156.
Long Statement,QtDataTrace.AnalyzeService,LocalizationDataBackUpService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataBackUpService.cs,SaveTable,The length of the statement  "					if (column.DataType == typeof(double) || column.DataType == typeof(decimal) || column.DataType == typeof(float) || column.DataType == typeof(int)) { " is 148.
Long Statement,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Start,The length of the statement  "			tasks [i] = taskFactory.StartNew (threadMethod_Back' new threadInputType ((listcount * i) / this.threadcount' (listcount * (i + 1)) / this.threadcount' threadTables [i])' cancel.Token); " is 185.
Long Statement,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Start,The length of the statement  "			tasks [i] = taskFactory.StartNew (threadMethod_Single' new threadInputType ((listcount * i) / this.threadcount' (listcount * (i + 1)) / this.threadcount' threadTables [i])' cancel.Token); " is 187.
Long Statement,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Start,The length of the statement  "			tasks [i] = taskFactory.StartNew (threadMethod_Pre' new threadInputType ((listcount * i) / this.threadcount' (listcount * (i + 1)) / this.threadcount' threadTables [i])' cancel.Token); " is 184.
Long Statement,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,threadMethod_Single,The length of the statement  "				command.CommandText = string.Format ("select IN_MAT_ID1'IN_MAT_ID2 from PROCESS_MAT_PEDIGREE where OUT_MAT_ID = '{0}' and PROCESS_CODE = '{1}'"' root.OutId' root.Process); " is 171.
Long Statement,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,threadMethod_Back,The length of the statement  "				command.CommandText = string.Format ("select IN_MAT_ID1'IN_MAT_ID2 from PROCESS_MAT_PEDIGREE where OUT_MAT_ID = '{0}' and PROCESS_CODE = '{1}'"' root.OutId' root.Process); " is 171.
Long Statement,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,threadMethod_Pre,The length of the statement  "				command.CommandText = string.Format ("select IN_MAT_ID1'IN_MAT_ID2 from PROCESS_MAT_PEDIGREE where OUT_MAT_ID = '{0}' and PROCESS_CODE = '{1}'"' root.OutId' root.Process); " is 171.
Long Statement,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,buildBackTraceTree,The length of the statement  "	command.CommandText = string.Format ("select OUT_MAT_ID'PROCESS_CODE from PROCESS_MAT_PEDIGREE where IN_MAT_ID1 = '{0}' or IN_MAT_ID2 = '{0}'"' node.OutId); " is 156.
Long Statement,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,buildPreTraceTree,The length of the statement  "	command.CommandText = string.Format ("select IN_MAT_ID1'IN_MAT_ID2'PROCESS_CODE from PROCESS_MAT_PEDIGREE where OUT_MAT_ID = '{0}'"' node.OutId); " is 145.
Long Statement,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The length of the statement  "				where (r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && ((r ["COLUMN_CHINESE"].ToString () == null || r ["COLUMN_CHINESE"].ToString ().Trim () == "") ? r ["COLUMN_NAME"].ToString () : r ["COLUMN_CHINESE"].ToString ()) == columnchinese) " is 336.
Long Statement,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The length of the statement  "					sqlparams [0] += string.Format ("{0}.{1} \"{2}\"' "' tablename' column ["COLUMN_NAME"]' processchinese + "_" + columnchinese); " is 126.
Long Statement,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The length of the statement  "			where r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && r ["KEY"] != null && r ["KEY"].ToString ().Trim () != "" " is 212.
Complex Conditional,QtDataTrace.AnalyzeService,LocalizationDataBackUpService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataBackUpService.cs,SaveTable,The conditional expression  "column.DataType == typeof(double) || column.DataType == typeof(decimal) || column.DataType == typeof(float) || column.DataType == typeof(int)"  is complex.
Magic Number,QtDataTrace.AnalyzeService,LocalizationDataAnalyzeBLL,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeBLL.cs,Add,The following statement contains a magic number: lock (factories) {  	if (factories.Count > 3) {  		bool temp = false;  		foreach (var k in factories.Keys) {  			var f = factories [k];  			if (!f.Working) {  				factories.Remove (k);  				temp = true;  				break;  			}  		}  		if (!temp)  			throw new Exception ("该用户建立运算过多，请等待其他运算完成");  	}  	id = Guid.NewGuid ();  	factories.Add (id' factory);  }  
Magic Number,QtDataTrace.AnalyzeService,LocalizationDataAnalyzeBLL,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeBLL.cs,Add,The following statement contains a magic number: if (factories.Count > 3) {  	bool temp = false;  	foreach (var k in factories.Keys) {  		var f = factories [k];  		if (!f.Working) {  			factories.Remove (k);  			temp = true;  			break;  		}  	}  	if (!temp)  		throw new Exception ("该用户建立运算过多，请等待其他运算完成");  }  
Magic Number,QtDataTrace.AnalyzeService,ContourPlotFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeBLL.cs,GetProgress,The following statement contains a magic number: return process = (process + 10) % 100;  
Magic Number,QtDataTrace.AnalyzeService,ContourPlotFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeBLL.cs,GetProgress,The following statement contains a magic number: return process = (process + 10) % 100;  
Magic Number,QtDataTrace.AnalyzeService,RpartFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeBLL.cs,GetProgress,The following statement contains a magic number: return process = (process + 10) % 100;  
Magic Number,QtDataTrace.AnalyzeService,RpartFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeBLL.cs,GetProgress,The following statement contains a magic number: return process = (process + 10) % 100;  
Magic Number,QtDataTrace.AnalyzeService,LmRegressFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeBLL.cs,GetProgress,The following statement contains a magic number: return process = (process + 10) % 100;  
Magic Number,QtDataTrace.AnalyzeService,LmRegressFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeBLL.cs,GetProgress,The following statement contains a magic number: return process = (process + 10) % 100;  
Magic Number,QtDataTrace.AnalyzeService,LocalizationDataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeService.cs,GetProcess,The following statement contains a magic number: if (temp == null)  	return -2;  
Magic Number,QtDataTrace.AnalyzeService,LocalizationDataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeService.cs,GetProcess,The following statement contains a magic number: return -2;  
Magic Number,QtDataTrace.AnalyzeService,LocalizationDataAnalyzeService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataAnalyzeService.cs,GetProcess,The following statement contains a magic number: return 1000;  
Magic Number,QtDataTrace.AnalyzeService,LocalizationDataTraceBLL,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Add,The following statement contains a magic number: lock (factories) {  	if (factories.Count > 3) {  		bool temp = false;  		foreach (var k in factories.Keys) {  			var f = factories [k];  			if (!f.Writing && !f.Reading) {  				factories.Remove (k);  				temp = true;  				break;  			}  		}  		if (!temp)  			throw new Exception ("历史数据均在处理，无法新建数据");  	}  	id = Guid.NewGuid ();  	factories.Add (id' factory);  }  
Magic Number,QtDataTrace.AnalyzeService,LocalizationDataTraceBLL,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Add,The following statement contains a magic number: if (factories.Count > 3) {  	bool temp = false;  	foreach (var k in factories.Keys) {  		var f = factories [k];  		if (!f.Writing && !f.Reading) {  			factories.Remove (k);  			temp = true;  			break;  		}  	}  	if (!temp)  		throw new Exception ("历史数据均在处理，无法新建数据");  }  
Magic Number,QtDataTrace.AnalyzeService,LocalizationDataTraceBLL,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Add,The following statement contains a magic number: lock (factories) {  	if (factories.Keys.Contains (id))  		throw new Exception ("ID已存在");  	if (factories.Count > 3) {  		bool temp = false;  		foreach (var k in factories.Keys) {  			var f = factories [k];  			if (!f.Writing && !f.Reading) {  				factories.Remove (k);  				temp = true;  				break;  			}  		}  		if (!temp)  			throw new Exception ("历史数据均在处理，无法新建数据");  	}  	factories.Add (id' factory);  }  
Magic Number,QtDataTrace.AnalyzeService,LocalizationDataTraceBLL,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Add,The following statement contains a magic number: if (factories.Count > 3) {  	bool temp = false;  	foreach (var k in factories.Keys) {  		var f = factories [k];  		if (!f.Writing && !f.Reading) {  			factories.Remove (k);  			temp = true;  			break;  		}  	}  	if (!temp)  		throw new Exception ("历史数据均在处理，无法新建数据");  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Start,The following statement contains a magic number: if (listcount / 3 < this.threadcount)  	this.threadcount = listcount / 3 == 0 ? 1 : listcount / 3;  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Start,The following statement contains a magic number: if (listcount / 3 < this.threadcount)  	this.threadcount = listcount / 3 == 0 ? 1 : listcount / 3;  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Start,The following statement contains a magic number: if (listcount / 3 < this.threadcount)  	this.threadcount = listcount / 3 == 0 ? 1 : listcount / 3;  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Start,The following statement contains a magic number: this.threadcount = listcount / 3 == 0 ? 1 : listcount / 3;  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Start,The following statement contains a magic number: this.threadcount = listcount / 3 == 0 ? 1 : listcount / 3;  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,GetProgress,The following statement contains a magic number: return Math.Min (progress' rowcount) * 99 / rowcount + Math.Max (progress' rowcount) - rowcount;  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,buildPreTraceTree,The following statement contains a magic number: while (reader.Read ()) {  	string protemp = reader [2].ToString ();  	string id2temp = reader [1] == null ? "" : reader [1].ToString ();  	string id1temp = reader [0].ToString ();  	int seqtemp;  	if (processseqs.TryGetValue (protemp' out seqtemp) && (seqtemp < seq) && (seqtemp > maxseq)) {  		maxseq = seqtemp;  		pros = new Tuple<int' string' string' string> (seqtemp' protemp' id1temp' id2temp);  	}  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: if (processconfig != null) {  	List<string> inids = new List<string> ();  	List<string> outids = new List<string> ();  	List<string> processcodes = new List<string> ();  	int tc = processconfig.Tables.Count;  	for (int i = 0; i < tc; i++) {  		string[] sqlparams = new string[] {  			""'  			""'  			""  		};  		string tablechinese = processconfig.Tables [i].ChineseName;  		var table = tables.First (input =>  {  			return input ["TABLE_CHINESE"].ToString () == tablechinese;  		});  		string tablename = table ["TABLE_NAME"].ToString ();  		sqlparams [1] = tablename;  		int cc = processconfig.Tables [i].Columns.Count;  		if (cc == 0)  			continue;  		for (int j = 0; j < cc; j++) {  			string columnchinese = processconfig.Tables [i].Columns [j].ChineseName;  			var column = (from r in ConfigFile.Tables ["Column"].AsEnumerable ()  			where (r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && ((r ["COLUMN_CHINESE"].ToString () == null || r ["COLUMN_CHINESE"].ToString ().Trim () == "") ? r ["COLUMN_NAME"].ToString () : r ["COLUMN_CHINESE"].ToString ()) == columnchinese)  			select r).FirstOrDefault ();  			if (column == null)  				sqlparams [0] += string.Format ("null \"{0}\"' "' processchinese + "_" + columnchinese);  			else  				sqlparams [0] += string.Format ("{0}.{1} \"{2}\"' "' tablename' column ["COLUMN_NAME"]' processchinese + "_" + columnchinese);  		}  		if (sqlparams [0] != "")  			sqlparams [0] = sqlparams [0].Substring (0' sqlparams [0].Length - 2);  		var keycolumns = from r in ConfigFile.Tables ["Column"].AsEnumerable ()  		where r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && r ["KEY"] != null && r ["KEY"].ToString ().Trim () != ""  		select r;  		int kcc = keycolumns.Count ();  		for (int j = 0; j < kcc; j++) {  			switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  			case "IN_MAT_ID":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  				break;  			case "OUT_MAT_ID":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  				break;  			case "PROCESS_CODE":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  				break;  			}  		}  		result.Add ("select " + sqlparams [0] + " from " + sqlparams [1] + " where 1=1 " + sqlparams [2]);  	}  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: if (processconfig != null) {  	List<string> inids = new List<string> ();  	List<string> outids = new List<string> ();  	List<string> processcodes = new List<string> ();  	int tc = processconfig.Tables.Count;  	for (int i = 0; i < tc; i++) {  		string[] sqlparams = new string[] {  			""'  			""'  			""  		};  		string tablechinese = processconfig.Tables [i].ChineseName;  		var table = tables.First (input =>  {  			return input ["TABLE_CHINESE"].ToString () == tablechinese;  		});  		string tablename = table ["TABLE_NAME"].ToString ();  		sqlparams [1] = tablename;  		int cc = processconfig.Tables [i].Columns.Count;  		if (cc == 0)  			continue;  		for (int j = 0; j < cc; j++) {  			string columnchinese = processconfig.Tables [i].Columns [j].ChineseName;  			var column = (from r in ConfigFile.Tables ["Column"].AsEnumerable ()  			where (r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && ((r ["COLUMN_CHINESE"].ToString () == null || r ["COLUMN_CHINESE"].ToString ().Trim () == "") ? r ["COLUMN_NAME"].ToString () : r ["COLUMN_CHINESE"].ToString ()) == columnchinese)  			select r).FirstOrDefault ();  			if (column == null)  				sqlparams [0] += string.Format ("null \"{0}\"' "' processchinese + "_" + columnchinese);  			else  				sqlparams [0] += string.Format ("{0}.{1} \"{2}\"' "' tablename' column ["COLUMN_NAME"]' processchinese + "_" + columnchinese);  		}  		if (sqlparams [0] != "")  			sqlparams [0] = sqlparams [0].Substring (0' sqlparams [0].Length - 2);  		var keycolumns = from r in ConfigFile.Tables ["Column"].AsEnumerable ()  		where r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && r ["KEY"] != null && r ["KEY"].ToString ().Trim () != ""  		select r;  		int kcc = keycolumns.Count ();  		for (int j = 0; j < kcc; j++) {  			switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  			case "IN_MAT_ID":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  				break;  			case "OUT_MAT_ID":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  				break;  			case "PROCESS_CODE":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  				break;  			}  		}  		result.Add ("select " + sqlparams [0] + " from " + sqlparams [1] + " where 1=1 " + sqlparams [2]);  	}  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: if (processconfig != null) {  	List<string> inids = new List<string> ();  	List<string> outids = new List<string> ();  	List<string> processcodes = new List<string> ();  	int tc = processconfig.Tables.Count;  	for (int i = 0; i < tc; i++) {  		string[] sqlparams = new string[] {  			""'  			""'  			""  		};  		string tablechinese = processconfig.Tables [i].ChineseName;  		var table = tables.First (input =>  {  			return input ["TABLE_CHINESE"].ToString () == tablechinese;  		});  		string tablename = table ["TABLE_NAME"].ToString ();  		sqlparams [1] = tablename;  		int cc = processconfig.Tables [i].Columns.Count;  		if (cc == 0)  			continue;  		for (int j = 0; j < cc; j++) {  			string columnchinese = processconfig.Tables [i].Columns [j].ChineseName;  			var column = (from r in ConfigFile.Tables ["Column"].AsEnumerable ()  			where (r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && ((r ["COLUMN_CHINESE"].ToString () == null || r ["COLUMN_CHINESE"].ToString ().Trim () == "") ? r ["COLUMN_NAME"].ToString () : r ["COLUMN_CHINESE"].ToString ()) == columnchinese)  			select r).FirstOrDefault ();  			if (column == null)  				sqlparams [0] += string.Format ("null \"{0}\"' "' processchinese + "_" + columnchinese);  			else  				sqlparams [0] += string.Format ("{0}.{1} \"{2}\"' "' tablename' column ["COLUMN_NAME"]' processchinese + "_" + columnchinese);  		}  		if (sqlparams [0] != "")  			sqlparams [0] = sqlparams [0].Substring (0' sqlparams [0].Length - 2);  		var keycolumns = from r in ConfigFile.Tables ["Column"].AsEnumerable ()  		where r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && r ["KEY"] != null && r ["KEY"].ToString ().Trim () != ""  		select r;  		int kcc = keycolumns.Count ();  		for (int j = 0; j < kcc; j++) {  			switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  			case "IN_MAT_ID":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  				break;  			case "OUT_MAT_ID":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  				break;  			case "PROCESS_CODE":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  				break;  			}  		}  		result.Add ("select " + sqlparams [0] + " from " + sqlparams [1] + " where 1=1 " + sqlparams [2]);  	}  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: if (processconfig != null) {  	List<string> inids = new List<string> ();  	List<string> outids = new List<string> ();  	List<string> processcodes = new List<string> ();  	int tc = processconfig.Tables.Count;  	for (int i = 0; i < tc; i++) {  		string[] sqlparams = new string[] {  			""'  			""'  			""  		};  		string tablechinese = processconfig.Tables [i].ChineseName;  		var table = tables.First (input =>  {  			return input ["TABLE_CHINESE"].ToString () == tablechinese;  		});  		string tablename = table ["TABLE_NAME"].ToString ();  		sqlparams [1] = tablename;  		int cc = processconfig.Tables [i].Columns.Count;  		if (cc == 0)  			continue;  		for (int j = 0; j < cc; j++) {  			string columnchinese = processconfig.Tables [i].Columns [j].ChineseName;  			var column = (from r in ConfigFile.Tables ["Column"].AsEnumerable ()  			where (r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && ((r ["COLUMN_CHINESE"].ToString () == null || r ["COLUMN_CHINESE"].ToString ().Trim () == "") ? r ["COLUMN_NAME"].ToString () : r ["COLUMN_CHINESE"].ToString ()) == columnchinese)  			select r).FirstOrDefault ();  			if (column == null)  				sqlparams [0] += string.Format ("null \"{0}\"' "' processchinese + "_" + columnchinese);  			else  				sqlparams [0] += string.Format ("{0}.{1} \"{2}\"' "' tablename' column ["COLUMN_NAME"]' processchinese + "_" + columnchinese);  		}  		if (sqlparams [0] != "")  			sqlparams [0] = sqlparams [0].Substring (0' sqlparams [0].Length - 2);  		var keycolumns = from r in ConfigFile.Tables ["Column"].AsEnumerable ()  		where r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && r ["KEY"] != null && r ["KEY"].ToString ().Trim () != ""  		select r;  		int kcc = keycolumns.Count ();  		for (int j = 0; j < kcc; j++) {  			switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  			case "IN_MAT_ID":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  				break;  			case "OUT_MAT_ID":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  				break;  			case "PROCESS_CODE":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  				break;  			}  		}  		result.Add ("select " + sqlparams [0] + " from " + sqlparams [1] + " where 1=1 " + sqlparams [2]);  	}  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: if (processconfig != null) {  	List<string> inids = new List<string> ();  	List<string> outids = new List<string> ();  	List<string> processcodes = new List<string> ();  	int tc = processconfig.Tables.Count;  	for (int i = 0; i < tc; i++) {  		string[] sqlparams = new string[] {  			""'  			""'  			""  		};  		string tablechinese = processconfig.Tables [i].ChineseName;  		var table = tables.First (input =>  {  			return input ["TABLE_CHINESE"].ToString () == tablechinese;  		});  		string tablename = table ["TABLE_NAME"].ToString ();  		sqlparams [1] = tablename;  		int cc = processconfig.Tables [i].Columns.Count;  		if (cc == 0)  			continue;  		for (int j = 0; j < cc; j++) {  			string columnchinese = processconfig.Tables [i].Columns [j].ChineseName;  			var column = (from r in ConfigFile.Tables ["Column"].AsEnumerable ()  			where (r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && ((r ["COLUMN_CHINESE"].ToString () == null || r ["COLUMN_CHINESE"].ToString ().Trim () == "") ? r ["COLUMN_NAME"].ToString () : r ["COLUMN_CHINESE"].ToString ()) == columnchinese)  			select r).FirstOrDefault ();  			if (column == null)  				sqlparams [0] += string.Format ("null \"{0}\"' "' processchinese + "_" + columnchinese);  			else  				sqlparams [0] += string.Format ("{0}.{1} \"{2}\"' "' tablename' column ["COLUMN_NAME"]' processchinese + "_" + columnchinese);  		}  		if (sqlparams [0] != "")  			sqlparams [0] = sqlparams [0].Substring (0' sqlparams [0].Length - 2);  		var keycolumns = from r in ConfigFile.Tables ["Column"].AsEnumerable ()  		where r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && r ["KEY"] != null && r ["KEY"].ToString ().Trim () != ""  		select r;  		int kcc = keycolumns.Count ();  		for (int j = 0; j < kcc; j++) {  			switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  			case "IN_MAT_ID":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  				break;  			case "OUT_MAT_ID":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  				break;  			case "PROCESS_CODE":  				sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  				break;  			}  		}  		result.Add ("select " + sqlparams [0] + " from " + sqlparams [1] + " where 1=1 " + sqlparams [2]);  	}  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: for (int i = 0; i < tc; i++) {  	string[] sqlparams = new string[] {  		""'  		""'  		""  	};  	string tablechinese = processconfig.Tables [i].ChineseName;  	var table = tables.First (input =>  {  		return input ["TABLE_CHINESE"].ToString () == tablechinese;  	});  	string tablename = table ["TABLE_NAME"].ToString ();  	sqlparams [1] = tablename;  	int cc = processconfig.Tables [i].Columns.Count;  	if (cc == 0)  		continue;  	for (int j = 0; j < cc; j++) {  		string columnchinese = processconfig.Tables [i].Columns [j].ChineseName;  		var column = (from r in ConfigFile.Tables ["Column"].AsEnumerable ()  		where (r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && ((r ["COLUMN_CHINESE"].ToString () == null || r ["COLUMN_CHINESE"].ToString ().Trim () == "") ? r ["COLUMN_NAME"].ToString () : r ["COLUMN_CHINESE"].ToString ()) == columnchinese)  		select r).FirstOrDefault ();  		if (column == null)  			sqlparams [0] += string.Format ("null \"{0}\"' "' processchinese + "_" + columnchinese);  		else  			sqlparams [0] += string.Format ("{0}.{1} \"{2}\"' "' tablename' column ["COLUMN_NAME"]' processchinese + "_" + columnchinese);  	}  	if (sqlparams [0] != "")  		sqlparams [0] = sqlparams [0].Substring (0' sqlparams [0].Length - 2);  	var keycolumns = from r in ConfigFile.Tables ["Column"].AsEnumerable ()  	where r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && r ["KEY"] != null && r ["KEY"].ToString ().Trim () != ""  	select r;  	int kcc = keycolumns.Count ();  	for (int j = 0; j < kcc; j++) {  		switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  		case "IN_MAT_ID":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  			break;  		case "OUT_MAT_ID":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  			break;  		case "PROCESS_CODE":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  			break;  		}  	}  	result.Add ("select " + sqlparams [0] + " from " + sqlparams [1] + " where 1=1 " + sqlparams [2]);  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: for (int i = 0; i < tc; i++) {  	string[] sqlparams = new string[] {  		""'  		""'  		""  	};  	string tablechinese = processconfig.Tables [i].ChineseName;  	var table = tables.First (input =>  {  		return input ["TABLE_CHINESE"].ToString () == tablechinese;  	});  	string tablename = table ["TABLE_NAME"].ToString ();  	sqlparams [1] = tablename;  	int cc = processconfig.Tables [i].Columns.Count;  	if (cc == 0)  		continue;  	for (int j = 0; j < cc; j++) {  		string columnchinese = processconfig.Tables [i].Columns [j].ChineseName;  		var column = (from r in ConfigFile.Tables ["Column"].AsEnumerable ()  		where (r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && ((r ["COLUMN_CHINESE"].ToString () == null || r ["COLUMN_CHINESE"].ToString ().Trim () == "") ? r ["COLUMN_NAME"].ToString () : r ["COLUMN_CHINESE"].ToString ()) == columnchinese)  		select r).FirstOrDefault ();  		if (column == null)  			sqlparams [0] += string.Format ("null \"{0}\"' "' processchinese + "_" + columnchinese);  		else  			sqlparams [0] += string.Format ("{0}.{1} \"{2}\"' "' tablename' column ["COLUMN_NAME"]' processchinese + "_" + columnchinese);  	}  	if (sqlparams [0] != "")  		sqlparams [0] = sqlparams [0].Substring (0' sqlparams [0].Length - 2);  	var keycolumns = from r in ConfigFile.Tables ["Column"].AsEnumerable ()  	where r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && r ["KEY"] != null && r ["KEY"].ToString ().Trim () != ""  	select r;  	int kcc = keycolumns.Count ();  	for (int j = 0; j < kcc; j++) {  		switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  		case "IN_MAT_ID":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  			break;  		case "OUT_MAT_ID":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  			break;  		case "PROCESS_CODE":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  			break;  		}  	}  	result.Add ("select " + sqlparams [0] + " from " + sqlparams [1] + " where 1=1 " + sqlparams [2]);  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: for (int i = 0; i < tc; i++) {  	string[] sqlparams = new string[] {  		""'  		""'  		""  	};  	string tablechinese = processconfig.Tables [i].ChineseName;  	var table = tables.First (input =>  {  		return input ["TABLE_CHINESE"].ToString () == tablechinese;  	});  	string tablename = table ["TABLE_NAME"].ToString ();  	sqlparams [1] = tablename;  	int cc = processconfig.Tables [i].Columns.Count;  	if (cc == 0)  		continue;  	for (int j = 0; j < cc; j++) {  		string columnchinese = processconfig.Tables [i].Columns [j].ChineseName;  		var column = (from r in ConfigFile.Tables ["Column"].AsEnumerable ()  		where (r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && ((r ["COLUMN_CHINESE"].ToString () == null || r ["COLUMN_CHINESE"].ToString ().Trim () == "") ? r ["COLUMN_NAME"].ToString () : r ["COLUMN_CHINESE"].ToString ()) == columnchinese)  		select r).FirstOrDefault ();  		if (column == null)  			sqlparams [0] += string.Format ("null \"{0}\"' "' processchinese + "_" + columnchinese);  		else  			sqlparams [0] += string.Format ("{0}.{1} \"{2}\"' "' tablename' column ["COLUMN_NAME"]' processchinese + "_" + columnchinese);  	}  	if (sqlparams [0] != "")  		sqlparams [0] = sqlparams [0].Substring (0' sqlparams [0].Length - 2);  	var keycolumns = from r in ConfigFile.Tables ["Column"].AsEnumerable ()  	where r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && r ["KEY"] != null && r ["KEY"].ToString ().Trim () != ""  	select r;  	int kcc = keycolumns.Count ();  	for (int j = 0; j < kcc; j++) {  		switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  		case "IN_MAT_ID":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  			break;  		case "OUT_MAT_ID":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  			break;  		case "PROCESS_CODE":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  			break;  		}  	}  	result.Add ("select " + sqlparams [0] + " from " + sqlparams [1] + " where 1=1 " + sqlparams [2]);  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: for (int i = 0; i < tc; i++) {  	string[] sqlparams = new string[] {  		""'  		""'  		""  	};  	string tablechinese = processconfig.Tables [i].ChineseName;  	var table = tables.First (input =>  {  		return input ["TABLE_CHINESE"].ToString () == tablechinese;  	});  	string tablename = table ["TABLE_NAME"].ToString ();  	sqlparams [1] = tablename;  	int cc = processconfig.Tables [i].Columns.Count;  	if (cc == 0)  		continue;  	for (int j = 0; j < cc; j++) {  		string columnchinese = processconfig.Tables [i].Columns [j].ChineseName;  		var column = (from r in ConfigFile.Tables ["Column"].AsEnumerable ()  		where (r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && ((r ["COLUMN_CHINESE"].ToString () == null || r ["COLUMN_CHINESE"].ToString ().Trim () == "") ? r ["COLUMN_NAME"].ToString () : r ["COLUMN_CHINESE"].ToString ()) == columnchinese)  		select r).FirstOrDefault ();  		if (column == null)  			sqlparams [0] += string.Format ("null \"{0}\"' "' processchinese + "_" + columnchinese);  		else  			sqlparams [0] += string.Format ("{0}.{1} \"{2}\"' "' tablename' column ["COLUMN_NAME"]' processchinese + "_" + columnchinese);  	}  	if (sqlparams [0] != "")  		sqlparams [0] = sqlparams [0].Substring (0' sqlparams [0].Length - 2);  	var keycolumns = from r in ConfigFile.Tables ["Column"].AsEnumerable ()  	where r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && r ["KEY"] != null && r ["KEY"].ToString ().Trim () != ""  	select r;  	int kcc = keycolumns.Count ();  	for (int j = 0; j < kcc; j++) {  		switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  		case "IN_MAT_ID":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  			break;  		case "OUT_MAT_ID":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  			break;  		case "PROCESS_CODE":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  			break;  		}  	}  	result.Add ("select " + sqlparams [0] + " from " + sqlparams [1] + " where 1=1 " + sqlparams [2]);  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: for (int i = 0; i < tc; i++) {  	string[] sqlparams = new string[] {  		""'  		""'  		""  	};  	string tablechinese = processconfig.Tables [i].ChineseName;  	var table = tables.First (input =>  {  		return input ["TABLE_CHINESE"].ToString () == tablechinese;  	});  	string tablename = table ["TABLE_NAME"].ToString ();  	sqlparams [1] = tablename;  	int cc = processconfig.Tables [i].Columns.Count;  	if (cc == 0)  		continue;  	for (int j = 0; j < cc; j++) {  		string columnchinese = processconfig.Tables [i].Columns [j].ChineseName;  		var column = (from r in ConfigFile.Tables ["Column"].AsEnumerable ()  		where (r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && ((r ["COLUMN_CHINESE"].ToString () == null || r ["COLUMN_CHINESE"].ToString ().Trim () == "") ? r ["COLUMN_NAME"].ToString () : r ["COLUMN_CHINESE"].ToString ()) == columnchinese)  		select r).FirstOrDefault ();  		if (column == null)  			sqlparams [0] += string.Format ("null \"{0}\"' "' processchinese + "_" + columnchinese);  		else  			sqlparams [0] += string.Format ("{0}.{1} \"{2}\"' "' tablename' column ["COLUMN_NAME"]' processchinese + "_" + columnchinese);  	}  	if (sqlparams [0] != "")  		sqlparams [0] = sqlparams [0].Substring (0' sqlparams [0].Length - 2);  	var keycolumns = from r in ConfigFile.Tables ["Column"].AsEnumerable ()  	where r.GetParentRow ("Table_Column") ["TABLE_NAME"].ToString () == tablename && r.GetParentRow ("Table_Column") ["PROCESS_CODE"].ToString () == process && r ["KEY"] != null && r ["KEY"].ToString ().Trim () != ""  	select r;  	int kcc = keycolumns.Count ();  	for (int j = 0; j < kcc; j++) {  		switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  		case "IN_MAT_ID":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  			break;  		case "OUT_MAT_ID":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  			break;  		case "PROCESS_CODE":  			sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  			break;  		}  	}  	result.Add ("select " + sqlparams [0] + " from " + sqlparams [1] + " where 1=1 " + sqlparams [2]);  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: if (sqlparams [0] != "")  	sqlparams [0] = sqlparams [0].Substring (0' sqlparams [0].Length - 2);  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: sqlparams [0] = sqlparams [0].Substring (0' sqlparams [0].Length - 2);  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: for (int j = 0; j < kcc; j++) {  	switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  	case "IN_MAT_ID":  		sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  		break;  	case "OUT_MAT_ID":  		sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  		break;  	case "PROCESS_CODE":  		sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  		break;  	}  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: for (int j = 0; j < kcc; j++) {  	switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  	case "IN_MAT_ID":  		sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  		break;  	case "OUT_MAT_ID":  		sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  		break;  	case "PROCESS_CODE":  		sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  		break;  	}  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: for (int j = 0; j < kcc; j++) {  	switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  	case "IN_MAT_ID":  		sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  		break;  	case "OUT_MAT_ID":  		sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  		break;  	case "PROCESS_CODE":  		sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  		break;  	}  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  case "IN_MAT_ID":  	sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  	break;  case "OUT_MAT_ID":  	sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  	break;  case "PROCESS_CODE":  	sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  	break;  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  case "IN_MAT_ID":  	sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  	break;  case "OUT_MAT_ID":  	sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  	break;  case "PROCESS_CODE":  	sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  	break;  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  case "IN_MAT_ID":  	sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  	break;  case "OUT_MAT_ID":  	sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  	break;  case "PROCESS_CODE":  	sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  	break;  }  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  
Magic Number,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following statement contains a magic number: result.Add ("select " + sqlparams [0] + " from " + sqlparams [1] + " where 1=1 " + sqlparams [2]);  
Magic Number,QtDataTrace.AnalyzeService,DataContainerFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,GetProgress,The following statement contains a magic number: return 100;  
Magic Number,QtDataTrace.AnalyzeService,LocalizationDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceService.cs,GetProcess,The following statement contains a magic number: if (temp == null)  	return -2;  
Magic Number,QtDataTrace.AnalyzeService,LocalizationDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceService.cs,GetProcess,The following statement contains a magic number: return -2;  
Magic Number,QtDataTrace.AnalyzeService,LocalizationDataTraceService,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceService.cs,GetProcess,The following statement contains a magic number: return 1000;  
Missing Default,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,Start,The following switch statement is missing a default case: switch (back) {  case 1:  	for (int i = 0; i < this.threadcount; i++) {  		threadTables [i] = new DataTable ();  		tasks [i] = taskFactory.StartNew (threadMethod_Back' new threadInputType ((listcount * i) / this.threadcount' (listcount * (i + 1)) / this.threadcount' threadTables [i])' cancel.Token);  	}  	break;  case 0:  	for (int i = 0; i < this.threadcount; i++) {  		threadTables [i] = new DataTable ();  		tasks [i] = taskFactory.StartNew (threadMethod_Single' new threadInputType ((listcount * i) / this.threadcount' (listcount * (i + 1)) / this.threadcount' threadTables [i])' cancel.Token);  	}  	break;  case -1:  	for (int i = 0; i < this.threadcount; i++) {  		threadTables [i] = new DataTable ();  		tasks [i] = taskFactory.StartNew (threadMethod_Pre' new threadInputType ((listcount * i) / this.threadcount' (listcount * (i + 1)) / this.threadcount' threadTables [i])' cancel.Token);  	}  	break;  }  
Missing Default,QtDataTrace.AnalyzeService,DataTraceFactory,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.AnalyzeService\DataTraceBLL.cs,getProcessString,The following switch statement is missing a default case: switch (keycolumns.ElementAt (j) ["KEY"].ToString ()) {  case "IN_MAT_ID":  	sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{2}' ";  	break;  case "OUT_MAT_ID":  	sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{0}' ";  	break;  case "PROCESS_CODE":  	sqlparams [2] += "and " + keycolumns.ElementAt (j) ["COLUMN_NAME"] + "='{1}' ";  	break;  }  
