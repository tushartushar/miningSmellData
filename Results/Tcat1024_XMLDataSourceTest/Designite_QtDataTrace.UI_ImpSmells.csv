Implementation smell,Namespace,Class,File,Method,Description
Complex Method,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnQtrace_ItemClick,Cyclomatic complexity of the method is 12
Complex Method,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCancel_Click,Cyclomatic complexity of the method is 8
Complex Method,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,Cyclomatic complexity of the method is 37
Complex Method,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,Cyclomatic complexity of the method is 41
Complex Method,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,Cyclomatic complexity of the method is 18
Complex Method,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,Cyclomatic complexity of the method is 10
Complex Method,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,OnNodeMouseClick,Cyclomatic complexity of the method is 10
Long Parameter List,QtDataTrace.UI,AnalyzeConfigForm,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\AnalyzeConfigForm.cs,AddConfigControl,The method has 5 parameters.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,InitTreeList,The length of the statement  "		rootNode = this.triStateTreeView1.Nodes.Add (root.FirstOrDefault () ["PROCESS_SEQ"].ToString ()' root.FirstOrDefault () ["PROCESS_CHINESE"].ToString ()); " is 153.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,InitTreeList,The length of the statement  "			processnode = this.triStateTreeView1.Nodes.Add (temprow ["PROCESS_SEQ"].ToString ()' temprow ["PROCESS_CHINESE"].ToString ()); " is 126.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCPK_ItemClick,The length of the statement  "	(module.DataView as SPC.Controls.Base.CanChooseDataGridView).Synchronize (this.gridView1' DevExpress.XtraGrid.Views.Base.SynchronizationMode.Full); " is 147.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSampleRun_ItemClick,The length of the statement  "	(module.DataView as SPC.Controls.Base.CanChooseDataGridView).Synchronize (this.gridView1' DevExpress.XtraGrid.Views.Base.SynchronizationMode.Full); " is 147.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSampleControl_ItemClick,The length of the statement  "	(module.DataView as SPC.Controls.Base.CanChooseDataGridView).Synchronize (this.gridView1' DevExpress.XtraGrid.Views.Base.SynchronizationMode.Full); " is 147.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSamleAvg_ItemClick,The length of the statement  "	(module.DataView as SPC.Controls.Base.CanChooseDataGridView).Synchronize (this.gridView1' DevExpress.XtraGrid.Views.Base.SynchronizationMode.Full); " is 147.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnNormalCheck_ItemClick,The length of the statement  "	(module.DataView as SPC.Controls.Base.CanChooseDataGridView).Synchronize (this.gridView1' DevExpress.XtraGrid.Views.Base.SynchronizationMode.Full); " is 147.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnFrequency_ItemClick,The length of the statement  "	(module.DataView as SPC.Controls.Base.CanChooseDataGridView).Synchronize (this.gridView1' DevExpress.XtraGrid.Views.Base.SynchronizationMode.Full); " is 147.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnQtrace_ItemClick,The length of the statement  "	var re = ServiceContainer.GetService<IQtDataTraceService> ().NewDataTrace (this.ProcessNo' idlist' processes' currentTraceDir' userId); " is 135.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The length of the statement  "					throw new Exception ("发生错误:" + ServiceContainer.GetService<IQtDataTraceService> ().GetErrorMessage (userId' currentTraceFactoryId)); " is 132.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,traceCallBack,The length of the statement  "	AddTraceHis (currentTraceFactoryId' string.Format ("{0}_{1}_{2}"' DateTime.Now.ToString ("hh:mm:ss")' ProcessNo' currentTraceDir ? "后追" : "前追")); " is 145.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,RemoveTraceHis,The length of the statement  "	if (this.menuTraceHis.LinksPersistInfo.Count == 1 && this.menuTraceHis.LinksPersistInfo [0].Item.Visibility == DevExpress.XtraBars.BarItemVisibility.Never) " is 155.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,gridControl1_ClientSizeChanged,The length of the statement  "	this.waitPanel1.Location = new Point (gridControl1.Location.X + gridControl1.Width / 2 - this.waitPanel1.Width / 2' gridControl1.Location.Y + gridControl1.Height / 2 - this.waitPanel1.Height / 2); " is 196.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,barButtonItem2_ItemClick,The length of the statement  "	(module.DataView as SPC.Controls.Base.CanChooseDataGridView).Synchronize (this.gridView1' DevExpress.XtraGrid.Views.Base.SynchronizationMode.Full); " is 147.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,barButtonItem1_ItemClick,The length of the statement  "	(module.DataView as SPC.Controls.Base.CanChooseDataGridView).Synchronize (this.gridView1' DevExpress.XtraGrid.Views.Base.SynchronizationMode.Full); " is 147.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSPCdm_ItemClick,The length of the statement  "	(module.DataView as SPC.Controls.Base.CanChooseDataGridView).Synchronize (this.gridView1' DevExpress.XtraGrid.Views.Base.SynchronizationMode.Full); " is 147.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSave_ItemClick,The length of the statement  "	TraceDataBackUpForm form = new TraceDataBackUpForm (ServiceContainer.GetService<IDataBackUpService> ().GetTableList (this.loginId)); " is 132.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSave_ItemClick,The length of the statement  "			MessageBox.Show (ServiceContainer.GetService<IDataBackUpService> ().RemoveTable (this.loginId' form.RemoveTables.ToArray ())); " is 126.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSave_ItemClick,The length of the statement  "			MessageBox.Show (ServiceContainer.GetService<IDataBackUpService> ().SaveTable (this.loginId' this.userId' this.currentDataId' form.SaveTable.ToUpper ()' this.gridView1.GetChoosedRowIndexs ())); " is 193.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSave_ItemClick,The length of the statement  "			MessageBox.Show (ServiceContainer.GetService<IDataBackUpService> ().SaveTable (this.loginId' this.userId' this.currentDataId' form.SaveTable.ToUpper ())); " is 154.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnLoad_ItemClick,The length of the statement  "	TraceDataLoadForm form = new TraceDataLoadForm (ServiceContainer.GetService<IDataBackUpService> ().GetTableList (this.loginId)); " is 128.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnLoad_ItemClick,The length of the statement  "			AddTraceHis (currentTraceFactoryId' string.Format ("{0}_{1}_{2}"' DateTime.Now.ToString ("hh:mm:ss")' form.TableName' "归档数据")); " is 127.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewAnalyze,The length of the statement  "					throw new Exception ("发生错误:" + ServiceContainer.GetService<IDataAnalyzeService> ().GetErrorMessage (userId' currentAnalyzeFactoryId)); " is 134.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRelationAnalyze_ItemClick,The length of the statement  "		var re = ServiceContainer.GetService<IDataAnalyzeService> ().CCTStart (userId' currentDataId' this.gridView1.GetChoosedRowIndexs ()' configcontrol.TargetColumn' configcontrol.Columns); " is 184.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnQuickCluster_ItemClick,The length of the statement  "	configcontrol.Init (this.gridView1.GetVisibleColumnNames (false' typeof(string)' typeof(DateTime)' typeof(bool))' choosed.Length); " is 130.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnQuickCluster_ItemClick,The length of the statement  "		var re = ServiceContainer.GetService<IDataAnalyzeService> ().KMeansStart (userId' currentDataId' choosed' configcontrol.SelectedColumns' configcontrol.MaxCount' configcontrol.StartClustNum' configcontrol.EndClustNum' configcontrol.Avg' configcontrol.Stdev' configcontrol.InitialMode' configcontrol.MaxThread); " is 309.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCPlot_ItemClick,The length of the statement  "		var re = ServiceContainer.GetService<IDataAnalyzeService> ().ContourPlotStart (userId' currentDataId' choosed' CPlotConfig.X' CPlotConfig.Y' CPlotConfig.Z' CPlotConfig.PicWidth' CPlotConfig.PicHeight' CPlotConfig.Levels' CPlotConfig.IsDrawLine); " is 245.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCPlot_ItemClick,The length of the statement  "				SPC.Controls.ResultControls.ContourPlotResultControl resultcontrol = new SPC.Controls.ResultControls.ContourPlotResultControl (); " is 129.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The length of the statement  "		SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl (); " is 125.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The length of the statement  "			SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl (); " is 125.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,The length of the statement  "				SPC.Base.Operation.Standardization.M1D2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2); " is 131.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,The length of the statement  "				SPC.Base.Operation.Standardization.F1T2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2); " is 131.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnBuildDtree_ItemClick,The length of the statement  "		var re = ServiceContainer.GetService<IDataAnalyzeService> ().RpartStart (userId' currentDataId' choosed' BDtreeConfig.PicWidth' BDtreeConfig.PicHeight' BDtreeConfig.TargetColumn' BDtreeConfig.Columns' BDtreeConfig.Method' BDtreeConfig.CP); " is 239.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnLmRegress_ItemClick,The length of the statement  "		var re = ServiceContainer.GetService<IDataAnalyzeService> ().LmRegressStart (userId' currentDataId' choosed' LmRegressConfig.PicWidth' LmRegressConfig.PicHeight' LmRegressConfig.TargetColumn' LmRegressConfig.Columns); " is 217.
Long Statement,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnLmRegress_ItemClick,The length of the statement  "				SPC.Controls.ResultControls.LmregressResultControl resultcontrol = new SPC.Controls.ResultControls.LmregressResultControl (); " is 125.
Long Statement,QtDataTrace.UI,ProcessQtTableConfig,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\ProcessQtTableConfig.cs,toolStripButton1_Click,The length of the statement  "			InsertAfterRow (view.GetDataRow (selects [i])' view.GetDataRow (selects [i] + 1)' data [0].Tables [view.Name == "gridView1" ? 0 : 1]); " is 134.
Long Statement,QtDataTrace.UI,ProcessQtTableConfig,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\ProcessQtTableConfig.cs,toolStripButton2_Click,The length of the statement  "			InsertBeforeRow (view.GetDataRow (select)' view.GetDataRow (select - 1)' data [0].Tables [view.Name == "gridView1" ? 0 : 1]); " is 125.
Long Statement,QtDataTrace.UI,ProcessQtTableConfig,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\ProcessQtTableConfig.cs,toolStripButton3_Click,The length of the statement  "			InsertAfterRow (view.GetDataRow (selects [i] - i)' view.GetDataRow (view.DataRowCount - 1)' data [0].Tables [view.Name == "gridView1" ? 0 : 1]); " is 144.
Long Statement,QtDataTrace.UI,ProcessQtTableConfig,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\ProcessQtTableConfig.cs,toolStripButton4_Click,The length of the statement  "			InsertBeforeRow (view.GetDataRow (selects [i])' view.GetDataRow (i)' data [0].Tables [view.Name == "gridView1" ? 0 : 1]); " is 121.
Long Statement,QtDataTrace.UI,TraceDataBackUpForm,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TraceDataBackUpForm.cs,btnSave_Click,The length of the statement  "		if (MessageBox.Show ("已存在表" + name + "，是否要覆盖原表？"' "Warning"' MessageBoxButtons.OKCancel) == System.Windows.Forms.DialogResult.Cancel) " is 133.
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSamleAvg_ItemClick,The following statement contains a magic number: module.SelectTabPageIndex = 2;  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnNormalCheck_ItemClick,The following statement contains a magic number: module.SelectTabPageIndex = 3;  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnFrequency_ItemClick,The following statement contains a magic number: module.SelectTabPageIndex = 4;  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The following statement contains a magic number: timerTask = new Thread (() =>  {  	DateTime start = DateTime.Now;  	int process;  	try {  		while (true) {  			process = ServiceContainer.GetService<IQtDataTraceService> ().GetProcess (userId' currentTraceFactoryId);  			if (process == -2) {  				throw new Exception ("无法获取指定追溯过程，可能未成功建立或已被删除");  			}  			if (process == -1) {  				throw new Exception ("发生错误:" + ServiceContainer.GetService<IQtDataTraceService> ().GetErrorMessage (userId' currentTraceFactoryId));  			}  			if (process == 1000) {  				var result = ServiceContainer.GetService<IQtDataTraceService> ().GetData (userId' this.currentTraceFactoryId);  				this.sourceData = result;  				this.Invoke (new Action (() =>  {  					traceCallBack ();  				}));  				break;  			}  			this.Invoke (new Action (() =>  {  				this.waitPanel1.Position = process;  			}));  			Thread.Sleep (1000);  		}  	}  	catch (Exception ex) {  		if (ex.GetType () != typeof(ThreadAbortException))  			MessageBox.Show (ex.Message);  	}  	finally {  		DateTime end = DateTime.Now;  		Console.WriteLine ("Cost:" + (end - start));  		this.Invoke (new Action (() =>  {  			EndWait ();  		}));  	}  }) {  	IsBackground = true  };  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The following statement contains a magic number: timerTask = new Thread (() =>  {  	DateTime start = DateTime.Now;  	int process;  	try {  		while (true) {  			process = ServiceContainer.GetService<IQtDataTraceService> ().GetProcess (userId' currentTraceFactoryId);  			if (process == -2) {  				throw new Exception ("无法获取指定追溯过程，可能未成功建立或已被删除");  			}  			if (process == -1) {  				throw new Exception ("发生错误:" + ServiceContainer.GetService<IQtDataTraceService> ().GetErrorMessage (userId' currentTraceFactoryId));  			}  			if (process == 1000) {  				var result = ServiceContainer.GetService<IQtDataTraceService> ().GetData (userId' this.currentTraceFactoryId);  				this.sourceData = result;  				this.Invoke (new Action (() =>  {  					traceCallBack ();  				}));  				break;  			}  			this.Invoke (new Action (() =>  {  				this.waitPanel1.Position = process;  			}));  			Thread.Sleep (1000);  		}  	}  	catch (Exception ex) {  		if (ex.GetType () != typeof(ThreadAbortException))  			MessageBox.Show (ex.Message);  	}  	finally {  		DateTime end = DateTime.Now;  		Console.WriteLine ("Cost:" + (end - start));  		this.Invoke (new Action (() =>  {  			EndWait ();  		}));  	}  }) {  	IsBackground = true  };  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The following statement contains a magic number: timerTask = new Thread (() =>  {  	DateTime start = DateTime.Now;  	int process;  	try {  		while (true) {  			process = ServiceContainer.GetService<IQtDataTraceService> ().GetProcess (userId' currentTraceFactoryId);  			if (process == -2) {  				throw new Exception ("无法获取指定追溯过程，可能未成功建立或已被删除");  			}  			if (process == -1) {  				throw new Exception ("发生错误:" + ServiceContainer.GetService<IQtDataTraceService> ().GetErrorMessage (userId' currentTraceFactoryId));  			}  			if (process == 1000) {  				var result = ServiceContainer.GetService<IQtDataTraceService> ().GetData (userId' this.currentTraceFactoryId);  				this.sourceData = result;  				this.Invoke (new Action (() =>  {  					traceCallBack ();  				}));  				break;  			}  			this.Invoke (new Action (() =>  {  				this.waitPanel1.Position = process;  			}));  			Thread.Sleep (1000);  		}  	}  	catch (Exception ex) {  		if (ex.GetType () != typeof(ThreadAbortException))  			MessageBox.Show (ex.Message);  	}  	finally {  		DateTime end = DateTime.Now;  		Console.WriteLine ("Cost:" + (end - start));  		this.Invoke (new Action (() =>  {  			EndWait ();  		}));  	}  }) {  	IsBackground = true  };  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The following statement contains a magic number: try {  	while (true) {  		process = ServiceContainer.GetService<IQtDataTraceService> ().GetProcess (userId' currentTraceFactoryId);  		if (process == -2) {  			throw new Exception ("无法获取指定追溯过程，可能未成功建立或已被删除");  		}  		if (process == -1) {  			throw new Exception ("发生错误:" + ServiceContainer.GetService<IQtDataTraceService> ().GetErrorMessage (userId' currentTraceFactoryId));  		}  		if (process == 1000) {  			var result = ServiceContainer.GetService<IQtDataTraceService> ().GetData (userId' this.currentTraceFactoryId);  			this.sourceData = result;  			this.Invoke (new Action (() =>  {  				traceCallBack ();  			}));  			break;  		}  		this.Invoke (new Action (() =>  {  			this.waitPanel1.Position = process;  		}));  		Thread.Sleep (1000);  	}  }  catch (Exception ex) {  	if (ex.GetType () != typeof(ThreadAbortException))  		MessageBox.Show (ex.Message);  }  finally {  	DateTime end = DateTime.Now;  	Console.WriteLine ("Cost:" + (end - start));  	this.Invoke (new Action (() =>  {  		EndWait ();  	}));  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The following statement contains a magic number: try {  	while (true) {  		process = ServiceContainer.GetService<IQtDataTraceService> ().GetProcess (userId' currentTraceFactoryId);  		if (process == -2) {  			throw new Exception ("无法获取指定追溯过程，可能未成功建立或已被删除");  		}  		if (process == -1) {  			throw new Exception ("发生错误:" + ServiceContainer.GetService<IQtDataTraceService> ().GetErrorMessage (userId' currentTraceFactoryId));  		}  		if (process == 1000) {  			var result = ServiceContainer.GetService<IQtDataTraceService> ().GetData (userId' this.currentTraceFactoryId);  			this.sourceData = result;  			this.Invoke (new Action (() =>  {  				traceCallBack ();  			}));  			break;  		}  		this.Invoke (new Action (() =>  {  			this.waitPanel1.Position = process;  		}));  		Thread.Sleep (1000);  	}  }  catch (Exception ex) {  	if (ex.GetType () != typeof(ThreadAbortException))  		MessageBox.Show (ex.Message);  }  finally {  	DateTime end = DateTime.Now;  	Console.WriteLine ("Cost:" + (end - start));  	this.Invoke (new Action (() =>  {  		EndWait ();  	}));  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The following statement contains a magic number: try {  	while (true) {  		process = ServiceContainer.GetService<IQtDataTraceService> ().GetProcess (userId' currentTraceFactoryId);  		if (process == -2) {  			throw new Exception ("无法获取指定追溯过程，可能未成功建立或已被删除");  		}  		if (process == -1) {  			throw new Exception ("发生错误:" + ServiceContainer.GetService<IQtDataTraceService> ().GetErrorMessage (userId' currentTraceFactoryId));  		}  		if (process == 1000) {  			var result = ServiceContainer.GetService<IQtDataTraceService> ().GetData (userId' this.currentTraceFactoryId);  			this.sourceData = result;  			this.Invoke (new Action (() =>  {  				traceCallBack ();  			}));  			break;  		}  		this.Invoke (new Action (() =>  {  			this.waitPanel1.Position = process;  		}));  		Thread.Sleep (1000);  	}  }  catch (Exception ex) {  	if (ex.GetType () != typeof(ThreadAbortException))  		MessageBox.Show (ex.Message);  }  finally {  	DateTime end = DateTime.Now;  	Console.WriteLine ("Cost:" + (end - start));  	this.Invoke (new Action (() =>  {  		EndWait ();  	}));  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The following statement contains a magic number: while (true) {  	process = ServiceContainer.GetService<IQtDataTraceService> ().GetProcess (userId' currentTraceFactoryId);  	if (process == -2) {  		throw new Exception ("无法获取指定追溯过程，可能未成功建立或已被删除");  	}  	if (process == -1) {  		throw new Exception ("发生错误:" + ServiceContainer.GetService<IQtDataTraceService> ().GetErrorMessage (userId' currentTraceFactoryId));  	}  	if (process == 1000) {  		var result = ServiceContainer.GetService<IQtDataTraceService> ().GetData (userId' this.currentTraceFactoryId);  		this.sourceData = result;  		this.Invoke (new Action (() =>  {  			traceCallBack ();  		}));  		break;  	}  	this.Invoke (new Action (() =>  {  		this.waitPanel1.Position = process;  	}));  	Thread.Sleep (1000);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The following statement contains a magic number: while (true) {  	process = ServiceContainer.GetService<IQtDataTraceService> ().GetProcess (userId' currentTraceFactoryId);  	if (process == -2) {  		throw new Exception ("无法获取指定追溯过程，可能未成功建立或已被删除");  	}  	if (process == -1) {  		throw new Exception ("发生错误:" + ServiceContainer.GetService<IQtDataTraceService> ().GetErrorMessage (userId' currentTraceFactoryId));  	}  	if (process == 1000) {  		var result = ServiceContainer.GetService<IQtDataTraceService> ().GetData (userId' this.currentTraceFactoryId);  		this.sourceData = result;  		this.Invoke (new Action (() =>  {  			traceCallBack ();  		}));  		break;  	}  	this.Invoke (new Action (() =>  {  		this.waitPanel1.Position = process;  	}));  	Thread.Sleep (1000);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The following statement contains a magic number: while (true) {  	process = ServiceContainer.GetService<IQtDataTraceService> ().GetProcess (userId' currentTraceFactoryId);  	if (process == -2) {  		throw new Exception ("无法获取指定追溯过程，可能未成功建立或已被删除");  	}  	if (process == -1) {  		throw new Exception ("发生错误:" + ServiceContainer.GetService<IQtDataTraceService> ().GetErrorMessage (userId' currentTraceFactoryId));  	}  	if (process == 1000) {  		var result = ServiceContainer.GetService<IQtDataTraceService> ().GetData (userId' this.currentTraceFactoryId);  		this.sourceData = result;  		this.Invoke (new Action (() =>  {  			traceCallBack ();  		}));  		break;  	}  	this.Invoke (new Action (() =>  {  		this.waitPanel1.Position = process;  	}));  	Thread.Sleep (1000);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The following statement contains a magic number: if (process == -2) {  	throw new Exception ("无法获取指定追溯过程，可能未成功建立或已被删除");  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The following statement contains a magic number: if (process == 1000) {  	var result = ServiceContainer.GetService<IQtDataTraceService> ().GetData (userId' this.currentTraceFactoryId);  	this.sourceData = result;  	this.Invoke (new Action (() =>  {  		traceCallBack ();  	}));  	break;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewTrace,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,gridControl1_ClientSizeChanged,The following statement contains a magic number: this.waitPanel1.Location = new Point (gridControl1.Location.X + gridControl1.Width / 2 - this.waitPanel1.Width / 2' gridControl1.Location.Y + gridControl1.Height / 2 - this.waitPanel1.Height / 2);  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,gridControl1_ClientSizeChanged,The following statement contains a magic number: this.waitPanel1.Location = new Point (gridControl1.Location.X + gridControl1.Width / 2 - this.waitPanel1.Width / 2' gridControl1.Location.Y + gridControl1.Height / 2 - this.waitPanel1.Height / 2);  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,gridControl1_ClientSizeChanged,The following statement contains a magic number: this.waitPanel1.Location = new Point (gridControl1.Location.X + gridControl1.Width / 2 - this.waitPanel1.Width / 2' gridControl1.Location.Y + gridControl1.Height / 2 - this.waitPanel1.Height / 2);  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,gridControl1_ClientSizeChanged,The following statement contains a magic number: this.waitPanel1.Location = new Point (gridControl1.Location.X + gridControl1.Width / 2 - this.waitPanel1.Width / 2' gridControl1.Location.Y + gridControl1.Height / 2 - this.waitPanel1.Height / 2);  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,barButtonItem1_ItemClick,The following statement contains a magic number: module.SelectTabPageIndex = 5;  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewAnalyze,The following statement contains a magic number: timerTask = new Thread (() =>  {  	DateTime start = DateTime.Now;  	try {  		int process;  		while (true) {  			process = ServiceContainer.GetService<IDataAnalyzeService> ().GetProcess (userId' currentAnalyzeFactoryId);  			if (process == -2) {  				throw new Exception ("无法获取指定分析过程，可能未成功建立或已被删除");  			}  			if (process == -1) {  				throw new Exception ("发生错误:" + ServiceContainer.GetService<IDataAnalyzeService> ().GetErrorMessage (userId' currentAnalyzeFactoryId));  			}  			if (process == 1000) {  				callBack ();  				break;  			}  			this.Invoke (new Action (() =>  {  				this.waitPanel1.Position = process;  			}));  			Thread.Sleep (time);  		}  	}  	catch (Exception ex) {  		if (ex.GetType () != typeof(ThreadAbortException))  			MessageBox.Show (ex.Message);  	}  	finally {  		DateTime end = DateTime.Now;  		Console.WriteLine ("Cost:" + (end - start));  		this.Invoke (new Action (() =>  {  			EndWait ();  		}));  	}  }) {  	IsBackground = true  };  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewAnalyze,The following statement contains a magic number: timerTask = new Thread (() =>  {  	DateTime start = DateTime.Now;  	try {  		int process;  		while (true) {  			process = ServiceContainer.GetService<IDataAnalyzeService> ().GetProcess (userId' currentAnalyzeFactoryId);  			if (process == -2) {  				throw new Exception ("无法获取指定分析过程，可能未成功建立或已被删除");  			}  			if (process == -1) {  				throw new Exception ("发生错误:" + ServiceContainer.GetService<IDataAnalyzeService> ().GetErrorMessage (userId' currentAnalyzeFactoryId));  			}  			if (process == 1000) {  				callBack ();  				break;  			}  			this.Invoke (new Action (() =>  {  				this.waitPanel1.Position = process;  			}));  			Thread.Sleep (time);  		}  	}  	catch (Exception ex) {  		if (ex.GetType () != typeof(ThreadAbortException))  			MessageBox.Show (ex.Message);  	}  	finally {  		DateTime end = DateTime.Now;  		Console.WriteLine ("Cost:" + (end - start));  		this.Invoke (new Action (() =>  {  			EndWait ();  		}));  	}  }) {  	IsBackground = true  };  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewAnalyze,The following statement contains a magic number: try {  	int process;  	while (true) {  		process = ServiceContainer.GetService<IDataAnalyzeService> ().GetProcess (userId' currentAnalyzeFactoryId);  		if (process == -2) {  			throw new Exception ("无法获取指定分析过程，可能未成功建立或已被删除");  		}  		if (process == -1) {  			throw new Exception ("发生错误:" + ServiceContainer.GetService<IDataAnalyzeService> ().GetErrorMessage (userId' currentAnalyzeFactoryId));  		}  		if (process == 1000) {  			callBack ();  			break;  		}  		this.Invoke (new Action (() =>  {  			this.waitPanel1.Position = process;  		}));  		Thread.Sleep (time);  	}  }  catch (Exception ex) {  	if (ex.GetType () != typeof(ThreadAbortException))  		MessageBox.Show (ex.Message);  }  finally {  	DateTime end = DateTime.Now;  	Console.WriteLine ("Cost:" + (end - start));  	this.Invoke (new Action (() =>  {  		EndWait ();  	}));  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewAnalyze,The following statement contains a magic number: try {  	int process;  	while (true) {  		process = ServiceContainer.GetService<IDataAnalyzeService> ().GetProcess (userId' currentAnalyzeFactoryId);  		if (process == -2) {  			throw new Exception ("无法获取指定分析过程，可能未成功建立或已被删除");  		}  		if (process == -1) {  			throw new Exception ("发生错误:" + ServiceContainer.GetService<IDataAnalyzeService> ().GetErrorMessage (userId' currentAnalyzeFactoryId));  		}  		if (process == 1000) {  			callBack ();  			break;  		}  		this.Invoke (new Action (() =>  {  			this.waitPanel1.Position = process;  		}));  		Thread.Sleep (time);  	}  }  catch (Exception ex) {  	if (ex.GetType () != typeof(ThreadAbortException))  		MessageBox.Show (ex.Message);  }  finally {  	DateTime end = DateTime.Now;  	Console.WriteLine ("Cost:" + (end - start));  	this.Invoke (new Action (() =>  {  		EndWait ();  	}));  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewAnalyze,The following statement contains a magic number: while (true) {  	process = ServiceContainer.GetService<IDataAnalyzeService> ().GetProcess (userId' currentAnalyzeFactoryId);  	if (process == -2) {  		throw new Exception ("无法获取指定分析过程，可能未成功建立或已被删除");  	}  	if (process == -1) {  		throw new Exception ("发生错误:" + ServiceContainer.GetService<IDataAnalyzeService> ().GetErrorMessage (userId' currentAnalyzeFactoryId));  	}  	if (process == 1000) {  		callBack ();  		break;  	}  	this.Invoke (new Action (() =>  {  		this.waitPanel1.Position = process;  	}));  	Thread.Sleep (time);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewAnalyze,The following statement contains a magic number: while (true) {  	process = ServiceContainer.GetService<IDataAnalyzeService> ().GetProcess (userId' currentAnalyzeFactoryId);  	if (process == -2) {  		throw new Exception ("无法获取指定分析过程，可能未成功建立或已被删除");  	}  	if (process == -1) {  		throw new Exception ("发生错误:" + ServiceContainer.GetService<IDataAnalyzeService> ().GetErrorMessage (userId' currentAnalyzeFactoryId));  	}  	if (process == 1000) {  		callBack ();  		break;  	}  	this.Invoke (new Action (() =>  {  		this.waitPanel1.Position = process;  	}));  	Thread.Sleep (time);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewAnalyze,The following statement contains a magic number: if (process == -2) {  	throw new Exception ("无法获取指定分析过程，可能未成功建立或已被删除");  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,NewAnalyze,The following statement contains a magic number: if (process == 1000) {  	callBack ();  	break;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRelationAnalyze_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	var re = ServiceContainer.GetService<IDataAnalyzeService> ().CCTStart (userId' currentDataId' this.gridView1.GetChoosedRowIndexs ()' configcontrol.TargetColumn' configcontrol.Columns);  	currentAnalyzeFactoryId = re.Item1;  	if (currentTraceFactoryId == Guid.Empty) {  		MessageBox.Show (re.Item2);  		return;  	}  	NewAnalyze (1000' new Action (() =>  {  		var result = ServiceContainer.GetService<IDataAnalyzeService> ().CCTget (userId' currentAnalyzeFactoryId);  		this.Invoke (new Action (() =>  {  			SPC.Controls.ResultControls.CCTResultControl resultcontrol = new SPC.Controls.ResultControls.CCTResultControl ();  			AnalyzeResultControl resultForm = new AnalyzeResultControl ();  			resultForm.AddResultControl (resultcontrol);  			resultcontrol.Init (configcontrol.Columns' result);  			resultForm.AccessibleDescription = "相关系数" + DateTime.Now.ToString ("hh:mm:ss");  			DebugOpenModule (resultForm);  		}));  	}));  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRelationAnalyze_ItemClick,The following statement contains a magic number: NewAnalyze (1000' new Action (() =>  {  	var result = ServiceContainer.GetService<IDataAnalyzeService> ().CCTget (userId' currentAnalyzeFactoryId);  	this.Invoke (new Action (() =>  {  		SPC.Controls.ResultControls.CCTResultControl resultcontrol = new SPC.Controls.ResultControls.CCTResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (configcontrol.Columns' result);  		resultForm.AccessibleDescription = "相关系数" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}));  }));  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnQuickCluster_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	var re = ServiceContainer.GetService<IDataAnalyzeService> ().KMeansStart (userId' currentDataId' choosed' configcontrol.SelectedColumns' configcontrol.MaxCount' configcontrol.StartClustNum' configcontrol.EndClustNum' configcontrol.Avg' configcontrol.Stdev' configcontrol.InitialMode' configcontrol.MaxThread);  	currentAnalyzeFactoryId = re.Item1;  	if (currentTraceFactoryId == Guid.Empty) {  		MessageBox.Show (re.Item2);  		return;  	}  	NewAnalyze (1000' new Action (() =>  {  		var result = ServiceContainer.GetService<IDataAnalyzeService> ().KMeansGet (userId' currentAnalyzeFactoryId);  		this.Invoke (new Action (() =>  {  			SPC.Controls.ResultControls.KMeansResultControl resultcontrol = new SPC.Controls.ResultControls.KMeansResultControl ();  			AnalyzeResultControl resultForm = new AnalyzeResultControl ();  			resultForm.AddResultControl (resultcontrol);  			resultcontrol.Init (result' this.gridView1.GetIDataTable (choosed));  			resultForm.AccessibleDescription = "快速聚类" + DateTime.Now.ToString ("hh:mm:ss");  			DebugOpenModule (resultForm);  		}));  	}));  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnQuickCluster_ItemClick,The following statement contains a magic number: NewAnalyze (1000' new Action (() =>  {  	var result = ServiceContainer.GetService<IDataAnalyzeService> ().KMeansGet (userId' currentAnalyzeFactoryId);  	this.Invoke (new Action (() =>  {  		SPC.Controls.ResultControls.KMeansResultControl resultcontrol = new SPC.Controls.ResultControls.KMeansResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (result' this.gridView1.GetIDataTable (choosed));  		resultForm.AccessibleDescription = "快速聚类" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}));  }));  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCPlot_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	var re = ServiceContainer.GetService<IDataAnalyzeService> ().ContourPlotStart (userId' currentDataId' choosed' CPlotConfig.X' CPlotConfig.Y' CPlotConfig.Z' CPlotConfig.PicWidth' CPlotConfig.PicHeight' CPlotConfig.Levels' CPlotConfig.IsDrawLine);  	currentAnalyzeFactoryId = re.Item1;  	if (currentAnalyzeFactoryId == Guid.Empty) {  		MessageBox.Show (re.Item2);  		return;  	}  	NewAnalyze (1000' new Action (() =>  {  		var result = ServiceContainer.GetService<IDataAnalyzeService> ().ContourPlotGet (userId' currentAnalyzeFactoryId);  		this.Invoke (new Action (() =>  {  			SPC.Controls.ResultControls.ContourPlotResultControl resultcontrol = new SPC.Controls.ResultControls.ContourPlotResultControl ();  			AnalyzeResultControl resultForm = new AnalyzeResultControl ();  			resultForm.AddResultControl (resultcontrol);  			resultcontrol.Init (result' CPlotConfig.X' CPlotConfig.Y' CPlotConfig.Z);  			resultForm.AccessibleDescription = "等高线图" + DateTime.Now.ToString ("hh:mm:ss");  			DebugOpenModule (resultForm);  		}));  	}));  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCPlot_ItemClick,The following statement contains a magic number: NewAnalyze (1000' new Action (() =>  {  	var result = ServiceContainer.GetService<IDataAnalyzeService> ().ContourPlotGet (userId' currentAnalyzeFactoryId);  	this.Invoke (new Action (() =>  {  		SPC.Controls.ResultControls.ContourPlotResultControl resultcontrol = new SPC.Controls.ResultControls.ContourPlotResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (result' CPlotConfig.X' CPlotConfig.Y' CPlotConfig.Z);  		resultForm.AccessibleDescription = "等高线图" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}));  }));  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	DataTable resulttable = new DataTable ();  	resulttable.Columns.Add ("列名"' typeof(string));  	resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  	int count = result.Length;  	for (int i = 0; i < count; i++) {  		resulttable.Rows.Add (configcontrol.SourceColumns [i]' result [i]);  	}  	SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  	AnalyzeResultControl resultForm = new AnalyzeResultControl ();  	resultForm.AddResultControl (resultcontrol);  	resultcontrol.Init (resulttable);  	resultForm.AccessibleDescription = "列统计量" + DateTime.Now.ToString ("hh:mm:ss");  	DebugOpenModule (resultForm);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	DataTable resulttable = new DataTable ();  	resulttable.Columns.Add ("列名"' typeof(string));  	resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  	int count = result.Length;  	for (int i = 0; i < count; i++) {  		resulttable.Rows.Add (configcontrol.SourceColumns [i]' result [i]);  	}  	SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  	AnalyzeResultControl resultForm = new AnalyzeResultControl ();  	resultForm.AddResultControl (resultcontrol);  	resultcontrol.Init (resulttable);  	resultForm.AccessibleDescription = "列统计量" + DateTime.Now.ToString ("hh:mm:ss");  	DebugOpenModule (resultForm);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	DataTable resulttable = new DataTable ();  	resulttable.Columns.Add ("列名"' typeof(string));  	resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  	int count = result.Length;  	for (int i = 0; i < count; i++) {  		resulttable.Rows.Add (configcontrol.SourceColumns [i]' result [i]);  	}  	SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  	AnalyzeResultControl resultForm = new AnalyzeResultControl ();  	resultForm.AddResultControl (resultcontrol);  	resultcontrol.Init (resulttable);  	resultForm.AccessibleDescription = "列统计量" + DateTime.Now.ToString ("hh:mm:ss");  	DebugOpenModule (resultForm);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	DataTable resulttable = new DataTable ();  	resulttable.Columns.Add ("列名"' typeof(string));  	resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  	int count = result.Length;  	for (int i = 0; i < count; i++) {  		resulttable.Rows.Add (configcontrol.SourceColumns [i]' result [i]);  	}  	SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  	AnalyzeResultControl resultForm = new AnalyzeResultControl ();  	resultForm.AddResultControl (resultcontrol);  	resultcontrol.Init (resulttable);  	resultForm.AccessibleDescription = "列统计量" + DateTime.Now.ToString ("hh:mm:ss");  	DebugOpenModule (resultForm);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	DataTable resulttable = new DataTable ();  	resulttable.Columns.Add ("列名"' typeof(string));  	resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  	int count = result.Length;  	for (int i = 0; i < count; i++) {  		resulttable.Rows.Add (configcontrol.SourceColumns [i]' result [i]);  	}  	SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  	AnalyzeResultControl resultForm = new AnalyzeResultControl ();  	resultForm.AddResultControl (resultcontrol);  	resultcontrol.Init (resulttable);  	resultForm.AccessibleDescription = "列统计量" + DateTime.Now.ToString ("hh:mm:ss");  	DebugOpenModule (resultForm);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	DataTable resulttable = new DataTable ();  	resulttable.Columns.Add ("列名"' typeof(string));  	resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  	int count = result.Length;  	for (int i = 0; i < count; i++) {  		resulttable.Rows.Add (configcontrol.SourceColumns [i]' result [i]);  	}  	SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  	AnalyzeResultControl resultForm = new AnalyzeResultControl ();  	resultForm.AddResultControl (resultcontrol);  	resultcontrol.Init (resulttable);  	resultForm.AccessibleDescription = "列统计量" + DateTime.Now.ToString ("hh:mm:ss");  	DebugOpenModule (resultForm);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	DataTable resulttable = new DataTable ();  	resulttable.Columns.Add ("列名"' typeof(string));  	resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  	int count = result.Length;  	for (int i = 0; i < count; i++) {  		resulttable.Rows.Add (configcontrol.SourceColumns [i]' result [i]);  	}  	SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  	AnalyzeResultControl resultForm = new AnalyzeResultControl ();  	resultForm.AddResultControl (resultcontrol);  	resultcontrol.Init (resulttable);  	resultForm.AccessibleDescription = "列统计量" + DateTime.Now.ToString ("hh:mm:ss");  	DebugOpenModule (resultForm);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	DataTable resulttable = new DataTable ();  	resulttable.Columns.Add ("列名"' typeof(string));  	resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  	int count = result.Length;  	for (int i = 0; i < count; i++) {  		resulttable.Rows.Add (configcontrol.SourceColumns [i]' result [i]);  	}  	SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  	AnalyzeResultControl resultForm = new AnalyzeResultControl ();  	resultForm.AddResultControl (resultcontrol);  	resultcontrol.Init (resulttable);  	resultForm.AccessibleDescription = "列统计量" + DateTime.Now.ToString ("hh:mm:ss");  	DebugOpenModule (resultForm);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	DataTable resulttable = new DataTable ();  	resulttable.Columns.Add ("列名"' typeof(string));  	resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  	int count = result.Length;  	for (int i = 0; i < count; i++) {  		resulttable.Rows.Add (configcontrol.SourceColumns [i]' result [i]);  	}  	SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  	AnalyzeResultControl resultForm = new AnalyzeResultControl ();  	resultForm.AddResultControl (resultcontrol);  	resultcontrol.Init (resulttable);  	resultForm.AccessibleDescription = "列统计量" + DateTime.Now.ToString ("hh:mm:ss");  	DebugOpenModule (resultForm);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCCalCulate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.ColumnCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.ColumnCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.ColumnCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.ColumnCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.ColumnCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.ColumnCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.ColumnCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.ColumnCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.ColumnCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.ColumnCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.ColumnCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	if (!configcontrol.SaveNewColumn) {  		DataTable resulttable = new DataTable ();  		resulttable.Columns.Add ("行号"' typeof(int));  		resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++) {  			resulttable.Rows.Add (i' result [i]);  		}  		SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (resulttable);  		resultForm.AccessibleDescription = "行统计量" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}  	else {  		string col = configcontrol.TargetColumn;  		if (!data.ContainsColumn (col))  			data.AddColumn (col' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++)  			data [i' col] = result [i];  		MessageBox.Show ("添加成功");  	}  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	if (!configcontrol.SaveNewColumn) {  		DataTable resulttable = new DataTable ();  		resulttable.Columns.Add ("行号"' typeof(int));  		resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++) {  			resulttable.Rows.Add (i' result [i]);  		}  		SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (resulttable);  		resultForm.AccessibleDescription = "行统计量" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}  	else {  		string col = configcontrol.TargetColumn;  		if (!data.ContainsColumn (col))  			data.AddColumn (col' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++)  			data [i' col] = result [i];  		MessageBox.Show ("添加成功");  	}  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	if (!configcontrol.SaveNewColumn) {  		DataTable resulttable = new DataTable ();  		resulttable.Columns.Add ("行号"' typeof(int));  		resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++) {  			resulttable.Rows.Add (i' result [i]);  		}  		SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (resulttable);  		resultForm.AccessibleDescription = "行统计量" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}  	else {  		string col = configcontrol.TargetColumn;  		if (!data.ContainsColumn (col))  			data.AddColumn (col' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++)  			data [i' col] = result [i];  		MessageBox.Show ("添加成功");  	}  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	if (!configcontrol.SaveNewColumn) {  		DataTable resulttable = new DataTable ();  		resulttable.Columns.Add ("行号"' typeof(int));  		resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++) {  			resulttable.Rows.Add (i' result [i]);  		}  		SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (resulttable);  		resultForm.AccessibleDescription = "行统计量" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}  	else {  		string col = configcontrol.TargetColumn;  		if (!data.ContainsColumn (col))  			data.AddColumn (col' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++)  			data [i' col] = result [i];  		MessageBox.Show ("添加成功");  	}  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	if (!configcontrol.SaveNewColumn) {  		DataTable resulttable = new DataTable ();  		resulttable.Columns.Add ("行号"' typeof(int));  		resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++) {  			resulttable.Rows.Add (i' result [i]);  		}  		SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (resulttable);  		resultForm.AccessibleDescription = "行统计量" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}  	else {  		string col = configcontrol.TargetColumn;  		if (!data.ContainsColumn (col))  			data.AddColumn (col' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++)  			data [i' col] = result [i];  		MessageBox.Show ("添加成功");  	}  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	if (!configcontrol.SaveNewColumn) {  		DataTable resulttable = new DataTable ();  		resulttable.Columns.Add ("行号"' typeof(int));  		resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++) {  			resulttable.Rows.Add (i' result [i]);  		}  		SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (resulttable);  		resultForm.AccessibleDescription = "行统计量" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}  	else {  		string col = configcontrol.TargetColumn;  		if (!data.ContainsColumn (col))  			data.AddColumn (col' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++)  			data [i' col] = result [i];  		MessageBox.Show ("添加成功");  	}  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	if (!configcontrol.SaveNewColumn) {  		DataTable resulttable = new DataTable ();  		resulttable.Columns.Add ("行号"' typeof(int));  		resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++) {  			resulttable.Rows.Add (i' result [i]);  		}  		SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (resulttable);  		resultForm.AccessibleDescription = "行统计量" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}  	else {  		string col = configcontrol.TargetColumn;  		if (!data.ContainsColumn (col))  			data.AddColumn (col' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++)  			data [i' col] = result [i];  		MessageBox.Show ("添加成功");  	}  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	if (!configcontrol.SaveNewColumn) {  		DataTable resulttable = new DataTable ();  		resulttable.Columns.Add ("行号"' typeof(int));  		resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++) {  			resulttable.Rows.Add (i' result [i]);  		}  		SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (resulttable);  		resultForm.AccessibleDescription = "行统计量" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}  	else {  		string col = configcontrol.TargetColumn;  		if (!data.ContainsColumn (col))  			data.AddColumn (col' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++)  			data [i' col] = result [i];  		MessageBox.Show ("添加成功");  	}  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	switch (configcontrol.MethodIndex) {  	case 0:  		result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  		break;  	case 1:  		result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  		break;  	case 2:  		result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  		break;  	case 3:  		result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  		break;  	case 4:  		result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  		break;  	case 5:  		result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  		break;  	case 6:  		result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  		break;  	case 7:  		result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  		break;  	case 8:  		result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  		break;  	case 9:  		result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  		break;  	case 10:  		result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  		break;  	default:  		MessageBox.Show ("不支持的方法");  		return;  	}  	if (!configcontrol.SaveNewColumn) {  		DataTable resulttable = new DataTable ();  		resulttable.Columns.Add ("行号"' typeof(int));  		resulttable.Columns.Add (configcontrol.MethodString' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++) {  			resulttable.Rows.Add (i' result [i]);  		}  		SPC.Controls.ResultControls.CalculateResultControl resultcontrol = new SPC.Controls.ResultControls.CalculateResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (resulttable);  		resultForm.AccessibleDescription = "行统计量" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}  	else {  		string col = configcontrol.TargetColumn;  		if (!data.ContainsColumn (col))  			data.AddColumn (col' typeof(double));  		int count = result.Length;  		for (int i = 0; i < count; i++)  			data [i' col] = result [i];  		MessageBox.Show ("添加成功");  	}  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnRCalculate_ItemClick,The following statement contains a magic number: switch (configcontrol.MethodIndex) {  case 0:  	result = SPC.Base.Operation.RowCalculate.Sum (data' configcontrol.SourceColumns);  	break;  case 1:  	result = SPC.Base.Operation.RowCalculate.Avg (data' configcontrol.SourceColumns);  	break;  case 2:  	result = SPC.Base.Operation.RowCalculate.Stdev (data' configcontrol.SourceColumns);  	break;  case 3:  	result = SPC.Base.Operation.RowCalculate.Min (data' configcontrol.SourceColumns);  	break;  case 4:  	result = SPC.Base.Operation.RowCalculate.Max (data' configcontrol.SourceColumns);  	break;  case 5:  	result = SPC.Base.Operation.RowCalculate.Range (data' configcontrol.SourceColumns);  	break;  case 6:  	result = SPC.Base.Operation.RowCalculate.Mid (data' configcontrol.SourceColumns);  	break;  case 7:  	result = SPC.Base.Operation.RowCalculate.QuadraticSum (data' configcontrol.SourceColumns);  	break;  case 8:  	result = SPC.Base.Operation.RowCalculate.Count (data' configcontrol.SourceColumns);  	break;  case 9:  	result = SPC.Base.Operation.RowCalculate.IsNotNull (data' configcontrol.SourceColumns);  	break;  case 10:  	result = SPC.Base.Operation.RowCalculate.IsNull (data' configcontrol.SourceColumns);  	break;  default:  	MessageBox.Show ("不支持的方法");  	return;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	try {  		switch (SdzConfig.MethodType) {  		case 0:  			SPC.Base.Operation.Standardization.ZScore (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  			break;  		case 1:  			SPC.Base.Operation.Standardization.MinusAvg (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  			break;  		case 2:  			SPC.Base.Operation.Standardization.DivideStdev (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  			break;  		case 3:  			SPC.Base.Operation.Standardization.M1D2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  			break;  		case 4:  			SPC.Base.Operation.Standardization.F1T2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  			break;  		}  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  	}  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	try {  		switch (SdzConfig.MethodType) {  		case 0:  			SPC.Base.Operation.Standardization.ZScore (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  			break;  		case 1:  			SPC.Base.Operation.Standardization.MinusAvg (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  			break;  		case 2:  			SPC.Base.Operation.Standardization.DivideStdev (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  			break;  		case 3:  			SPC.Base.Operation.Standardization.M1D2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  			break;  		case 4:  			SPC.Base.Operation.Standardization.F1T2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  			break;  		}  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  	}  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	try {  		switch (SdzConfig.MethodType) {  		case 0:  			SPC.Base.Operation.Standardization.ZScore (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  			break;  		case 1:  			SPC.Base.Operation.Standardization.MinusAvg (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  			break;  		case 2:  			SPC.Base.Operation.Standardization.DivideStdev (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  			break;  		case 3:  			SPC.Base.Operation.Standardization.M1D2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  			break;  		case 4:  			SPC.Base.Operation.Standardization.F1T2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  			break;  		}  	}  	catch (Exception ex) {  		MessageBox.Show (ex.Message);  	}  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,The following statement contains a magic number: try {  	switch (SdzConfig.MethodType) {  	case 0:  		SPC.Base.Operation.Standardization.ZScore (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  		break;  	case 1:  		SPC.Base.Operation.Standardization.MinusAvg (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  		break;  	case 2:  		SPC.Base.Operation.Standardization.DivideStdev (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  		break;  	case 3:  		SPC.Base.Operation.Standardization.M1D2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  		break;  	case 4:  		SPC.Base.Operation.Standardization.F1T2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  		break;  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,The following statement contains a magic number: try {  	switch (SdzConfig.MethodType) {  	case 0:  		SPC.Base.Operation.Standardization.ZScore (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  		break;  	case 1:  		SPC.Base.Operation.Standardization.MinusAvg (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  		break;  	case 2:  		SPC.Base.Operation.Standardization.DivideStdev (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  		break;  	case 3:  		SPC.Base.Operation.Standardization.M1D2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  		break;  	case 4:  		SPC.Base.Operation.Standardization.F1T2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  		break;  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,The following statement contains a magic number: try {  	switch (SdzConfig.MethodType) {  	case 0:  		SPC.Base.Operation.Standardization.ZScore (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  		break;  	case 1:  		SPC.Base.Operation.Standardization.MinusAvg (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  		break;  	case 2:  		SPC.Base.Operation.Standardization.DivideStdev (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  		break;  	case 3:  		SPC.Base.Operation.Standardization.M1D2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  		break;  	case 4:  		SPC.Base.Operation.Standardization.F1T2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  		break;  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,The following statement contains a magic number: switch (SdzConfig.MethodType) {  case 0:  	SPC.Base.Operation.Standardization.ZScore (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  	break;  case 1:  	SPC.Base.Operation.Standardization.MinusAvg (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  	break;  case 2:  	SPC.Base.Operation.Standardization.DivideStdev (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  	break;  case 3:  	SPC.Base.Operation.Standardization.M1D2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  	break;  case 4:  	SPC.Base.Operation.Standardization.F1T2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  	break;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,The following statement contains a magic number: switch (SdzConfig.MethodType) {  case 0:  	SPC.Base.Operation.Standardization.ZScore (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  	break;  case 1:  	SPC.Base.Operation.Standardization.MinusAvg (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  	break;  case 2:  	SPC.Base.Operation.Standardization.DivideStdev (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  	break;  case 3:  	SPC.Base.Operation.Standardization.M1D2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  	break;  case 4:  	SPC.Base.Operation.Standardization.F1T2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  	break;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,The following statement contains a magic number: switch (SdzConfig.MethodType) {  case 0:  	SPC.Base.Operation.Standardization.ZScore (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  	break;  case 1:  	SPC.Base.Operation.Standardization.MinusAvg (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  	break;  case 2:  	SPC.Base.Operation.Standardization.DivideStdev (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  	break;  case 3:  	SPC.Base.Operation.Standardization.M1D2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  	break;  case 4:  	SPC.Base.Operation.Standardization.F1T2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  	break;  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnBuildDtree_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	var re = ServiceContainer.GetService<IDataAnalyzeService> ().RpartStart (userId' currentDataId' choosed' BDtreeConfig.PicWidth' BDtreeConfig.PicHeight' BDtreeConfig.TargetColumn' BDtreeConfig.Columns' BDtreeConfig.Method' BDtreeConfig.CP);  	currentAnalyzeFactoryId = re.Item1;  	if (currentAnalyzeFactoryId == Guid.Empty) {  		MessageBox.Show (re.Item2);  		return;  	}  	NewAnalyze (1000' new Action (() =>  {  		var result = ServiceContainer.GetService<IDataAnalyzeService> ().RpartGet (userId' currentAnalyzeFactoryId);  		this.Invoke (new Action (() =>  {  			SPC.Controls.ResultControls.RpartResultControl resultcontrol = new SPC.Controls.ResultControls.RpartResultControl ();  			AnalyzeResultControl resultForm = new AnalyzeResultControl ();  			resultForm.AddResultControl (resultcontrol);  			resultcontrol.Init (result.Item1' result.Item2' result.Item3);  			resultForm.AccessibleDescription = "决策树" + DateTime.Now.ToString ("hh:mm:ss");  			DebugOpenModule (resultForm);  		}));  	}));  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnBuildDtree_ItemClick,The following statement contains a magic number: NewAnalyze (1000' new Action (() =>  {  	var result = ServiceContainer.GetService<IDataAnalyzeService> ().RpartGet (userId' currentAnalyzeFactoryId);  	this.Invoke (new Action (() =>  {  		SPC.Controls.ResultControls.RpartResultControl resultcontrol = new SPC.Controls.ResultControls.RpartResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (result.Item1' result.Item2' result.Item3);  		resultForm.AccessibleDescription = "决策树" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}));  }));  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnLmRegress_ItemClick,The following statement contains a magic number: if (configForm.ShowDialog () == DialogResult.OK) {  	var re = ServiceContainer.GetService<IDataAnalyzeService> ().LmRegressStart (userId' currentDataId' choosed' LmRegressConfig.PicWidth' LmRegressConfig.PicHeight' LmRegressConfig.TargetColumn' LmRegressConfig.Columns);  	currentAnalyzeFactoryId = re.Item1;  	if (currentAnalyzeFactoryId == Guid.Empty) {  		MessageBox.Show (re.Item2);  		return;  	}  	NewAnalyze (1000' new Action (() =>  {  		var result = ServiceContainer.GetService<IDataAnalyzeService> ().LmRegressGet (userId' currentAnalyzeFactoryId);  		this.Invoke (new Action (() =>  {  			SPC.Controls.ResultControls.LmregressResultControl resultcontrol = new SPC.Controls.ResultControls.LmregressResultControl ();  			AnalyzeResultControl resultForm = new AnalyzeResultControl ();  			resultForm.AddResultControl (resultcontrol);  			resultcontrol.Init (result.Item1' result.Item2' result.Item3' LmRegressConfig.Columns);  			resultForm.AccessibleDescription = "多元线性回归" + DateTime.Now.ToString ("hh:mm:ss");  			DebugOpenModule (resultForm);  		}));  	}));  }  
Magic Number,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnLmRegress_ItemClick,The following statement contains a magic number: NewAnalyze (1000' new Action (() =>  {  	var result = ServiceContainer.GetService<IDataAnalyzeService> ().LmRegressGet (userId' currentAnalyzeFactoryId);  	this.Invoke (new Action (() =>  {  		SPC.Controls.ResultControls.LmregressResultControl resultcontrol = new SPC.Controls.ResultControls.LmregressResultControl ();  		AnalyzeResultControl resultForm = new AnalyzeResultControl ();  		resultForm.AddResultControl (resultcontrol);  		resultcontrol.Init (result.Item1' result.Item2' result.Item3' LmRegressConfig.Columns);  		resultForm.AccessibleDescription = "多元线性回归" + DateTime.Now.ToString ("hh:mm:ss");  		DebugOpenModule (resultForm);  	}));  }));  
Magic Number,QtDataTrace.UI,ProcessQtTableConfig,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\ProcessQtTableConfig.cs,ProcessQtTableConfig,The following statement contains a magic number: this.bindingNavigator1.Items.Insert (10' new ToolStripControlHost (this.dropDownButton1));  
Magic Number,QtDataTrace.UI,TraceDataBackUpForm,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TraceDataBackUpForm.cs,btnSave_Click,The following statement contains a magic number: if (this.listBoxControl1.Items.Contains (name.ToUpper ()) && this.listBoxControl1.Items.Count <= 3) {  	if (MessageBox.Show ("已存在表" + name + "，是否要覆盖原表？"' "Warning"' MessageBoxButtons.OKCancel) == System.Windows.Forms.DialogResult.Cancel)  		return;  }  else if (this.listBoxControl1.Items.Count >= 3) {  	MessageBox.Show ("用户数据超出限额，无法新建备份");  	return;  }  
Magic Number,QtDataTrace.UI,TraceDataBackUpForm,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TraceDataBackUpForm.cs,btnSave_Click,The following statement contains a magic number: if (this.listBoxControl1.Items.Contains (name.ToUpper ()) && this.listBoxControl1.Items.Count <= 3) {  	if (MessageBox.Show ("已存在表" + name + "，是否要覆盖原表？"' "Warning"' MessageBoxButtons.OKCancel) == System.Windows.Forms.DialogResult.Cancel)  		return;  }  else if (this.listBoxControl1.Items.Count >= 3) {  	MessageBox.Show ("用户数据超出限额，无法新建备份");  	return;  }  
Magic Number,QtDataTrace.UI,TraceDataBackUpForm,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TraceDataBackUpForm.cs,btnSave_Click,The following statement contains a magic number: if (this.listBoxControl1.Items.Count >= 3) {  	MessageBox.Show ("用户数据超出限额，无法新建备份");  	return;  }  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,The following statement contains a magic number: for (int i = 0; i <= 2; i++) {  	// let's iterate each tri-state  	bmpCheckBox = new Bitmap (16' 16);  	// creating a new checkbox bitmap  	gfxCheckBox = Graphics.FromImage (bmpCheckBox);  	// and getting graphics object from  	switch (i) {  	// it...  	case 0:  		cbsState = CheckBoxState.UncheckedNormal;  		break;  	case 1:  		cbsState = CheckBoxState.CheckedNormal;  		break;  	case 2:  		cbsState = CheckBoxState.MixedNormal;  		break;  	}  	CheckBoxRenderer.DrawCheckBox (gfxCheckBox' new Point (2' 2)' cbsState);  	// ...rendering the checkbox and...  	gfxCheckBox.Save ();  	_ilStateImages.Images.Add (bmpCheckBox);  	// ...adding to sate image list.  	_bUseTriState = true;  }  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,The following statement contains a magic number: for (int i = 0; i <= 2; i++) {  	// let's iterate each tri-state  	bmpCheckBox = new Bitmap (16' 16);  	// creating a new checkbox bitmap  	gfxCheckBox = Graphics.FromImage (bmpCheckBox);  	// and getting graphics object from  	switch (i) {  	// it...  	case 0:  		cbsState = CheckBoxState.UncheckedNormal;  		break;  	case 1:  		cbsState = CheckBoxState.CheckedNormal;  		break;  	case 2:  		cbsState = CheckBoxState.MixedNormal;  		break;  	}  	CheckBoxRenderer.DrawCheckBox (gfxCheckBox' new Point (2' 2)' cbsState);  	// ...rendering the checkbox and...  	gfxCheckBox.Save ();  	_ilStateImages.Images.Add (bmpCheckBox);  	// ...adding to sate image list.  	_bUseTriState = true;  }  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,The following statement contains a magic number: for (int i = 0; i <= 2; i++) {  	// let's iterate each tri-state  	bmpCheckBox = new Bitmap (16' 16);  	// creating a new checkbox bitmap  	gfxCheckBox = Graphics.FromImage (bmpCheckBox);  	// and getting graphics object from  	switch (i) {  	// it...  	case 0:  		cbsState = CheckBoxState.UncheckedNormal;  		break;  	case 1:  		cbsState = CheckBoxState.CheckedNormal;  		break;  	case 2:  		cbsState = CheckBoxState.MixedNormal;  		break;  	}  	CheckBoxRenderer.DrawCheckBox (gfxCheckBox' new Point (2' 2)' cbsState);  	// ...rendering the checkbox and...  	gfxCheckBox.Save ();  	_ilStateImages.Images.Add (bmpCheckBox);  	// ...adding to sate image list.  	_bUseTriState = true;  }  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,The following statement contains a magic number: for (int i = 0; i <= 2; i++) {  	// let's iterate each tri-state  	bmpCheckBox = new Bitmap (16' 16);  	// creating a new checkbox bitmap  	gfxCheckBox = Graphics.FromImage (bmpCheckBox);  	// and getting graphics object from  	switch (i) {  	// it...  	case 0:  		cbsState = CheckBoxState.UncheckedNormal;  		break;  	case 1:  		cbsState = CheckBoxState.CheckedNormal;  		break;  	case 2:  		cbsState = CheckBoxState.MixedNormal;  		break;  	}  	CheckBoxRenderer.DrawCheckBox (gfxCheckBox' new Point (2' 2)' cbsState);  	// ...rendering the checkbox and...  	gfxCheckBox.Save ();  	_ilStateImages.Images.Add (bmpCheckBox);  	// ...adding to sate image list.  	_bUseTriState = true;  }  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,The following statement contains a magic number: for (int i = 0; i <= 2; i++) {  	// let's iterate each tri-state  	bmpCheckBox = new Bitmap (16' 16);  	// creating a new checkbox bitmap  	gfxCheckBox = Graphics.FromImage (bmpCheckBox);  	// and getting graphics object from  	switch (i) {  	// it...  	case 0:  		cbsState = CheckBoxState.UncheckedNormal;  		break;  	case 1:  		cbsState = CheckBoxState.CheckedNormal;  		break;  	case 2:  		cbsState = CheckBoxState.MixedNormal;  		break;  	}  	CheckBoxRenderer.DrawCheckBox (gfxCheckBox' new Point (2' 2)' cbsState);  	// ...rendering the checkbox and...  	gfxCheckBox.Save ();  	_ilStateImages.Images.Add (bmpCheckBox);  	// ...adding to sate image list.  	_bUseTriState = true;  }  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,The following statement contains a magic number: for (int i = 0; i <= 2; i++) {  	// let's iterate each tri-state  	bmpCheckBox = new Bitmap (16' 16);  	// creating a new checkbox bitmap  	gfxCheckBox = Graphics.FromImage (bmpCheckBox);  	// and getting graphics object from  	switch (i) {  	// it...  	case 0:  		cbsState = CheckBoxState.UncheckedNormal;  		break;  	case 1:  		cbsState = CheckBoxState.CheckedNormal;  		break;  	case 2:  		cbsState = CheckBoxState.MixedNormal;  		break;  	}  	CheckBoxRenderer.DrawCheckBox (gfxCheckBox' new Point (2' 2)' cbsState);  	// ...rendering the checkbox and...  	gfxCheckBox.Save ();  	_ilStateImages.Images.Add (bmpCheckBox);  	// ...adding to sate image list.  	_bUseTriState = true;  }  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,The following statement contains a magic number: bmpCheckBox = new Bitmap (16' 16);  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,The following statement contains a magic number: bmpCheckBox = new Bitmap (16' 16);  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,The following statement contains a magic number: switch (i) {  // it...  case 0:  	cbsState = CheckBoxState.UncheckedNormal;  	break;  case 1:  	cbsState = CheckBoxState.CheckedNormal;  	break;  case 2:  	cbsState = CheckBoxState.MixedNormal;  	break;  }  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,The following statement contains a magic number: CheckBoxRenderer.DrawCheckBox (gfxCheckBox' new Point (2' 2)' cbsState);  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,The following statement contains a magic number: CheckBoxRenderer.DrawCheckBox (gfxCheckBox' new Point (2' 2)' cbsState);  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,OnNodeMouseClick,The following statement contains a magic number: iSpacing = ImageList == null ? 0 : 18;  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,OnNodeMouseClick,The following statement contains a magic number: if ((e.X > e.Node.Bounds.Left - iSpacing || // *not* used by the state  e.X < e.Node.Bounds.Left - (iSpacing + 16)) && // image we can leave here.  e.Button != MouseButtons.None) {  	return;  }  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,OnNodeMouseClick,The following statement contains a magic number: while (tnBuffer.Parent != null) {  	// while we get a parent we  	foreach (TreeNode tnChild in tnBuffer.Parent.Nodes)  		// determine mixed check states  		bMixedState |= (tnChild.Checked != tnBuffer.Checked | // and convert current check  		tnChild.StateImageIndex == 2);  	// state to state image index.  	iIndex = (int)Convert.ToUInt32 (tnBuffer.Checked);  	// set parent's check state and  	tnBuffer.Parent.Checked = bMixedState || (iIndex > 0);  	// state image in dependency  	if (bMixedState)  		// of mixed state.  		tnBuffer.Parent.StateImageIndex = CheckBoxesTriState ? 2 : 1;  	else  		tnBuffer.Parent.StateImageIndex = iIndex;  	tnBuffer = tnBuffer.Parent;  	// finally buffer parent and  }  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,OnNodeMouseClick,The following statement contains a magic number: while (tnBuffer.Parent != null) {  	// while we get a parent we  	foreach (TreeNode tnChild in tnBuffer.Parent.Nodes)  		// determine mixed check states  		bMixedState |= (tnChild.Checked != tnBuffer.Checked | // and convert current check  		tnChild.StateImageIndex == 2);  	// state to state image index.  	iIndex = (int)Convert.ToUInt32 (tnBuffer.Checked);  	// set parent's check state and  	tnBuffer.Parent.Checked = bMixedState || (iIndex > 0);  	// state image in dependency  	if (bMixedState)  		// of mixed state.  		tnBuffer.Parent.StateImageIndex = CheckBoxesTriState ? 2 : 1;  	else  		tnBuffer.Parent.StateImageIndex = iIndex;  	tnBuffer = tnBuffer.Parent;  	// finally buffer parent and  }  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,OnNodeMouseClick,The following statement contains a magic number: foreach (TreeNode tnChild in tnBuffer.Parent.Nodes)  	// determine mixed check states  	bMixedState |= (tnChild.Checked != tnBuffer.Checked | // and convert current check  	tnChild.StateImageIndex == 2);  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,OnNodeMouseClick,The following statement contains a magic number: bMixedState |= (tnChild.Checked != tnBuffer.Checked | // and convert current check  tnChild.StateImageIndex == 2);  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,OnNodeMouseClick,The following statement contains a magic number: if (bMixedState)  	// of mixed state.  	tnBuffer.Parent.StateImageIndex = CheckBoxesTriState ? 2 : 1;  else  	tnBuffer.Parent.StateImageIndex = iIndex;  
Magic Number,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,OnNodeMouseClick,The following statement contains a magic number: tnBuffer.Parent.StateImageIndex = CheckBoxesTriState ? 2 : 1;  
Missing Default,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnCancel_Click,The following switch statement is missing a default case: switch (currentWorkingMode) {  case WorkingMode.Trace:  	ServiceContainer.GetService<IQtDataTraceService> ().Stop (userId' currentTraceFactoryId);  	currentTraceFactoryId = Guid.Empty;  	break;  case WorkingMode.Analyze:  	ServiceContainer.GetService<IQtDataTraceService> ().Stop (userId' currentAnalyzeFactoryId);  	currentAnalyzeFactoryId = Guid.Empty;  	break;  }  
Missing Default,QtDataTrace.UI,DataAnalysisStartUpAdv,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\DataAnalysisStartUpAdv.cs,btnSdz_ItemClick,The following switch statement is missing a default case: switch (SdzConfig.MethodType) {  case 0:  	SPC.Base.Operation.Standardization.ZScore (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  	break;  case 1:  	SPC.Base.Operation.Standardization.MinusAvg (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  	break;  case 2:  	SPC.Base.Operation.Standardization.DivideStdev (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns);  	break;  case 3:  	SPC.Base.Operation.Standardization.M1D2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  	break;  case 4:  	SPC.Base.Operation.Standardization.F1T2 (data' SdzConfig.SourceColumns' SdzConfig.TargetColumns' SdzConfig.Arg_1' SdzConfig.Arg_2);  	break;  }  
Missing Default,QtDataTrace.UI,TriStateTreeView,C:\repos\Tcat1024_XMLDataSourceTest\QtDataTrace.UI\TriStateTreeView.cs,TriStateTreeView,The following switch statement is missing a default case: switch (i) {  // it...  case 0:  	cbsState = CheckBoxState.UncheckedNormal;  	break;  case 1:  	cbsState = CheckBoxState.CheckedNormal;  	break;  case 2:  	cbsState = CheckBoxState.MixedNormal;  	break;  }  
