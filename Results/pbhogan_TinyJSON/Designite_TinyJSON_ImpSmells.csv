Implementation smell,Namespace,Class,File,Method,Description
Long Method,TinyJSON,JSON,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\JSON.cs,DecodeType,The method has 224 lines of code.
Complex Method,TinyJSON,Decoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Decoder.cs,DecodeByToken,Cyclomatic complexity of the method is 8
Complex Method,TinyJSON,Decoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Decoder.cs,DecodeString,Cyclomatic complexity of the method is 13
Complex Method,TinyJSON,Encoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeValue,Cyclomatic complexity of the method is 14
Complex Method,TinyJSON,Encoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeObject,Cyclomatic complexity of the method is 16
Complex Method,TinyJSON,Encoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeString,Cyclomatic complexity of the method is 10
Complex Method,TinyJSON,ProxyNumber,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Types\ProxyNumber.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,TinyJSON,JSON,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\JSON.cs,DecodeType,Cyclomatic complexity of the method is 38
Long Statement,TinyJSON,Encoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,GetFieldsForType,The length of the statement  "					fields.AddRange( types.Pop().GetFields( BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance ) );" is 141.
Long Statement,TinyJSON,Encoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,GetPropertiesForType,The length of the statement  "					properties.AddRange( types.Pop().GetProperties( BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance ) );" is 149.
Long Statement,TinyJSON,JSON,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\JSON.cs,DecodeType,The length of the statement  "						throw new DecodeException( "Error decoding multidimensional array. Did you try to decode into an array of incompatible rank or element type?"' e );" is 147.
Complex Conditional,TinyJSON,Encoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeValue,The conditional expression  "value is float || 			    value is double || 			    value is int || 			    value is uint || 			    value is long || 			    value is sbyte || 			    value is byte || 			    value is short || 			    value is ushort || 			    value is ulong || 			    value is decimal || 			    value is ProxyBoolean || 			    value is ProxyNumber"  is complex.
Magic Number,TinyJSON,Decoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Decoder.cs,DecodeString,The following statement contains a magic number: switch (c) 				{ 					case '"': 						parsing = false; 						break;  					case '\\': 						if (json.Peek() == -1) 						{ 							parsing = false; 							break; 						}  						c = NextChar;  						// ReSharper disable once SwitchStatementMissingSomeCases 						switch (c) 						{ 							case '"': 							case '\\': 							case '/': 								stringBuilder.Append( c ); 								break;  							case 'b': 								stringBuilder.Append( '\b' ); 								break;  							case 'f': 								stringBuilder.Append( '\f' ); 								break;  							case 'n': 								stringBuilder.Append( '\n' ); 								break;  							case 'r': 								stringBuilder.Append( '\r' ); 								break;  							case 't': 								stringBuilder.Append( '\t' ); 								break;  							case 'u': 								var hex = new StringBuilder();  								for (var i = 0; i < 4; i++) 								{ 									hex.Append( NextChar ); 								}  								stringBuilder.Append( (char) Convert.ToInt32( hex.ToString()' 16 ) ); 								break;  							//default: 							//	throw new DecodeException( @"Illegal character following escape character: " + c ); 						}  						break;  					default: 						stringBuilder.Append( c ); 						break; 				}
Magic Number,TinyJSON,Decoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Decoder.cs,DecodeString,The following statement contains a magic number: switch (c) 				{ 					case '"': 						parsing = false; 						break;  					case '\\': 						if (json.Peek() == -1) 						{ 							parsing = false; 							break; 						}  						c = NextChar;  						// ReSharper disable once SwitchStatementMissingSomeCases 						switch (c) 						{ 							case '"': 							case '\\': 							case '/': 								stringBuilder.Append( c ); 								break;  							case 'b': 								stringBuilder.Append( '\b' ); 								break;  							case 'f': 								stringBuilder.Append( '\f' ); 								break;  							case 'n': 								stringBuilder.Append( '\n' ); 								break;  							case 'r': 								stringBuilder.Append( '\r' ); 								break;  							case 't': 								stringBuilder.Append( '\t' ); 								break;  							case 'u': 								var hex = new StringBuilder();  								for (var i = 0; i < 4; i++) 								{ 									hex.Append( NextChar ); 								}  								stringBuilder.Append( (char) Convert.ToInt32( hex.ToString()' 16 ) ); 								break;  							//default: 							//	throw new DecodeException( @"Illegal character following escape character: " + c ); 						}  						break;  					default: 						stringBuilder.Append( c ); 						break; 				}
Magic Number,TinyJSON,Encoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeString,The following statement contains a magic number: switch (c) 				{ 					case '"': 						builder.Append( "\\\"" ); 						break;  					case '\\': 						builder.Append( "\\\\" ); 						break;  					case '\b': 						builder.Append( "\\b" ); 						break;  					case '\f': 						builder.Append( "\\f" ); 						break;  					case '\n': 						builder.Append( "\\n" ); 						break;  					case '\r': 						builder.Append( "\\r" ); 						break;  					case '\t': 						builder.Append( "\\t" ); 						break;  					default: 						var codepoint = Convert.ToInt32( c ); 						if ((codepoint >= 32) && (codepoint <= 126)) 						{ 							builder.Append( c ); 						} 						else 						{ 							builder.Append( "\\u" + Convert.ToString( codepoint' 16 ).PadLeft( 4' '0' ) ); 						}  						break; 				}
Magic Number,TinyJSON,Encoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeString,The following statement contains a magic number: switch (c) 				{ 					case '"': 						builder.Append( "\\\"" ); 						break;  					case '\\': 						builder.Append( "\\\\" ); 						break;  					case '\b': 						builder.Append( "\\b" ); 						break;  					case '\f': 						builder.Append( "\\f" ); 						break;  					case '\n': 						builder.Append( "\\n" ); 						break;  					case '\r': 						builder.Append( "\\r" ); 						break;  					case '\t': 						builder.Append( "\\t" ); 						break;  					default: 						var codepoint = Convert.ToInt32( c ); 						if ((codepoint >= 32) && (codepoint <= 126)) 						{ 							builder.Append( c ); 						} 						else 						{ 							builder.Append( "\\u" + Convert.ToString( codepoint' 16 ).PadLeft( 4' '0' ) ); 						}  						break; 				}
Magic Number,TinyJSON,Encoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeString,The following statement contains a magic number: switch (c) 				{ 					case '"': 						builder.Append( "\\\"" ); 						break;  					case '\\': 						builder.Append( "\\\\" ); 						break;  					case '\b': 						builder.Append( "\\b" ); 						break;  					case '\f': 						builder.Append( "\\f" ); 						break;  					case '\n': 						builder.Append( "\\n" ); 						break;  					case '\r': 						builder.Append( "\\r" ); 						break;  					case '\t': 						builder.Append( "\\t" ); 						break;  					default: 						var codepoint = Convert.ToInt32( c ); 						if ((codepoint >= 32) && (codepoint <= 126)) 						{ 							builder.Append( c ); 						} 						else 						{ 							builder.Append( "\\u" + Convert.ToString( codepoint' 16 ).PadLeft( 4' '0' ) ); 						}  						break; 				}
Magic Number,TinyJSON,Encoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeString,The following statement contains a magic number: switch (c) 				{ 					case '"': 						builder.Append( "\\\"" ); 						break;  					case '\\': 						builder.Append( "\\\\" ); 						break;  					case '\b': 						builder.Append( "\\b" ); 						break;  					case '\f': 						builder.Append( "\\f" ); 						break;  					case '\n': 						builder.Append( "\\n" ); 						break;  					case '\r': 						builder.Append( "\\r" ); 						break;  					case '\t': 						builder.Append( "\\t" ); 						break;  					default: 						var codepoint = Convert.ToInt32( c ); 						if ((codepoint >= 32) && (codepoint <= 126)) 						{ 							builder.Append( c ); 						} 						else 						{ 							builder.Append( "\\u" + Convert.ToString( codepoint' 16 ).PadLeft( 4' '0' ) ); 						}  						break; 				}
Duplicate Code,TinyJSON,Encoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeObject,The method contains a code clone-set at the following line numbers (starting from the method definition): ((31' 50)' (66' 85))
Missing Default,TinyJSON,Decoder,C:\research\architectureSmells\repos\pbhogan_TinyJSON\TinyJSON\Decoder.cs,DecodeString,The following switch statement is missing a default case: switch (c) 						{ 							case '"': 							case '\\': 							case '/': 								stringBuilder.Append( c ); 								break;  							case 'b': 								stringBuilder.Append( '\b' ); 								break;  							case 'f': 								stringBuilder.Append( '\f' ); 								break;  							case 'n': 								stringBuilder.Append( '\n' ); 								break;  							case 'r': 								stringBuilder.Append( '\r' ); 								break;  							case 't': 								stringBuilder.Append( '\t' ); 								break;  							case 'u': 								var hex = new StringBuilder();  								for (var i = 0; i < 4; i++) 								{ 									hex.Append( NextChar ); 								}  								stringBuilder.Append( (char) Convert.ToInt32( hex.ToString()' 16 ) ); 								break;  							//default: 							//	throw new DecodeException( @"Illegal character following escape character: " + c ); 						}
