Implementation smell,Namespace,Class,File,Method,Description
Long Method,TinyJSON,JSON,C:\repos\pbhogan_TinyJSON\TinyJSON\JSON.cs,DecodeType,The method has 164 lines of code.
Complex Method,TinyJSON,Encoder,C:\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeObject,Cyclomatic complexity of the method is 16
Complex Method,TinyJSON,ProxyNumber,C:\repos\pbhogan_TinyJSON\TinyJSON\Types\ProxyNumber.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,TinyJSON,JSON,C:\repos\pbhogan_TinyJSON\TinyJSON\JSON.cs,DecodeType,Cyclomatic complexity of the method is 24
Long Statement,TinyJSON,JSON,C:\repos\pbhogan_TinyJSON\TinyJSON\JSON.cs,DecodeType,The length of the statement  "							throw new DecodeException( "Error decoding multidimensional array. Did you try to decode into an array of incompatible rank or element type?"' e ); " is 147.
Complex Conditional,TinyJSON,Encoder,C:\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeOther,The conditional expression  "value is float ||  				value is double ||  				value is int ||  				value is uint ||  				value is long ||  				value is sbyte ||  				value is byte ||  				value is short ||  				value is ushort ||  				value is ulong ||  				value is decimal"  is complex.
Magic Number,TinyJSON,Decoder,C:\repos\pbhogan_TinyJSON\TinyJSON\Decoder.cs,DecodeString,The following statement contains a magic number: while (parsing)  			{  				if (json.Peek() == -1)  				{  					parsing = false;  					break;  				}    				c = NextChar;  				switch (c)  				{  					case '"':  						parsing = false;  						break;    					case '\\':  						if (json.Peek() == -1)  						{  							parsing = false;  							break;  						}    						c = NextChar;  						switch (c)  						{  							case '"':  							case '\\':  							case '/':  								stringBuilder.Append( c );  								break;    							case 'b':  								stringBuilder.Append( '\b' );  								break;    							case 'f':  								stringBuilder.Append( '\f' );  								break;    							case 'n':  								stringBuilder.Append( '\n' );  								break;    							case 'r':  								stringBuilder.Append( '\r' );  								break;    							case 't':  								stringBuilder.Append( '\t' );  								break;    							case 'u':  								var hex = new StringBuilder();    								for (int i = 0; i < 4; i++)  								{  									hex.Append( NextChar );  								}    								stringBuilder.Append( (char) Convert.ToInt32( hex.ToString()' 16 ) );  								break;    								//default:  								//	throw new DecodeException( @"Illegal character following escape character: " + c );  						}  						break;    					default:  						stringBuilder.Append( c );  						break;  				}  			}
Magic Number,TinyJSON,Decoder,C:\repos\pbhogan_TinyJSON\TinyJSON\Decoder.cs,DecodeString,The following statement contains a magic number: while (parsing)  			{  				if (json.Peek() == -1)  				{  					parsing = false;  					break;  				}    				c = NextChar;  				switch (c)  				{  					case '"':  						parsing = false;  						break;    					case '\\':  						if (json.Peek() == -1)  						{  							parsing = false;  							break;  						}    						c = NextChar;  						switch (c)  						{  							case '"':  							case '\\':  							case '/':  								stringBuilder.Append( c );  								break;    							case 'b':  								stringBuilder.Append( '\b' );  								break;    							case 'f':  								stringBuilder.Append( '\f' );  								break;    							case 'n':  								stringBuilder.Append( '\n' );  								break;    							case 'r':  								stringBuilder.Append( '\r' );  								break;    							case 't':  								stringBuilder.Append( '\t' );  								break;    							case 'u':  								var hex = new StringBuilder();    								for (int i = 0; i < 4; i++)  								{  									hex.Append( NextChar );  								}    								stringBuilder.Append( (char) Convert.ToInt32( hex.ToString()' 16 ) );  								break;    								//default:  								//	throw new DecodeException( @"Illegal character following escape character: " + c );  						}  						break;    					default:  						stringBuilder.Append( c );  						break;  				}  			}
Magic Number,TinyJSON,Encoder,C:\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeString,The following statement contains a magic number: foreach (var c in charArray)  			{  				switch (c)  				{  					case '"':  						builder.Append( "\\\"" );  						break;    					case '\\':  						builder.Append( "\\\\" );  						break;    					case '\b':  						builder.Append( "\\b" );  						break;    					case '\f':  						builder.Append( "\\f" );  						break;    					case '\n':  						builder.Append( "\\n" );  						break;    					case '\r':  						builder.Append( "\\r" );  						break;    					case '\t':  						builder.Append( "\\t" );  						break;    					default:  						int codepoint = Convert.ToInt32( c );  						if ((codepoint >= 32) && (codepoint <= 126))  						{  							builder.Append( c );  						}  						else  						{  							builder.Append( "\\u" + Convert.ToString( codepoint' 16 ).PadLeft( 4' '0' ) );  						}  						break;  				}  			}
Magic Number,TinyJSON,Encoder,C:\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeString,The following statement contains a magic number: foreach (var c in charArray)  			{  				switch (c)  				{  					case '"':  						builder.Append( "\\\"" );  						break;    					case '\\':  						builder.Append( "\\\\" );  						break;    					case '\b':  						builder.Append( "\\b" );  						break;    					case '\f':  						builder.Append( "\\f" );  						break;    					case '\n':  						builder.Append( "\\n" );  						break;    					case '\r':  						builder.Append( "\\r" );  						break;    					case '\t':  						builder.Append( "\\t" );  						break;    					default:  						int codepoint = Convert.ToInt32( c );  						if ((codepoint >= 32) && (codepoint <= 126))  						{  							builder.Append( c );  						}  						else  						{  							builder.Append( "\\u" + Convert.ToString( codepoint' 16 ).PadLeft( 4' '0' ) );  						}  						break;  				}  			}
Magic Number,TinyJSON,Encoder,C:\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeString,The following statement contains a magic number: foreach (var c in charArray)  			{  				switch (c)  				{  					case '"':  						builder.Append( "\\\"" );  						break;    					case '\\':  						builder.Append( "\\\\" );  						break;    					case '\b':  						builder.Append( "\\b" );  						break;    					case '\f':  						builder.Append( "\\f" );  						break;    					case '\n':  						builder.Append( "\\n" );  						break;    					case '\r':  						builder.Append( "\\r" );  						break;    					case '\t':  						builder.Append( "\\t" );  						break;    					default:  						int codepoint = Convert.ToInt32( c );  						if ((codepoint >= 32) && (codepoint <= 126))  						{  							builder.Append( c );  						}  						else  						{  							builder.Append( "\\u" + Convert.ToString( codepoint' 16 ).PadLeft( 4' '0' ) );  						}  						break;  				}  			}
Magic Number,TinyJSON,Encoder,C:\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeString,The following statement contains a magic number: foreach (var c in charArray)  			{  				switch (c)  				{  					case '"':  						builder.Append( "\\\"" );  						break;    					case '\\':  						builder.Append( "\\\\" );  						break;    					case '\b':  						builder.Append( "\\b" );  						break;    					case '\f':  						builder.Append( "\\f" );  						break;    					case '\n':  						builder.Append( "\\n" );  						break;    					case '\r':  						builder.Append( "\\r" );  						break;    					case '\t':  						builder.Append( "\\t" );  						break;    					default:  						int codepoint = Convert.ToInt32( c );  						if ((codepoint >= 32) && (codepoint <= 126))  						{  							builder.Append( c );  						}  						else  						{  							builder.Append( "\\u" + Convert.ToString( codepoint' 16 ).PadLeft( 4' '0' ) );  						}  						break;  				}  			}
Duplicate Code,TinyJSON,Encoder,C:\repos\pbhogan_TinyJSON\TinyJSON\Encoder.cs,EncodeObject,The method contains a code clone-set at the following line numbers (starting from the method definition): ((29' 48)' (65' 84))
Missing Default,TinyJSON,Decoder,C:\repos\pbhogan_TinyJSON\TinyJSON\Decoder.cs,DecodeString,The following switch statement is missing a default case: switch (c)  						{  							case '"':  							case '\\':  							case '/':  								stringBuilder.Append( c );  								break;    							case 'b':  								stringBuilder.Append( '\b' );  								break;    							case 'f':  								stringBuilder.Append( '\f' );  								break;    							case 'n':  								stringBuilder.Append( '\n' );  								break;    							case 'r':  								stringBuilder.Append( '\r' );  								break;    							case 't':  								stringBuilder.Append( '\t' );  								break;    							case 'u':  								var hex = new StringBuilder();    								for (int i = 0; i < 4; i++)  								{  									hex.Append( NextChar );  								}    								stringBuilder.Append( (char) Convert.ToInt32( hex.ToString()' 16 ) );  								break;    								//default:  								//	throw new DecodeException( @"Illegal character following escape character: " + c );  						}
