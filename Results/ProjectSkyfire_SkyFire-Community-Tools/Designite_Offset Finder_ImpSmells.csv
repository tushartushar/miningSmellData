Implementation smell,Namespace,Class,File,Method,Description
Long Method,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The method has 123 lines of code.
Long Method,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The method has 317 lines of code.
Long Method,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The method has 105 lines of code.
Complex Method,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,Cyclomatic complexity of the method is 13
Complex Method,Offset_Finder.FindPattern,FindPattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\FindPattern\FindPattern.cs,FindPatternList,Cyclomatic complexity of the method is 9
Long Statement,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The length of the statement  "            if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "") " is 203.
Long Statement,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The length of the statement  "                            uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM; " is 138.
Long Statement,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The length of the statement  "                            uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM; " is 138.
Long Statement,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The length of the statement  "                            tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine; " is 126.
Long Statement,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The length of the statement  "                            tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine; " is 148.
Long Statement,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePatternByBytes_Click,The length of the statement  "                tbPattern.Text += "     <offsetLocation>" + nOffsetLocation.Value.ToString() + "</offsetLocation>" + Environment.NewLine; " is 121.
Long Statement,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The length of the statement  "            this.label10.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Italic' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 156.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,Initializer,The length of the statement  "                cbListPatternList.Items.Add((object)subfolder.Replace(".xml"' "").Replace(Directory.GetCurrentDirectory() + "\\PatternList\\"' "")); " is 132.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,XmlToPatternList,The length of the statement  "                    System.Xml.Serialization.XmlSerializer fluxLecture = new System.Xml.Serialization.XmlSerializer(typeof(Structs.PatternList)); " is 125.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,bForCsharp_Click,The length of the statement  "            Structs.PatternList tPatternList = XmlToPatternList(Directory.GetCurrentDirectory() + "\\PatternList\\" + cbListPatternList.Text + ".xml"); " is 139.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,bForCsharp_Click,The length of the statement  "            tResult = tResult + "///////////////////////////////////////////////////////////" + Environment.NewLine + Environment.NewLine; " is 126.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,bForAutoIT_Click,The length of the statement  "            Structs.PatternList tPatternList = XmlToPatternList(Directory.GetCurrentDirectory() + "\\PatternList\\" + cbListPatternList.Text + ".xml"); " is 139.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,bForAutoIT_Click,The length of the statement  "            tResult = tResult + ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" + Environment.NewLine + Environment.NewLine; " is 126.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,bAllInfo_Click,The length of the statement  "            Structs.PatternList tPatternList = XmlToPatternList(Directory.GetCurrentDirectory() + "\\PatternList\\" + cbListPatternList.Text + ".xml"); " is 139.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,bAllInfo_Click,The length of the statement  "            tResult = tResult + "|__________________________________________________________" + Environment.NewLine + Environment.NewLine; " is 126.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,bAllInfo_Click,The length of the statement  "            tResult = tResult + "Process: " + tPatternList.processName + ".exe" + Environment.NewLine + Environment.NewLine + "__________________ " + Environment.NewLine; " is 158.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,bAllInfo_Click,The length of the statement  "            tResult = tResult + "__________________ " + Environment.NewLine + "OFFSET:" + Environment.NewLine + Environment.NewLine; " is 120.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,bAllInfo_Click,The length of the statement  "                tResult = tResult + "Base Addresse(Hexadecimal): " + "0x" + m.baseAddressHex + Environment.NewLine + Environment.NewLine; " is 121.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,bForIni_Click,The length of the statement  "            Structs.PatternList tPatternList = XmlToPatternList(Directory.GetCurrentDirectory() + "\\PatternList\\" + cbListPatternList.Text + ".xml"); " is 139.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,bForIni_Click,The length of the statement  "            tResult = tResult + ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;" + Environment.NewLine + Environment.NewLine; " is 126.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The length of the statement  "            this.cbListPatternList.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 150.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The length of the statement  "            this.tbResult.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 144.
Long Statement,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The length of the statement  "            this.bCreatePattern.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Complex Conditional,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The conditional expression  "cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != """  is complex.
Empty Catch Block,Offset_Finder.FindPattern,FindPattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\FindPattern\FindPattern.cs,FindPatternList,The method has an empty catch block.
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePattern_Click,The following statement contains a magic number: if (cbProcess1.Text.Replace(" "' "") != "" && cbProcess2.Text.Replace(" "' "") != "" && tbOffset1.Text.Replace(" "' "").Replace("0x"' "") != "" && tbOffset2.Text.Replace(" "' "").Replace("0x"' "") != "")              {                  string[] process1Array = cbProcess1.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  string[] process2Array = cbProcess2.Text.Replace(" "' "").Split(Convert.ToChar("-"));                  if (process1Array != null && process2Array != null)                  {                      if (process1Array.Length > 0 && process2Array.Length > 0)                      {                          try                          {                              // Process choose to ID                              int process1Id = Convert.ToInt32(process1Array[0]);                              int process2Id = Convert.ToInt32(process2Array[0]);                                // Open Process                              BlackMagic process1BM = new BlackMagic();                              BlackMagic process2BM = new BlackMagic();                              if (!process1BM.OpenProcessAndThread(process1Id))                              {                                  MessageBox.Show("Open Process 1 failled.");                                  return;                              }                              if (!process2BM.OpenProcessAndThread(process2Id))                              {                                  MessageBox.Show("Open Process 2 failled.");                                  return;                              }                                // Get Module                              uint moduleBase1BM = 0;                              uint moduleBase2BM = 0;                              string moduleShow = "";                              if (baseModuleNameTB.Text != "")                              {                                  moduleBase1BM = (uint)process1BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleBase2BM = (uint)process2BM.GetModule(baseModuleNameTB.Text).BaseAddress;                                  moduleShow = baseModuleNameTB.Text + " + ";                                  if (moduleBase1BM <= 0 || moduleBase2BM <= 0)                                  {                                      MessageBox.Show("Module not found.");                                      return;                                  }                              }                                // Offset choose to uint                              uint offset1 = uint.Parse(tbOffset1.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase1BM;                              uint offset2 = uint.Parse(tbOffset2.Text.Replace(" "' "").Replace("0x"' "")' System.Globalization.NumberStyles.HexNumber) + moduleBase2BM;                                // Offset to 4 Byte                              string tPattern1 = offset1.ToString("X");                              while (tPattern1.Length < 8)                                  tPattern1 = "0" + tPattern1;                              string tPattern2 = offset2.ToString("X");                              while (tPattern2.Length < 8)                                  tPattern2 = "0" + tPattern2;                                // Offset 4 byte inverse                              string t2Pattern1 = tPattern1.Substring(6' 2);                              t2Pattern1 += " " + tPattern1.Substring(4' 2);                              t2Pattern1 += " " + tPattern1.Substring(2' 2);                              t2Pattern1 += " " + tPattern1.Substring(0' 2);                              string t2Pattern2 = tPattern2.Substring(6' 2);                              t2Pattern2 += " " + tPattern2.Substring(4' 2);                              t2Pattern2 += " " + tPattern2.Substring(2' 2);                              t2Pattern2 += " " + tPattern2.Substring(0' 2);                                // Find offset used at                              string tMask = "xxxx";                              uint dwCodeLoc1 = process1BM.FindPattern(t2Pattern1' tMask);                              uint dwCodeLoc2 = process2BM.FindPattern(t2Pattern2' tMask);                              if (dwCodeLoc1 <= 0 || dwCodeLoc2 <= 0)                              {                                  MessageBox.Show("Offset not found.");                                  return;                              }                                // Read Pattern                              byte[] bytesPorcess1 = process1BM.ReadBytes(dwCodeLoc1' 16);                              byte[] bytesPorcess2 = process2BM.ReadBytes(dwCodeLoc2' 16);                                // Make mask                              string mask = "";                              for (int i = 0; i <= bytesPorcess1.Length - 1; i++)                              {                                  if (bytesPorcess1[i] == bytesPorcess2[i] && i > 3)                                      mask += "x";                                  else                                  {                                      bytesPorcess1[i] = 0;                                      bytesPorcess2[i] = 0;                                      mask += "?";                                  }                              }                                // Pattern to String                              string pattern = BitConverter.ToString(bytesPorcess1);                              pattern = pattern.Replace("-"' " ");                                // Show Result                              tbPattern.Text = "";                              tbPattern.Text += "Offset 1 used at: " + moduleShow + "0x" + (dwCodeLoc1 - moduleBase1BM).ToString("x") + Environment.NewLine;                              tbPattern.Text += "Offset 2 used at: " + moduleShow + "0x" + (dwCodeLoc2 - moduleBase2BM).ToString("x") + Environment.NewLine + Environment.NewLine;                              tbPattern.Text += "<Pattern>" + Environment.NewLine;                              tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                              tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                              tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                              tbPattern.Text += "     <offsetLocation>0</offsetLocation>" + Environment.NewLine;                              tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                              tbPattern.Text += "</Pattern>";                                process1BM.Close();                              process2BM.Close();                          }                          catch                          {                              MessageBox.Show("Error' please verif all info.");                          }                      }                      else                      {                          MessageBox.Show("Please select Process.");                      }                  }                  else                  {                      MessageBox.Show("Please select Process.");                  }              }              else              {                  MessageBox.Show("Please enter all information.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePatternByBytes_Click,The following statement contains a magic number: try              {                  if (tbNewBytes.Text.Replace(" "' "").Length <= 0 || tbOldBytes.Text.Replace(" "' "").Length <= 0)                  {                      MessageBox.Show("Please enter all information.");                      return;                  }                    string[] newBytesArray = tbNewBytes.Text.Replace("  "' "").Split(Convert.ToChar(" "));                  string[] oldBytesArray = tbOldBytes.Text.Replace("  "' "").Split(Convert.ToChar(" "));                    if (newBytesArray.Length != oldBytesArray.Length)                  {                      MessageBox.Show("The size of New Byte is different of the size of Old Byte.");                      return;                  }                    // Make mask                  string mask = "";                  for (int i = 0; i <= newBytesArray.Length - 1 && i <= 15 ; i++)                  {                      if (newBytesArray[i] == oldBytesArray[i] && (i > (int)nOffsetLocation.Value + 3 || i < (int)nOffsetLocation.Value))                          mask += "x";                      else                      {                          newBytesArray[i] = "00";                          oldBytesArray[i] = "00";                          mask += "?";                      }                  }                    // Pattern to String                  string pattern = "";                  for (int i = 0; i <= newBytesArray.Length - 1 && i <= 15 ; i++ )                  {                      if (pattern != "")                          pattern += " ";                        pattern += newBytesArray[i].ToUpper();                  }                  pattern = pattern.Replace("-"' " ");                    // Show Result                  tbPattern.Text = "";                  tbPattern.Text += "<Pattern>" + Environment.NewLine;                  tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                  tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                  tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                  tbPattern.Text += "     <offsetLocation>" + nOffsetLocation.Value.ToString() + "</offsetLocation>" + Environment.NewLine;                  tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                  tbPattern.Text += "</Pattern>";              }              catch              {                  MessageBox.Show("Error' please verif all info.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePatternByBytes_Click,The following statement contains a magic number: try              {                  if (tbNewBytes.Text.Replace(" "' "").Length <= 0 || tbOldBytes.Text.Replace(" "' "").Length <= 0)                  {                      MessageBox.Show("Please enter all information.");                      return;                  }                    string[] newBytesArray = tbNewBytes.Text.Replace("  "' "").Split(Convert.ToChar(" "));                  string[] oldBytesArray = tbOldBytes.Text.Replace("  "' "").Split(Convert.ToChar(" "));                    if (newBytesArray.Length != oldBytesArray.Length)                  {                      MessageBox.Show("The size of New Byte is different of the size of Old Byte.");                      return;                  }                    // Make mask                  string mask = "";                  for (int i = 0; i <= newBytesArray.Length - 1 && i <= 15 ; i++)                  {                      if (newBytesArray[i] == oldBytesArray[i] && (i > (int)nOffsetLocation.Value + 3 || i < (int)nOffsetLocation.Value))                          mask += "x";                      else                      {                          newBytesArray[i] = "00";                          oldBytesArray[i] = "00";                          mask += "?";                      }                  }                    // Pattern to String                  string pattern = "";                  for (int i = 0; i <= newBytesArray.Length - 1 && i <= 15 ; i++ )                  {                      if (pattern != "")                          pattern += " ";                        pattern += newBytesArray[i].ToUpper();                  }                  pattern = pattern.Replace("-"' " ");                    // Show Result                  tbPattern.Text = "";                  tbPattern.Text += "<Pattern>" + Environment.NewLine;                  tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                  tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                  tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                  tbPattern.Text += "     <offsetLocation>" + nOffsetLocation.Value.ToString() + "</offsetLocation>" + Environment.NewLine;                  tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                  tbPattern.Text += "</Pattern>";              }              catch              {                  MessageBox.Show("Error' please verif all info.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,bCreatePatternByBytes_Click,The following statement contains a magic number: try              {                  if (tbNewBytes.Text.Replace(" "' "").Length <= 0 || tbOldBytes.Text.Replace(" "' "").Length <= 0)                  {                      MessageBox.Show("Please enter all information.");                      return;                  }                    string[] newBytesArray = tbNewBytes.Text.Replace("  "' "").Split(Convert.ToChar(" "));                  string[] oldBytesArray = tbOldBytes.Text.Replace("  "' "").Split(Convert.ToChar(" "));                    if (newBytesArray.Length != oldBytesArray.Length)                  {                      MessageBox.Show("The size of New Byte is different of the size of Old Byte.");                      return;                  }                    // Make mask                  string mask = "";                  for (int i = 0; i <= newBytesArray.Length - 1 && i <= 15 ; i++)                  {                      if (newBytesArray[i] == oldBytesArray[i] && (i > (int)nOffsetLocation.Value + 3 || i < (int)nOffsetLocation.Value))                          mask += "x";                      else                      {                          newBytesArray[i] = "00";                          oldBytesArray[i] = "00";                          mask += "?";                      }                  }                    // Pattern to String                  string pattern = "";                  for (int i = 0; i <= newBytesArray.Length - 1 && i <= 15 ; i++ )                  {                      if (pattern != "")                          pattern += " ";                        pattern += newBytesArray[i].ToUpper();                  }                  pattern = pattern.Replace("-"' " ");                    // Show Result                  tbPattern.Text = "";                  tbPattern.Text += "<Pattern>" + Environment.NewLine;                  tbPattern.Text += "     <offsetName>" + tbOffsetName.Text + "</offsetName>" + Environment.NewLine;                  tbPattern.Text += "     <pattern>" + pattern + "</pattern>" + Environment.NewLine;                  tbPattern.Text += "     <mask>" + mask + "</mask>" + Environment.NewLine;                  tbPattern.Text += "     <offsetLocation>" + nOffsetLocation.Value.ToString() + "</offsetLocation>" + Environment.NewLine;                  tbPattern.Text += "     <type>" + cbValueType.Text + "</type>" + Environment.NewLine;                  tbPattern.Text += "</Pattern>";              }              catch              {                  MessageBox.Show("Error' please verif all info.");              }
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbProcess1.Location = new System.Drawing.Point(76' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbProcess1.Location = new System.Drawing.Point(76' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbProcess1.Size = new System.Drawing.Size(123' 21);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbProcess1.Size = new System.Drawing.Size(123' 21);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 16);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 16);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(57' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(57' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(205' 16);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(205' 16);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(88' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(88' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffset1.Location = new System.Drawing.Point(299' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffset1.Location = new System.Drawing.Point(299' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffset1.Size = new System.Drawing.Size(90' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffset1.Size = new System.Drawing.Size(90' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffset1.TabIndex = 3;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffset2.Location = new System.Drawing.Point(299' 41);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffset2.Location = new System.Drawing.Point(299' 41);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffset2.Size = new System.Drawing.Size(90' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffset2.Size = new System.Drawing.Size(90' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffset2.TabIndex = 7;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(205' 44);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(205' 44);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(88' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(88' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 6;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(13' 44);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(13' 44);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(57' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(57' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 5;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbProcess2.Location = new System.Drawing.Point(76' 41);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbProcess2.Location = new System.Drawing.Point(76' 41);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbProcess2.Size = new System.Drawing.Size(123' 21);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbProcess2.Size = new System.Drawing.Size(123' 21);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbProcess2.TabIndex = 4;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePattern.Location = new System.Drawing.Point(220' 68);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePattern.Location = new System.Drawing.Point(220' 68);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePattern.Size = new System.Drawing.Size(169' 23);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePattern.Size = new System.Drawing.Size(169' 23);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePattern.TabIndex = 8;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbPattern.Location = new System.Drawing.Point(12' 237);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbPattern.Location = new System.Drawing.Point(12' 237);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbPattern.Size = new System.Drawing.Size(376' 170);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbPattern.Size = new System.Drawing.Size(376' 170);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbPattern.TabIndex = 9;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(1' 25);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(398' 100);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(398' 100);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 10;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(1' 131);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(398' 100);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(398' 100);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.TabIndex = 11;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(10' 79);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label10.Location = new System.Drawing.Point(10' 79);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(83' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label10.Size = new System.Drawing.Size(83' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label10.TabIndex = 15;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePatternByBytes.Location = new System.Drawing.Point(195' 65);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePatternByBytes.Location = new System.Drawing.Point(195' 65);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePatternByBytes.Size = new System.Drawing.Size(194' 23);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePatternByBytes.Size = new System.Drawing.Size(194' 23);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePatternByBytes.TabIndex = 9;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(13' 67);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(13' 67);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(82' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(82' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 14;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.nOffsetLocation.Location = new System.Drawing.Point(99' 65);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.nOffsetLocation.Location = new System.Drawing.Point(99' 65);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.nOffsetLocation.Maximum = new decimal(new int[] {              1000'              0'              0'              0});
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.nOffsetLocation.Minimum = new decimal(new int[] {              1000'              0'              0'              -2147483648});
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.nOffsetLocation.Minimum = new decimal(new int[] {              1000'              0'              0'              -2147483648});
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.nOffsetLocation.Size = new System.Drawing.Size(60' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.nOffsetLocation.Size = new System.Drawing.Size(60' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.nOffsetLocation.TabIndex = 13;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(13' 42);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(13' 42);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(55' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(55' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 11;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOldBytes.Location = new System.Drawing.Point(76' 39);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOldBytes.Location = new System.Drawing.Point(76' 39);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOldBytes.Size = new System.Drawing.Size(313' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOldBytes.Size = new System.Drawing.Size(313' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOldBytes.TabIndex = 12;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(13' 16);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label7.Location = new System.Drawing.Point(13' 16);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(61' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label7.Size = new System.Drawing.Size(61' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label7.TabIndex = 9;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbNewBytes.Location = new System.Drawing.Point(76' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbNewBytes.Location = new System.Drawing.Point(76' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbNewBytes.Size = new System.Drawing.Size(313' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbNewBytes.Size = new System.Drawing.Size(313' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbNewBytes.TabIndex = 10;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(-2' 6);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(-2' 6);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(69' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(69' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 9;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffsetName.Location = new System.Drawing.Point(77' 3);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffsetName.Location = new System.Drawing.Point(77' 3);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffsetName.Size = new System.Drawing.Size(123' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffsetName.Size = new System.Drawing.Size(123' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.tbOffsetName.TabIndex = 10;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(206' 9);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(206' 9);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(64' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(64' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 12;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbValueType.Location = new System.Drawing.Point(276' 6);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbValueType.Location = new System.Drawing.Point(276' 6);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbValueType.Size = new System.Drawing.Size(116' 21);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbValueType.Size = new System.Drawing.Size(116' 21);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.cbValueType.TabIndex = 13;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.baseModuleNameTB.Location = new System.Drawing.Point(109' 70);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.baseModuleNameTB.Location = new System.Drawing.Point(109' 70);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.baseModuleNameTB.Size = new System.Drawing.Size(105' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.baseModuleNameTB.Size = new System.Drawing.Size(105' 20);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.baseModuleNameTB.TabIndex = 10;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(5' 73);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label11.Location = new System.Drawing.Point(5' 73);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(103' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label11.Size = new System.Drawing.Size(103' 13);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.label11.TabIndex = 9;
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(400' 419);
Magic Number,Offset_Finder,Create_Pattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\Create_Pattern.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(400' 419);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbListPatternList.Location = new System.Drawing.Point(12' 12);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbListPatternList.Location = new System.Drawing.Point(12' 12);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbListPatternList.Size = new System.Drawing.Size(398' 21);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbListPatternList.Size = new System.Drawing.Size(398' 21);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbResult.Location = new System.Drawing.Point(12' 39);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbResult.Location = new System.Drawing.Point(12' 39);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbResult.Size = new System.Drawing.Size(501' 331);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbResult.Size = new System.Drawing.Size(501' 331);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tbResult.TabIndex = 2;
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForCsharp.Location = new System.Drawing.Point(12' 373);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForCsharp.Location = new System.Drawing.Point(12' 373);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForCsharp.Size = new System.Drawing.Size(107' 23);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForCsharp.Size = new System.Drawing.Size(107' 23);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForCsharp.TabIndex = 3;
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForAutoIT.Location = new System.Drawing.Point(125' 373);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForAutoIT.Location = new System.Drawing.Point(125' 373);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForAutoIT.Size = new System.Drawing.Size(113' 23);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForAutoIT.Size = new System.Drawing.Size(113' 23);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForAutoIT.TabIndex = 4;
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bAllInfo.Location = new System.Drawing.Point(363' 373);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bAllInfo.Location = new System.Drawing.Point(363' 373);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bAllInfo.Size = new System.Drawing.Size(150' 23);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bAllInfo.Size = new System.Drawing.Size(150' 23);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bAllInfo.TabIndex = 5;
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForIni.Location = new System.Drawing.Point(244' 373);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForIni.Location = new System.Drawing.Point(244' 373);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForIni.Size = new System.Drawing.Size(113' 23);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForIni.Size = new System.Drawing.Size(113' 23);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bForIni.TabIndex = 6;
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePattern.Location = new System.Drawing.Point(416' 12);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePattern.Location = new System.Drawing.Point(416' 12);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePattern.Size = new System.Drawing.Size(97' 21);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePattern.Size = new System.Drawing.Size(97' 21);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bCreatePattern.TabIndex = 7;
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(525' 397);
Magic Number,Offset_Finder,MainForm,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(525' 397);
Magic Number,Offset_Finder.FindPattern,FindPattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\FindPattern\FindPattern.cs,FindPatternList,The following statement contains a magic number: if (memread.OpenProcessAndThread(SProcess.GetProcessFromProcessName(patternList.processName)))              {                  try                  {                      // Dump module                      ProcessModuleCollection modules = Process.GetProcessById(memread.ProcessId).Modules;                      foreach (ProcessModule o in modules)                      {                          Structs.ModuleList m = new Structs.ModuleList();                          m.Name = o.ModuleName;                          m.baseAddressDec = (int)o.BaseAddress;                          m.baseAddressHex = (o.BaseAddress).ToString("X");                          patternList.Modules.Add(m);                            // Check module base if exist.                          if (patternList.baseModuleName != "")                              if (patternList.baseModuleName.ToLower() == o.ModuleName.ToLower())                                  baseModule = (uint)o.BaseAddress;                      }                  }                  catch { }                    foreach (Structs.Pattern p in patternList.Patterns)                  {                      try                      {                          uint dwCodeLoc = memread.FindPattern(p.pattern' p.mask);                          uint offset = memread.ReadUInt((uint)((int)dwCodeLoc + p.offsetLocation));                          if (offset > 0)                          {                              offset = offset - baseModule;                              dwCodeLoc = dwCodeLoc - baseModule;                          }                              if (offset > 0)                          {                              // Dump offset                              p.offset = offset.ToString("X");                              p.offsetDec = offset;                              p.offsetUsedAtDec = (uint)((int)dwCodeLoc + p.offsetLocation);                              p.offsetUsedAt = ((int)dwCodeLoc + p.offsetLocation).ToString("X");                              try                              {                                  switch (p.type)                                  {                                      case "int64":                                          p.value = Convert.ToString(memread.ReadUInt64(p.offsetDec));                                          break;                                      case "int":                                          p.value = Convert.ToString(memread.ReadInt(p.offsetDec));                                          break;                                      case "float":                                          p.value = Convert.ToString(memread.ReadFloat(p.offsetDec));                                          break;                                      case "string":                                          p.value = Convert.ToString(memread.ReadASCIIString(p.offsetDec' 30));                                          break;                                  }                              }                              catch { p.value = "No Found"; }                          }                          else                              p.offset = "No Found";                        }                      catch                      { p.offset = "No Found"; }                      newPatternList.Patterns.Add(p);                  }                  memread.Close();              }              else              {                  MessageBox.Show("Process no found.");              }
Missing Default,Offset_Finder.FindPattern,FindPattern,C:\repos\ProjectSkyfire_SkyFire-Community-Tools\unsupported\Misc Dev Tools\Offset_Finder_Src\Offset Finder\FindPattern\FindPattern.cs,FindPatternList,The following switch statement is missing a default case: switch (p.type)                                  {                                      case "int64":                                          p.value = Convert.ToString(memread.ReadUInt64(p.offsetDec));                                          break;                                      case "int":                                          p.value = Convert.ToString(memread.ReadInt(p.offsetDec));                                          break;                                      case "float":                                          p.value = Convert.ToString(memread.ReadFloat(p.offsetDec));                                          break;                                      case "string":                                          p.value = Convert.ToString(memread.ReadASCIIString(p.offsetDec' 30));                                          break;                                  }
