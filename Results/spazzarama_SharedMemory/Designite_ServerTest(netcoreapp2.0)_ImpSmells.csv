Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The length of the statement  "                            Console.WriteLine("Write: {0}' Wait: {1}' {2}MB/s"' ((double)totalBytes / 1048576.0).ToString("F0")' skipCount' (((totalBytes / 1048576.0) / sw.ElapsedMilliseconds) * 1000).ToString("F2")); " is 189.
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: int bufferSize = 1048576;
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: int count = 50;
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: byte[][] dataList = new byte[256][];
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: data[i] = (byte)((i + j) % 255);
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: j < 256
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: Action writer = () =>                  {                      int myThreadIndex = Interlocked.Increment(ref threadCount);                      int linesOut = 0;                      bool finalLine = false;                      for (; ; )                      {                          readData = dataList[iterations % 255];                            int amount = theServer.Write(readData' 100);                          //int amount = theServer.Write<byte>(readData' 100);                            if (amount == 0)                          {                              Interlocked.Increment(ref skipCount);                          }                          else                          {                              Interlocked.Add(ref totalBytes' amount);                              Interlocked.Increment(ref iterations);                          }                            if (threadCount == 1 && Interlocked.Read(ref iterations) > 500)                              finalLine = true;                            if (myThreadIndex < 3 && (finalLine || sw.ElapsedTicks - lastTick > 1000000))                          {                              lastTick = sw.ElapsedTicks;                              Console.WriteLine("Write: {0}' Wait: {1}' {2}MB/s"' ((double)totalBytes / 1048576.0).ToString("F0")' skipCount' (((totalBytes / 1048576.0) / sw.ElapsedMilliseconds) * 1000).ToString("F2"));                              linesOut++;                              if (finalLine || (myThreadIndex > 1 && linesOut > 10))                              {                                  Console.WriteLine("Completed.");                                  break;                              }                          }                      }                  };
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: Action writer = () =>                  {                      int myThreadIndex = Interlocked.Increment(ref threadCount);                      int linesOut = 0;                      bool finalLine = false;                      for (; ; )                      {                          readData = dataList[iterations % 255];                            int amount = theServer.Write(readData' 100);                          //int amount = theServer.Write<byte>(readData' 100);                            if (amount == 0)                          {                              Interlocked.Increment(ref skipCount);                          }                          else                          {                              Interlocked.Add(ref totalBytes' amount);                              Interlocked.Increment(ref iterations);                          }                            if (threadCount == 1 && Interlocked.Read(ref iterations) > 500)                              finalLine = true;                            if (myThreadIndex < 3 && (finalLine || sw.ElapsedTicks - lastTick > 1000000))                          {                              lastTick = sw.ElapsedTicks;                              Console.WriteLine("Write: {0}' Wait: {1}' {2}MB/s"' ((double)totalBytes / 1048576.0).ToString("F0")' skipCount' (((totalBytes / 1048576.0) / sw.ElapsedMilliseconds) * 1000).ToString("F2"));                              linesOut++;                              if (finalLine || (myThreadIndex > 1 && linesOut > 10))                              {                                  Console.WriteLine("Completed.");                                  break;                              }                          }                      }                  };
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: Action writer = () =>                  {                      int myThreadIndex = Interlocked.Increment(ref threadCount);                      int linesOut = 0;                      bool finalLine = false;                      for (; ; )                      {                          readData = dataList[iterations % 255];                            int amount = theServer.Write(readData' 100);                          //int amount = theServer.Write<byte>(readData' 100);                            if (amount == 0)                          {                              Interlocked.Increment(ref skipCount);                          }                          else                          {                              Interlocked.Add(ref totalBytes' amount);                              Interlocked.Increment(ref iterations);                          }                            if (threadCount == 1 && Interlocked.Read(ref iterations) > 500)                              finalLine = true;                            if (myThreadIndex < 3 && (finalLine || sw.ElapsedTicks - lastTick > 1000000))                          {                              lastTick = sw.ElapsedTicks;                              Console.WriteLine("Write: {0}' Wait: {1}' {2}MB/s"' ((double)totalBytes / 1048576.0).ToString("F0")' skipCount' (((totalBytes / 1048576.0) / sw.ElapsedMilliseconds) * 1000).ToString("F2"));                              linesOut++;                              if (finalLine || (myThreadIndex > 1 && linesOut > 10))                              {                                  Console.WriteLine("Completed.");                                  break;                              }                          }                      }                  };
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: Action writer = () =>                  {                      int myThreadIndex = Interlocked.Increment(ref threadCount);                      int linesOut = 0;                      bool finalLine = false;                      for (; ; )                      {                          readData = dataList[iterations % 255];                            int amount = theServer.Write(readData' 100);                          //int amount = theServer.Write<byte>(readData' 100);                            if (amount == 0)                          {                              Interlocked.Increment(ref skipCount);                          }                          else                          {                              Interlocked.Add(ref totalBytes' amount);                              Interlocked.Increment(ref iterations);                          }                            if (threadCount == 1 && Interlocked.Read(ref iterations) > 500)                              finalLine = true;                            if (myThreadIndex < 3 && (finalLine || sw.ElapsedTicks - lastTick > 1000000))                          {                              lastTick = sw.ElapsedTicks;                              Console.WriteLine("Write: {0}' Wait: {1}' {2}MB/s"' ((double)totalBytes / 1048576.0).ToString("F0")' skipCount' (((totalBytes / 1048576.0) / sw.ElapsedMilliseconds) * 1000).ToString("F2"));                              linesOut++;                              if (finalLine || (myThreadIndex > 1 && linesOut > 10))                              {                                  Console.WriteLine("Completed.");                                  break;                              }                          }                      }                  };
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: Action writer = () =>                  {                      int myThreadIndex = Interlocked.Increment(ref threadCount);                      int linesOut = 0;                      bool finalLine = false;                      for (; ; )                      {                          readData = dataList[iterations % 255];                            int amount = theServer.Write(readData' 100);                          //int amount = theServer.Write<byte>(readData' 100);                            if (amount == 0)                          {                              Interlocked.Increment(ref skipCount);                          }                          else                          {                              Interlocked.Add(ref totalBytes' amount);                              Interlocked.Increment(ref iterations);                          }                            if (threadCount == 1 && Interlocked.Read(ref iterations) > 500)                              finalLine = true;                            if (myThreadIndex < 3 && (finalLine || sw.ElapsedTicks - lastTick > 1000000))                          {                              lastTick = sw.ElapsedTicks;                              Console.WriteLine("Write: {0}' Wait: {1}' {2}MB/s"' ((double)totalBytes / 1048576.0).ToString("F0")' skipCount' (((totalBytes / 1048576.0) / sw.ElapsedMilliseconds) * 1000).ToString("F2"));                              linesOut++;                              if (finalLine || (myThreadIndex > 1 && linesOut > 10))                              {                                  Console.WriteLine("Completed.");                                  break;                              }                          }                      }                  };
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: Action writer = () =>                  {                      int myThreadIndex = Interlocked.Increment(ref threadCount);                      int linesOut = 0;                      bool finalLine = false;                      for (; ; )                      {                          readData = dataList[iterations % 255];                            int amount = theServer.Write(readData' 100);                          //int amount = theServer.Write<byte>(readData' 100);                            if (amount == 0)                          {                              Interlocked.Increment(ref skipCount);                          }                          else                          {                              Interlocked.Add(ref totalBytes' amount);                              Interlocked.Increment(ref iterations);                          }                            if (threadCount == 1 && Interlocked.Read(ref iterations) > 500)                              finalLine = true;                            if (myThreadIndex < 3 && (finalLine || sw.ElapsedTicks - lastTick > 1000000))                          {                              lastTick = sw.ElapsedTicks;                              Console.WriteLine("Write: {0}' Wait: {1}' {2}MB/s"' ((double)totalBytes / 1048576.0).ToString("F0")' skipCount' (((totalBytes / 1048576.0) / sw.ElapsedMilliseconds) * 1000).ToString("F2"));                              linesOut++;                              if (finalLine || (myThreadIndex > 1 && linesOut > 10))                              {                                  Console.WriteLine("Completed.");                                  break;                              }                          }                      }                  };
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: Action writer = () =>                  {                      int myThreadIndex = Interlocked.Increment(ref threadCount);                      int linesOut = 0;                      bool finalLine = false;                      for (; ; )                      {                          readData = dataList[iterations % 255];                            int amount = theServer.Write(readData' 100);                          //int amount = theServer.Write<byte>(readData' 100);                            if (amount == 0)                          {                              Interlocked.Increment(ref skipCount);                          }                          else                          {                              Interlocked.Add(ref totalBytes' amount);                              Interlocked.Increment(ref iterations);                          }                            if (threadCount == 1 && Interlocked.Read(ref iterations) > 500)                              finalLine = true;                            if (myThreadIndex < 3 && (finalLine || sw.ElapsedTicks - lastTick > 1000000))                          {                              lastTick = sw.ElapsedTicks;                              Console.WriteLine("Write: {0}' Wait: {1}' {2}MB/s"' ((double)totalBytes / 1048576.0).ToString("F0")' skipCount' (((totalBytes / 1048576.0) / sw.ElapsedMilliseconds) * 1000).ToString("F2"));                              linesOut++;                              if (finalLine || (myThreadIndex > 1 && linesOut > 10))                              {                                  Console.WriteLine("Completed.");                                  break;                              }                          }                      }                  };
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: Action writer = () =>                  {                      int myThreadIndex = Interlocked.Increment(ref threadCount);                      int linesOut = 0;                      bool finalLine = false;                      for (; ; )                      {                          readData = dataList[iterations % 255];                            int amount = theServer.Write(readData' 100);                          //int amount = theServer.Write<byte>(readData' 100);                            if (amount == 0)                          {                              Interlocked.Increment(ref skipCount);                          }                          else                          {                              Interlocked.Add(ref totalBytes' amount);                              Interlocked.Increment(ref iterations);                          }                            if (threadCount == 1 && Interlocked.Read(ref iterations) > 500)                              finalLine = true;                            if (myThreadIndex < 3 && (finalLine || sw.ElapsedTicks - lastTick > 1000000))                          {                              lastTick = sw.ElapsedTicks;                              Console.WriteLine("Write: {0}' Wait: {1}' {2}MB/s"' ((double)totalBytes / 1048576.0).ToString("F0")' skipCount' (((totalBytes / 1048576.0) / sw.ElapsedMilliseconds) * 1000).ToString("F2"));                              linesOut++;                              if (finalLine || (myThreadIndex > 1 && linesOut > 10))                              {                                  Console.WriteLine("Completed.");                                  break;                              }                          }                      }                  };
Magic Number,ServerTest,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\ServerTest\Program.cs,Main,The following statement contains a magic number: Action writer = () =>                  {                      int myThreadIndex = Interlocked.Increment(ref threadCount);                      int linesOut = 0;                      bool finalLine = false;                      for (; ; )                      {                          readData = dataList[iterations % 255];                            int amount = theServer.Write(readData' 100);                          //int amount = theServer.Write<byte>(readData' 100);                            if (amount == 0)                          {                              Interlocked.Increment(ref skipCount);                          }                          else                          {                              Interlocked.Add(ref totalBytes' amount);                              Interlocked.Increment(ref iterations);                          }                            if (threadCount == 1 && Interlocked.Read(ref iterations) > 500)                              finalLine = true;                            if (myThreadIndex < 3 && (finalLine || sw.ElapsedTicks - lastTick > 1000000))                          {                              lastTick = sw.ElapsedTicks;                              Console.WriteLine("Write: {0}' Wait: {1}' {2}MB/s"' ((double)totalBytes / 1048576.0).ToString("F0")' skipCount' (((totalBytes / 1048576.0) / sw.ElapsedMilliseconds) * 1000).ToString("F2"));                              linesOut++;                              if (finalLine || (myThreadIndex > 1 && linesOut > 10))                              {                                  Console.WriteLine("Completed.");                                  break;                              }                          }                      }                  };
