Implementation smell,Namespace,Class,File,Method,Description
Long Method,CommandLine,Parser,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,LexFileArguments,The method has 105 lines of code.
Long Method,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The method has 127 lines of code.
Complex Method,CommandLine,Parser,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,Parser,Cyclomatic complexity of the method is 10
Complex Method,CommandLine,Parser,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,ParseArgumentList,Cyclomatic complexity of the method is 10
Complex Method,CommandLine,Parser,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,GetUsageString,Cyclomatic complexity of the method is 10
Complex Method,CommandLine,Argument,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,ParseValue,Cyclomatic complexity of the method is 11
Long Identifier,CommandLine,Parser,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,GetUsageString,The length of the parameter minimumNumberOfCharsForHelpText is 31.
Long Statement,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The length of the statement  "            Console.WriteLine("Node buffer size: {0}' count: {1}' writers: {2}' readers {3}' elements: {4}"' size' count' serverCount' clientCount' elements); " is 146.
Long Statement,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The length of the statement  "                        Console.WriteLine("Write: {0}' Read: {1}' Diff: {5}' Wait(cli/svr): {3}/{2}' {4}MB/s"' writeCount' readCount' serverWaitCount' clientWaitCount' (int)((((bytesWritten + bytesRead) / 1048576.0) / sw.ElapsedMilliseconds) * 1000)' writeCount - readCount); " is 251.
Complex Conditional,CommandLine,Argument,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,ParseValue,The conditional expression  "(stringData != null || type == typeof(bool)) && (stringData == null || stringData.Length > 0)"  is complex.
Complex Conditional,CommandLine,Argument,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,AppendValue,The conditional expression  "value is string || value is int || value is uint || value.GetType().IsEnum"  is complex.
Empty Catch Block,CommandLine,Argument,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,ParseValue,The method has an empty catch block.
Magic Number,CommandLine,Parser,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,ArgumentsUsage,The following statement contains a magic number: screenWidth = 80;
Magic Number,CommandLine,Parser,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,ParseArgumentList,The following statement contains a magic number: switch (argument[0])                          {                              case '-':                              case '/':                                  int endIndex = argument.IndexOfAny(new char[] {':'' '+'' '-'}' 1);                                  string option = argument.Substring(1' endIndex == -1 ? argument.Length - 1 : endIndex - 1);                                  string optionArgument;                                  if (option.Length + 1 == argument.Length)                                  {                                      optionArgument = null;                                  }                                  else if (argument.Length > 1 + option.Length && argument[1 + option.Length] == ':')                                  {                                      optionArgument = argument.Substring(option.Length + 2);                                  }                                  else                                  {                                      optionArgument = argument.Substring(option.Length + 1);                                  }                                                                    Argument arg = (Argument) this.argumentMap[option];                                  if (arg == null)                                  {                                      ReportUnrecognizedArgument(argument);                                      hadError = true;                                  }                                  else                                  {                                      hadError |= !arg.SetValue(optionArgument' destination);                                  }                                  break;                              case '@':                                  string[] nestedArguments;                                  hadError |= LexFileArguments(argument.Substring(1)' out nestedArguments);                                  hadError |= ParseArgumentList(nestedArguments' destination);                                  break;                              default:                                  if (this.defaultArgument != null)                                  {                                      hadError |= !this.defaultArgument.SetValue(argument' destination);                                  }                                  else                                  {                                      ReportUnrecognizedArgument(argument);                                      hadError = true;                                  }                                  break;                          }
Magic Number,CommandLine,Parser,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,GetUsageString,The following statement contains a magic number: const int minimumNumberOfCharsForHelpText = 10;
Magic Number,CommandLine,Parser,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\CommandLineParser.cs,GetUsageString,The following statement contains a magic number: const int minimumHelpTextColumn = 5;
Magic Number,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The following statement contains a magic number: int elements = 100000;
Magic Number,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The following statement contains a magic number: int bufferSize = 1048576;
Magic Number,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The following statement contains a magic number: int count = 50;
Magic Number,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The following statement contains a magic number: int dataListCount = 256;
Magic Number,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The following statement contains a magic number: Action clientAction = () =>              {                  byte[] testData = new byte[size];                    var client = new SharedMemory.CircularBuffer(name);                    Stopwatch clientTime = new Stopwatch();                  clientTime.Start();                  long startTick = 0;                  long stopTick = 0;                    for (; ; )                  {                      startTick = clientTime.ElapsedTicks;                      int amount = client.Read(testData' 100);                      bytesRead += amount;                      if (amount == 0)                          Interlocked.Increment(ref clientWaitCount);                      else                          Interlocked.Increment(ref readCount);                      stopTick = clientTime.ElapsedTicks;                        if (writeCount > elements && writeCount - readCount == 0)                          break;                  }              };
Magic Number,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The following statement contains a magic number: Action serverWrite = () =>              {                  int serverIndex = Interlocked.Increment(ref index);                    var writer = (serverIndex == 1 ? server : new SharedMemory.CircularBuffer(name));                  bool done = false;                  TimeSpan doneTime = TimeSpan.MinValue;                  for (; ; )                  {                      if (writeCount <= elements)                      {                          int amount = writer.Write(dataList[random.Next(0' dataListCount)]' 100);                          bytesWritten += amount;                          if (amount == 0)                              Interlocked.Increment(ref serverWaitCount);                          else                              Interlocked.Increment(ref writeCount);                      }                      else                      {                          if (!done && serverIndex == 1)                          {                              doneTime = sw.Elapsed;                              done = true;                          }                      }                        if (serverIndex == 1 && sw.ElapsedTicks - lastTick > 1000000)                      {                          Console.WriteLine("Write: {0}' Read: {1}' Diff: {5}' Wait(cli/svr): {3}/{2}' {4}MB/s"' writeCount' readCount' serverWaitCount' clientWaitCount' (int)((((bytesWritten + bytesRead) / 1048576.0) / sw.ElapsedMilliseconds) * 1000)' writeCount - readCount);                          lastTick = sw.ElapsedTicks;                          if (writeCount > elements && writeCount - readCount == 0)                          {                              Console.WriteLine("Total Time: " + doneTime);                              wait = false;                              break;                          }                      }                  }              };
Magic Number,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The following statement contains a magic number: Action serverWrite = () =>              {                  int serverIndex = Interlocked.Increment(ref index);                    var writer = (serverIndex == 1 ? server : new SharedMemory.CircularBuffer(name));                  bool done = false;                  TimeSpan doneTime = TimeSpan.MinValue;                  for (; ; )                  {                      if (writeCount <= elements)                      {                          int amount = writer.Write(dataList[random.Next(0' dataListCount)]' 100);                          bytesWritten += amount;                          if (amount == 0)                              Interlocked.Increment(ref serverWaitCount);                          else                              Interlocked.Increment(ref writeCount);                      }                      else                      {                          if (!done && serverIndex == 1)                          {                              doneTime = sw.Elapsed;                              done = true;                          }                      }                        if (serverIndex == 1 && sw.ElapsedTicks - lastTick > 1000000)                      {                          Console.WriteLine("Write: {0}' Read: {1}' Diff: {5}' Wait(cli/svr): {3}/{2}' {4}MB/s"' writeCount' readCount' serverWaitCount' clientWaitCount' (int)((((bytesWritten + bytesRead) / 1048576.0) / sw.ElapsedMilliseconds) * 1000)' writeCount - readCount);                          lastTick = sw.ElapsedTicks;                          if (writeCount > elements && writeCount - readCount == 0)                          {                              Console.WriteLine("Total Time: " + doneTime);                              wait = false;                              break;                          }                      }                  }              };
Magic Number,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The following statement contains a magic number: Action serverWrite = () =>              {                  int serverIndex = Interlocked.Increment(ref index);                    var writer = (serverIndex == 1 ? server : new SharedMemory.CircularBuffer(name));                  bool done = false;                  TimeSpan doneTime = TimeSpan.MinValue;                  for (; ; )                  {                      if (writeCount <= elements)                      {                          int amount = writer.Write(dataList[random.Next(0' dataListCount)]' 100);                          bytesWritten += amount;                          if (amount == 0)                              Interlocked.Increment(ref serverWaitCount);                          else                              Interlocked.Increment(ref writeCount);                      }                      else                      {                          if (!done && serverIndex == 1)                          {                              doneTime = sw.Elapsed;                              done = true;                          }                      }                        if (serverIndex == 1 && sw.ElapsedTicks - lastTick > 1000000)                      {                          Console.WriteLine("Write: {0}' Read: {1}' Diff: {5}' Wait(cli/svr): {3}/{2}' {4}MB/s"' writeCount' readCount' serverWaitCount' clientWaitCount' (int)((((bytesWritten + bytesRead) / 1048576.0) / sw.ElapsedMilliseconds) * 1000)' writeCount - readCount);                          lastTick = sw.ElapsedTicks;                          if (writeCount > elements && writeCount - readCount == 0)                          {                              Console.WriteLine("Total Time: " + doneTime);                              wait = false;                              break;                          }                      }                  }              };
Magic Number,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The following statement contains a magic number: Action serverWrite = () =>              {                  int serverIndex = Interlocked.Increment(ref index);                    var writer = (serverIndex == 1 ? server : new SharedMemory.CircularBuffer(name));                  bool done = false;                  TimeSpan doneTime = TimeSpan.MinValue;                  for (; ; )                  {                      if (writeCount <= elements)                      {                          int amount = writer.Write(dataList[random.Next(0' dataListCount)]' 100);                          bytesWritten += amount;                          if (amount == 0)                              Interlocked.Increment(ref serverWaitCount);                          else                              Interlocked.Increment(ref writeCount);                      }                      else                      {                          if (!done && serverIndex == 1)                          {                              doneTime = sw.Elapsed;                              done = true;                          }                      }                        if (serverIndex == 1 && sw.ElapsedTicks - lastTick > 1000000)                      {                          Console.WriteLine("Write: {0}' Read: {1}' Diff: {5}' Wait(cli/svr): {3}/{2}' {4}MB/s"' writeCount' readCount' serverWaitCount' clientWaitCount' (int)((((bytesWritten + bytesRead) / 1048576.0) / sw.ElapsedMilliseconds) * 1000)' writeCount - readCount);                          lastTick = sw.ElapsedTicks;                          if (writeCount > elements && writeCount - readCount == 0)                          {                              Console.WriteLine("Total Time: " + doneTime);                              wait = false;                              break;                          }                      }                  }              };
Magic Number,SingleProcess,Program,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\Examples\SingleProcess\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(100);
