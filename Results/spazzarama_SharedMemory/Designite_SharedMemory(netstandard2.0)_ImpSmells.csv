Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SharedMemory,BufferWithLocks,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\BufferWithLocks.cs,WriteWait,The length of the statement  "                throw new TimeoutException("The write operation timed out waiting for the write lock WaitEvent. Check your usage of AcquireWriteLock/ReleaseWriteLock and AcquireReadLock/ReleaseReadLock."); " is 189.
Long Statement,SharedMemory,BufferWithLocks,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\BufferWithLocks.cs,ReadWait,The length of the statement  "                throw new TimeoutException("The read operation timed out waiting for the read lock WaitEvent. Check your usage of AcquireWriteLock/ReleaseWriteLock and AcquireReadLock/ReleaseReadLock."); " is 187.
Long Statement,SharedMemory,CircularBuffer,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\CircularBuffer.cs,Write,The length of the statement  "                throw new ArgumentOutOfRangeException("T"' "The size of structure " + typeof(T).Name + " is larger than NodeBufferSize"); " is 121.
Long Statement,SharedMemory,CircularBuffer,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\CircularBuffer.cs,Read,The length of the statement  "                throw new ArgumentOutOfRangeException("T"' "The size of structure " + typeof(T).Name + " is larger than NodeBufferSize"); " is 121.
Long Statement,SharedMemory,FastStructure<T>,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\FastStructure.cs,CheckTypeCompatibility,The length of the statement  "                    throw new ArgumentException(String.Format("Non-value types are not supported: field {0} is of type {1} in structure {2}"' info.Name' info.FieldType.Name' info.DeclaringType.Name)); " is 180.
Long Statement,SharedMemory,FastStructure<T>,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\FastStructure.cs,CheckTypeCompatibility,The length of the statement  "                //        throw new ArgumentException(String.Format("UnmanagedType.ByValArray is not supported on field {0} in type [{1}]."' info.Name' typeof(T).FullName)); " is 157.
Long Statement,SharedMemory,SharedBuffer,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\SharedBuffer.cs,Open,The length of the statement  "                    using (var headerView = Mmf.CreateViewAccessor(0' HeaderOffset + Marshal.SizeOf(typeof(SharedHeader))' MemoryMappedFileAccess.Read)) " is 132.
Magic Number,SharedMemory,CircularBuffer,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\CircularBuffer.cs,CircularBuffer,The following statement contains a magic number: ownsSharedMemory && nodeCount < 2
Magic Number,SharedMemory,CircularBuffer,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\CircularBuffer.cs,InitialiseLinkedListNodes,The following statement contains a magic number: nodes[N].Prev = NodeCount - 2;
Magic Number,SharedMemory,FastStructure<T>,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\FastStructure.cs,BuildWriteToPointerFunction,The following statement contains a magic number: methodWrite = new DynamicMethod("StructureToPtr<" + typeof(T).FullName + ">"'                  null' new Type[2] { typeof(T).MakeByRefType()' typeof(IntPtr) }' typeof(FastStructure).Module);
Magic Number,SharedMemory.Utilities,ExpandingArray<T>,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\Utilities\ExpandingArray.cs,GetBucketIndex,The following statement contains a magic number: return Math.Max((int) (Math.Log(index + 1)/Math.Log(2)) - 1' 0);
Magic Number,SharedMemory.Utilities,ExpandingArray<T>,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\Utilities\ExpandingArray.cs,GetLocalIndex,The following statement contains a magic number: bucket = GetBucket(bucketIndex) ?? (_buckets[bucketIndex] = _allocator(Math.Max(3' globalIndex + 1)));
Magic Number,SharedMemory.Utilities,ExpandingArray<T>,D:\research\architectureSmells\repos1\spazzarama_SharedMemory\SharedMemory\Utilities\ExpandingArray.cs,GetLocalIndex,The following statement contains a magic number: return globalIndex - (bucketIndex > 0 ? (int)Math.Pow(2' bucketIndex + 1) - 1 : 0);
