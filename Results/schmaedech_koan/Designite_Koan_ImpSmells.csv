Implementation smell,Namespace,Class,File,Method,Description
Long Method,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The method has 132 lines of code.
Long Method,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,TestClass,The method has 521 lines of code.
Long Method,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The method has 164 lines of code.
Complex Method,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,Cyclomatic complexity of the method is 13
Complex Method,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeD2,Cyclomatic complexity of the method is 8
Complex Method,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,four1,Cyclomatic complexity of the method is 8
Complex Method,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,PhyFFT,Cyclomatic complexity of the method is 21
Complex Method,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,Input,Cyclomatic complexity of the method is 8
Complex Method,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,drawPowerCoerence,Cyclomatic complexity of the method is 8
Complex Method,Koan,Windows,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Windows.cs,setWindowType,Cyclomatic complexity of the method is 9
Complex Method,Koan,Windows,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Windows.cs,apply,Cyclomatic complexity of the method is 27
Complex Method,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,Cyclomatic complexity of the method is 11
Complex Method,Koan.Sessions,Worker,C:\repos\schmaedech_koan\Koan\Koan\Koan\Sessions\Worker.cs,SendPostAndGetResponse,Cyclomatic complexity of the method is 9
Long Parameter List,BioSCADA,Sample,C:\repos\schmaedech_koan\Koan\Koan\Sample.cs,Sample,The method has 7 parameters.
Long Parameter List,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,AddSample,The method has 5 parameters.
Long Parameter List,Koan.Blueteeth,Acquisition,C:\repos\schmaedech_koan\Koan\Koan\Acquisition.cs,Acquisition,The method has 5 parameters.
Long Parameter List,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeD2Cmj,The method has 5 parameters.
Long Parameter List,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeCmj,The method has 5 parameters.
Long Parameter List,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,PhyFFT,The method has 12 parameters.
Long Parameter List,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,solveTridiag,The method has 5 parameters.
Long Statement,BioSCADA,Sample,C:\repos\schmaedech_koan\Koan\Koan\Sample.cs,ToString,The length of the statement  "	return "<?xml version='1.0' encoding='utf-8'?> <Samples><Sample><Login>" + Login + "</Login><Timestamp>" + Timestamp + "</Timestamp> <Batery>" + Batery + "</Batery>  <BPM>" + BPM + "</BPM> <RR>" + RR + "</RR>  <Coherence>" + Coherence + "</Coherence> <TAG>" + TAG + "</TAG></Sample></Samples>"; " is 294.
Long Statement,BioSCADA,DevicePanel,C:\repos\schmaedech_koan\Koan\Koan\DevicePanel.xaml.cs,Connect,The length of the statement  "		AlarmMessageBus.log ((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter ().ConvertFrom ("#4682b4")' "conectando com o dispositivo..." + KoanDriver.port + ":" + KoanDriver.device); " is 196.
Long Statement,BioSCADA,DevicePanel,C:\repos\schmaedech_koan\Koan\Koan\DevicePanel.xaml.cs,bt_connect_Click,The length of the statement  "	AlarmMessageBus.log ((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter ().ConvertFrom ("#4682b4")' "conectando com o dispositivo..."); " is 152.
Long Statement,BioSCADA,DevicePanel,C:\repos\schmaedech_koan\Koan\Koan\DevicePanel.xaml.cs,bt_connect_Click,The length of the statement  "	AlarmMessageBus.log ((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter ().ConvertFrom ("#4682b4")' "dispositivo conectado"); " is 142.
Long Statement,BioSCADA,DevicePanel,C:\repos\schmaedech_koan\Koan\Koan\DevicePanel.xaml.cs,get_ports,The length of the statement  "		AlarmMessageBus.log ((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter ().ConvertFrom ("#4682b4")' "não há dispositivos conectados!"); " is 152.
Long Statement,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,RunPhyfft,The length of the statement  "		PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true); " is 158.
Long Statement,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,CreateAcquisitionXML,The length of the statement  "	acquisition = new Acquisition (Int32.Parse (User.ID)' newAquisitionDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' Protocol.filename' 0' Protocol.Type); " is 147.
Long Statement,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The length of the statement  "			PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true); " is 158.
Long Statement,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,Send,The length of the statement  "	string datar = "" + "?id=" + User.ID + "&timestamp=" + Protocol.acquisition.Timestamp + "&file=" + Protocol.acquisition.File + "&size=" + Protocol.acquisition.Size + "&type=" + Protocol.acquisition.Type; " is 203.
Long Statement,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,Send,The length of the statement  "			string data = "" + "?idacquisition=" + idacquisition + "&id=" + User.ID + "&type=" + Protocol.acquisition.Type + "&samples=" + s.ToString (); " is 141.
Long Statement,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,Send,The length of the statement  "			AlarmMessageBus.log ((Brush)this.TryFindResource ("BlueColor")' "enviando " + samplePointer + " de " + Protocol.samples.Count + " ..."); " is 136.
Long Statement,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,Send,The length of the statement  "		AlarmMessageBus.log ((Brush)this.TryFindResource ("GreenColor")' "você enviou " + Protocol.samples.Count + " amostras"); " is 120.
Long Statement,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,Send,The length of the statement  "			string data = "" + "?idacquisition=" + idacquisition + "&id=" + User.ID + "&type=" + Protocol.acquisition.Type + "&samples=" + s.ToString (); " is 141.
Long Statement,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,Send,The length of the statement  "			AlarmMessageBus.log ((Brush)this.TryFindResource ("BlueColor")' "enviando " + samplePointer + " de " + sampleCount + " ..."); " is 125.
Long Statement,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,Down,The length of the statement  "		AlarmMessageBus.log ((Brush)this.TryFindResource ("RedColor")' "não foi possível enviar as amostras' verifique a conexão com a internet"); " is 138.
Long Statement,BioSCADA,UserLogin,C:\repos\schmaedech_koan\Koan\Koan\UserLogin.xaml.cs,GetConnected,The length of the statement  "	/*http://server.bioscada.com.br/BioSCADARequest.php?action=login&login=admin&pass=lec$admin*/string url = Protocol.config.AppSettings.Settings ["BioSCADA.Server"].Value + "crypta.php?action=getperson&" + "login=" + login + "&pass=" + pass; " is 239.
Long Statement,Koan.Blueteeth,Acquisition,C:\repos\schmaedech_koan\Koan\Koan\Acquisition.cs,ToString,The length of the statement  "	return "<?xml version='1.0' encoding='utf-8'?> <Acquisitions><Acquisition> <Id>" + Id + "</Id> <Timestamp>" + Timestamp + "</Timestamp>  <File>" + File + "</File> <Size>" + Size + "</Size> <Type>" + Type + "</Type></Acquisition></Acquisitions>"; " is 245.
Long Statement,Koan.Blueteeth,KoanConnect,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanConnect.cs,DoSend,The length of the statement  "		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Koan Bluetooth foi desconectado com sucesso!"); " is 165.
Long Statement,Koan.Blueteeth,KoanConnect,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanConnect.cs,DoSend,The length of the statement  "		//   AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Conectando com dispositivo..."); " is 152.
Long Statement,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,Open,The length of the statement  "		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Porta serial já está sendo usada por outro dispositivo."); " is 175.
Long Statement,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,Open,The length of the statement  "			//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!"); " is 174.
Long Statement,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,Open,The length of the statement  "		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!"); " is 174.
Long Statement,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The length of the statement  "			//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!"); " is 174.
Long Statement,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The length of the statement  "				sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString (); " is 220.
Long Statement,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The length of the statement  "					// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI); " is 134.
Long Statement,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The length of the statement  "			//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap); " is 130.
Long Statement,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The length of the statement  "					Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs); " is 127.
Long Statement,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The length of the statement  "		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!"); " is 174.
Long Statement,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeLinearRegression,The length of the statement  "		//result[2] = ( n*sumXY-sumX*sumY )/( (float)Math.sqrt( (n*sumX2-(float)Math.pow(sumX' 2))*(n*sumY2-Math.pow(sumY'2)) ) ); " is 122.
Long Statement,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,TestClass,The length of the statement  "	/*(K-1)D+L = N*/new PhyFFT (sintet' 1/*freq*/' 256/*samples*/' 0/*K*/' 256/*L*/' 128/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true); " is 149.
Long Statement,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleLinearRegression,The length of the statement  "		//result[2] = ( n*sumXY-sumX*sumY )/( (float)Math.sqrt( (n*sumX2-(float)Math.pow(sumX' 2))*(n*sumY2-Math.pow(sumY'2)) ) ); " is 122.
Long Statement,Koan,Windows,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Windows.cs,win_blackman_harris,The length of the statement  "	w = (0.35875F - 0.48829F * (float)Math.Cos (a * j) + 0.14128F * (float)Math.Cos (2 * a * j) - 0.01168F * (float)Math.Cos (3F * a * j)); " is 135.
Long Statement,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The length of the statement  "	//TextObj text = new TextObj("Use o mouse para: \n  Zoom' Drag & Pan e Menu "' 0.05f' 0.95f' CoordType.ChartFraction' AlignH.Left' AlignV.Bottom); " is 146.
Long Statement,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The length of the statement  "	LineItem myCurve2 = gpFFT.AddCurve ("espectro de frequência"' Protocol.fftPowerPairList' Color.FromArgb (95' 150' 95)' SymbolType.None); " is 136.
Long Statement,Koan.Sessions,Worker,C:\repos\schmaedech_koan\Koan\Koan\Koan\Sessions\Worker.cs,SendPostAndGetResponse,The length of the statement  "		AlarmMessageBus.log ((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter ().ConvertFrom ("#7b0100")' "falhou envio para núvem! "); " is 146.
Complex Conditional,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeD2,The conditional expression  "slopeX != null && slopeX.Count > 0 && slopeY != null && slopeY.Count > 0"  is complex.
Empty Catch Block,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetSamplesFromServer,The method has an empty catch block.
Empty Catch Block,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,Send,The method has an empty catch block.
Empty Catch Block,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,Send,The method has an empty catch block.
Empty Catch Block,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,Send,The method has an empty catch block.
Empty Catch Block,BioSCADA,UserLogin,C:\repos\schmaedech_koan\Koan\Koan\UserLogin.xaml.cs,GetConnected,The method has an empty catch block.
Empty Catch Block,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The method has an empty catch block.
Empty Catch Block,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeLnSampEn,The method has an empty catch block.
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,RunPhyfft,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	Coherence = phyfft.getCoherence ();  	double x = (double)Protocol.rrlist.Count;  	rrPairList.Add (x' Heartrate);  	coherencePairList.Add (x' Coherence);  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,RunPhyfft,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	Coherence = phyfft.getCoherence ();  	double x = (double)Protocol.rrlist.Count;  	rrPairList.Add (x' Heartrate);  	coherencePairList.Add (x' Coherence);  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,RunPhyfft,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	Coherence = phyfft.getCoherence ();  	double x = (double)Protocol.rrlist.Count;  	rrPairList.Add (x' Heartrate);  	coherencePairList.Add (x' Coherence);  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,RunPhyfft,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	Coherence = phyfft.getCoherence ();  	double x = (double)Protocol.rrlist.Count;  	rrPairList.Add (x' Heartrate);  	coherencePairList.Add (x' Coherence);  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,RunPhyfft,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	Coherence = phyfft.getCoherence ();  	double x = (double)Protocol.rrlist.Count;  	rrPairList.Add (x' Heartrate);  	coherencePairList.Add (x' Coherence);  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,RunPhyfft,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	Coherence = phyfft.getCoherence ();  	double x = (double)Protocol.rrlist.Count;  	rrPairList.Add (x' Heartrate);  	coherencePairList.Add (x' Coherence);  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,RunPhyfft,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	Coherence = phyfft.getCoherence ();  	double x = (double)Protocol.rrlist.Count;  	rrPairList.Add (x' Heartrate);  	coherencePairList.Add (x' Coherence);  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,RunPhyfft,The following statement contains a magic number: rrArray = Interpolation.Interpolation4 (rrArray' 4);  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,AddSample,The following statement contains a magic number: if (rr <= 1500 && rr >= 300) {  	Heartrate = rr;  	rrlist.Add (rr);  	RunPhyfft ();  	Sample sampling = new Sample (User.ID.ToString ()' p2' p3' p4' rr.ToString ()' Coherence.ToString ()' p7);  	samples.Add (sampling);  	LastHeartrate = Heartrate;  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,AddSample,The following statement contains a magic number: if (rr <= 1500 && rr >= 300) {  	Heartrate = rr;  	rrlist.Add (rr);  	RunPhyfft ();  	Sample sampling = new Sample (User.ID.ToString ()' p2' p3' p4' rr.ToString ()' Coherence.ToString ()' p7);  	samples.Add (sampling);  	LastHeartrate = Heartrate;  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,WriteTxT,The following statement contains a magic number: try {  	sw = new StreamWriter (filePath' false);  	for (i = 0; i < dt.Columns.Count - 1; i++) {  		sw.Write (dt.Columns [i].ColumnName + (char)9);  	}  	sw.Write (dt.Columns [i].ColumnName);  	sw.WriteLine ();  	foreach (DataRow row in dt.Rows) {  		object[] array = row.ItemArray;  		for (i = 0; i < array.Length - 1; i++) {  			sw.Write (array [i].ToString () + (char)9);  		}  		sw.Write (array [i].ToString ());  		sw.WriteLine ();  	}  	sw.Close ();  }  catch (Exception ex) {  	Console.WriteLine ("Protocol:Operação invalida: \n" + ex.ToString ());  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,WriteTxT,The following statement contains a magic number: try {  	sw = new StreamWriter (filePath' false);  	for (i = 0; i < dt.Columns.Count - 1; i++) {  		sw.Write (dt.Columns [i].ColumnName + (char)9);  	}  	sw.Write (dt.Columns [i].ColumnName);  	sw.WriteLine ();  	foreach (DataRow row in dt.Rows) {  		object[] array = row.ItemArray;  		for (i = 0; i < array.Length - 1; i++) {  			sw.Write (array [i].ToString () + (char)9);  		}  		sw.Write (array [i].ToString ());  		sw.WriteLine ();  	}  	sw.Close ();  }  catch (Exception ex) {  	Console.WriteLine ("Protocol:Operação invalida: \n" + ex.ToString ());  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,WriteTxT,The following statement contains a magic number: for (i = 0; i < dt.Columns.Count - 1; i++) {  	sw.Write (dt.Columns [i].ColumnName + (char)9);  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,WriteTxT,The following statement contains a magic number: sw.Write (dt.Columns [i].ColumnName + (char)9);  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,WriteTxT,The following statement contains a magic number: foreach (DataRow row in dt.Rows) {  	object[] array = row.ItemArray;  	for (i = 0; i < array.Length - 1; i++) {  		sw.Write (array [i].ToString () + (char)9);  	}  	sw.Write (array [i].ToString ());  	sw.WriteLine ();  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,WriteTxT,The following statement contains a magic number: for (i = 0; i < array.Length - 1; i++) {  	sw.Write (array [i].ToString () + (char)9);  }  
Magic Number,BioSCADA,Protocol,C:\repos\schmaedech_koan\Koan\Koan\Protocol.cs,WriteTxT,The following statement contains a magic number: sw.Write (array [i].ToString () + (char)9);  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: try {  	DataTable dt = ds.Tables [0];  	ArrayList ls = new ArrayList ();  	foreach (DataRow dr in dt.Rows) {  		try {  			ls.Add (float.Parse (dr ["RR"].ToString ().Trim ()));  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	float[] rrArray = (float[])ls.ToArray (typeof(float));  	if (rrArray.Length > 4) {  		rrArray = Interpolation.Interpolation4 (rrArray' 4);  		PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  		lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  		lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  		lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  		lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  		lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  		lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: try {  	DataTable dt = ds.Tables [0];  	ArrayList ls = new ArrayList ();  	foreach (DataRow dr in dt.Rows) {  		try {  			ls.Add (float.Parse (dr ["RR"].ToString ().Trim ()));  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	float[] rrArray = (float[])ls.ToArray (typeof(float));  	if (rrArray.Length > 4) {  		rrArray = Interpolation.Interpolation4 (rrArray' 4);  		PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  		lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  		lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  		lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  		lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  		lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  		lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: try {  	DataTable dt = ds.Tables [0];  	ArrayList ls = new ArrayList ();  	foreach (DataRow dr in dt.Rows) {  		try {  			ls.Add (float.Parse (dr ["RR"].ToString ().Trim ()));  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	float[] rrArray = (float[])ls.ToArray (typeof(float));  	if (rrArray.Length > 4) {  		rrArray = Interpolation.Interpolation4 (rrArray' 4);  		PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  		lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  		lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  		lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  		lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  		lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  		lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: try {  	DataTable dt = ds.Tables [0];  	ArrayList ls = new ArrayList ();  	foreach (DataRow dr in dt.Rows) {  		try {  			ls.Add (float.Parse (dr ["RR"].ToString ().Trim ()));  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	float[] rrArray = (float[])ls.ToArray (typeof(float));  	if (rrArray.Length > 4) {  		rrArray = Interpolation.Interpolation4 (rrArray' 4);  		PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  		lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  		lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  		lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  		lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  		lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  		lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: try {  	DataTable dt = ds.Tables [0];  	ArrayList ls = new ArrayList ();  	foreach (DataRow dr in dt.Rows) {  		try {  			ls.Add (float.Parse (dr ["RR"].ToString ().Trim ()));  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	float[] rrArray = (float[])ls.ToArray (typeof(float));  	if (rrArray.Length > 4) {  		rrArray = Interpolation.Interpolation4 (rrArray' 4);  		PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  		lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  		lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  		lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  		lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  		lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  		lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: try {  	DataTable dt = ds.Tables [0];  	ArrayList ls = new ArrayList ();  	foreach (DataRow dr in dt.Rows) {  		try {  			ls.Add (float.Parse (dr ["RR"].ToString ().Trim ()));  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	float[] rrArray = (float[])ls.ToArray (typeof(float));  	if (rrArray.Length > 4) {  		rrArray = Interpolation.Interpolation4 (rrArray' 4);  		PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  		lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  		lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  		lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  		lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  		lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  		lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: try {  	DataTable dt = ds.Tables [0];  	ArrayList ls = new ArrayList ();  	foreach (DataRow dr in dt.Rows) {  		try {  			ls.Add (float.Parse (dr ["RR"].ToString ().Trim ()));  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	float[] rrArray = (float[])ls.ToArray (typeof(float));  	if (rrArray.Length > 4) {  		rrArray = Interpolation.Interpolation4 (rrArray' 4);  		PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  		lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  		lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  		lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  		lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  		lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  		lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: try {  	DataTable dt = ds.Tables [0];  	ArrayList ls = new ArrayList ();  	foreach (DataRow dr in dt.Rows) {  		try {  			ls.Add (float.Parse (dr ["RR"].ToString ().Trim ()));  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	float[] rrArray = (float[])ls.ToArray (typeof(float));  	if (rrArray.Length > 4) {  		rrArray = Interpolation.Interpolation4 (rrArray' 4);  		PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  		lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  		lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  		lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  		lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  		lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  		lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: try {  	DataTable dt = ds.Tables [0];  	ArrayList ls = new ArrayList ();  	foreach (DataRow dr in dt.Rows) {  		try {  			ls.Add (float.Parse (dr ["RR"].ToString ().Trim ()));  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	float[] rrArray = (float[])ls.ToArray (typeof(float));  	if (rrArray.Length > 4) {  		rrArray = Interpolation.Interpolation4 (rrArray' 4);  		PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  		lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  		lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  		lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  		lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  		lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  		lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  	}  }  catch (Exception ex) {  	Console.WriteLine (ex.Message);  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  	lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  	lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  	lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  	lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  	lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  	lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  	lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  	lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  	lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  	lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  	lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  	lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  	lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  	lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  	lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  	lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  	lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  	lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  	lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  	lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  	lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  	lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  	lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  	lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  	lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  	lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  	lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  	lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  	lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  	lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  	lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  	lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  	lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  	lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  	lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  	lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  	lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  	lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  	lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  	lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: if (rrArray.Length > 4) {  	rrArray = Interpolation.Interpolation4 (rrArray' 4);  	PhyFFT phyfft = new PhyFFT (rrArray' 4f/*freq*/' 128/*samples*/' 0/*K*/' 128 / 2/*L*/' 64 / 2/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  	lbl_lf.Content = "LF : " + String.Format ("{0:0.###}"' phyfft.getLF ());  	lbl_hf.Content = "HF : " + String.Format ("{0:0.###}"' phyfft.getHF ());  	lbl_rmssd.Content = "RMSSD : " + String.Format ("{0:0.###}"' FastStdStats.calculeRMSSD (ls));  	lbl_sd1.Content = "SD1 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD1 (ls));  	lbl_sd2.Content = "SD2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeSD2 (ls));  	lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  }  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: rrArray = Interpolation.Interpolation4 (rrArray' 4);  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  
Magic Number,BioSCADA,ReportPanel,C:\repos\schmaedech_koan\Koan\Koan\ReportPanel.xaml.cs,GetStats,The following statement contains a magic number: lbl_d2.Content = "D2 : " + String.Format ("{0:0.###}"' FastStdStats.calculeD2 (10' 100' rrArray));  
Magic Number,BioSCADA,MainWindow,C:\repos\schmaedech_koan\Koan\Koan\MainWindow.xaml.cs,autoConnectTCP,The following statement contains a magic number: if (tcpDriver.startListening (9999)) {  	//this.pbSocketConection.BackgroundImage = global::Koan.Properties.Resources.netstatusOn;  	Console.WriteLine ("MainWindow: conexão TCP ON!");  }  else {  	Console.WriteLine ("MainWindow: não foi possível estabelecer conexão TCP!");  	// this.pbSocketConection.BackgroundImage = global::Koan.Properties.Resources.netstatusOff;  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,Open,The following statement contains a magic number: mySerialPort.BaudRate = 115200;  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,Open,The following statement contains a magic number: mySerialPort.DataBits = 8;  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,Open,The following statement contains a magic number: mySerialPort.ReadTimeout = 2000;  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: try {  	iRRI = 0;  	Connected = true;  	Error = false;  	SerialPort sp = (SerialPort)sender;  	int bytes = 0;  	try {  		bytes = sp.BytesToRead;  	}  	catch (Exception ex) {  		//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  		//   MessageBox.Show(ex.Message' "erro ao ler porta serial!"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		KoanDriver.Connected = false;  		Error = true;  	}  	if (device.Equals ("POLAR")) {  		string sRow;  		//Atleast 6 bytes  		if (sp.BytesToRead > 5 && bytes < 60) {  			iHeader = sp.ReadByte ();  			//always 254  			iSize = sp.ReadByte ();  			//size of block including bHeader' always even (8' 10' 12)' different number of RRI  			iCheck = sp.ReadByte ();  			//255-bSize  			iIndex = sp.ReadByte ();  			//index: 0-15 (seconds?)' first is 1  			//2010-08-05 iBattery changed to iSttus  			iStatus = sp.ReadByte ();  			//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  			iBeat = (iStatus >> 4) & 1;  			iBattery = (iStatus >> 5) & 3;  			iBPM = sp.ReadByte ();  			//beats per minutes' some averaging?  			Protocol.Battery = iBattery;  			dDate = DateTime.Now;  			sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  			// Console.WriteLine("iSize: " + iSize);  			for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  			 {  				int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  				//RRI (ms)    				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  				Console.Write (tmpiRRI + "'");  				// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  			}  			sRow = sRow + (char)9 + iRRI.ToString ();  			Console.WriteLine ("");  		}  		else {  		}  		//Atleast 6 bytes for polar  		// Console.WriteLine("bytes: " + bytes);  		//if (bytes > 5 && bytes < 60)  		//{  		//    iHeader = sp.ReadByte(); //always 254  		//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  		//    iCheck = sp.ReadByte(); //255-bSize  		//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  		//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		//    iBeat = (iStatus >> 4) & 1;  		//    iBattery = (iStatus >> 5) & 3;  		//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  		//    dDate = DateTime.Now;  		//    int hxmRR = 0;  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        hxmRR = 60000 / iBPM;  		//    }  		//    Protocol.Battery = iBattery * 10;  		//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  		//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  		//    {  		//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    		//    }  		//    if (iBPM > 30 && iBPM < 160)  		//    {  		//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  		//    }  		//    else  		//    {  		//        Protocol.Battery = 0;  		//        Protocol.addHeartRate(0);  		//    }  		//}  		//else  		//{  		//    Protocol.Battery = 0;  		//    Protocol.addHeartRate(0);  		//}  	}  	else if (device.Equals ("ZEPHYR")) {  		//Atleast 6 bytes for polar  		//   Console.WriteLine("bytes: " + bytes);  		int tmp = 0;  		if (bytes > 59 && bytes < 100) {  			for (int i = 0; i < bytes; i++) {  				tmp = sp.ReadByte ();  				if (i == 11) {  					hxmBattery = tmp;  				}  				if (i == 12) {  					hxmHeartRate = tmp;  				}  			}  			dDate = DateTime.Now;  			Protocol.Battery = hxmBattery;  			int hxmRR = 0;  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				hxmRR = 60000 / hxmHeartRate;  			}  			//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  			// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  			if (hxmHeartRate > 30 && hxmHeartRate < 150) {  				Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  			}  			else {  				//Protocol.Battery = 0;  				//Protocol.addHeartRate(0);  			}  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  }  catch (TimeoutException to) {  	//AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "Não há dados na porta serial' verifique o dispositivo!");  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("POLAR")) {  	string sRow;  	//Atleast 6 bytes  	if (sp.BytesToRead > 5 && bytes < 60) {  		iHeader = sp.ReadByte ();  		//always 254  		iSize = sp.ReadByte ();  		//size of block including bHeader' always even (8' 10' 12)' different number of RRI  		iCheck = sp.ReadByte ();  		//255-bSize  		iIndex = sp.ReadByte ();  		//index: 0-15 (seconds?)' first is 1  		//2010-08-05 iBattery changed to iSttus  		iStatus = sp.ReadByte ();  		//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  		iBeat = (iStatus >> 4) & 1;  		iBattery = (iStatus >> 5) & 3;  		iBPM = sp.ReadByte ();  		//beats per minutes' some averaging?  		Protocol.Battery = iBattery;  		dDate = DateTime.Now;  		sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  		// Console.WriteLine("iSize: " + iSize);  		for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  		 {  			int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  			//RRI (ms)    			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  			Console.Write (tmpiRRI + "'");  			// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  		}  		sRow = sRow + (char)9 + iRRI.ToString ();  		Console.WriteLine ("");  	}  	else {  	}  	//Atleast 6 bytes for polar  	// Console.WriteLine("bytes: " + bytes);  	//if (bytes > 5 && bytes < 60)  	//{  	//    iHeader = sp.ReadByte(); //always 254  	//    iSize = sp.ReadByte(); //size of block including bHeader' always even (8' 10' 12)' different number of RRI  	//    iCheck = sp.ReadByte(); //255-bSize  	//    iIndex = sp.ReadByte(); //index: 0-15 (seconds?)' first is 1    //2010-08-05 iBattery changed to iSttus  	//    iStatus = sp.ReadByte(); //status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	//    iBeat = (iStatus >> 4) & 1;  	//    iBattery = (iStatus >> 5) & 3;  	//    iBPM = sp.ReadByte(); //beats per minutes' some averaging?  	//    dDate = DateTime.Now;  	//    int hxmRR = 0;  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        hxmRR = 60000 / iBPM;  	//    }  	//    Protocol.Battery = iBattery * 10;  	//    Console.WriteLine(" " + iBattery + "\t" + iBPM);  	//    for (int i = 7; i < iSize; i = i + 2) //different number of RRI intervals  	//    {  	//        iRRI = sp.ReadByte() * 256 + sp.ReadByte(); //RRI (ms)    	//    }  	//    if (iBPM > 30 && iBPM < 160)  	//    {  	//        Protocol.addSample(dDate.ToString("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' iBPM.ToString()' hxmRR' "" + Protocol.lap);  	//    }  	//    else  	//    {  	//        Protocol.Battery = 0;  	//        Protocol.addHeartRate(0);  	//    }  	//}  	//else  	//{  	//    Protocol.Battery = 0;  	//    Protocol.addHeartRate(0);  	//}  }  else if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (sp.BytesToRead > 5 && bytes < 60) {  	iHeader = sp.ReadByte ();  	//always 254  	iSize = sp.ReadByte ();  	//size of block including bHeader' always even (8' 10' 12)' different number of RRI  	iCheck = sp.ReadByte ();  	//255-bSize  	iIndex = sp.ReadByte ();  	//index: 0-15 (seconds?)' first is 1  	//2010-08-05 iBattery changed to iSttus  	iStatus = sp.ReadByte ();  	//status bit 1BBP0001' thus 128+64+16+1=209 beats (P=16) detected (BA=2) ' 193 no beats  	iBeat = (iStatus >> 4) & 1;  	iBattery = (iStatus >> 5) & 3;  	iBPM = sp.ReadByte ();  	//beats per minutes' some averaging?  	Protocol.Battery = iBattery;  	dDate = DateTime.Now;  	sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  	// Console.WriteLine("iSize: " + iSize);  	for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals  	 {  		int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  		//RRI (ms)    		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  		Console.Write (tmpiRRI + "'");  		// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  	}  	sRow = sRow + (char)9 + iRRI.ToString ();  	Console.WriteLine ("");  }  else {  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: iBeat = (iStatus >> 4) & 1;  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: iBattery = (iStatus >> 5) & 3;  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: iBattery = (iStatus >> 5) & 3;  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: sRow = dDate.ToString ("HH:mm:ss") + (char)9 + iHeader.ToString () + (char)9 + iSize.ToString () + (char)9 + iCheck.ToString () + (char)9 + iIndex.ToString () + (char)9 + iStatus.ToString () + (char)9 + iBPM.ToString ();  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals   {  	int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  	//RRI (ms)    	Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  	Console.Write (tmpiRRI + "'");  	// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals   {  	int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  	//RRI (ms)    	Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  	Console.Write (tmpiRRI + "'");  	// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: for (int i = 7; i < iSize; i = i + 2)//different number of RRI intervals   {  	int tmpiRRI = sp.ReadByte () * 256 + sp.ReadByte ();  	//RRI (ms)    	Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + iBattery' "" + iBPM' tmpiRRI' "" + Protocol.TAGs);  	Console.Write (tmpiRRI + "'");  	// AlarmMessageBus.log((System.Windows.Media.Brush)new System.Windows.Media.BrushConverter().ConvertFrom("#4682b4")' "RR " + tmpiRRI);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: i = i + 2
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: sRow = sRow + (char)9 + iRRI.ToString ();  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (device.Equals ("ZEPHYR")) {  	//Atleast 6 bytes for polar  	//   Console.WriteLine("bytes: " + bytes);  	int tmp = 0;  	if (bytes > 59 && bytes < 100) {  		for (int i = 0; i < bytes; i++) {  			tmp = sp.ReadByte ();  			if (i == 11) {  				hxmBattery = tmp;  			}  			if (i == 12) {  				hxmHeartRate = tmp;  			}  		}  		dDate = DateTime.Now;  		Protocol.Battery = hxmBattery;  		int hxmRR = 0;  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			hxmRR = 60000 / hxmHeartRate;  		}  		//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  		// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  		if (hxmHeartRate > 30 && hxmHeartRate < 150) {  			Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  		}  		else {  			//Protocol.Battery = 0;  			//Protocol.addHeartRate(0);  		}  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (bytes > 59 && bytes < 100) {  	for (int i = 0; i < bytes; i++) {  		tmp = sp.ReadByte ();  		if (i == 11) {  			hxmBattery = tmp;  		}  		if (i == 12) {  			hxmHeartRate = tmp;  		}  	}  	dDate = DateTime.Now;  	Protocol.Battery = hxmBattery;  	int hxmRR = 0;  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		hxmRR = 60000 / hxmHeartRate;  	}  	//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  	// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  else {  	//Protocol.Battery = 0;  	//Protocol.addHeartRate(0);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (bytes > 59 && bytes < 100) {  	for (int i = 0; i < bytes; i++) {  		tmp = sp.ReadByte ();  		if (i == 11) {  			hxmBattery = tmp;  		}  		if (i == 12) {  			hxmHeartRate = tmp;  		}  	}  	dDate = DateTime.Now;  	Protocol.Battery = hxmBattery;  	int hxmRR = 0;  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		hxmRR = 60000 / hxmHeartRate;  	}  	//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  	// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  else {  	//Protocol.Battery = 0;  	//Protocol.addHeartRate(0);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (bytes > 59 && bytes < 100) {  	for (int i = 0; i < bytes; i++) {  		tmp = sp.ReadByte ();  		if (i == 11) {  			hxmBattery = tmp;  		}  		if (i == 12) {  			hxmHeartRate = tmp;  		}  	}  	dDate = DateTime.Now;  	Protocol.Battery = hxmBattery;  	int hxmRR = 0;  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		hxmRR = 60000 / hxmHeartRate;  	}  	//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  	// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  else {  	//Protocol.Battery = 0;  	//Protocol.addHeartRate(0);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (bytes > 59 && bytes < 100) {  	for (int i = 0; i < bytes; i++) {  		tmp = sp.ReadByte ();  		if (i == 11) {  			hxmBattery = tmp;  		}  		if (i == 12) {  			hxmHeartRate = tmp;  		}  	}  	dDate = DateTime.Now;  	Protocol.Battery = hxmBattery;  	int hxmRR = 0;  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		hxmRR = 60000 / hxmHeartRate;  	}  	//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  	// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  else {  	//Protocol.Battery = 0;  	//Protocol.addHeartRate(0);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (bytes > 59 && bytes < 100) {  	for (int i = 0; i < bytes; i++) {  		tmp = sp.ReadByte ();  		if (i == 11) {  			hxmBattery = tmp;  		}  		if (i == 12) {  			hxmHeartRate = tmp;  		}  	}  	dDate = DateTime.Now;  	Protocol.Battery = hxmBattery;  	int hxmRR = 0;  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		hxmRR = 60000 / hxmHeartRate;  	}  	//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  	// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  else {  	//Protocol.Battery = 0;  	//Protocol.addHeartRate(0);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (bytes > 59 && bytes < 100) {  	for (int i = 0; i < bytes; i++) {  		tmp = sp.ReadByte ();  		if (i == 11) {  			hxmBattery = tmp;  		}  		if (i == 12) {  			hxmHeartRate = tmp;  		}  	}  	dDate = DateTime.Now;  	Protocol.Battery = hxmBattery;  	int hxmRR = 0;  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		hxmRR = 60000 / hxmHeartRate;  	}  	//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  	// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  else {  	//Protocol.Battery = 0;  	//Protocol.addHeartRate(0);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (bytes > 59 && bytes < 100) {  	for (int i = 0; i < bytes; i++) {  		tmp = sp.ReadByte ();  		if (i == 11) {  			hxmBattery = tmp;  		}  		if (i == 12) {  			hxmHeartRate = tmp;  		}  	}  	dDate = DateTime.Now;  	Protocol.Battery = hxmBattery;  	int hxmRR = 0;  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		hxmRR = 60000 / hxmHeartRate;  	}  	//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  	// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  else {  	//Protocol.Battery = 0;  	//Protocol.addHeartRate(0);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (bytes > 59 && bytes < 100) {  	for (int i = 0; i < bytes; i++) {  		tmp = sp.ReadByte ();  		if (i == 11) {  			hxmBattery = tmp;  		}  		if (i == 12) {  			hxmHeartRate = tmp;  		}  	}  	dDate = DateTime.Now;  	Protocol.Battery = hxmBattery;  	int hxmRR = 0;  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		hxmRR = 60000 / hxmHeartRate;  	}  	//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  	// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  else {  	//Protocol.Battery = 0;  	//Protocol.addHeartRate(0);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (bytes > 59 && bytes < 100) {  	for (int i = 0; i < bytes; i++) {  		tmp = sp.ReadByte ();  		if (i == 11) {  			hxmBattery = tmp;  		}  		if (i == 12) {  			hxmHeartRate = tmp;  		}  	}  	dDate = DateTime.Now;  	Protocol.Battery = hxmBattery;  	int hxmRR = 0;  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		hxmRR = 60000 / hxmHeartRate;  	}  	//   Console.WriteLine(" " + Protocol.getBattery() + "\t" + Protocol.getHeartRate());  	// Console.WriteLine(" " + hxmBattery + "\t" + hxmRR);  	if (hxmHeartRate > 30 && hxmHeartRate < 150) {  		Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  	}  	else {  		//Protocol.Battery = 0;  		//Protocol.addHeartRate(0);  	}  }  else {  	//Protocol.Battery = 0;  	//Protocol.addHeartRate(0);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: for (int i = 0; i < bytes; i++) {  	tmp = sp.ReadByte ();  	if (i == 11) {  		hxmBattery = tmp;  	}  	if (i == 12) {  		hxmHeartRate = tmp;  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: for (int i = 0; i < bytes; i++) {  	tmp = sp.ReadByte ();  	if (i == 11) {  		hxmBattery = tmp;  	}  	if (i == 12) {  		hxmHeartRate = tmp;  	}  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (i == 11) {  	hxmBattery = tmp;  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (i == 12) {  	hxmHeartRate = tmp;  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (hxmHeartRate > 30 && hxmHeartRate < 150) {  	hxmRR = 60000 / hxmHeartRate;  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (hxmHeartRate > 30 && hxmHeartRate < 150) {  	hxmRR = 60000 / hxmHeartRate;  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (hxmHeartRate > 30 && hxmHeartRate < 150) {  	hxmRR = 60000 / hxmHeartRate;  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: hxmRR = 60000 / hxmHeartRate;  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (hxmHeartRate > 30 && hxmHeartRate < 150) {  	Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  }  else {  	//Protocol.Battery = 0;  	//Protocol.addHeartRate(0);  }  
Magic Number,Koan.Blueteeth,KoanDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\Blueteeth\KoanDriver.cs,DataReceivedHandler,The following statement contains a magic number: if (hxmHeartRate > 30 && hxmHeartRate < 150) {  	Protocol.AddSample (dDate.ToString ("yyyy-MM-dd HH:mm:ss.fff")' "" + hxmBattery' "" + hxmHeartRate' hxmRR' "" + Protocol.TAGs);  }  else {  	//Protocol.Battery = 0;  	//Protocol.addHeartRate(0);  }  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeSD1,The following statement contains a magic number: return (float)(Math.Sqrt (0.5) * calculeSDSD (rr));  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeSD2,The following statement contains a magic number: return (float)Math.Sqrt (2 * Math.Pow (calculeSD (rr)' 2) - 0.5 * Math.Pow (calculeSDSD (rr)' 2));  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeSD2,The following statement contains a magic number: return (float)Math.Sqrt (2 * Math.Pow (calculeSD (rr)' 2) - 0.5 * Math.Pow (calculeSDSD (rr)' 2));  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeSD2,The following statement contains a magic number: return (float)Math.Sqrt (2 * Math.Pow (calculeSD (rr)' 2) - 0.5 * Math.Pow (calculeSDSD (rr)' 2));  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeSD2,The following statement contains a magic number: return (float)Math.Sqrt (2 * Math.Pow (calculeSD (rr)' 2) - 0.5 * Math.Pow (calculeSDSD (rr)' 2));  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeRMSSD,The following statement contains a magic number: for (int t = 0; t < rr.Count - 1; t++) {  	adjacent [t] = (float)rr [t] - (float)rr [t + 1];  	adjacentPow2 [t] = (float)Math.Pow (adjacent [t]' 2);  }  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeRMSSD,The following statement contains a magic number: adjacentPow2 [t] = (float)Math.Pow (adjacent [t]' 2);  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeLinearRegression,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	sumXY += x [i] * y [i];  	sumX2 += (float)Math.Pow (x [i]' 2);  	sumY2 += (float)Math.Pow (y [i]' 2);  }  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeLinearRegression,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	sumXY += x [i] * y [i];  	sumX2 += (float)Math.Pow (x [i]' 2);  	sumY2 += (float)Math.Pow (y [i]' 2);  }  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeLinearRegression,The following statement contains a magic number: sumX2 += (float)Math.Pow (x [i]' 2);  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeLinearRegression,The following statement contains a magic number: sumY2 += (float)Math.Pow (y [i]' 2);  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeLinearRegression,The following statement contains a magic number: try {  	result [0] = (n * sumXY - sumX * sumY) / (n * sumX2 - (float)Math.Pow (sumX' 2));  	//result[1] = (sumY-result[0]*sumX)/n;  	//result[2] = ( n*sumXY-sumX*sumY )/( (float)Math.sqrt( (n*sumX2-(float)Math.pow(sumX' 2))*(n*sumY2-Math.pow(sumY'2)) ) );  }  catch (Exception ex) {  	return new float[] {  		0f'  		0f'  		0f  	};  }  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,calculeLinearRegression,The following statement contains a magic number: result [0] = (n * sumXY - sumX * sumY) / (n * sumX2 - (float)Math.Pow (sumX' 2));  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,dCoUjUk,The following statement contains a magic number: foreach (float f in uj) {  	result += (float)Math.Pow (uk [i] - f' 2);  	i++;  }  
Magic Number,Koan,FastStdStats,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FastStdStats.cs,dCoUjUk,The following statement contains a magic number: result += (float)Math.Pow (uk [i] - f' 2);  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: wtemp = (float)Math.Sin (0.5 * theta);  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: n2p3 = 2 * n + 3;  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: n2p3 = 2 * n + 3;  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: for (i = 2; i <= n / 2; i++) {  	try {  		i4 = 1 + (i3 = n2p3 - (i2 = 1 + (i1 = i + i - 1)));  		h1r = c1 * (data [i1] + data [i3]);  		h1i = c1 * (data [i2] - data [i4]);  		h2r = -c2 * (data [i2] + data [i4]);  		h2i = c2 * (data [i1] - data [i3]);  		data [i1] = (h1r + wr * h2r - wi * h2i);  		data [i2] = (h1i + wr * h2i + wi * h2r);  		data [i3] = (h1r - wr * h2r + wi * h2i);  		data [i4] = (-h1i + wr * h2i + wi * h2r);  		wr = (wtemp = wr) * wpr - wi * wpi + wr;  		wi = wi * wpr + wtemp * wpi + wi;  	}  	catch (Exception ex) {  		Console.WriteLine (ex.Message);  	}  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: for (i = 2; i <= n / 2; i++) {  	try {  		i4 = 1 + (i3 = n2p3 - (i2 = 1 + (i1 = i + i - 1)));  		h1r = c1 * (data [i1] + data [i3]);  		h1i = c1 * (data [i2] - data [i4]);  		h2r = -c2 * (data [i2] + data [i4]);  		h2i = c2 * (data [i1] - data [i3]);  		data [i1] = (h1r + wr * h2r - wi * h2i);  		data [i2] = (h1i + wr * h2i + wi * h2r);  		data [i3] = (h1r - wr * h2r + wi * h2i);  		data [i4] = (-h1i + wr * h2i + wi * h2r);  		wr = (wtemp = wr) * wpr - wi * wpi + wr;  		wi = wi * wpr + wtemp * wpi + wi;  	}  	catch (Exception ex) {  		Console.WriteLine (ex.Message);  	}  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: i = 2
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: if (isign == 1) {  	data [1] = (h1r = data [1]) + data [2];  	data [2] = h1r - data [2];  }  else {  	data [1] = c1 * ((h1r = data [1]) + data [2]);  	data [2] = c1 * (h1r - data [2]);  	four1 (data' n' -1);  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: if (isign == 1) {  	data [1] = (h1r = data [1]) + data [2];  	data [2] = h1r - data [2];  }  else {  	data [1] = c1 * ((h1r = data [1]) + data [2]);  	data [2] = c1 * (h1r - data [2]);  	four1 (data' n' -1);  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: if (isign == 1) {  	data [1] = (h1r = data [1]) + data [2];  	data [2] = h1r - data [2];  }  else {  	data [1] = c1 * ((h1r = data [1]) + data [2]);  	data [2] = c1 * (h1r - data [2]);  	four1 (data' n' -1);  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: if (isign == 1) {  	data [1] = (h1r = data [1]) + data [2];  	data [2] = h1r - data [2];  }  else {  	data [1] = c1 * ((h1r = data [1]) + data [2]);  	data [2] = c1 * (h1r - data [2]);  	four1 (data' n' -1);  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: if (isign == 1) {  	data [1] = (h1r = data [1]) + data [2];  	data [2] = h1r - data [2];  }  else {  	data [1] = c1 * ((h1r = data [1]) + data [2]);  	data [2] = c1 * (h1r - data [2]);  	four1 (data' n' -1);  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: if (isign == 1) {  	data [1] = (h1r = data [1]) + data [2];  	data [2] = h1r - data [2];  }  else {  	data [1] = c1 * ((h1r = data [1]) + data [2]);  	data [2] = c1 * (h1r - data [2]);  	four1 (data' n' -1);  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: data [1] = (h1r = data [1]) + data [2];  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: data [2] = h1r - data [2];  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: data [2] = h1r - data [2];  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: data [1] = c1 * ((h1r = data [1]) + data [2]);  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: data [2] = c1 * (h1r - data [2]);  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,realft,The following statement contains a magic number: data [2] = c1 * (h1r - data [2]);  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,four1,The following statement contains a magic number: for (i = 1; i < nf; i += 2) {  	if (j > i) {  		tempr = data [j];  		data [j] = data [i];  		data [i] = tempr;  		tempr = data [j + 1];  		data [j + 1] = data [i + 1];  		data [i + 1] = tempr;  	}  	mf = nf >> 1;  	while (mf >= 2 && j > mf) {  		j -= mf;  		mf >>= 1;  	}  	j += mf;  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,four1,The following statement contains a magic number: for (i = 1; i < nf; i += 2) {  	if (j > i) {  		tempr = data [j];  		data [j] = data [i];  		data [i] = tempr;  		tempr = data [j + 1];  		data [j + 1] = data [i + 1];  		data [i + 1] = tempr;  	}  	mf = nf >> 1;  	while (mf >= 2 && j > mf) {  		j -= mf;  		mf >>= 1;  	}  	j += mf;  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,four1,The following statement contains a magic number: i += 2
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,four1,The following statement contains a magic number: while (mf >= 2 && j > mf) {  	j -= mf;  	mf >>= 1;  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,four1,The following statement contains a magic number: mmax = 2;  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,four1,The following statement contains a magic number: while (nf > mmax) {  	istep = 2 * mmax;  	theta = TWOPI / (isign * mmax);  	wtemp = (float)Math.Sin (0.5F * theta);  	wpr = (-2.0F * wtemp * wtemp);  	wpi = (float)Math.Sin (theta);  	wr = 1.0F;  	wi = 0.0F;  	for (mf = 1; mf < mmax; mf += 2) {  		for (i = mf; i <= nf; i += istep) {  			j = i + mmax;  			try {  				tempr = (wr * data [j] - wi * data [j + 1]);  				tempi = (wr * data [j + 1] + wi * data [j]);  				data [j] = data [i] - tempr;  				data [j + 1] = data [i + 1] - tempi;  				data [i] += tempr;  				data [i + 1] += tempi;  			}  			catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		wr = (wtemp = wr) * wpr - wi * wpi + wr;  		wi = wi * wpr + wtemp * wpi + wi;  	}  	mmax = istep;  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,four1,The following statement contains a magic number: while (nf > mmax) {  	istep = 2 * mmax;  	theta = TWOPI / (isign * mmax);  	wtemp = (float)Math.Sin (0.5F * theta);  	wpr = (-2.0F * wtemp * wtemp);  	wpi = (float)Math.Sin (theta);  	wr = 1.0F;  	wi = 0.0F;  	for (mf = 1; mf < mmax; mf += 2) {  		for (i = mf; i <= nf; i += istep) {  			j = i + mmax;  			try {  				tempr = (wr * data [j] - wi * data [j + 1]);  				tempi = (wr * data [j + 1] + wi * data [j]);  				data [j] = data [i] - tempr;  				data [j + 1] = data [i + 1] - tempi;  				data [i] += tempr;  				data [i + 1] += tempi;  			}  			catch (Exception ex) {  				Console.WriteLine (ex.Message);  			}  		}  		wr = (wtemp = wr) * wpr - wi * wpi + wr;  		wi = wi * wpr + wtemp * wpi + wi;  	}  	mmax = istep;  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,four1,The following statement contains a magic number: istep = 2 * mmax;  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,four1,The following statement contains a magic number: for (mf = 1; mf < mmax; mf += 2) {  	for (i = mf; i <= nf; i += istep) {  		j = i + mmax;  		try {  			tempr = (wr * data [j] - wi * data [j + 1]);  			tempi = (wr * data [j + 1] + wi * data [j]);  			data [j] = data [i] - tempr;  			data [j + 1] = data [i + 1] - tempi;  			data [i] += tempr;  			data [i + 1] += tempi;  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	wr = (wtemp = wr) * wpr - wi * wpi + wr;  	wi = wi * wpr + wtemp * wpi + wi;  }  
Magic Number,Koan,FrequencyDomain,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\FrequencyDomain.cs,four1,The following statement contains a magic number: mf += 2
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,TestClass,The following statement contains a magic number: new PhyFFT (sintet' 1/*freq*/' 256/*samples*/' 0/*K*/' 256/*L*/' 128/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,TestClass,The following statement contains a magic number: new PhyFFT (sintet' 1/*freq*/' 256/*samples*/' 0/*K*/' 256/*L*/' 128/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,TestClass,The following statement contains a magic number: new PhyFFT (sintet' 1/*freq*/' 256/*samples*/' 0/*K*/' 256/*L*/' 128/*D*/' false' 1/*smooth*/' 1/*decimation*/' "Welch"' true' true);  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,TestClass,The following statement contains a magic number: Console.WriteLine ("total time: " + (DateTime.Now.Ticks - init_time) / 10000);  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,PhyFFT,The following statement contains a magic number: if (nflag == 0) {  	/* calculate and print inverse FFT */fft ();  	output ();  }  else {  	/* calculate and print forward FFT */float[] s = new float[c.Length];  	for (int k = 0; k < K; k++) {  		for (int z = 0; z < c.Length; z += 2) {  			c [z] = 0;  			//initialize c  			c [z + 1] = 0;  			//initialize c  		}  		//this.input = new float[input.length];  		// System.out.println(" u : " +  u);  		for (int j = 0; j < L; j++) {  			//2/*K*/' 256/*L*/' 128/*D*/  			if (k == 0) {  				c [j] = input [(j)];  				// System.out.println("j: " + j + "\t u: "+ c[j]);  			}  			else if (k == 1) {  				c [j] = input [(j + D)];  				// System.out.println("j: " + (j + (K-1)*D) + "\t u: "+ c[j]);  			}  			else {  				c [j] = input [(j + (K - 1) * D)];  				// System.out.println("j: " + (j + (K-1)*D) + "\t u: "+ c[j]);  			}  		}  		if (Nflag == 0) {  			fft ();  			output ();  		}  		if (plotPower) {  			for (int j = 0; j < L; j++) {  				s [j] += c [j] * c [j];  			}  		}  		else {  			for (int j = 0; j < L; j++) {  				s [j] += c [j];  			}  		}  		// System.out.println();  	}  	if (Nflag > 0) {  		for (int z = 0; z < c.Length; z++) {  			c [z] = 0;  			//initialize c  		}  		if (plotPower) {  			for (int j = 0; j < L; j++) {  				if (s [j] != 0) {  					c [j] = (float)Math.Sqrt (s [j]) / nflag;  				}  			}  		}  		else {  			for (int j = 0; j < L; j++) {  				if (s [j] != 0) {  					c [j] = s [j] / nflag;  				}  			}  		}  		fft ();  		output ();  	}  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,PhyFFT,The following statement contains a magic number: for (int k = 0; k < K; k++) {  	for (int z = 0; z < c.Length; z += 2) {  		c [z] = 0;  		//initialize c  		c [z + 1] = 0;  		//initialize c  	}  	//this.input = new float[input.length];  	// System.out.println(" u : " +  u);  	for (int j = 0; j < L; j++) {  		//2/*K*/' 256/*L*/' 128/*D*/  		if (k == 0) {  			c [j] = input [(j)];  			// System.out.println("j: " + j + "\t u: "+ c[j]);  		}  		else if (k == 1) {  			c [j] = input [(j + D)];  			// System.out.println("j: " + (j + (K-1)*D) + "\t u: "+ c[j]);  		}  		else {  			c [j] = input [(j + (K - 1) * D)];  			// System.out.println("j: " + (j + (K-1)*D) + "\t u: "+ c[j]);  		}  	}  	if (Nflag == 0) {  		fft ();  		output ();  	}  	if (plotPower) {  		for (int j = 0; j < L; j++) {  			s [j] += c [j] * c [j];  		}  	}  	else {  		for (int j = 0; j < L; j++) {  			s [j] += c [j];  		}  	}  	// System.out.println();  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,PhyFFT,The following statement contains a magic number: for (int z = 0; z < c.Length; z += 2) {  	c [z] = 0;  	//initialize c  	c [z + 1] = 0;  	//initialize c  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,PhyFFT,The following statement contains a magic number: z += 2
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,Input,The following statement contains a magic number: c = new float[m + 2];  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,fft,The following statement contains a magic number: norm = (float)Math.Sqrt (2.0 / (wsum * n));  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,fft,The following statement contains a magic number: FrequencyDomain.realft (pack' m / 2' 1);  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,output,The following statement contains a magic number: for (i = 0; i <= m; i += 2 * decimation) {  	int j;  	float pow;  	//if (fflag==1)  	///////////////////////////              /// Console.Write(i * fstep + "\t");  	frequency [i] = i * fstep;  	//	if (cflag==1){  	//            try{  	//                //System.out.println( c[i]+" \t"+c[i+1]);  	//            }catch(Exception ex){  	//                System.out.println(ex.getMessage());  	//            }  	//        }  	//	else {  	for (j = 0' pow = 0.0F; j < 2 * smooth; j += 2) {  		try {  			pow += (c [i + j] * c [i + j] + c [i + j + 1] * c [i + j + 1]) * norm * norm;  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	pow /= smooth / decimation;  	if (plotPower) {  		///////////////////////                   Console.WriteLine(pow / (freq / 2));  		power [i] = pow / (freq / 2);  	}  	else {  		///////////////////////                      Console.WriteLine(Math.Sqrt(pow) / (freq / 2) + "\t");  		power [i] = (float)Math.Sqrt (pow) / (freq / 2F);  		Protocol.fftPowerPairList.Add (frequency [i]' power [i]);  	}  	//if (false){  	//      try{  	//          //System.out.print( Math.atan2(c[i+1]' c[i])+"\t");  	//          phase[i] = Math.Atan2(c[i+1]' c[i]);  	//      }catch(Exception ex){  	//          Console.WriteLine(ex.Message);  	//      }  	//  }  	//System.out.println();  	//}  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,output,The following statement contains a magic number: for (i = 0; i <= m; i += 2 * decimation) {  	int j;  	float pow;  	//if (fflag==1)  	///////////////////////////              /// Console.Write(i * fstep + "\t");  	frequency [i] = i * fstep;  	//	if (cflag==1){  	//            try{  	//                //System.out.println( c[i]+" \t"+c[i+1]);  	//            }catch(Exception ex){  	//                System.out.println(ex.getMessage());  	//            }  	//        }  	//	else {  	for (j = 0' pow = 0.0F; j < 2 * smooth; j += 2) {  		try {  			pow += (c [i + j] * c [i + j] + c [i + j + 1] * c [i + j + 1]) * norm * norm;  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	pow /= smooth / decimation;  	if (plotPower) {  		///////////////////////                   Console.WriteLine(pow / (freq / 2));  		power [i] = pow / (freq / 2);  	}  	else {  		///////////////////////                      Console.WriteLine(Math.Sqrt(pow) / (freq / 2) + "\t");  		power [i] = (float)Math.Sqrt (pow) / (freq / 2F);  		Protocol.fftPowerPairList.Add (frequency [i]' power [i]);  	}  	//if (false){  	//      try{  	//          //System.out.print( Math.atan2(c[i+1]' c[i])+"\t");  	//          phase[i] = Math.Atan2(c[i+1]' c[i]);  	//      }catch(Exception ex){  	//          Console.WriteLine(ex.Message);  	//      }  	//  }  	//System.out.println();  	//}  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,output,The following statement contains a magic number: for (i = 0; i <= m; i += 2 * decimation) {  	int j;  	float pow;  	//if (fflag==1)  	///////////////////////////              /// Console.Write(i * fstep + "\t");  	frequency [i] = i * fstep;  	//	if (cflag==1){  	//            try{  	//                //System.out.println( c[i]+" \t"+c[i+1]);  	//            }catch(Exception ex){  	//                System.out.println(ex.getMessage());  	//            }  	//        }  	//	else {  	for (j = 0' pow = 0.0F; j < 2 * smooth; j += 2) {  		try {  			pow += (c [i + j] * c [i + j] + c [i + j + 1] * c [i + j + 1]) * norm * norm;  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	pow /= smooth / decimation;  	if (plotPower) {  		///////////////////////                   Console.WriteLine(pow / (freq / 2));  		power [i] = pow / (freq / 2);  	}  	else {  		///////////////////////                      Console.WriteLine(Math.Sqrt(pow) / (freq / 2) + "\t");  		power [i] = (float)Math.Sqrt (pow) / (freq / 2F);  		Protocol.fftPowerPairList.Add (frequency [i]' power [i]);  	}  	//if (false){  	//      try{  	//          //System.out.print( Math.atan2(c[i+1]' c[i])+"\t");  	//          phase[i] = Math.Atan2(c[i+1]' c[i]);  	//      }catch(Exception ex){  	//          Console.WriteLine(ex.Message);  	//      }  	//  }  	//System.out.println();  	//}  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,output,The following statement contains a magic number: for (i = 0; i <= m; i += 2 * decimation) {  	int j;  	float pow;  	//if (fflag==1)  	///////////////////////////              /// Console.Write(i * fstep + "\t");  	frequency [i] = i * fstep;  	//	if (cflag==1){  	//            try{  	//                //System.out.println( c[i]+" \t"+c[i+1]);  	//            }catch(Exception ex){  	//                System.out.println(ex.getMessage());  	//            }  	//        }  	//	else {  	for (j = 0' pow = 0.0F; j < 2 * smooth; j += 2) {  		try {  			pow += (c [i + j] * c [i + j] + c [i + j + 1] * c [i + j + 1]) * norm * norm;  		}  		catch (Exception ex) {  			Console.WriteLine (ex.Message);  		}  	}  	pow /= smooth / decimation;  	if (plotPower) {  		///////////////////////                   Console.WriteLine(pow / (freq / 2));  		power [i] = pow / (freq / 2);  	}  	else {  		///////////////////////                      Console.WriteLine(Math.Sqrt(pow) / (freq / 2) + "\t");  		power [i] = (float)Math.Sqrt (pow) / (freq / 2F);  		Protocol.fftPowerPairList.Add (frequency [i]' power [i]);  	}  	//if (false){  	//      try{  	//          //System.out.print( Math.atan2(c[i+1]' c[i])+"\t");  	//          phase[i] = Math.Atan2(c[i+1]' c[i]);  	//      }catch(Exception ex){  	//          Console.WriteLine(ex.Message);  	//      }  	//  }  	//System.out.println();  	//}  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,output,The following statement contains a magic number: i += 2 * decimation
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,output,The following statement contains a magic number: for (j = 0' pow = 0.0F; j < 2 * smooth; j += 2) {  	try {  		pow += (c [i + j] * c [i + j] + c [i + j + 1] * c [i + j + 1]) * norm * norm;  	}  	catch (Exception ex) {  		Console.WriteLine (ex.Message);  	}  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,output,The following statement contains a magic number: for (j = 0' pow = 0.0F; j < 2 * smooth; j += 2) {  	try {  		pow += (c [i + j] * c [i + j] + c [i + j + 1] * c [i + j + 1]) * norm * norm;  	}  	catch (Exception ex) {  		Console.WriteLine (ex.Message);  	}  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,output,The following statement contains a magic number: j += 2
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,output,The following statement contains a magic number: if (plotPower) {  	///////////////////////                   Console.WriteLine(pow / (freq / 2));  	power [i] = pow / (freq / 2);  }  else {  	///////////////////////                      Console.WriteLine(Math.Sqrt(pow) / (freq / 2) + "\t");  	power [i] = (float)Math.Sqrt (pow) / (freq / 2F);  	Protocol.fftPowerPairList.Add (frequency [i]' power [i]);  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,output,The following statement contains a magic number: power [i] = pow / (freq / 2);  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,drawPowerCoerence,The following statement contains a magic number: for (int i = 0; i < xx.Length; i++) {  	if (xx [i] > (xx [indexXX] - integratedWindow / 2) && xx [i] < (xx [indexXX] + integratedWindow / 2)) {  		peakPower += yy [i];  	}  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,drawPowerCoerence,The following statement contains a magic number: for (int i = 0; i < xx.Length; i++) {  	if (xx [i] > (xx [indexXX] - integratedWindow / 2) && xx [i] < (xx [indexXX] + integratedWindow / 2)) {  		peakPower += yy [i];  	}  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,drawPowerCoerence,The following statement contains a magic number: if (xx [i] > (xx [indexXX] - integratedWindow / 2) && xx [i] < (xx [indexXX] + integratedWindow / 2)) {  	peakPower += yy [i];  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,drawPowerCoerence,The following statement contains a magic number: if (xx [i] > (xx [indexXX] - integratedWindow / 2) && xx [i] < (xx [indexXX] + integratedWindow / 2)) {  	peakPower += yy [i];  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,drawPowerCoerence,The following statement contains a magic number: if ((totalPower - peakPower) != 0) {  	//  System.out.println("m = " + peakPower/(totalPower-peakPower));  	return (float)Math.Pow (peakPower / (totalPower - peakPower)' 2);  }  else {  	//System.out.println(0);  	return 0;  }  
Magic Number,Koan,PhyFFT,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\PhyFFT.cs,drawPowerCoerence,The following statement contains a magic number: return (float)Math.Pow (peakPower / (totalPower - peakPower)' 2);  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,var,The following statement contains a magic number: foreach (float f in a) {  	sum += (float)Math.Pow ((double)(f - avg)' (double)2);  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,var,The following statement contains a magic number: sum += (float)Math.Pow ((double)(f - avg)' (double)2);  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleLinearRegression,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	sumXY += x [i] * y [i];  	sumX2 += (float)Math.Pow (x [i]' 2);  	sumY2 += (float)Math.Pow (y [i]' 2);  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleLinearRegression,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	sumXY += x [i] * y [i];  	sumX2 += (float)Math.Pow (x [i]' 2);  	sumY2 += (float)Math.Pow (y [i]' 2);  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleLinearRegression,The following statement contains a magic number: sumX2 += (float)Math.Pow (x [i]' 2);  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleLinearRegression,The following statement contains a magic number: sumY2 += (float)Math.Pow (y [i]' 2);  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleLinearRegression,The following statement contains a magic number: try {  	result [0] = (n * sumXY - sumX * sumY) / (n * sumX2 - (float)Math.Pow (sumX' 2));  	//result[1] = (sumY-result[0]*sumX)/n;  	//result[2] = ( n*sumXY-sumX*sumY )/( (float)Math.sqrt( (n*sumX2-(float)Math.pow(sumX' 2))*(n*sumY2-Math.pow(sumY'2)) ) );  }  catch (Exception) {  	return new float[] {  		0f'  		0f'  		0f  	};  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleLinearRegression,The following statement contains a magic number: result [0] = (n * sumXY - sumX * sumY) / (n * sumX2 - (float)Math.Pow (sumX' 2));  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,solveTridiag,The following statement contains a magic number: for (i = 2; i <= n; i++) {  	sub [i] = sub [i] / diag [i - 1];  	diag [i] = diag [i] - sub [i] * sup [i - 1];  	b [i] = b [i] - sub [i] * b [i - 1];  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,solveTridiag,The following statement contains a magic number: i = 2
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: for (int i = 1; i <= np - 2; i++) {  	diag [i] = (h [i] + h [i + 1]) / 3;  	sup [i] = h [i + 1] / 6;  	sub [i] = h [i] / 6;  	a [i] = (d [i + 1] - d [i]) / h [i + 1] - (d [i] - d [i - 1]) / h [i];  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: for (int i = 1; i <= np - 2; i++) {  	diag [i] = (h [i] + h [i + 1]) / 3;  	sup [i] = h [i + 1] / 6;  	sub [i] = h [i] / 6;  	a [i] = (d [i + 1] - d [i]) / h [i + 1] - (d [i] - d [i - 1]) / h [i];  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: for (int i = 1; i <= np - 2; i++) {  	diag [i] = (h [i] + h [i + 1]) / 3;  	sup [i] = h [i + 1] / 6;  	sub [i] = h [i] / 6;  	a [i] = (d [i + 1] - d [i]) / h [i + 1] - (d [i] - d [i - 1]) / h [i];  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: for (int i = 1; i <= np - 2; i++) {  	diag [i] = (h [i] + h [i + 1]) / 3;  	sup [i] = h [i + 1] / 6;  	sub [i] = h [i] / 6;  	a [i] = (d [i + 1] - d [i]) / h [i + 1] - (d [i] - d [i - 1]) / h [i];  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: diag [i] = (h [i] + h [i + 1]) / 3;  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: sup [i] = h [i + 1] / 6;  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: sub [i] = h [i] / 6;  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: solveTridiag (sub' diag' sup' a' np - 2);  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: for (int i = 1; i <= np - 1; i++) {  	// loop over intervals between nodes  	for (int j = 1; j <= precision; j++) {  		t1 = (h [i] * j) / precision;  		t2 = h [i] - t1;  		y = ((-a [i - 1] / 6 * (t2 + h [i]) * t1 + d [i - 1]) * t2 + (-a [i] / 6 * (t1 + h [i]) * t2 + d [i]) * t1) / h [i];  		t = x [i - 1] + t1;  		interpol [0' count] = t;  		interpol [1' count] = y;  		count++;  	}  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: for (int i = 1; i <= np - 1; i++) {  	// loop over intervals between nodes  	for (int j = 1; j <= precision; j++) {  		t1 = (h [i] * j) / precision;  		t2 = h [i] - t1;  		y = ((-a [i - 1] / 6 * (t2 + h [i]) * t1 + d [i - 1]) * t2 + (-a [i] / 6 * (t1 + h [i]) * t2 + d [i]) * t1) / h [i];  		t = x [i - 1] + t1;  		interpol [0' count] = t;  		interpol [1' count] = y;  		count++;  	}  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: for (int j = 1; j <= precision; j++) {  	t1 = (h [i] * j) / precision;  	t2 = h [i] - t1;  	y = ((-a [i - 1] / 6 * (t2 + h [i]) * t1 + d [i - 1]) * t2 + (-a [i] / 6 * (t1 + h [i]) * t2 + d [i]) * t1) / h [i];  	t = x [i - 1] + t1;  	interpol [0' count] = t;  	interpol [1' count] = y;  	count++;  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: for (int j = 1; j <= precision; j++) {  	t1 = (h [i] * j) / precision;  	t2 = h [i] - t1;  	y = ((-a [i - 1] / 6 * (t2 + h [i]) * t1 + d [i - 1]) * t2 + (-a [i] / 6 * (t1 + h [i]) * t2 + d [i]) * t1) / h [i];  	t = x [i - 1] + t1;  	interpol [0' count] = t;  	interpol [1' count] = y;  	count++;  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: y = ((-a [i - 1] / 6 * (t2 + h [i]) * t1 + d [i - 1]) * t2 + (-a [i] / 6 * (t1 + h [i]) * t2 + d [i]) * t1) / h [i];  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,resampleBicubic,The following statement contains a magic number: y = ((-a [i - 1] / 6 * (t2 + h [i]) * t1 + d [i - 1]) * t2 + (-a [i] / 6 * (t1 + h [i]) * t2 + d [i]) * t1) / h [i];  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,detrend,The following statement contains a magic number: for (i = 0; i < n; i++) {  	t = (i - n / 2 + 0.5f);  	tsqsum += t * t;  	b += t * c [i];  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,detrend,The following statement contains a magic number: t = (i - n / 2 + 0.5f);  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,detrend,The following statement contains a magic number: if (b < -0.04 || b > 0.04) {  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,detrend,The following statement contains a magic number: if (b < -0.04 || b > 0.04) {  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,detrend,The following statement contains a magic number: for (i = 0; i < n; i++) {  	t = (i - n / 2 + 0.5d);  	tsqsum += t * t;  	b += t * c [i];  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,detrend,The following statement contains a magic number: t = (i - n / 2 + 0.5d);  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,detrend,The following statement contains a magic number: if (b < -0.04 || b > 0.04) {  }  
Magic Number,Koan,Statistics,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Statistics.cs,detrend,The following statement contains a magic number: if (b < -0.04 || b > 0.04) {  }  
Magic Number,Koan,Windows,C:\repos\schmaedech_koan\Koan\Koan\Koan\Contas\Windows.cs,win_blackman_harris,The following statement contains a magic number: w = (0.35875F - 0.48829F * (float)Math.Cos (a * j) + 0.14128F * (float)Math.Cos (2 * a * j) - 0.01168F * (float)Math.Cos (3F * a * j));  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,startListening,The following statement contains a magic number: try {  	this.port = port;  	m_mainSocket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	IPEndPoint ipLocal = new IPEndPoint (IPAddress.Any' port);  	m_mainSocket.Bind (ipLocal);  	m_mainSocket.Listen (1000);  	m_mainSocket.BeginAccept (new AsyncCallback (OnClientConnect)' null);  	IsConnected = true;  	Console.WriteLine ("KoanGear is listening...");  }  catch (SocketException se) {  	IsConnected = false;  	Console.WriteLine (se.Message);  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,startListening,The following statement contains a magic number: m_mainSocket.Listen (1000);  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: try {  	int bytesRead = handler.EndReceive (ar);  	if (bytesRead > 0) {  		// There might be more data' so store the data received so far.  		state.sb.Append (Encoding.UTF8.GetString (state.buffer' 0' bytesRead));  		content = state.sb.ToString ();  		if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  			String strh = String.Format ("Koan Client # {0} data: "' id);  			String strRR = content.Replace ("\n\0"' "");  			strh += content.Replace ("\n\0"' "");  			Console.WriteLine (strRR);  			if (strRR.StartsWith ("PROTOCOL")) {  				sendMessage ("RR|CO|RAN\n");  			}  			if (strRR.StartsWith ("RR")) {  				String rr = Protocol.Heartrate.ToString ();  				sendMessage (rr + "\n");  			}  			if (strRR.StartsWith ("CO")) {  				String co = Protocol.Coherence.ToString ();  				sendMessage (co + "\n");  			}  			if (strRR.StartsWith ("RAN")) {  				float f = 50;  				float a = 200;  				double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  				sendMessage (Convert.ToInt32 (y) + "\n");  				Console.WriteLine (Convert.ToInt32 (y) + "\n");  			}  			Console.WriteLine (strh);  			state.sb.Length = 0;  			//Send the incoming string to all current connections (remove if you don't want);  			//////////////////////////////////////////////////////////////////////  			Object objData = content.Replace ("\0"' "");  			byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  			for (int i = 0; i < m_workerSocket.Count; i++) {  				if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  					m_workerSocket [i].socket.Send (byData);  				}  			}  			/////////////////////////////////////////////////////////////////  		}  		handler.BeginReceive (state.buffer' 0' StateObject.BufferSize' 0' new AsyncCallback (this.ReadCallback)' state);  	}  	else {  		closeSocket (state.id);  	}  }  catch (System.Net.Sockets.SocketException es) {  	closeSocket (state.id);  	if (es.ErrorCode != 64) {  		Console.WriteLine (string.Format ("Socket Exception: {0}' {1}."' es.ErrorCode' es.ToString ()));  	}  }  catch (Exception e) {  	closeSocket (state.id);  	if (e.GetType ().FullName != "System.ObjectDisposedException") {  		Console.WriteLine ("Exception: {0}."' e.ToString ());  	}  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: try {  	int bytesRead = handler.EndReceive (ar);  	if (bytesRead > 0) {  		// There might be more data' so store the data received so far.  		state.sb.Append (Encoding.UTF8.GetString (state.buffer' 0' bytesRead));  		content = state.sb.ToString ();  		if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  			String strh = String.Format ("Koan Client # {0} data: "' id);  			String strRR = content.Replace ("\n\0"' "");  			strh += content.Replace ("\n\0"' "");  			Console.WriteLine (strRR);  			if (strRR.StartsWith ("PROTOCOL")) {  				sendMessage ("RR|CO|RAN\n");  			}  			if (strRR.StartsWith ("RR")) {  				String rr = Protocol.Heartrate.ToString ();  				sendMessage (rr + "\n");  			}  			if (strRR.StartsWith ("CO")) {  				String co = Protocol.Coherence.ToString ();  				sendMessage (co + "\n");  			}  			if (strRR.StartsWith ("RAN")) {  				float f = 50;  				float a = 200;  				double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  				sendMessage (Convert.ToInt32 (y) + "\n");  				Console.WriteLine (Convert.ToInt32 (y) + "\n");  			}  			Console.WriteLine (strh);  			state.sb.Length = 0;  			//Send the incoming string to all current connections (remove if you don't want);  			//////////////////////////////////////////////////////////////////////  			Object objData = content.Replace ("\0"' "");  			byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  			for (int i = 0; i < m_workerSocket.Count; i++) {  				if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  					m_workerSocket [i].socket.Send (byData);  				}  			}  			/////////////////////////////////////////////////////////////////  		}  		handler.BeginReceive (state.buffer' 0' StateObject.BufferSize' 0' new AsyncCallback (this.ReadCallback)' state);  	}  	else {  		closeSocket (state.id);  	}  }  catch (System.Net.Sockets.SocketException es) {  	closeSocket (state.id);  	if (es.ErrorCode != 64) {  		Console.WriteLine (string.Format ("Socket Exception: {0}' {1}."' es.ErrorCode' es.ToString ()));  	}  }  catch (Exception e) {  	closeSocket (state.id);  	if (e.GetType ().FullName != "System.ObjectDisposedException") {  		Console.WriteLine ("Exception: {0}."' e.ToString ());  	}  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: try {  	int bytesRead = handler.EndReceive (ar);  	if (bytesRead > 0) {  		// There might be more data' so store the data received so far.  		state.sb.Append (Encoding.UTF8.GetString (state.buffer' 0' bytesRead));  		content = state.sb.ToString ();  		if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  			String strh = String.Format ("Koan Client # {0} data: "' id);  			String strRR = content.Replace ("\n\0"' "");  			strh += content.Replace ("\n\0"' "");  			Console.WriteLine (strRR);  			if (strRR.StartsWith ("PROTOCOL")) {  				sendMessage ("RR|CO|RAN\n");  			}  			if (strRR.StartsWith ("RR")) {  				String rr = Protocol.Heartrate.ToString ();  				sendMessage (rr + "\n");  			}  			if (strRR.StartsWith ("CO")) {  				String co = Protocol.Coherence.ToString ();  				sendMessage (co + "\n");  			}  			if (strRR.StartsWith ("RAN")) {  				float f = 50;  				float a = 200;  				double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  				sendMessage (Convert.ToInt32 (y) + "\n");  				Console.WriteLine (Convert.ToInt32 (y) + "\n");  			}  			Console.WriteLine (strh);  			state.sb.Length = 0;  			//Send the incoming string to all current connections (remove if you don't want);  			//////////////////////////////////////////////////////////////////////  			Object objData = content.Replace ("\0"' "");  			byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  			for (int i = 0; i < m_workerSocket.Count; i++) {  				if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  					m_workerSocket [i].socket.Send (byData);  				}  			}  			/////////////////////////////////////////////////////////////////  		}  		handler.BeginReceive (state.buffer' 0' StateObject.BufferSize' 0' new AsyncCallback (this.ReadCallback)' state);  	}  	else {  		closeSocket (state.id);  	}  }  catch (System.Net.Sockets.SocketException es) {  	closeSocket (state.id);  	if (es.ErrorCode != 64) {  		Console.WriteLine (string.Format ("Socket Exception: {0}' {1}."' es.ErrorCode' es.ToString ()));  	}  }  catch (Exception e) {  	closeSocket (state.id);  	if (e.GetType ().FullName != "System.ObjectDisposedException") {  		Console.WriteLine ("Exception: {0}."' e.ToString ());  	}  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: try {  	int bytesRead = handler.EndReceive (ar);  	if (bytesRead > 0) {  		// There might be more data' so store the data received so far.  		state.sb.Append (Encoding.UTF8.GetString (state.buffer' 0' bytesRead));  		content = state.sb.ToString ();  		if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  			String strh = String.Format ("Koan Client # {0} data: "' id);  			String strRR = content.Replace ("\n\0"' "");  			strh += content.Replace ("\n\0"' "");  			Console.WriteLine (strRR);  			if (strRR.StartsWith ("PROTOCOL")) {  				sendMessage ("RR|CO|RAN\n");  			}  			if (strRR.StartsWith ("RR")) {  				String rr = Protocol.Heartrate.ToString ();  				sendMessage (rr + "\n");  			}  			if (strRR.StartsWith ("CO")) {  				String co = Protocol.Coherence.ToString ();  				sendMessage (co + "\n");  			}  			if (strRR.StartsWith ("RAN")) {  				float f = 50;  				float a = 200;  				double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  				sendMessage (Convert.ToInt32 (y) + "\n");  				Console.WriteLine (Convert.ToInt32 (y) + "\n");  			}  			Console.WriteLine (strh);  			state.sb.Length = 0;  			//Send the incoming string to all current connections (remove if you don't want);  			//////////////////////////////////////////////////////////////////////  			Object objData = content.Replace ("\0"' "");  			byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  			for (int i = 0; i < m_workerSocket.Count; i++) {  				if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  					m_workerSocket [i].socket.Send (byData);  				}  			}  			/////////////////////////////////////////////////////////////////  		}  		handler.BeginReceive (state.buffer' 0' StateObject.BufferSize' 0' new AsyncCallback (this.ReadCallback)' state);  	}  	else {  		closeSocket (state.id);  	}  }  catch (System.Net.Sockets.SocketException es) {  	closeSocket (state.id);  	if (es.ErrorCode != 64) {  		Console.WriteLine (string.Format ("Socket Exception: {0}' {1}."' es.ErrorCode' es.ToString ()));  	}  }  catch (Exception e) {  	closeSocket (state.id);  	if (e.GetType ().FullName != "System.ObjectDisposedException") {  		Console.WriteLine ("Exception: {0}."' e.ToString ());  	}  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: try {  	int bytesRead = handler.EndReceive (ar);  	if (bytesRead > 0) {  		// There might be more data' so store the data received so far.  		state.sb.Append (Encoding.UTF8.GetString (state.buffer' 0' bytesRead));  		content = state.sb.ToString ();  		if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  			String strh = String.Format ("Koan Client # {0} data: "' id);  			String strRR = content.Replace ("\n\0"' "");  			strh += content.Replace ("\n\0"' "");  			Console.WriteLine (strRR);  			if (strRR.StartsWith ("PROTOCOL")) {  				sendMessage ("RR|CO|RAN\n");  			}  			if (strRR.StartsWith ("RR")) {  				String rr = Protocol.Heartrate.ToString ();  				sendMessage (rr + "\n");  			}  			if (strRR.StartsWith ("CO")) {  				String co = Protocol.Coherence.ToString ();  				sendMessage (co + "\n");  			}  			if (strRR.StartsWith ("RAN")) {  				float f = 50;  				float a = 200;  				double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  				sendMessage (Convert.ToInt32 (y) + "\n");  				Console.WriteLine (Convert.ToInt32 (y) + "\n");  			}  			Console.WriteLine (strh);  			state.sb.Length = 0;  			//Send the incoming string to all current connections (remove if you don't want);  			//////////////////////////////////////////////////////////////////////  			Object objData = content.Replace ("\0"' "");  			byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  			for (int i = 0; i < m_workerSocket.Count; i++) {  				if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  					m_workerSocket [i].socket.Send (byData);  				}  			}  			/////////////////////////////////////////////////////////////////  		}  		handler.BeginReceive (state.buffer' 0' StateObject.BufferSize' 0' new AsyncCallback (this.ReadCallback)' state);  	}  	else {  		closeSocket (state.id);  	}  }  catch (System.Net.Sockets.SocketException es) {  	closeSocket (state.id);  	if (es.ErrorCode != 64) {  		Console.WriteLine (string.Format ("Socket Exception: {0}' {1}."' es.ErrorCode' es.ToString ()));  	}  }  catch (Exception e) {  	closeSocket (state.id);  	if (e.GetType ().FullName != "System.ObjectDisposedException") {  		Console.WriteLine ("Exception: {0}."' e.ToString ());  	}  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if (bytesRead > 0) {  	// There might be more data' so store the data received so far.  	state.sb.Append (Encoding.UTF8.GetString (state.buffer' 0' bytesRead));  	content = state.sb.ToString ();  	if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  		String strh = String.Format ("Koan Client # {0} data: "' id);  		String strRR = content.Replace ("\n\0"' "");  		strh += content.Replace ("\n\0"' "");  		Console.WriteLine (strRR);  		if (strRR.StartsWith ("PROTOCOL")) {  			sendMessage ("RR|CO|RAN\n");  		}  		if (strRR.StartsWith ("RR")) {  			String rr = Protocol.Heartrate.ToString ();  			sendMessage (rr + "\n");  		}  		if (strRR.StartsWith ("CO")) {  			String co = Protocol.Coherence.ToString ();  			sendMessage (co + "\n");  		}  		if (strRR.StartsWith ("RAN")) {  			float f = 50;  			float a = 200;  			double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  			sendMessage (Convert.ToInt32 (y) + "\n");  			Console.WriteLine (Convert.ToInt32 (y) + "\n");  		}  		Console.WriteLine (strh);  		state.sb.Length = 0;  		//Send the incoming string to all current connections (remove if you don't want);  		//////////////////////////////////////////////////////////////////////  		Object objData = content.Replace ("\0"' "");  		byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  		for (int i = 0; i < m_workerSocket.Count; i++) {  			if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  				m_workerSocket [i].socket.Send (byData);  			}  		}  		/////////////////////////////////////////////////////////////////  	}  	handler.BeginReceive (state.buffer' 0' StateObject.BufferSize' 0' new AsyncCallback (this.ReadCallback)' state);  }  else {  	closeSocket (state.id);  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if (bytesRead > 0) {  	// There might be more data' so store the data received so far.  	state.sb.Append (Encoding.UTF8.GetString (state.buffer' 0' bytesRead));  	content = state.sb.ToString ();  	if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  		String strh = String.Format ("Koan Client # {0} data: "' id);  		String strRR = content.Replace ("\n\0"' "");  		strh += content.Replace ("\n\0"' "");  		Console.WriteLine (strRR);  		if (strRR.StartsWith ("PROTOCOL")) {  			sendMessage ("RR|CO|RAN\n");  		}  		if (strRR.StartsWith ("RR")) {  			String rr = Protocol.Heartrate.ToString ();  			sendMessage (rr + "\n");  		}  		if (strRR.StartsWith ("CO")) {  			String co = Protocol.Coherence.ToString ();  			sendMessage (co + "\n");  		}  		if (strRR.StartsWith ("RAN")) {  			float f = 50;  			float a = 200;  			double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  			sendMessage (Convert.ToInt32 (y) + "\n");  			Console.WriteLine (Convert.ToInt32 (y) + "\n");  		}  		Console.WriteLine (strh);  		state.sb.Length = 0;  		//Send the incoming string to all current connections (remove if you don't want);  		//////////////////////////////////////////////////////////////////////  		Object objData = content.Replace ("\0"' "");  		byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  		for (int i = 0; i < m_workerSocket.Count; i++) {  			if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  				m_workerSocket [i].socket.Send (byData);  			}  		}  		/////////////////////////////////////////////////////////////////  	}  	handler.BeginReceive (state.buffer' 0' StateObject.BufferSize' 0' new AsyncCallback (this.ReadCallback)' state);  }  else {  	closeSocket (state.id);  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if (bytesRead > 0) {  	// There might be more data' so store the data received so far.  	state.sb.Append (Encoding.UTF8.GetString (state.buffer' 0' bytesRead));  	content = state.sb.ToString ();  	if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  		String strh = String.Format ("Koan Client # {0} data: "' id);  		String strRR = content.Replace ("\n\0"' "");  		strh += content.Replace ("\n\0"' "");  		Console.WriteLine (strRR);  		if (strRR.StartsWith ("PROTOCOL")) {  			sendMessage ("RR|CO|RAN\n");  		}  		if (strRR.StartsWith ("RR")) {  			String rr = Protocol.Heartrate.ToString ();  			sendMessage (rr + "\n");  		}  		if (strRR.StartsWith ("CO")) {  			String co = Protocol.Coherence.ToString ();  			sendMessage (co + "\n");  		}  		if (strRR.StartsWith ("RAN")) {  			float f = 50;  			float a = 200;  			double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  			sendMessage (Convert.ToInt32 (y) + "\n");  			Console.WriteLine (Convert.ToInt32 (y) + "\n");  		}  		Console.WriteLine (strh);  		state.sb.Length = 0;  		//Send the incoming string to all current connections (remove if you don't want);  		//////////////////////////////////////////////////////////////////////  		Object objData = content.Replace ("\0"' "");  		byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  		for (int i = 0; i < m_workerSocket.Count; i++) {  			if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  				m_workerSocket [i].socket.Send (byData);  			}  		}  		/////////////////////////////////////////////////////////////////  	}  	handler.BeginReceive (state.buffer' 0' StateObject.BufferSize' 0' new AsyncCallback (this.ReadCallback)' state);  }  else {  	closeSocket (state.id);  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if (bytesRead > 0) {  	// There might be more data' so store the data received so far.  	state.sb.Append (Encoding.UTF8.GetString (state.buffer' 0' bytesRead));  	content = state.sb.ToString ();  	if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  		String strh = String.Format ("Koan Client # {0} data: "' id);  		String strRR = content.Replace ("\n\0"' "");  		strh += content.Replace ("\n\0"' "");  		Console.WriteLine (strRR);  		if (strRR.StartsWith ("PROTOCOL")) {  			sendMessage ("RR|CO|RAN\n");  		}  		if (strRR.StartsWith ("RR")) {  			String rr = Protocol.Heartrate.ToString ();  			sendMessage (rr + "\n");  		}  		if (strRR.StartsWith ("CO")) {  			String co = Protocol.Coherence.ToString ();  			sendMessage (co + "\n");  		}  		if (strRR.StartsWith ("RAN")) {  			float f = 50;  			float a = 200;  			double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  			sendMessage (Convert.ToInt32 (y) + "\n");  			Console.WriteLine (Convert.ToInt32 (y) + "\n");  		}  		Console.WriteLine (strh);  		state.sb.Length = 0;  		//Send the incoming string to all current connections (remove if you don't want);  		//////////////////////////////////////////////////////////////////////  		Object objData = content.Replace ("\0"' "");  		byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  		for (int i = 0; i < m_workerSocket.Count; i++) {  			if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  				m_workerSocket [i].socket.Send (byData);  			}  		}  		/////////////////////////////////////////////////////////////////  	}  	handler.BeginReceive (state.buffer' 0' StateObject.BufferSize' 0' new AsyncCallback (this.ReadCallback)' state);  }  else {  	closeSocket (state.id);  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  	String strh = String.Format ("Koan Client # {0} data: "' id);  	String strRR = content.Replace ("\n\0"' "");  	strh += content.Replace ("\n\0"' "");  	Console.WriteLine (strRR);  	if (strRR.StartsWith ("PROTOCOL")) {  		sendMessage ("RR|CO|RAN\n");  	}  	if (strRR.StartsWith ("RR")) {  		String rr = Protocol.Heartrate.ToString ();  		sendMessage (rr + "\n");  	}  	if (strRR.StartsWith ("CO")) {  		String co = Protocol.Coherence.ToString ();  		sendMessage (co + "\n");  	}  	if (strRR.StartsWith ("RAN")) {  		float f = 50;  		float a = 200;  		double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  		sendMessage (Convert.ToInt32 (y) + "\n");  		Console.WriteLine (Convert.ToInt32 (y) + "\n");  	}  	Console.WriteLine (strh);  	state.sb.Length = 0;  	//Send the incoming string to all current connections (remove if you don't want);  	//////////////////////////////////////////////////////////////////////  	Object objData = content.Replace ("\0"' "");  	byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  	for (int i = 0; i < m_workerSocket.Count; i++) {  		if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  			m_workerSocket [i].socket.Send (byData);  		}  	}  	/////////////////////////////////////////////////////////////////  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  	String strh = String.Format ("Koan Client # {0} data: "' id);  	String strRR = content.Replace ("\n\0"' "");  	strh += content.Replace ("\n\0"' "");  	Console.WriteLine (strRR);  	if (strRR.StartsWith ("PROTOCOL")) {  		sendMessage ("RR|CO|RAN\n");  	}  	if (strRR.StartsWith ("RR")) {  		String rr = Protocol.Heartrate.ToString ();  		sendMessage (rr + "\n");  	}  	if (strRR.StartsWith ("CO")) {  		String co = Protocol.Coherence.ToString ();  		sendMessage (co + "\n");  	}  	if (strRR.StartsWith ("RAN")) {  		float f = 50;  		float a = 200;  		double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  		sendMessage (Convert.ToInt32 (y) + "\n");  		Console.WriteLine (Convert.ToInt32 (y) + "\n");  	}  	Console.WriteLine (strh);  	state.sb.Length = 0;  	//Send the incoming string to all current connections (remove if you don't want);  	//////////////////////////////////////////////////////////////////////  	Object objData = content.Replace ("\0"' "");  	byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  	for (int i = 0; i < m_workerSocket.Count; i++) {  		if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  			m_workerSocket [i].socket.Send (byData);  		}  	}  	/////////////////////////////////////////////////////////////////  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  	String strh = String.Format ("Koan Client # {0} data: "' id);  	String strRR = content.Replace ("\n\0"' "");  	strh += content.Replace ("\n\0"' "");  	Console.WriteLine (strRR);  	if (strRR.StartsWith ("PROTOCOL")) {  		sendMessage ("RR|CO|RAN\n");  	}  	if (strRR.StartsWith ("RR")) {  		String rr = Protocol.Heartrate.ToString ();  		sendMessage (rr + "\n");  	}  	if (strRR.StartsWith ("CO")) {  		String co = Protocol.Coherence.ToString ();  		sendMessage (co + "\n");  	}  	if (strRR.StartsWith ("RAN")) {  		float f = 50;  		float a = 200;  		double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  		sendMessage (Convert.ToInt32 (y) + "\n");  		Console.WriteLine (Convert.ToInt32 (y) + "\n");  	}  	Console.WriteLine (strh);  	state.sb.Length = 0;  	//Send the incoming string to all current connections (remove if you don't want);  	//////////////////////////////////////////////////////////////////////  	Object objData = content.Replace ("\0"' "");  	byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  	for (int i = 0; i < m_workerSocket.Count; i++) {  		if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  			m_workerSocket [i].socket.Send (byData);  		}  	}  	/////////////////////////////////////////////////////////////////  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if ((content.Length > 0) || (content.IndexOf ("") > -1)) {  	String strh = String.Format ("Koan Client # {0} data: "' id);  	String strRR = content.Replace ("\n\0"' "");  	strh += content.Replace ("\n\0"' "");  	Console.WriteLine (strRR);  	if (strRR.StartsWith ("PROTOCOL")) {  		sendMessage ("RR|CO|RAN\n");  	}  	if (strRR.StartsWith ("RR")) {  		String rr = Protocol.Heartrate.ToString ();  		sendMessage (rr + "\n");  	}  	if (strRR.StartsWith ("CO")) {  		String co = Protocol.Coherence.ToString ();  		sendMessage (co + "\n");  	}  	if (strRR.StartsWith ("RAN")) {  		float f = 50;  		float a = 200;  		double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  		sendMessage (Convert.ToInt32 (y) + "\n");  		Console.WriteLine (Convert.ToInt32 (y) + "\n");  	}  	Console.WriteLine (strh);  	state.sb.Length = 0;  	//Send the incoming string to all current connections (remove if you don't want);  	//////////////////////////////////////////////////////////////////////  	Object objData = content.Replace ("\0"' "");  	byte[] byData = System.Text.Encoding.UTF8.GetBytes (objData.ToString () + "\0");  	for (int i = 0; i < m_workerSocket.Count; i++) {  		if ((m_workerSocket [i] != null) && (m_workerSocket [i].socket.Connected) && (m_workerSocket [i].id != state.id)) {  			m_workerSocket [i].socket.Send (byData);  		}  	}  	/////////////////////////////////////////////////////////////////  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if (strRR.StartsWith ("RAN")) {  	float f = 50;  	float a = 200;  	double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  	sendMessage (Convert.ToInt32 (y) + "\n");  	Console.WriteLine (Convert.ToInt32 (y) + "\n");  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if (strRR.StartsWith ("RAN")) {  	float f = 50;  	float a = 200;  	double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  	sendMessage (Convert.ToInt32 (y) + "\n");  	Console.WriteLine (Convert.ToInt32 (y) + "\n");  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if (strRR.StartsWith ("RAN")) {  	float f = 50;  	float a = 200;  	double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  	sendMessage (Convert.ToInt32 (y) + "\n");  	Console.WriteLine (Convert.ToInt32 (y) + "\n");  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if (strRR.StartsWith ("RAN")) {  	float f = 50;  	float a = 200;  	double y = 900 + a * Math.Sin (Protocol.rrlist.Count * ((2 * Math.PI) / f));  	sendMessage (Convert.ToInt32 (y) + "\n");  	Console.WriteLine (Convert.ToInt32 (y) + "\n");  }  
Magic Number,Koan,TCPDriver,C:\repos\schmaedech_koan\Koan\Koan\Koan\NetGear\TCPDriver.cs,ReadCallback,The following statement contains a magic number: if (es.ErrorCode != 64) {  	Console.WriteLine (string.Format ("Socket Exception: {0}' {1}."' es.ErrorCode' es.ToString ()));  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.Fill = new Fill (Color.FromArgb (250' 250' 250)' Color.FromArgb (187' 84' 39)' 90F);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.Fill = new Fill (Color.FromArgb (250' 250' 250)' Color.FromArgb (187' 84' 39)' 90F);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.Fill = new Fill (Color.FromArgb (250' 250' 250)' Color.FromArgb (187' 84' 39)' 90F);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.Fill = new Fill (Color.FromArgb (250' 250' 250)' Color.FromArgb (187' 84' 39)' 90F);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.Fill = new Fill (Color.FromArgb (250' 250' 250)' Color.FromArgb (187' 84' 39)' 90F);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.Fill = new Fill (Color.FromArgb (250' 250' 250)' Color.FromArgb (187' 84' 39)' 90F);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.Title.FontSpec.Size = 16;  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.XAxis.Title.FontSpec.Size = 14;  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.YAxis.Title.FontSpec.Size = 14;  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.Y2Axis.Title.FontSpec.Size = 14;  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.YAxis.Scale.FontSpec.FontColor = Color.FromArgb (95' 150' 95);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.YAxis.Scale.FontSpec.FontColor = Color.FromArgb (95' 150' 95);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.YAxis.Scale.FontSpec.FontColor = Color.FromArgb (95' 150' 95);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.YAxis.Title.FontSpec.FontColor = Color.FromArgb (95' 150' 95);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.YAxis.Title.FontSpec.FontColor = Color.FromArgb (95' 150' 95);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.YAxis.Title.FontSpec.FontColor = Color.FromArgb (95' 150' 95);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.YAxis.Title.FontSpec.Size = 14;  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpRRCO.Y2Axis.Title.FontSpec.Size = 14;  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpFFT.Fill = new Fill (Color.White' Color.FromArgb (95' 150' 95)' 90F);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpFFT.Fill = new Fill (Color.White' Color.FromArgb (95' 150' 95)' 90F);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpFFT.Fill = new Fill (Color.White' Color.FromArgb (95' 150' 95)' 90F);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpFFT.Title.FontSpec.Size = 14;  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpFFT.XAxis.Title.FontSpec.Size = 14;  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpFFT.YAxis.Title.FontSpec.FontColor = Color.FromArgb (51' 51' 51);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpFFT.YAxis.Title.FontSpec.FontColor = Color.FromArgb (51' 51' 51);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpFFT.YAxis.Title.FontSpec.FontColor = Color.FromArgb (51' 51' 51);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpFFT.YAxis.Title.FontSpec.FontColor = Color.FromArgb (51' 51' 51);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpFFT.YAxis.Title.FontSpec.FontColor = Color.FromArgb (51' 51' 51);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpFFT.YAxis.Title.FontSpec.FontColor = Color.FromArgb (51' 51' 51);  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: gpFFT.YAxis.Title.FontSpec.Size = 14;  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: box.Fill = new Fill (Color.FromArgb (100' Color.Blue));  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,InitializeChart,The following statement contains a magic number: box2.Fill = new Fill (Color.FromArgb (100' Color.LightGreen));  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (ChartPlay) {  	double x = (double)Protocol.rrlist.Count;  	if (x < 120) {  		gpRRCO.XAxis.Scale.Min = 0;  		gpRRCO.XAxis.Scale.Max = x + 10;  		zgRRCO.RestoreScale (gpRRCO);  	}  	else {  		gpRRCO.XAxis.Scale.Min = x - 64;  		gpRRCO.XAxis.Scale.Max = x + 10;  	}  	gpFFT.GraphObjList.Remove (box3);  	//peak power  	box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  	// Console.WriteLine(Protocol.PeakFreq);  	box3.Fill = new Fill (Color.FromArgb (150' Color.Red));  	// Use the BehindAxis zorder to draw the highlight beneath the grid lines  	box3.ZOrder = ZOrder.A_InFront;  	// Make sure that the boxObj does not extend outside the chart rect if the chart is zoomed  	box3.IsClippedToChartRect = true;  	// Use a hybrid coordinate system so the X axis always covers the full x range  	// from chart fraction 0.0 to 1.0  	// box3.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	gpFFT.GraphObjList.Add (box3);  	gpFFT.XAxis.Scale.Max = 0.5;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (ChartPlay) {  	double x = (double)Protocol.rrlist.Count;  	if (x < 120) {  		gpRRCO.XAxis.Scale.Min = 0;  		gpRRCO.XAxis.Scale.Max = x + 10;  		zgRRCO.RestoreScale (gpRRCO);  	}  	else {  		gpRRCO.XAxis.Scale.Min = x - 64;  		gpRRCO.XAxis.Scale.Max = x + 10;  	}  	gpFFT.GraphObjList.Remove (box3);  	//peak power  	box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  	// Console.WriteLine(Protocol.PeakFreq);  	box3.Fill = new Fill (Color.FromArgb (150' Color.Red));  	// Use the BehindAxis zorder to draw the highlight beneath the grid lines  	box3.ZOrder = ZOrder.A_InFront;  	// Make sure that the boxObj does not extend outside the chart rect if the chart is zoomed  	box3.IsClippedToChartRect = true;  	// Use a hybrid coordinate system so the X axis always covers the full x range  	// from chart fraction 0.0 to 1.0  	// box3.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	gpFFT.GraphObjList.Add (box3);  	gpFFT.XAxis.Scale.Max = 0.5;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (ChartPlay) {  	double x = (double)Protocol.rrlist.Count;  	if (x < 120) {  		gpRRCO.XAxis.Scale.Min = 0;  		gpRRCO.XAxis.Scale.Max = x + 10;  		zgRRCO.RestoreScale (gpRRCO);  	}  	else {  		gpRRCO.XAxis.Scale.Min = x - 64;  		gpRRCO.XAxis.Scale.Max = x + 10;  	}  	gpFFT.GraphObjList.Remove (box3);  	//peak power  	box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  	// Console.WriteLine(Protocol.PeakFreq);  	box3.Fill = new Fill (Color.FromArgb (150' Color.Red));  	// Use the BehindAxis zorder to draw the highlight beneath the grid lines  	box3.ZOrder = ZOrder.A_InFront;  	// Make sure that the boxObj does not extend outside the chart rect if the chart is zoomed  	box3.IsClippedToChartRect = true;  	// Use a hybrid coordinate system so the X axis always covers the full x range  	// from chart fraction 0.0 to 1.0  	// box3.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	gpFFT.GraphObjList.Add (box3);  	gpFFT.XAxis.Scale.Max = 0.5;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (ChartPlay) {  	double x = (double)Protocol.rrlist.Count;  	if (x < 120) {  		gpRRCO.XAxis.Scale.Min = 0;  		gpRRCO.XAxis.Scale.Max = x + 10;  		zgRRCO.RestoreScale (gpRRCO);  	}  	else {  		gpRRCO.XAxis.Scale.Min = x - 64;  		gpRRCO.XAxis.Scale.Max = x + 10;  	}  	gpFFT.GraphObjList.Remove (box3);  	//peak power  	box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  	// Console.WriteLine(Protocol.PeakFreq);  	box3.Fill = new Fill (Color.FromArgb (150' Color.Red));  	// Use the BehindAxis zorder to draw the highlight beneath the grid lines  	box3.ZOrder = ZOrder.A_InFront;  	// Make sure that the boxObj does not extend outside the chart rect if the chart is zoomed  	box3.IsClippedToChartRect = true;  	// Use a hybrid coordinate system so the X axis always covers the full x range  	// from chart fraction 0.0 to 1.0  	// box3.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	gpFFT.GraphObjList.Add (box3);  	gpFFT.XAxis.Scale.Max = 0.5;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (ChartPlay) {  	double x = (double)Protocol.rrlist.Count;  	if (x < 120) {  		gpRRCO.XAxis.Scale.Min = 0;  		gpRRCO.XAxis.Scale.Max = x + 10;  		zgRRCO.RestoreScale (gpRRCO);  	}  	else {  		gpRRCO.XAxis.Scale.Min = x - 64;  		gpRRCO.XAxis.Scale.Max = x + 10;  	}  	gpFFT.GraphObjList.Remove (box3);  	//peak power  	box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  	// Console.WriteLine(Protocol.PeakFreq);  	box3.Fill = new Fill (Color.FromArgb (150' Color.Red));  	// Use the BehindAxis zorder to draw the highlight beneath the grid lines  	box3.ZOrder = ZOrder.A_InFront;  	// Make sure that the boxObj does not extend outside the chart rect if the chart is zoomed  	box3.IsClippedToChartRect = true;  	// Use a hybrid coordinate system so the X axis always covers the full x range  	// from chart fraction 0.0 to 1.0  	// box3.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	gpFFT.GraphObjList.Add (box3);  	gpFFT.XAxis.Scale.Max = 0.5;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (ChartPlay) {  	double x = (double)Protocol.rrlist.Count;  	if (x < 120) {  		gpRRCO.XAxis.Scale.Min = 0;  		gpRRCO.XAxis.Scale.Max = x + 10;  		zgRRCO.RestoreScale (gpRRCO);  	}  	else {  		gpRRCO.XAxis.Scale.Min = x - 64;  		gpRRCO.XAxis.Scale.Max = x + 10;  	}  	gpFFT.GraphObjList.Remove (box3);  	//peak power  	box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  	// Console.WriteLine(Protocol.PeakFreq);  	box3.Fill = new Fill (Color.FromArgb (150' Color.Red));  	// Use the BehindAxis zorder to draw the highlight beneath the grid lines  	box3.ZOrder = ZOrder.A_InFront;  	// Make sure that the boxObj does not extend outside the chart rect if the chart is zoomed  	box3.IsClippedToChartRect = true;  	// Use a hybrid coordinate system so the X axis always covers the full x range  	// from chart fraction 0.0 to 1.0  	// box3.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	gpFFT.GraphObjList.Add (box3);  	gpFFT.XAxis.Scale.Max = 0.5;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (ChartPlay) {  	double x = (double)Protocol.rrlist.Count;  	if (x < 120) {  		gpRRCO.XAxis.Scale.Min = 0;  		gpRRCO.XAxis.Scale.Max = x + 10;  		zgRRCO.RestoreScale (gpRRCO);  	}  	else {  		gpRRCO.XAxis.Scale.Min = x - 64;  		gpRRCO.XAxis.Scale.Max = x + 10;  	}  	gpFFT.GraphObjList.Remove (box3);  	//peak power  	box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  	// Console.WriteLine(Protocol.PeakFreq);  	box3.Fill = new Fill (Color.FromArgb (150' Color.Red));  	// Use the BehindAxis zorder to draw the highlight beneath the grid lines  	box3.ZOrder = ZOrder.A_InFront;  	// Make sure that the boxObj does not extend outside the chart rect if the chart is zoomed  	box3.IsClippedToChartRect = true;  	// Use a hybrid coordinate system so the X axis always covers the full x range  	// from chart fraction 0.0 to 1.0  	// box3.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	gpFFT.GraphObjList.Add (box3);  	gpFFT.XAxis.Scale.Max = 0.5;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (ChartPlay) {  	double x = (double)Protocol.rrlist.Count;  	if (x < 120) {  		gpRRCO.XAxis.Scale.Min = 0;  		gpRRCO.XAxis.Scale.Max = x + 10;  		zgRRCO.RestoreScale (gpRRCO);  	}  	else {  		gpRRCO.XAxis.Scale.Min = x - 64;  		gpRRCO.XAxis.Scale.Max = x + 10;  	}  	gpFFT.GraphObjList.Remove (box3);  	//peak power  	box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  	// Console.WriteLine(Protocol.PeakFreq);  	box3.Fill = new Fill (Color.FromArgb (150' Color.Red));  	// Use the BehindAxis zorder to draw the highlight beneath the grid lines  	box3.ZOrder = ZOrder.A_InFront;  	// Make sure that the boxObj does not extend outside the chart rect if the chart is zoomed  	box3.IsClippedToChartRect = true;  	// Use a hybrid coordinate system so the X axis always covers the full x range  	// from chart fraction 0.0 to 1.0  	// box3.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	gpFFT.GraphObjList.Add (box3);  	gpFFT.XAxis.Scale.Max = 0.5;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (ChartPlay) {  	double x = (double)Protocol.rrlist.Count;  	if (x < 120) {  		gpRRCO.XAxis.Scale.Min = 0;  		gpRRCO.XAxis.Scale.Max = x + 10;  		zgRRCO.RestoreScale (gpRRCO);  	}  	else {  		gpRRCO.XAxis.Scale.Min = x - 64;  		gpRRCO.XAxis.Scale.Max = x + 10;  	}  	gpFFT.GraphObjList.Remove (box3);  	//peak power  	box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  	// Console.WriteLine(Protocol.PeakFreq);  	box3.Fill = new Fill (Color.FromArgb (150' Color.Red));  	// Use the BehindAxis zorder to draw the highlight beneath the grid lines  	box3.ZOrder = ZOrder.A_InFront;  	// Make sure that the boxObj does not extend outside the chart rect if the chart is zoomed  	box3.IsClippedToChartRect = true;  	// Use a hybrid coordinate system so the X axis always covers the full x range  	// from chart fraction 0.0 to 1.0  	// box3.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	gpFFT.GraphObjList.Add (box3);  	gpFFT.XAxis.Scale.Max = 0.5;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (ChartPlay) {  	double x = (double)Protocol.rrlist.Count;  	if (x < 120) {  		gpRRCO.XAxis.Scale.Min = 0;  		gpRRCO.XAxis.Scale.Max = x + 10;  		zgRRCO.RestoreScale (gpRRCO);  	}  	else {  		gpRRCO.XAxis.Scale.Min = x - 64;  		gpRRCO.XAxis.Scale.Max = x + 10;  	}  	gpFFT.GraphObjList.Remove (box3);  	//peak power  	box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  	// Console.WriteLine(Protocol.PeakFreq);  	box3.Fill = new Fill (Color.FromArgb (150' Color.Red));  	// Use the BehindAxis zorder to draw the highlight beneath the grid lines  	box3.ZOrder = ZOrder.A_InFront;  	// Make sure that the boxObj does not extend outside the chart rect if the chart is zoomed  	box3.IsClippedToChartRect = true;  	// Use a hybrid coordinate system so the X axis always covers the full x range  	// from chart fraction 0.0 to 1.0  	// box3.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	gpFFT.GraphObjList.Add (box3);  	gpFFT.XAxis.Scale.Max = 0.5;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (ChartPlay) {  	double x = (double)Protocol.rrlist.Count;  	if (x < 120) {  		gpRRCO.XAxis.Scale.Min = 0;  		gpRRCO.XAxis.Scale.Max = x + 10;  		zgRRCO.RestoreScale (gpRRCO);  	}  	else {  		gpRRCO.XAxis.Scale.Min = x - 64;  		gpRRCO.XAxis.Scale.Max = x + 10;  	}  	gpFFT.GraphObjList.Remove (box3);  	//peak power  	box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  	// Console.WriteLine(Protocol.PeakFreq);  	box3.Fill = new Fill (Color.FromArgb (150' Color.Red));  	// Use the BehindAxis zorder to draw the highlight beneath the grid lines  	box3.ZOrder = ZOrder.A_InFront;  	// Make sure that the boxObj does not extend outside the chart rect if the chart is zoomed  	box3.IsClippedToChartRect = true;  	// Use a hybrid coordinate system so the X axis always covers the full x range  	// from chart fraction 0.0 to 1.0  	// box3.Location.CoordinateFrame = CoordType.XChartFractionYScale;  	gpFFT.GraphObjList.Add (box3);  	gpFFT.XAxis.Scale.Max = 0.5;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (x < 120) {  	gpRRCO.XAxis.Scale.Min = 0;  	gpRRCO.XAxis.Scale.Max = x + 10;  	zgRRCO.RestoreScale (gpRRCO);  }  else {  	gpRRCO.XAxis.Scale.Min = x - 64;  	gpRRCO.XAxis.Scale.Max = x + 10;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (x < 120) {  	gpRRCO.XAxis.Scale.Min = 0;  	gpRRCO.XAxis.Scale.Max = x + 10;  	zgRRCO.RestoreScale (gpRRCO);  }  else {  	gpRRCO.XAxis.Scale.Min = x - 64;  	gpRRCO.XAxis.Scale.Max = x + 10;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (x < 120) {  	gpRRCO.XAxis.Scale.Min = 0;  	gpRRCO.XAxis.Scale.Max = x + 10;  	zgRRCO.RestoreScale (gpRRCO);  }  else {  	gpRRCO.XAxis.Scale.Min = x - 64;  	gpRRCO.XAxis.Scale.Max = x + 10;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: if (x < 120) {  	gpRRCO.XAxis.Scale.Min = 0;  	gpRRCO.XAxis.Scale.Max = x + 10;  	zgRRCO.RestoreScale (gpRRCO);  }  else {  	gpRRCO.XAxis.Scale.Min = x - 64;  	gpRRCO.XAxis.Scale.Max = x + 10;  }  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: gpRRCO.XAxis.Scale.Max = x + 10;  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: gpRRCO.XAxis.Scale.Min = x - 64;  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: gpRRCO.XAxis.Scale.Max = x + 10;  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: box3 = new BoxObj ((Protocol.PeakFreq - 0.0075)' 1000' 0.015' 1000' Color.Empty' Color.FromArgb (100' Color.Red));  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: box3.Fill = new Fill (Color.FromArgb (150' Color.Red));  
Magic Number,Koan,CharPanel,C:\repos\schmaedech_koan\Koan\Koan\Koan\View\CharPanel.cs,updatePanel,The following statement contains a magic number: gpFFT.XAxis.Scale.Max = 0.5;  
