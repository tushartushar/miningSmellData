Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The method has 130 lines of code.
Complex Method,Tomboy.WebSync.Api,NoteInfo,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\NoteInfo.cs,ParseJson,Cyclomatic complexity of the method is 14
Complex Method,Tomboy.WebSync.Api,NoteInfo,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\NoteInfo.cs,ToUpdateObject,Cyclomatic complexity of the method is 13
Complex Method,Hyena.Json,Serializer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Serializer.cs,Serialize,Cyclomatic complexity of the method is 8
Complex Method,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,Cyclomatic complexity of the method is 8
Complex Method,MonoHttp,ChunkedInputStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkedInputStream.cs,BeginRead,Cyclomatic complexity of the method is 8
Complex Method,MonoHttp,ChunkStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkStream.cs,InternalWrite,Cyclomatic complexity of the method is 10
Complex Method,MonoHttp,ChunkStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkStream.cs,GetChunkSize,Cyclomatic complexity of the method is 12
Complex Method,MonoHttp,ChunkStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkStream.cs,ReadTrailer,Cyclomatic complexity of the method is 10
Complex Method,MonoHttp,HttpConnection,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpConnection.cs,ProcessInput,Cyclomatic complexity of the method is 8
Complex Method,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,FinishInitialization,Cyclomatic complexity of the method is 16
Complex Method,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,SendHeaders,Cyclomatic complexity of the method is 20
Complex Method,MonoHttp,HttpUtility,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpUtility.cs,UrlDecode,Cyclomatic complexity of the method is 11
Complex Method,MonoHttp,ListenerPrefix,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ListenerPrefix.cs,CheckUri,Cyclomatic complexity of the method is 10
Complex Method,MonoHttp,RequestStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\RequestStream.cs,FillFromBuffer,Cyclomatic complexity of the method is 12
Complex Method,Tomboy.WebSync,NoteConvert,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteInfo,Cyclomatic complexity of the method is 11
Long Parameter List,MonoHttp,ChunkedInputStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkedInputStream.cs,ChunkedInputStream,The method has 5 parameters. Parameters: context' stream' buffer' offset' length
Long Parameter List,MonoHttp,ChunkedInputStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkedInputStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,MonoHttp,RequestStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\RequestStream.cs,RequestStream,The method has 5 parameters. Parameters: stream' buffer' offset' length' contentlength
Long Parameter List,MonoHttp,RequestStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\RequestStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,MonoHttp,RequestStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\RequestStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,MonoHttp,ResponseStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ResponseStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,MonoHttp,ResponseStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ResponseStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' cback' state
Long Parameter List,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The method has 12 parameters. Parameters: url' consumerKey' token' tokenSecret' verifier' method' timeStamp' nonce' signatureType' callbackUrl' normalizedUrl' parameters
Long Parameter List,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignature,The method has 12 parameters. Parameters: url' consumerKey' consumerSecret' token' tokenSecret' verifier' method' timeStamp' nonce' callbackUrl' normalizedUrl' parameters
Long Parameter List,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignature,The method has 13 parameters. Parameters: url' consumerKey' consumerSecret' token' tokenSecret' verifier' method' timeStamp' nonce' signatureType' callbackUrl' normalizedUrl' parameters
Long Identifier,Tomboy.WebSync.Api,NoteInfo,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\NoteInfo.cs,,The length of the parameter LastMetadataChangeDateElementName is 33.
Long Statement,Tomboy.WebSync.Api,OAuth,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\OAuth.cs,GetAuthorizationUrl,The length of the statement  "					var link = string.Format ("{0}?oauth_token={1}&oauth_callback={2}"' AuthorizeLocation' qs ["oauth_token"]' HttpUtility.UrlEncode (CallbackUrl)); " is 144.
Long Statement,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,FinishInitialization,The length of the statement  "try { raw_uri = new Uri (raw_url); } catch { raw_uri = null; } if (url != raw_uri && (raw_uri.Host == null || raw_uri.Host.Length == 0)) raw_uri = null; if (raw_uri != null) " is 173.
Long Statement,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,FinishInitialization,The length of the statement  "try { url = new Uri (base_uri + path); } catch {}; if (url != null && (url.Host == null || url.Host.Length == 0)) url = null;  if (url == null) { " is 145.
Long Statement,MonoHttp,ListenerAsyncResult,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ListenerAsyncResult.cs,Complete,The length of the statement  "				if ((context.Listener.AuthenticationSchemes == AuthenticationSchemes.Basic || context.Listener.AuthenticationSchemes == AuthenticationSchemes.Negotiate) && context.Request.Headers ["Authorization"] == null) { " is 208.
Long Statement,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The length of the statement  "				new QueryParameter<string> (OAuthTimestampKey' ((long)timeStamp.TotalSeconds).ToString ()' s => string.IsNullOrEmpty (s))' " is 122.
Long Statement,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The length of the statement  "			if (!string.IsNullOrEmpty (token)) parameters.Add (new QueryParameter<string> (OAuthTokenKey' token' s => string.IsNullOrEmpty (s))); " is 133.
Long Statement,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The length of the statement  "			if (!string.IsNullOrEmpty (verifier)) parameters.Add (new QueryParameter<string> (OAuthVerifierKey' verifier' s => string.IsNullOrEmpty (s))); " is 142.
Long Statement,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The length of the statement  "			if (!string.IsNullOrEmpty (callbackUrl)) parameters.Add (new QueryParameter<string> (OAuthCallbackKey' UrlEncode (callbackUrl)' s => string.IsNullOrEmpty (s))); " is 160.
Long Statement,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The length of the statement  "			if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))) normalizedUrl += ":" + url.Port; " is 127.
Long Statement,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The length of the statement  "						Logger.Error ("Error processing OAuth callback. Could be a sign that you pressed the button to reset the connection. Exception details:"); " is 138.
Complex Conditional,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,SetRequestLine,The conditional expression  "(ic >= 'A' && ic <= 'Z') ||  				    (ic > 32 && c < 127 && c != '(' && c != ')' && c != '<' &&  				     c != '<' && c != '>' && c != '@' && c != ''' && c != ';' &&  				     c != ':' && c != '\\' && c != '"' && c != '/' && c != '[' &&  				     c != ']' && c != '?' && c != '=' && c != '{' && c != '}')"  is complex.
Complex Conditional,MonoHttp,WebHeaderCollection,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\WebHeaderCollection.cs,IsHeaderValue,The conditional expression  "c < 0x20 && (c != '\r' && c != '\n' && c != '\t')"  is complex.
Complex Conditional,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The conditional expression  "!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))"  is complex.
Empty Catch Block,MonoHttp,EndPointListener,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\EndPointListener.cs,OnAccept,The method has an empty catch block.
Empty Catch Block,MonoHttp,EndPointListener,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\EndPointListener.cs,OnAccept,The method has an empty catch block.
Empty Catch Block,MonoHttp,HttpConnection,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpConnection.cs,Close,The method has an empty catch block.
Empty Catch Block,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,FinishInitialization,The method has an empty catch block.
Empty Catch Block,MonoHttp,ResponseStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ResponseStream.cs,InternalWrite,The method has an empty catch block.
Empty Catch Block,MonoHttp,ResponseStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ResponseStream.cs,EndWrite,The method has an empty catch block.
Magic Number,Hyena.Json,JsonArray,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonArray.cs,Dump,The following statement contains a magic number: foreach (object item in this) {                  Console.Write (String.Empty.PadLeft (levels * 2' ' '));                  if (item is IJsonCollection) {                      ((IJsonCollection)item).Dump (levels + 1);                  } else {                      Console.WriteLine (item);                  }              }
Magic Number,Hyena.Json,JsonArray,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonArray.cs,Dump,The following statement contains a magic number: Console.WriteLine ("{0}]"' String.Empty.PadLeft ((levels - 1) * 2' ' '));
Magic Number,Hyena.Json,JsonObject,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonObject.cs,Dump,The following statement contains a magic number: foreach (KeyValuePair<string' object> item in this) {                  Console.Write ("{0}\"{1}\" : "' String.Empty.PadLeft (levels * 2' ' ')' item.Key);                  if (item.Value is IJsonCollection) {                      ((IJsonCollection)item.Value).Dump (levels + 1);                  } else {                      Console.WriteLine (item.Value);                  }              }
Magic Number,Hyena.Json,JsonObject,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonObject.cs,Dump,The following statement contains a magic number: Console.WriteLine ("{0}}}"' String.Empty.PadLeft ((levels - 1) * 2' ' '));
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,GetStringBuilder,The following statement contains a magic number: if (string_buffer == null) {                  string_buffer = new StringBuilder (64);                  return string_buffer;              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexString,The following statement contains a magic number: while (!reader.EndOfStream) {                  if (read) {                      ReadChar ();                  }                                    read = true;                    if (peek == '\\') {                      ReadChar ();                      switch (peek) {                          case 'u':                              ReadChar ();                              buffer.Append ((char)LexInt (true' 4));                              read = false;                              break;                          case '"':                          case '\\':                          case '/': buffer.Append (peek); break;                          case 'b': buffer.Append ('\b'); break;                          case 'f': buffer.Append ('\f'); break;                          case 'n': buffer.Append ('\n'); break;                          case 'r': buffer.Append ('\r'); break;                          case 't': buffer.Append ('\t'); break;                          default:                              UnexpectedCharacter (peek);                              break;                      }                  } else if (peek == '"') {                      ReadChar ();                      return buffer.ToString ();                  } else {                      buffer.Append (peek);                  }              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {                  value = (hex ? 16 : 10) * value +  (hex                       ? peek >= 'A' && peek <= 'F'                          ? 10 + peek - 'A'                          : (peek >= 'a' && peek <= 'f'                              ? 10 + peek - 'a'                              : peek - '0')                      : peek - '0');                                        if (maxDigits > 0 && ++count >= maxDigits) {                      ReadChar ();                      return value;                  }                                    ReadChar ();              } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {                  value = (hex ? 16 : 10) * value +  (hex                       ? peek >= 'A' && peek <= 'F'                          ? 10 + peek - 'A'                          : (peek >= 'a' && peek <= 'f'                              ? 10 + peek - 'a'                              : peek - '0')                      : peek - '0');                                        if (maxDigits > 0 && ++count >= maxDigits) {                      ReadChar ();                      return value;                  }                                    ReadChar ();              } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {                  value = (hex ? 16 : 10) * value +  (hex                       ? peek >= 'A' && peek <= 'F'                          ? 10 + peek - 'A'                          : (peek >= 'a' && peek <= 'f'                              ? 10 + peek - 'a'                              : peek - '0')                      : peek - '0');                                        if (maxDigits > 0 && ++count >= maxDigits) {                      ReadChar ();                      return value;                  }                                    ReadChar ();              } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {                  value = (hex ? 16 : 10) * value +  (hex                       ? peek >= 'A' && peek <= 'F'                          ? 10 + peek - 'A'                          : (peek >= 'a' && peek <= 'f'                              ? 10 + peek - 'a'                              : peek - '0')                      : peek - '0');                                        if (maxDigits > 0 && ++count >= maxDigits) {                      ReadChar ();                      return value;                  }                                    ReadChar ();              } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexFraction,The following statement contains a magic number: double d = 10;
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexFraction,The following statement contains a magic number: while (true) {                  ReadChar ();                    if (!Char.IsDigit (peek)) {                      break;                  }                    fraction += (peek - '0') / d;                  d *= 10;              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == 'e' || peek == 'E') {                  isDouble = true;                  ReadChar ();                  if (peek == '-') {                      ReadChar ();                      doubleVal /= Math.Pow (10' LexInt ());                  } else if (peek == '+') {                      ReadChar ();                      doubleVal *= Math.Pow (10' LexInt ());                  } else if (Char.IsDigit (peek)) {                      doubleVal *= Math.Pow (10' LexInt ());                  } else {                      InvalidSyntax ("Malformed exponent");                  }              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == 'e' || peek == 'E') {                  isDouble = true;                  ReadChar ();                  if (peek == '-') {                      ReadChar ();                      doubleVal /= Math.Pow (10' LexInt ());                  } else if (peek == '+') {                      ReadChar ();                      doubleVal *= Math.Pow (10' LexInt ());                  } else if (Char.IsDigit (peek)) {                      doubleVal *= Math.Pow (10' LexInt ());                  } else {                      InvalidSyntax ("Malformed exponent");                  }              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == 'e' || peek == 'E') {                  isDouble = true;                  ReadChar ();                  if (peek == '-') {                      ReadChar ();                      doubleVal /= Math.Pow (10' LexInt ());                  } else if (peek == '+') {                      ReadChar ();                      doubleVal *= Math.Pow (10' LexInt ());                  } else if (Char.IsDigit (peek)) {                      doubleVal *= Math.Pow (10' LexInt ());                  } else {                      InvalidSyntax ("Malformed exponent");                  }              }
Magic Number,MonoHttp,ChunkedInputStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkedInputStream.cs,BeginRead,The following statement contains a magic number: ares.Buffer = new byte [8192];
Magic Number,MonoHttp,ChunkedInputStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkedInputStream.cs,BeginRead,The following statement contains a magic number: ares.Count = 8192;
Magic Number,MonoHttp,ChunkedInputStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkedInputStream.cs,OnRead,The following statement contains a magic number: try {  				int nread = base.EndRead (base_ares);  				decoder.Write (ares.Buffer' ares.Offset' nread);  				nread = decoder.Read (rb.Buffer' rb.Offset' rb.Count);  				rb.Offset += nread;  				rb.Count -= nread;  				if (rb.Count == 0 || !decoder.WantMore || nread == 0) {  					no_more_data = !decoder.WantMore && nread == 0;  					ares.Count = rb.InitialCount - rb.Count;  					ares.Complete ();  					return;  				}  				ares.Offset = 0;  				ares.Count = Math.Min (8192' decoder.ChunkLeft + 6);  				base.BeginRead (ares.Buffer' ares.Offset' ares.Count' OnRead' rb);  			} catch (Exception e) {  				context.Connection.SendError (e.Message' 400);  				ares.Complete (e);  			}
Magic Number,MonoHttp,ChunkedInputStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkedInputStream.cs,OnRead,The following statement contains a magic number: try {  				int nread = base.EndRead (base_ares);  				decoder.Write (ares.Buffer' ares.Offset' nread);  				nread = decoder.Read (rb.Buffer' rb.Offset' rb.Count);  				rb.Offset += nread;  				rb.Count -= nread;  				if (rb.Count == 0 || !decoder.WantMore || nread == 0) {  					no_more_data = !decoder.WantMore && nread == 0;  					ares.Count = rb.InitialCount - rb.Count;  					ares.Complete ();  					return;  				}  				ares.Offset = 0;  				ares.Count = Math.Min (8192' decoder.ChunkLeft + 6);  				base.BeginRead (ares.Buffer' ares.Offset' ares.Count' OnRead' rb);  			} catch (Exception e) {  				context.Connection.SendError (e.Message' 400);  				ares.Complete (e);  			}
Magic Number,MonoHttp,ChunkedInputStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkedInputStream.cs,OnRead,The following statement contains a magic number: try {  				int nread = base.EndRead (base_ares);  				decoder.Write (ares.Buffer' ares.Offset' nread);  				nread = decoder.Read (rb.Buffer' rb.Offset' rb.Count);  				rb.Offset += nread;  				rb.Count -= nread;  				if (rb.Count == 0 || !decoder.WantMore || nread == 0) {  					no_more_data = !decoder.WantMore && nread == 0;  					ares.Count = rb.InitialCount - rb.Count;  					ares.Complete ();  					return;  				}  				ares.Offset = 0;  				ares.Count = Math.Min (8192' decoder.ChunkLeft + 6);  				base.BeginRead (ares.Buffer' ares.Offset' ares.Count' OnRead' rb);  			} catch (Exception e) {  				context.Connection.SendError (e.Message' 400);  				ares.Complete (e);  			}
Magic Number,MonoHttp,ChunkedInputStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkedInputStream.cs,EndRead,The following statement contains a magic number: if (my_ares.Error != null)  				throw new HttpListenerException (400' "I/O operation aborted.");
Magic Number,MonoHttp,ChunkStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkStream.cs,GetChunkSize,The following statement contains a magic number: while (offset < size) {  				c = (char) buffer [offset++];  				if (c == '\r') {  					if (sawCR)  						ThrowProtocolViolation ("2 CR found");    					sawCR = true;  					continue;  				}  				  				if (sawCR && c == '\n')  					break;    				if (c == ' ')  					gotit = true;    				if (!gotit)  					saved.Append (c);    				if (saved.Length > 20)  					ThrowProtocolViolation ("chunk size too long.");  			}
Magic Number,MonoHttp,ChunkStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkStream.cs,GetChunkSize,The following statement contains a magic number: if (chunkSize == 0) {  				trailerState = 2;  				return State.Trailer;  			}
Magic Number,MonoHttp,ChunkStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: if (trailerState == 2 && (char) buffer [offset] == '\r' && saved.Length == 0) {  				offset++;  				if (offset < size && (char) buffer [offset] == '\n') {  					offset++;  					return State.None;  				}  				offset--;  			}
Magic Number,MonoHttp,ChunkStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: while (offset < size && st < 4) {  				c = (char) buffer [offset++];  				if ((st == 0 || st == 2) && c == '\r') {  					st++;  					continue;  				}    				if ((st == 1 || st == 3) && c == '\n') {  					st++;  					continue;  				}    				if (st > 0) {  					saved.Append (stString.Substring (0' saved.Length == 0? st-2: st));  					st = 0;  				}  			}
Magic Number,MonoHttp,ChunkStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: while (offset < size && st < 4) {  				c = (char) buffer [offset++];  				if ((st == 0 || st == 2) && c == '\r') {  					st++;  					continue;  				}    				if ((st == 1 || st == 3) && c == '\n') {  					st++;  					continue;  				}    				if (st > 0) {  					saved.Append (stString.Substring (0' saved.Length == 0? st-2: st));  					st = 0;  				}  			}
Magic Number,MonoHttp,ChunkStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: while (offset < size && st < 4) {  				c = (char) buffer [offset++];  				if ((st == 0 || st == 2) && c == '\r') {  					st++;  					continue;  				}    				if ((st == 1 || st == 3) && c == '\n') {  					st++;  					continue;  				}    				if (st > 0) {  					saved.Append (stString.Substring (0' saved.Length == 0? st-2: st));  					st = 0;  				}  			}
Magic Number,MonoHttp,ChunkStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: while (offset < size && st < 4) {  				c = (char) buffer [offset++];  				if ((st == 0 || st == 2) && c == '\r') {  					st++;  					continue;  				}    				if ((st == 1 || st == 3) && c == '\n') {  					st++;  					continue;  				}    				if (st > 0) {  					saved.Append (stString.Substring (0' saved.Length == 0? st-2: st));  					st = 0;  				}  			}
Magic Number,MonoHttp,ChunkStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ChunkStream.cs,ReadTrailer,The following statement contains a magic number: if (st < 4) {  				trailerState = st;  				if (offset <  size)  					ThrowProtocolViolation ("Error reading trailer.");    				return State.Trailer;  			}
Magic Number,MonoHttp,EndPointListener,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\EndPointListener.cs,EndPointListener,The following statement contains a magic number: sock.Listen (500);
Magic Number,MonoHttp,EndPointListener,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\EndPointListener.cs,AddSpecial,The following statement contains a magic number: foreach (ListenerPrefix p in coll) {  				if (p.Path == prefix.Path) //TODO: code  					throw new HttpListenerException (400' "Prefix already in use.");  			}
Magic Number,MonoHttp,EndPointListener,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\EndPointListener.cs,AddPrefix,The following statement contains a magic number: lock (prefixes) {  				if (prefix.Host == "*") {  					if (unhandled == null)  						unhandled = new ArrayList ();    					prefix.Listener = listener;  					AddSpecial (unhandled' prefix);  					return;  				}    				if (prefix.Host == "+") {  					if (all == null)  						all = new ArrayList ();  					prefix.Listener = listener;  					AddSpecial (all' prefix);  					return;  				}    				if (prefixes.ContainsKey (prefix)) {  					HttpListener other = (HttpListener) prefixes [prefix];  					if (other != listener) // TODO: code.  						throw new HttpListenerException (400' "There's another listener for " + prefix);  					return;  				}    				prefixes [prefix] = listener;  			}
Magic Number,MonoHttp,EndPointManager,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\EndPointManager.cs,AddPrefixInternal,The following statement contains a magic number: if (lp.Path.IndexOf ('%') != -1)  				throw new HttpListenerException (400' "Invalid path.");
Magic Number,MonoHttp,EndPointManager,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\EndPointManager.cs,AddPrefixInternal,The following statement contains a magic number: if (lp.Path.IndexOf ("//") != -1) // TODO: Code?  				throw new HttpListenerException (400' "Invalid path.");
Magic Number,MonoHttp,HttpConnection,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpConnection.cs,OnRead,The following statement contains a magic number: if (ProcessInput (ms)) {  				if (!context.HaveError)  					context.Request.FinishInitialization ();    				if (context.HaveError) {  					SendError ();  					Close ();  					return;  				}    				if (!epl.BindContext (context)) {  					SendError ("Invalid host"' 400);  					Close ();  				}  				context_bound = true;  				return;  			}
Magic Number,MonoHttp,HttpConnection,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpConnection.cs,ReadLine,The following statement contains a magic number: for (int i = offset; i < last && line_state != LineState.LF; i++) {  				used++;  				byte b = buffer [i];  				if (b == 13) {  					line_state = LineState.CR;  				} else if (b == 10) {  					line_state = LineState.LF;  				} else {  					current_line.Append ((char) b);  				}  			}
Magic Number,MonoHttp,HttpConnection,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpConnection.cs,ReadLine,The following statement contains a magic number: for (int i = offset; i < last && line_state != LineState.LF; i++) {  				used++;  				byte b = buffer [i];  				if (b == 13) {  					line_state = LineState.CR;  				} else if (b == 10) {  					line_state = LineState.LF;  				} else {  					current_line.Append ((char) b);  				}  			}
Magic Number,MonoHttp,HttpListenerContext,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerContext.cs,ParseAuthentication,The following statement contains a magic number: if (header == null || header.Length < 2)  				return;
Magic Number,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: string [] parts = req.Split (separators' 3);
Magic Number,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts.Length != 3) {  				context.ErrorMessage = "Invalid request line (parts).";  				return;  			}
Magic Number,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: foreach (char c in method){  				int ic = (int) c;    				if ((ic >= 'A' && ic <= 'Z') ||  				    (ic > 32 && c < 127 && c != '(' && c != ')' && c != '<' &&  				     c != '<' && c != '>' && c != '@' && c != ''' && c != ';' &&  				     c != ':' && c != '\\' && c != '"' && c != '/' && c != '[' &&  				     c != ']' && c != '?' && c != '=' && c != '{' && c != '}'))  					continue;    				context.ErrorMessage = "(Invalid verb)";  				return;  			}
Magic Number,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: foreach (char c in method){  				int ic = (int) c;    				if ((ic >= 'A' && ic <= 'Z') ||  				    (ic > 32 && c < 127 && c != '(' && c != ')' && c != '<' &&  				     c != '<' && c != '>' && c != '@' && c != ''' && c != ';' &&  				     c != ':' && c != '\\' && c != '"' && c != '/' && c != '[' &&  				     c != ']' && c != '?' && c != '=' && c != '{' && c != '}'))  					continue;    				context.ErrorMessage = "(Invalid verb)";  				return;  			}
Magic Number,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts [2].Length != 8 || !parts [2].StartsWith ("HTTP/")) {  				context.ErrorMessage = "Invalid request line (version).";  				return;  			}
Magic Number,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts [2].Length != 8 || !parts [2].StartsWith ("HTTP/")) {  				context.ErrorMessage = "Invalid request line (version).";  				return;  			}
Magic Number,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: if (parts [2].Length != 8 || !parts [2].StartsWith ("HTTP/")) {  				context.ErrorMessage = "Invalid request line (version).";  				return;  			}
Magic Number,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: try {  				version = new Version (parts [2].Substring (5));  				if (version.Major < 1)  					throw new Exception ();  			} catch {  				context.ErrorMessage = "Invalid request line (version).";  				return;  			}
Magic Number,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,SetRequestLine,The following statement contains a magic number: try {  				version = new Version (parts [2].Substring (5));  				if (version.Major < 1)  					throw new Exception ();  			} catch {  				context.ErrorMessage = "Invalid request line (version).";  				return;  			}
Magic Number,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,FinishInitialization,The following statement contains a magic number: if (version >= HttpVersion.Version11) {  				t_encoding = Headers ["Transfer-Encoding"];  				// 'identity' is not valid!  				if (t_encoding != null && t_encoding != "chunked") {  					context.Connection.SendError (null' 501);  					return;  				}  			}
Magic Number,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,FinishInitialization,The following statement contains a magic number: if (!is_chunked && !cl_set) {  				context.Connection.SendError (null' 411);  				return;  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following statement contains a magic number: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,AddHeader,The following statement contains a magic number: if (value.Length > 65535)  				throw new ArgumentOutOfRangeException ("value");
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,AppendHeader,The following statement contains a magic number: if (value.Length > 65535)  				throw new ArgumentOutOfRangeException ("value");
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,Redirect,The following statement contains a magic number: StatusCode = 302;
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||  					status_code == 413 || status_code == 414 || status_code == 500 ||  					status_code == 503);
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||  					status_code == 413 || status_code == 414 || status_code == 500 ||  					status_code == 503);
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||  					status_code == 413 || status_code == 414 || status_code == 500 ||  					status_code == 503);
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||  					status_code == 413 || status_code == 414 || status_code == 500 ||  					status_code == 503);
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||  					status_code == 413 || status_code == 414 || status_code == 500 ||  					status_code == 503);
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||  					status_code == 413 || status_code == 414 || status_code == 500 ||  					status_code == 503);
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: bool conn_close = (status_code == 400 || status_code == 408 || status_code == 411 ||  					status_code == 413 || status_code == 414 || status_code == 500 ||  					status_code == 503);
Magic Number,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,SendHeaders,The following statement contains a magic number: if (chunked_uses >= 100) {  				force_close_chunked = true;  				if (!conn_close)  					headers.SetInternal ("Connection"' "close");  			}
Magic Number,MonoHttp,HttpUtility,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: if (e == null)  				e = Encoding.GetEncoding (28591);
Magic Number,MonoHttp,HttpUtility,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				if (s [i] == '%' && i + 2 < len) {  					if (s [i + 1] == 'u' && i + 5 < len) {  						if (bytes.Length > 0) {  							output.Append (GetChars (bytes' e));  							bytes.SetLength (0);  						}  						output.Append ((char) Int32.Parse (s.Substring (i + 2' 4)' hexa));  						i += 5;  					} else {  						bytes.WriteByte ((byte) Int32.Parse (s.Substring (i + 1' 2)' hexa));  						i += 2;  					}  					continue;  				}    				if (bytes.Length > 0) {  					output.Append (GetChars (bytes' e));  					bytes.SetLength (0);  				}    				if (s [i] == '+') {  					output.Append (' ');  				} else {  					output.Append (s [i]);  				}  	         	}
Magic Number,MonoHttp,HttpUtility,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				if (s [i] == '%' && i + 2 < len) {  					if (s [i + 1] == 'u' && i + 5 < len) {  						if (bytes.Length > 0) {  							output.Append (GetChars (bytes' e));  							bytes.SetLength (0);  						}  						output.Append ((char) Int32.Parse (s.Substring (i + 2' 4)' hexa));  						i += 5;  					} else {  						bytes.WriteByte ((byte) Int32.Parse (s.Substring (i + 1' 2)' hexa));  						i += 2;  					}  					continue;  				}    				if (bytes.Length > 0) {  					output.Append (GetChars (bytes' e));  					bytes.SetLength (0);  				}    				if (s [i] == '+') {  					output.Append (' ');  				} else {  					output.Append (s [i]);  				}  	         	}
Magic Number,MonoHttp,HttpUtility,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				if (s [i] == '%' && i + 2 < len) {  					if (s [i + 1] == 'u' && i + 5 < len) {  						if (bytes.Length > 0) {  							output.Append (GetChars (bytes' e));  							bytes.SetLength (0);  						}  						output.Append ((char) Int32.Parse (s.Substring (i + 2' 4)' hexa));  						i += 5;  					} else {  						bytes.WriteByte ((byte) Int32.Parse (s.Substring (i + 1' 2)' hexa));  						i += 2;  					}  					continue;  				}    				if (bytes.Length > 0) {  					output.Append (GetChars (bytes' e));  					bytes.SetLength (0);  				}    				if (s [i] == '+') {  					output.Append (' ');  				} else {  					output.Append (s [i]);  				}  	         	}
Magic Number,MonoHttp,HttpUtility,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				if (s [i] == '%' && i + 2 < len) {  					if (s [i + 1] == 'u' && i + 5 < len) {  						if (bytes.Length > 0) {  							output.Append (GetChars (bytes' e));  							bytes.SetLength (0);  						}  						output.Append ((char) Int32.Parse (s.Substring (i + 2' 4)' hexa));  						i += 5;  					} else {  						bytes.WriteByte ((byte) Int32.Parse (s.Substring (i + 1' 2)' hexa));  						i += 2;  					}  					continue;  				}    				if (bytes.Length > 0) {  					output.Append (GetChars (bytes' e));  					bytes.SetLength (0);  				}    				if (s [i] == '+') {  					output.Append (' ');  				} else {  					output.Append (s [i]);  				}  	         	}
Magic Number,MonoHttp,HttpUtility,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				if (s [i] == '%' && i + 2 < len) {  					if (s [i + 1] == 'u' && i + 5 < len) {  						if (bytes.Length > 0) {  							output.Append (GetChars (bytes' e));  							bytes.SetLength (0);  						}  						output.Append ((char) Int32.Parse (s.Substring (i + 2' 4)' hexa));  						i += 5;  					} else {  						bytes.WriteByte ((byte) Int32.Parse (s.Substring (i + 1' 2)' hexa));  						i += 2;  					}  					continue;  				}    				if (bytes.Length > 0) {  					output.Append (GetChars (bytes' e));  					bytes.SetLength (0);  				}    				if (s [i] == '+') {  					output.Append (' ');  				} else {  					output.Append (s [i]);  				}  	         	}
Magic Number,MonoHttp,HttpUtility,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				if (s [i] == '%' && i + 2 < len) {  					if (s [i + 1] == 'u' && i + 5 < len) {  						if (bytes.Length > 0) {  							output.Append (GetChars (bytes' e));  							bytes.SetLength (0);  						}  						output.Append ((char) Int32.Parse (s.Substring (i + 2' 4)' hexa));  						i += 5;  					} else {  						bytes.WriteByte ((byte) Int32.Parse (s.Substring (i + 1' 2)' hexa));  						i += 2;  					}  					continue;  				}    				if (bytes.Length > 0) {  					output.Append (GetChars (bytes' e));  					bytes.SetLength (0);  				}    				if (s [i] == '+') {  					output.Append (' ');  				} else {  					output.Append (s [i]);  				}  	         	}
Magic Number,MonoHttp,HttpUtility,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpUtility.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  				if (s [i] == '%' && i + 2 < len) {  					if (s [i + 1] == 'u' && i + 5 < len) {  						if (bytes.Length > 0) {  							output.Append (GetChars (bytes' e));  							bytes.SetLength (0);  						}  						output.Append ((char) Int32.Parse (s.Substring (i + 2' 4)' hexa));  						i += 5;  					} else {  						bytes.WriteByte ((byte) Int32.Parse (s.Substring (i + 1' 2)' hexa));  						i += 2;  					}  					continue;  				}    				if (bytes.Length > 0) {  					output.Append (GetChars (bytes' e));  					bytes.SetLength (0);  				}    				if (s [i] == '+') {  					output.Append (' ');  				} else {  					output.Append (s [i]);  				}  	         	}
Magic Number,MonoHttp,ListenerAsyncResult,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ListenerAsyncResult.cs,Complete,The following statement contains a magic number: lock (locker) {  				completed = true;  				if (handle != null)  					handle.Set ();    				if ((context.Listener.AuthenticationSchemes == AuthenticationSchemes.Basic || context.Listener.AuthenticationSchemes == AuthenticationSchemes.Negotiate) && context.Request.Headers ["Authorization"] == null) {  					context.Listener.EndGetContext (this);  					context.Response.StatusCode = 401;  					context.Response.Headers ["WWW-Authenticate"] = AuthenticationSchemes.Basic + " realm=\"\"";  					context.Response.OutputStream.Close ();  					context.Listener.BeginGetContext (cb' state);  				} else if (cb != null)  					ThreadPool.QueueUserWorkItem (InvokeCallback' this);  			}
Magic Number,MonoHttp,ListenerPrefix,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ListenerPrefix.cs,Parse,The following statement contains a magic number: int default_port = (uri.StartsWith ("http://")) ? 80 : -1;
Magic Number,MonoHttp,ListenerPrefix,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ListenerPrefix.cs,Parse,The following statement contains a magic number: if (default_port == -1) {  				default_port = (uri.StartsWith ("https://")) ? 443 : -1;  				secure = true;  			}
Magic Number,MonoHttp,ListenerPrefix,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ListenerPrefix.cs,Parse,The following statement contains a magic number: int start_host = uri.IndexOf (':') + 3;
Magic Number,MonoHttp,ListenerPrefix,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ListenerPrefix.cs,CheckUri,The following statement contains a magic number: int default_port = (uri.StartsWith ("http://")) ? 80 : -1;
Magic Number,MonoHttp,ListenerPrefix,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ListenerPrefix.cs,CheckUri,The following statement contains a magic number: if (default_port == -1)  				default_port = (uri.StartsWith ("https://")) ? 443 : -1;
Magic Number,MonoHttp,ListenerPrefix,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ListenerPrefix.cs,CheckUri,The following statement contains a magic number: int start_host = uri.IndexOf (':') + 3;
Magic Number,MonoHttp,ListenerPrefix,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ListenerPrefix.cs,CheckUri,The following statement contains a magic number: if (colon > 0) {  				root = uri.IndexOf ('/'' colon' length - colon);  				if (root == -1)  					throw new ArgumentException ("No path specified.");    				try {  					int p = Int32.Parse (uri.Substring (colon + 1' root - colon - 1));  					if (p <= 0 || p >= 65536)  						throw new Exception ();  				} catch {  					throw new ArgumentException ("Invalid port.");  				}  			} else {  				root = uri.IndexOf ('/'' start_host' length - start_host);  				if (root == -1)  					throw new ArgumentException ("No path specified.");  			}
Magic Number,MonoHttp,ResponseStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ResponseStream.cs,Write,The following statement contains a magic number: if (ms != null) {  				long start = ms.Position; // After the possible preamble for the encoding  				ms.Position = ms.Length;  				if (chunked) {  					bytes = GetChunkSizeBytes (count' false);  					ms.Write (bytes' 0' bytes.Length);  				}    				int new_count = Math.Min (count' 16384 - (int) ms.Position + (int) start);  				ms.Write (buffer' offset' new_count);  				count -= new_count;  				offset += new_count;  				InternalWrite (ms.GetBuffer ()' (int) start' (int) (ms.Length - start));  				ms.SetLength (0);  				ms.Capacity = 0; // 'dispose' the buffer in ms.  			} else if (chunked) {  				bytes = GetChunkSizeBytes (count' false);  				InternalWrite (bytes' 0' bytes.Length);  			}
Magic Number,MonoHttp,ResponseStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ResponseStream.cs,Write,The following statement contains a magic number: if (chunked)  				InternalWrite (crlf' 0' 2);
Magic Number,MonoHttp,ResponseStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ResponseStream.cs,EndWrite,The following statement contains a magic number: if (ignore_errors) {  				try {  					stream.EndWrite (ares);  					if (response.SendChunked)  						stream.Write (crlf' 0' 2);  				} catch { }  			} else {  				stream.EndWrite (ares);  				if (response.SendChunked)  					stream.Write (crlf' 0' 2);  			}
Magic Number,MonoHttp,ResponseStream,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\ResponseStream.cs,EndWrite,The following statement contains a magic number: if (ignore_errors) {  				try {  					stream.EndWrite (ares);  					if (response.SendChunked)  						stream.Write (crlf' 0' 2);  				} catch { }  			} else {  				stream.EndWrite (ares);  				if (response.SendChunked)  					stream.Write (crlf' 0' 2);  			}
Magic Number,MonoHttp,Utility,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\Utility.cs,MaybeUri,The following statement contains a magic number: if (p >= 10)  				return false;
Magic Number,MonoHttp,Utility,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\Utility.cs,ToClientString,The following statement contains a magic number: StringBuilder result = new StringBuilder (64);
Magic Number,MonoHttp,WebHeaderCollection,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\WebHeaderCollection.cs,IsHeaderValue,The following statement contains a magic number: for (int i = 0; i < len; i++) {			  				char c = value [i];  				if (c == 127)  					return false;  				if (c < 0x20 && (c != '\r' && c != '\n' && c != '\t'))  					return false;  				if (c == '\n' && ++i < len) {  					c = value [i];  					if (c != ' ' && c != '\t')  						return false;  				}  			}
Magic Number,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))) normalizedUrl += ":" + url.Port;
Magic Number,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))) normalizedUrl += ":" + url.Port;
Magic Number,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateTimeStamp,The following statement contains a magic number: return DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateNonce,The following statement contains a magic number: return random.Next (123400' 9999999).ToString ();
Magic Number,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateNonce,The following statement contains a magic number: return random.Next (123400' 9999999).ToString ();
Magic Number,Mono.Rocks,IEnumerableRocks,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Mono.Rocks\IEnumerable.cs,Implode,The following statement contains a magic number: string[] values = new string [c != null ? c.Count : 10];
Magic Number,Mono.Rocks,IEnumerableRocks,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Mono.Rocks\IEnumerable.cs,Implode,The following statement contains a magic number: foreach (var e in self) {  				if (values.Length == i)  					Array.Resize (ref values' i*2);  				values [i++] = selector (e);  			}
Magic Number,Tomboy.WebSync,NoteConvert,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteInfo,The following statement contains a magic number: if (versionGroup.Success &&  			    double.TryParse (versionGroup.Value' out contentVersion)) {  				noteInfo.NoteContentVersion = contentVersion;  			} else  				noteInfo.NoteContentVersion = 0.1;
Magic Number,Tomboy.WebSync,NoteConvert,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteInfo,The following statement contains a magic number: if (contentGroup.Success) {  				string [] splits =  					contentGroup.Value.Split (new char [] {'\n'}' 2);  				if (splits.Length > 1 && splits [1].Length > 0) {  					StringBuilder builder = new StringBuilder (contentGroup.Value.Length);  					bool inTag = false;  					// Strip everything out of first line' except for XML tags  					// TODO: Handle 'note-title' element differently?  					//       Ideally we would want to get rid of it completely.  					foreach (char c in splits [0]) {  						if (!inTag && c == '<')  							inTag = true;  						if (inTag) {  							builder.Append (c);  							if (c == '>')  								inTag = false;  						}  					}  					  					// Trim leading newline' if there is one  					if (splits [1][0] == '\n')  						builder.Append (splits [1]' 1' splits [1].Length - 1);  					else  						builder.Append (splits [1]);  					  					noteInfo.NoteContent = builder.ToString ();  				}  			}
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,WebSyncPreferencesWidget,The following statement contains a magic number: Gtk.Table prefsTable = new Gtk.Table (1' 2' false);
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,WebSyncPreferencesWidget,The following statement contains a magic number: prefsTable.RowSpacing = 5;
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,WebSyncPreferencesWidget,The following statement contains a magic number: prefsTable.ColumnSpacing = 10;
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The following statement contains a magic number: if (!Auth.IsAccessToken) {  				listener = new HL.HttpListener ();  				int portToTry = 8000;  				string callbackUrl = string.Empty;  				while (!listener.IsListening && portToTry < 9000) {  					callbackUrl = String.Format ("http://localhost:{0}/tomboy-web-sync/"'  					                            portToTry);  					try {  						listener.Prefixes.Add (callbackUrl);  					} catch (Exception e) {  						Logger.Error ("Exception while trying to add {0} as an HttpListener Prefix"'  							callbackUrl);  						Logger.Error (e.ToString ());  						break;  					}  					try {  						listener.Start ();  						Auth.CallbackUrl = callbackUrl;  					} catch {  						listener.Prefixes.Clear ();  						portToTry++;  					}  				}    				if (!listener.IsListening) {  					Logger.Error ("Unable to start HttpListener on any port between 8000-8999");  					authButton.Label = Catalog.GetString ("Server not responding. Try again later.");  					oauth = null;  					return;  				}    				Logger.Debug ("Listening on {0} for OAuth callback"' callbackUrl);  				string authUrl = string.Empty;  				try {  					authUrl = Auth.GetAuthorizationUrl ();  				} catch (Exception e) {  					listener.Stop ();  					listener.Close ();  					Logger.Error ("Failed to get auth URL from " + Server + ". Exception was: " + e.ToString ());  					// Translators: The web service supporting Tomboy WebSync is not responding as expected  					authButton.Label = Catalog.GetString ("Server not responding. Try again later.");  					oauth = null;  					return;  				}    				IAsyncResult result = listener.BeginGetContext (delegate (IAsyncResult localResult) {  					HL.HttpListenerContext context;  					try {  						context = listener.EndGetContext (localResult);  					} catch (Exception e) {  						// TODO: Figure out why this error occurs  						Logger.Error ("Error processing OAuth callback. Could be a sign that you pressed the button to reset the connection. Exception details:");  						Logger.Error (e.ToString ());  						return;  					}  					// Assuming if we got here user clicked Allow  					Logger.Debug ("Context request uri query section: " + context.Request.Url.Query);  					// oauth_verifier is required in OAuth 1.0a' not 1.0  					var qs = HttpUtility.ParseQueryString (context.Request.Url.Query);  					if (!String.IsNullOrEmpty (qs ["oauth_verifier"]))  						Auth.Verifier = qs ["oauth_verifier"];  					try {  						if (!Auth.GetAccessAfterAuthorization ())  							throw new ApplicationException ("Unknown error getting access token");  						Logger.Debug ("Successfully authorized web sync");  					} catch (Exception e) {  						listener.Stop ();  						listener.Close ();  						Logger.Error ("Failed to authorize web sync' with exception:");  						Logger.Error (e.ToString ());  						Gtk.Application.Invoke (delegate {  							authButton.Label = Catalog.GetString ("Authorization Failed' Try Again");  							authButton.Sensitive = true;  						});  						oauth = null;  						return;  					}  					string htmlResponse =  						String.Format (callbackHtmlTemplate'  						               // Translators: Title of web page presented to user after they authorized Tomboy for sync  						               Catalog.GetString ("Tomboy Web Authorization Successful")'  						               // Translators: Body of web page presented to user after they authorized Tomboy for sync  						               Catalog.GetString ("Please return to the Tomboy Preferences window and press Save to start synchronizing."));  					using (var writer = new System.IO.StreamWriter (context.Response.OutputStream))  						writer.Write (htmlResponse);  					listener.Stop ();  					listener.Close ();    					if (Auth.IsAccessToken) {  						Gtk.Application.Invoke (delegate {  							authButton.Sensitive = false;  							authButton.Label = Catalog.GetString ("Connected. Press Save to start synchronizing");  						});  					}  				}' null);    				Logger.Debug ("Launching browser to authorize web sync: " + authUrl);  				authButton.Label = Catalog.GetString ("Authorizing in browser (Press to reset connection)");  				try {  					Services.NativeApplication.OpenUrl (authUrl' Screen);  				} catch (Exception e) {  					listener.Stop ();  					listener.Close ();  					Logger.Error ("Exception opening URL: " + e.Message);  					// Translators: Sometimes a user's default browser is not set' so we recommend setting it and trying again  					authButton.Label = Catalog.GetString ("Set the default browser and try again");  					return;  				}  				// Translators: The user must take action in their web browser to continue the authorization process  				authButton.Label = Catalog.GetString ("Authorizing in browser (Press to reset connection)");  			}
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The following statement contains a magic number: if (!Auth.IsAccessToken) {  				listener = new HL.HttpListener ();  				int portToTry = 8000;  				string callbackUrl = string.Empty;  				while (!listener.IsListening && portToTry < 9000) {  					callbackUrl = String.Format ("http://localhost:{0}/tomboy-web-sync/"'  					                            portToTry);  					try {  						listener.Prefixes.Add (callbackUrl);  					} catch (Exception e) {  						Logger.Error ("Exception while trying to add {0} as an HttpListener Prefix"'  							callbackUrl);  						Logger.Error (e.ToString ());  						break;  					}  					try {  						listener.Start ();  						Auth.CallbackUrl = callbackUrl;  					} catch {  						listener.Prefixes.Clear ();  						portToTry++;  					}  				}    				if (!listener.IsListening) {  					Logger.Error ("Unable to start HttpListener on any port between 8000-8999");  					authButton.Label = Catalog.GetString ("Server not responding. Try again later.");  					oauth = null;  					return;  				}    				Logger.Debug ("Listening on {0} for OAuth callback"' callbackUrl);  				string authUrl = string.Empty;  				try {  					authUrl = Auth.GetAuthorizationUrl ();  				} catch (Exception e) {  					listener.Stop ();  					listener.Close ();  					Logger.Error ("Failed to get auth URL from " + Server + ". Exception was: " + e.ToString ());  					// Translators: The web service supporting Tomboy WebSync is not responding as expected  					authButton.Label = Catalog.GetString ("Server not responding. Try again later.");  					oauth = null;  					return;  				}    				IAsyncResult result = listener.BeginGetContext (delegate (IAsyncResult localResult) {  					HL.HttpListenerContext context;  					try {  						context = listener.EndGetContext (localResult);  					} catch (Exception e) {  						// TODO: Figure out why this error occurs  						Logger.Error ("Error processing OAuth callback. Could be a sign that you pressed the button to reset the connection. Exception details:");  						Logger.Error (e.ToString ());  						return;  					}  					// Assuming if we got here user clicked Allow  					Logger.Debug ("Context request uri query section: " + context.Request.Url.Query);  					// oauth_verifier is required in OAuth 1.0a' not 1.0  					var qs = HttpUtility.ParseQueryString (context.Request.Url.Query);  					if (!String.IsNullOrEmpty (qs ["oauth_verifier"]))  						Auth.Verifier = qs ["oauth_verifier"];  					try {  						if (!Auth.GetAccessAfterAuthorization ())  							throw new ApplicationException ("Unknown error getting access token");  						Logger.Debug ("Successfully authorized web sync");  					} catch (Exception e) {  						listener.Stop ();  						listener.Close ();  						Logger.Error ("Failed to authorize web sync' with exception:");  						Logger.Error (e.ToString ());  						Gtk.Application.Invoke (delegate {  							authButton.Label = Catalog.GetString ("Authorization Failed' Try Again");  							authButton.Sensitive = true;  						});  						oauth = null;  						return;  					}  					string htmlResponse =  						String.Format (callbackHtmlTemplate'  						               // Translators: Title of web page presented to user after they authorized Tomboy for sync  						               Catalog.GetString ("Tomboy Web Authorization Successful")'  						               // Translators: Body of web page presented to user after they authorized Tomboy for sync  						               Catalog.GetString ("Please return to the Tomboy Preferences window and press Save to start synchronizing."));  					using (var writer = new System.IO.StreamWriter (context.Response.OutputStream))  						writer.Write (htmlResponse);  					listener.Stop ();  					listener.Close ();    					if (Auth.IsAccessToken) {  						Gtk.Application.Invoke (delegate {  							authButton.Sensitive = false;  							authButton.Label = Catalog.GetString ("Connected. Press Save to start synchronizing");  						});  					}  				}' null);    				Logger.Debug ("Launching browser to authorize web sync: " + authUrl);  				authButton.Label = Catalog.GetString ("Authorizing in browser (Press to reset connection)");  				try {  					Services.NativeApplication.OpenUrl (authUrl' Screen);  				} catch (Exception e) {  					listener.Stop ();  					listener.Close ();  					Logger.Error ("Exception opening URL: " + e.Message);  					// Translators: Sometimes a user's default browser is not set' so we recommend setting it and trying again  					authButton.Label = Catalog.GetString ("Set the default browser and try again");  					return;  				}  				// Translators: The user must take action in their web browser to continue the authorization process  				authButton.Label = Catalog.GetString ("Authorizing in browser (Press to reset connection)");  			}
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,AddRow,The following statement contains a magic number: table.Attach (widget' 1' 2' row' row + 1'  			              Gtk.AttachOptions.Expand | Gtk.AttachOptions.Fill'  			              Gtk.AttachOptions.Expand | Gtk.AttachOptions.Fill'  			              0' 0);
Missing Default,MonoHttp,HttpListenerRequest,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerRequest.cs,AddHeader,The following switch statement is missing a default case: switch (lower) {  				case "accept-language":  					user_languages = val.Split ('''); // yes' only split with a '''  					break;  				case "accept":  					accept_types = val.Split ('''); // yes' only split with a '''  					break;  				case "content-length":  					try {  						//TODO: max. content_length?  						content_length = Int64.Parse (val.Trim ());  						if (content_length < 0)  							context.ErrorMessage = "Invalid Content-Length.";  						cl_set = true;  					} catch {  						context.ErrorMessage = "Invalid Content-Length.";  					}    					break;  				case "referer":  					try {  						referrer = new Uri (val);  					} catch {  						referrer = new Uri ("http://someone.is.screwing.with.the.headers.com/");  					}  					break;  				case "cookie":  					if (cookies == null)  						cookies = new CookieCollection();    					string[] cookieStrings = val.Split(new char[] {'''' ';'});  					Cookie current = null;  					int version = 0;  					foreach (string cookieString in cookieStrings) {  						string str = cookieString.Trim ();  						if (str.Length == 0)  							continue;  						if (str.StartsWith ("$Version")) {  							version = Int32.Parse (Unquote (str.Substring (str.IndexOf ("=") + 1)));  						} else if (str.StartsWith ("$Path")) {  							if (current != null)  								current.Path = str.Substring (str.IndexOf ("=") + 1).Trim ();  						} else if (str.StartsWith ("$Domain")) {  							if (current != null)  								current.Domain = str.Substring (str.IndexOf ("=") + 1).Trim ();  						} else if (str.StartsWith ("$Port")) {  							if (current != null)  								current.Port = str.Substring (str.IndexOf ("=") + 1).Trim ();  						} else {  							if (current != null) {  								cookies.Add (current);  							}  							current = new Cookie ();  							int idx = str.IndexOf ("=");  							if (idx > 0) {  								current.Name = str.Substring (0' idx).Trim ();  								current.Value =  str.Substring (idx + 1).Trim ();  							} else {  								current.Name = str.Trim ();  								current.Value = String.Empty;  							}  							current.Version = version;  						}  					}  					if (current != null) {  						cookies.Add (current);  					}  					break;  			}
Missing Default,MonoHttp,HttpListenerResponse,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\MonoHttp\HttpListenerResponse.cs,GetStatusDescription,The following switch statement is missing a default case: switch (code){  			case 100: return "Continue";  			case 101: return "Switching Protocols";  			case 102: return "Processing";  			case 200: return "OK";  			case 201: return "Created";  			case 202: return "Accepted";  			case 203: return "Non-Authoritative Information";  			case 204: return "No Content";  			case 205: return "Reset Content";  			case 206: return "Partial Content";  			case 207: return "Multi-Status";  			case 300: return "Multiple Choices";  			case 301: return "Moved Permanently";  			case 302: return "Found";  			case 303: return "See Other";  			case 304: return "Not Modified";  			case 305: return "Use Proxy";  			case 307: return "Temporary Redirect";  			case 400: return "Bad Request";  			case 401: return "Unauthorized";  			case 402: return "Payment Required";  			case 403: return "Forbidden";  			case 404: return "Not Found";  			case 405: return "Method Not Allowed";  			case 406: return "Not Acceptable";  			case 407: return "Proxy Authentication Required";  			case 408: return "Request Timeout";  			case 409: return "Conflict";  			case 410: return "Gone";  			case 411: return "Length Required";  			case 412: return "Precondition Failed";  			case 413: return "Request Entity Too Large";  			case 414: return "Request-Uri Too Long";  			case 415: return "Unsupported Media Type";  			case 416: return "Requested Range Not Satisfiable";  			case 417: return "Expectation Failed";  			case 422: return "Unprocessable Entity";  			case 423: return "Locked";  			case 424: return "Failed Dependency";  			case 500: return "Internal Server Error";  			case 501: return "Not Implemented";  			case 502: return "Bad Gateway";  			case 503: return "Service Unavailable";  			case 504: return "Gateway Timeout";  			case 505: return "Http Version Not Supported";  			case 507: return "Insufficient Storage";  			}
Missing Default,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The following switch statement is missing a default case: switch (signatureType) {  				case SignatureType.HMACSHA1:  					signatureString = "HMAC-SHA1";  					break;  				case SignatureType.RSASHA1:  					signatureString = "RSA-SHA1";  					break;  				case SignatureType.PLAINTEXT:  					signatureString = SignatureType.PLAINTEXT.ToString ();  					break;  			}
