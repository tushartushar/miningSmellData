Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The method has 130 lines of code.
Complex Method,Tomboy.WebSync.Api,NoteInfo,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\NoteInfo.cs,ParseJson,Cyclomatic complexity of the method is 14
Complex Method,Tomboy.WebSync.Api,NoteInfo,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\NoteInfo.cs,ToUpdateObject,Cyclomatic complexity of the method is 13
Complex Method,Hyena.Json,Serializer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Serializer.cs,Serialize,Cyclomatic complexity of the method is 8
Complex Method,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,Cyclomatic complexity of the method is 8
Complex Method,Tomboy.WebSync,NoteConvert,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteInfo,Cyclomatic complexity of the method is 11
Long Parameter List,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The method has 12 parameters. Parameters: url' consumerKey' token' tokenSecret' verifier' method' timeStamp' nonce' signatureType' callbackUrl' normalizedUrl' parameters
Long Parameter List,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignature,The method has 12 parameters. Parameters: url' consumerKey' consumerSecret' token' tokenSecret' verifier' method' timeStamp' nonce' callbackUrl' normalizedUrl' parameters
Long Parameter List,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignature,The method has 13 parameters. Parameters: url' consumerKey' consumerSecret' token' tokenSecret' verifier' method' timeStamp' nonce' signatureType' callbackUrl' normalizedUrl' parameters
Long Identifier,Tomboy.WebSync.Api,NoteInfo,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\NoteInfo.cs,,The length of the parameter LastMetadataChangeDateElementName is 33.
Long Statement,Tomboy.WebSync.Api,OAuth,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\OAuth.cs,GetAuthorizationUrl,The length of the statement  "					var link = string.Format ("{0}?oauth_token={1}&oauth_callback={2}"' AuthorizeLocation' qs ["oauth_token"]' HttpUtility.UrlEncode (CallbackUrl)); " is 144.
Long Statement,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The length of the statement  "						Logger.Error ("Error processing OAuth callback. Could be a sign that you pressed the button to reset the connection. Exception details:"); " is 138.
Long Statement,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The length of the statement  "				new QueryParameter<string> (OAuthTimestampKey' ((long)timeStamp.TotalSeconds).ToString ()' s => string.IsNullOrEmpty (s))' " is 122.
Long Statement,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The length of the statement  "			if (!string.IsNullOrEmpty (token)) parameters.Add (new QueryParameter<string> (OAuthTokenKey' token' s => string.IsNullOrEmpty (s))); " is 133.
Long Statement,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The length of the statement  "			if (!string.IsNullOrEmpty (verifier)) parameters.Add (new QueryParameter<string> (OAuthVerifierKey' verifier' s => string.IsNullOrEmpty (s))); " is 142.
Long Statement,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The length of the statement  "			if (!string.IsNullOrEmpty (callbackUrl)) parameters.Add (new QueryParameter<string> (OAuthCallbackKey' UrlEncode (callbackUrl)' s => string.IsNullOrEmpty (s))); " is 160.
Long Statement,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The length of the statement  "			if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))) normalizedUrl += ":" + url.Port; " is 127.
Complex Conditional,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The conditional expression  "!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))"  is complex.
Magic Number,Hyena.Json,JsonArray,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonArray.cs,Dump,The following statement contains a magic number: foreach (object item in this) {                  Console.Write (String.Empty.PadLeft (levels * 2' ' '));                  if (item is IJsonCollection) {                      ((IJsonCollection)item).Dump (levels + 1);                  } else {                      Console.WriteLine (item);                  }              }
Magic Number,Hyena.Json,JsonArray,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonArray.cs,Dump,The following statement contains a magic number: Console.WriteLine ("{0}]"' String.Empty.PadLeft ((levels - 1) * 2' ' '));
Magic Number,Hyena.Json,JsonObject,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonObject.cs,Dump,The following statement contains a magic number: foreach (KeyValuePair<string' object> item in this) {                  Console.Write ("{0}\"{1}\" : "' String.Empty.PadLeft (levels * 2' ' ')' item.Key);                  if (item.Value is IJsonCollection) {                      ((IJsonCollection)item.Value).Dump (levels + 1);                  } else {                      Console.WriteLine (item.Value);                  }              }
Magic Number,Hyena.Json,JsonObject,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonObject.cs,Dump,The following statement contains a magic number: Console.WriteLine ("{0}}}"' String.Empty.PadLeft ((levels - 1) * 2' ' '));
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,GetStringBuilder,The following statement contains a magic number: if (string_buffer == null) {                  string_buffer = new StringBuilder (64);                  return string_buffer;              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexString,The following statement contains a magic number: while (!reader.EndOfStream) {                  if (read) {                      ReadChar ();                  }                                    read = true;                    if (peek == '\\') {                      ReadChar ();                      switch (peek) {                          case 'u':                              ReadChar ();                              buffer.Append ((char)LexInt (true' 4));                              read = false;                              break;                          case '"':                          case '\\':                          case '/': buffer.Append (peek); break;                          case 'b': buffer.Append ('\b'); break;                          case 'f': buffer.Append ('\f'); break;                          case 'n': buffer.Append ('\n'); break;                          case 'r': buffer.Append ('\r'); break;                          case 't': buffer.Append ('\t'); break;                          default:                              UnexpectedCharacter (peek);                              break;                      }                  } else if (peek == '"') {                      ReadChar ();                      return buffer.ToString ();                  } else {                      buffer.Append (peek);                  }              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {                  value = (hex ? 16 : 10) * value +  (hex                       ? peek >= 'A' && peek <= 'F'                          ? 10 + peek - 'A'                          : (peek >= 'a' && peek <= 'f'                              ? 10 + peek - 'a'                              : peek - '0')                      : peek - '0');                                        if (maxDigits > 0 && ++count >= maxDigits) {                      ReadChar ();                      return value;                  }                                    ReadChar ();              } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {                  value = (hex ? 16 : 10) * value +  (hex                       ? peek >= 'A' && peek <= 'F'                          ? 10 + peek - 'A'                          : (peek >= 'a' && peek <= 'f'                              ? 10 + peek - 'a'                              : peek - '0')                      : peek - '0');                                        if (maxDigits > 0 && ++count >= maxDigits) {                      ReadChar ();                      return value;                  }                                    ReadChar ();              } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {                  value = (hex ? 16 : 10) * value +  (hex                       ? peek >= 'A' && peek <= 'F'                          ? 10 + peek - 'A'                          : (peek >= 'a' && peek <= 'f'                              ? 10 + peek - 'a'                              : peek - '0')                      : peek - '0');                                        if (maxDigits > 0 && ++count >= maxDigits) {                      ReadChar ();                      return value;                  }                                    ReadChar ();              } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {                  value = (hex ? 16 : 10) * value +  (hex                       ? peek >= 'A' && peek <= 'F'                          ? 10 + peek - 'A'                          : (peek >= 'a' && peek <= 'f'                              ? 10 + peek - 'a'                              : peek - '0')                      : peek - '0');                                        if (maxDigits > 0 && ++count >= maxDigits) {                      ReadChar ();                      return value;                  }                                    ReadChar ();              } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexFraction,The following statement contains a magic number: double d = 10;
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexFraction,The following statement contains a magic number: while (true) {                  ReadChar ();                    if (!Char.IsDigit (peek)) {                      break;                  }                    fraction += (peek - '0') / d;                  d *= 10;              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == 'e' || peek == 'E') {                  isDouble = true;                  ReadChar ();                  if (peek == '-') {                      ReadChar ();                      doubleVal /= Math.Pow (10' LexInt ());                  } else if (peek == '+') {                      ReadChar ();                      doubleVal *= Math.Pow (10' LexInt ());                  } else if (Char.IsDigit (peek)) {                      doubleVal *= Math.Pow (10' LexInt ());                  } else {                      InvalidSyntax ("Malformed exponent");                  }              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == 'e' || peek == 'E') {                  isDouble = true;                  ReadChar ();                  if (peek == '-') {                      ReadChar ();                      doubleVal /= Math.Pow (10' LexInt ());                  } else if (peek == '+') {                      ReadChar ();                      doubleVal *= Math.Pow (10' LexInt ());                  } else if (Char.IsDigit (peek)) {                      doubleVal *= Math.Pow (10' LexInt ());                  } else {                      InvalidSyntax ("Malformed exponent");                  }              }
Magic Number,Hyena.Json,Tokenizer,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == 'e' || peek == 'E') {                  isDouble = true;                  ReadChar ();                  if (peek == '-') {                      ReadChar ();                      doubleVal /= Math.Pow (10' LexInt ());                  } else if (peek == '+') {                      ReadChar ();                      doubleVal *= Math.Pow (10' LexInt ());                  } else if (Char.IsDigit (peek)) {                      doubleVal *= Math.Pow (10' LexInt ());                  } else {                      InvalidSyntax ("Malformed exponent");                  }              }
Magic Number,Tomboy.WebSync,NoteConvert,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteInfo,The following statement contains a magic number: if (versionGroup.Success &&  			    double.TryParse (versionGroup.Value' out contentVersion)) {  				noteInfo.NoteContentVersion = contentVersion;  			} else  				noteInfo.NoteContentVersion = 0.1;
Magic Number,Tomboy.WebSync,NoteConvert,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteInfo,The following statement contains a magic number: if (contentGroup.Success) {  				string [] splits =  					contentGroup.Value.Split (new char [] {'\n'}' 2);  				if (splits.Length > 1 && splits [1].Length > 0) {  					StringBuilder builder = new StringBuilder (contentGroup.Value.Length);  					bool inTag = false;  					// Strip everything out of first line' except for XML tags  					// TODO: Handle 'note-title' element differently?  					//       Ideally we would want to get rid of it completely.  					foreach (char c in splits [0]) {  						if (!inTag && c == '<')  							inTag = true;  						if (inTag) {  							builder.Append (c);  							if (c == '>')  								inTag = false;  						}  					}  					  					// Trim leading newline' if there is one  					if (splits [1][0] == '\n')  						builder.Append (splits [1]' 1' splits [1].Length - 1);  					else  						builder.Append (splits [1]);  					  					noteInfo.NoteContent = builder.ToString ();  				}  			}
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,WebSyncPreferencesWidget,The following statement contains a magic number: Gtk.Table prefsTable = new Gtk.Table (1' 2' false);
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,WebSyncPreferencesWidget,The following statement contains a magic number: prefsTable.RowSpacing = 5;
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,WebSyncPreferencesWidget,The following statement contains a magic number: prefsTable.ColumnSpacing = 10;
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The following statement contains a magic number: if (!Auth.IsAccessToken) {  				listener = new HL.HttpListener ();  				int portToTry = 8000;  				string callbackUrl = string.Empty;  				while (!listener.IsListening && portToTry < 9000) {  					callbackUrl = String.Format ("http://localhost:{0}/tomboy-web-sync/"'  					                            portToTry);  					try {  						listener.Prefixes.Add (callbackUrl);  					} catch (Exception e) {  						Logger.Error ("Exception while trying to add {0} as an HttpListener Prefix"'  							callbackUrl);  						Logger.Error (e.ToString ());  						break;  					}  					try {  						listener.Start ();  						Auth.CallbackUrl = callbackUrl;  					} catch {  						listener.Prefixes.Clear ();  						portToTry++;  					}  				}    				if (!listener.IsListening) {  					Logger.Error ("Unable to start HttpListener on any port between 8000-8999");  					authButton.Label = Catalog.GetString ("Server not responding. Try again later.");  					oauth = null;  					return;  				}    				Logger.Debug ("Listening on {0} for OAuth callback"' callbackUrl);  				string authUrl = string.Empty;  				try {  					authUrl = Auth.GetAuthorizationUrl ();  				} catch (Exception e) {  					listener.Stop ();  					listener.Close ();  					Logger.Error ("Failed to get auth URL from " + Server + ". Exception was: " + e.ToString ());  					// Translators: The web service supporting Tomboy WebSync is not responding as expected  					authButton.Label = Catalog.GetString ("Server not responding. Try again later.");  					oauth = null;  					return;  				}    				IAsyncResult result = listener.BeginGetContext (delegate (IAsyncResult localResult) {  					HL.HttpListenerContext context;  					try {  						context = listener.EndGetContext (localResult);  					} catch (Exception e) {  						// TODO: Figure out why this error occurs  						Logger.Error ("Error processing OAuth callback. Could be a sign that you pressed the button to reset the connection. Exception details:");  						Logger.Error (e.ToString ());  						return;  					}  					// Assuming if we got here user clicked Allow  					Logger.Debug ("Context request uri query section: " + context.Request.Url.Query);  					// oauth_verifier is required in OAuth 1.0a' not 1.0  					var qs = HttpUtility.ParseQueryString (context.Request.Url.Query);  					if (!String.IsNullOrEmpty (qs ["oauth_verifier"]))  						Auth.Verifier = qs ["oauth_verifier"];  					try {  						if (!Auth.GetAccessAfterAuthorization ())  							throw new ApplicationException ("Unknown error getting access token");  						Logger.Debug ("Successfully authorized web sync");  					} catch (Exception e) {  						listener.Stop ();  						listener.Close ();  						Logger.Error ("Failed to authorize web sync' with exception:");  						Logger.Error (e.ToString ());  						Gtk.Application.Invoke (delegate {  							authButton.Label = Catalog.GetString ("Authorization Failed' Try Again");  							authButton.Sensitive = true;  						});  						oauth = null;  						return;  					}  					string htmlResponse =  						String.Format (callbackHtmlTemplate'  						               // Translators: Title of web page presented to user after they authorized Tomboy for sync  						               Catalog.GetString ("Tomboy Web Authorization Successful")'  						               // Translators: Body of web page presented to user after they authorized Tomboy for sync  						               Catalog.GetString ("Please return to the Tomboy Preferences window and press Save to start synchronizing."));  					using (var writer = new System.IO.StreamWriter (context.Response.OutputStream))  						writer.Write (htmlResponse);  					listener.Stop ();  					listener.Close ();    					if (Auth.IsAccessToken) {  						Gtk.Application.Invoke (delegate {  							authButton.Sensitive = false;  							authButton.Label = Catalog.GetString ("Connected. Press Save to start synchronizing");  						});  					}  				}' null);    				Logger.Debug ("Launching browser to authorize web sync: " + authUrl);  				authButton.Label = Catalog.GetString ("Authorizing in browser (Press to reset connection)");  				try {  					Services.NativeApplication.OpenUrl (authUrl' Screen);  				} catch (Exception e) {  					listener.Stop ();  					listener.Close ();  					Logger.Error ("Exception opening URL: " + e.Message);  					// Translators: Sometimes a user's default browser is not set' so we recommend setting it and trying again  					authButton.Label = Catalog.GetString ("Set the default browser and try again");  					return;  				}  				// Translators: The user must take action in their web browser to continue the authorization process  				authButton.Label = Catalog.GetString ("Authorizing in browser (Press to reset connection)");  			}
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The following statement contains a magic number: if (!Auth.IsAccessToken) {  				listener = new HL.HttpListener ();  				int portToTry = 8000;  				string callbackUrl = string.Empty;  				while (!listener.IsListening && portToTry < 9000) {  					callbackUrl = String.Format ("http://localhost:{0}/tomboy-web-sync/"'  					                            portToTry);  					try {  						listener.Prefixes.Add (callbackUrl);  					} catch (Exception e) {  						Logger.Error ("Exception while trying to add {0} as an HttpListener Prefix"'  							callbackUrl);  						Logger.Error (e.ToString ());  						break;  					}  					try {  						listener.Start ();  						Auth.CallbackUrl = callbackUrl;  					} catch {  						listener.Prefixes.Clear ();  						portToTry++;  					}  				}    				if (!listener.IsListening) {  					Logger.Error ("Unable to start HttpListener on any port between 8000-8999");  					authButton.Label = Catalog.GetString ("Server not responding. Try again later.");  					oauth = null;  					return;  				}    				Logger.Debug ("Listening on {0} for OAuth callback"' callbackUrl);  				string authUrl = string.Empty;  				try {  					authUrl = Auth.GetAuthorizationUrl ();  				} catch (Exception e) {  					listener.Stop ();  					listener.Close ();  					Logger.Error ("Failed to get auth URL from " + Server + ". Exception was: " + e.ToString ());  					// Translators: The web service supporting Tomboy WebSync is not responding as expected  					authButton.Label = Catalog.GetString ("Server not responding. Try again later.");  					oauth = null;  					return;  				}    				IAsyncResult result = listener.BeginGetContext (delegate (IAsyncResult localResult) {  					HL.HttpListenerContext context;  					try {  						context = listener.EndGetContext (localResult);  					} catch (Exception e) {  						// TODO: Figure out why this error occurs  						Logger.Error ("Error processing OAuth callback. Could be a sign that you pressed the button to reset the connection. Exception details:");  						Logger.Error (e.ToString ());  						return;  					}  					// Assuming if we got here user clicked Allow  					Logger.Debug ("Context request uri query section: " + context.Request.Url.Query);  					// oauth_verifier is required in OAuth 1.0a' not 1.0  					var qs = HttpUtility.ParseQueryString (context.Request.Url.Query);  					if (!String.IsNullOrEmpty (qs ["oauth_verifier"]))  						Auth.Verifier = qs ["oauth_verifier"];  					try {  						if (!Auth.GetAccessAfterAuthorization ())  							throw new ApplicationException ("Unknown error getting access token");  						Logger.Debug ("Successfully authorized web sync");  					} catch (Exception e) {  						listener.Stop ();  						listener.Close ();  						Logger.Error ("Failed to authorize web sync' with exception:");  						Logger.Error (e.ToString ());  						Gtk.Application.Invoke (delegate {  							authButton.Label = Catalog.GetString ("Authorization Failed' Try Again");  							authButton.Sensitive = true;  						});  						oauth = null;  						return;  					}  					string htmlResponse =  						String.Format (callbackHtmlTemplate'  						               // Translators: Title of web page presented to user after they authorized Tomboy for sync  						               Catalog.GetString ("Tomboy Web Authorization Successful")'  						               // Translators: Body of web page presented to user after they authorized Tomboy for sync  						               Catalog.GetString ("Please return to the Tomboy Preferences window and press Save to start synchronizing."));  					using (var writer = new System.IO.StreamWriter (context.Response.OutputStream))  						writer.Write (htmlResponse);  					listener.Stop ();  					listener.Close ();    					if (Auth.IsAccessToken) {  						Gtk.Application.Invoke (delegate {  							authButton.Sensitive = false;  							authButton.Label = Catalog.GetString ("Connected. Press Save to start synchronizing");  						});  					}  				}' null);    				Logger.Debug ("Launching browser to authorize web sync: " + authUrl);  				authButton.Label = Catalog.GetString ("Authorizing in browser (Press to reset connection)");  				try {  					Services.NativeApplication.OpenUrl (authUrl' Screen);  				} catch (Exception e) {  					listener.Stop ();  					listener.Close ();  					Logger.Error ("Exception opening URL: " + e.Message);  					// Translators: Sometimes a user's default browser is not set' so we recommend setting it and trying again  					authButton.Label = Catalog.GetString ("Set the default browser and try again");  					return;  				}  				// Translators: The user must take action in their web browser to continue the authorization process  				authButton.Label = Catalog.GetString ("Authorizing in browser (Press to reset connection)");  			}
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,AddRow,The following statement contains a magic number: table.Attach (widget' 1' 2' row' row + 1'  			              Gtk.AttachOptions.Expand | Gtk.AttachOptions.Fill'  			              Gtk.AttachOptions.Expand | Gtk.AttachOptions.Fill'  			              0' 0);
Magic Number,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))) normalizedUrl += ":" + url.Port;
Magic Number,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))) normalizedUrl += ":" + url.Port;
Magic Number,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateTimeStamp,The following statement contains a magic number: return DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateNonce,The following statement contains a magic number: return random.Next (123400' 9999999).ToString ();
Magic Number,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateNonce,The following statement contains a magic number: return random.Next (123400' 9999999).ToString ();
Magic Number,Mono.Rocks,IEnumerableRocks,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Mono.Rocks\IEnumerable.cs,Implode,The following statement contains a magic number: string[] values = new string [c != null ? c.Count : 10];
Magic Number,Mono.Rocks,IEnumerableRocks,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Mono.Rocks\IEnumerable.cs,Implode,The following statement contains a magic number: foreach (var e in self) {  				if (values.Length == i)  					Array.Resize (ref values' i*2);  				values [i++] = selector (e);  			}
Missing Default,OAuth,Base,C:\repos\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The following switch statement is missing a default case: switch (signatureType) {  				case SignatureType.HMACSHA1:  					signatureString = "HMAC-SHA1";  					break;  				case SignatureType.RSASHA1:  					signatureString = "RSA-SHA1";  					break;  				case SignatureType.PLAINTEXT:  					signatureString = SignatureType.PLAINTEXT.ToString ();  					break;  			}
