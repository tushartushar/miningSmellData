Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tomboy.WebSync,WebSyncPreferencesWidget,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The method has 125 lines of code.
Complex Method,Tomboy.WebSync.Api,NoteInfo,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\NoteInfo.cs,ParseJson,Cyclomatic complexity of the method is 16
Complex Method,Tomboy.WebSync.Api,NoteInfo,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\NoteInfo.cs,ToUpdateObject,Cyclomatic complexity of the method is 14
Complex Method,Tomboy.WebSync.Api,OAuth,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\OAuth.cs,MakeWebRequest,Cyclomatic complexity of the method is 9
Complex Method,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexString,Cyclomatic complexity of the method is 34
Complex Method,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,Cyclomatic complexity of the method is 8
Complex Method,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,InnerScan,Cyclomatic complexity of the method is 27
Complex Method,Tomboy.WebSync,NoteConvert,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteInfo,Cyclomatic complexity of the method is 12
Complex Method,Tomboy.WebSync,WebSyncPreferencesWidget,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,Cyclomatic complexity of the method is 11
Complex Method,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,Cyclomatic complexity of the method is 14
Complex Method,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignature,Cyclomatic complexity of the method is 13
Long Parameter List,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The method has 12 parameters.
Long Parameter List,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignature,The method has 12 parameters.
Long Parameter List,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignature,The method has 13 parameters.
Long Statement,Tomboy.WebSync.Api,NoteInfo,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\NoteInfo.cs,ToUpdateObject,The length of the statement  "		noteUpdateObj [LastMetadataChangeDateElementName] = LastMetadataChangeDate.Value.ToString (NoteArchiver.DATE_TIME_FORMAT); " is 122.
Long Statement,Tomboy.WebSync.Api,UserInfo,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\UserInfo.cs,UpdateNotes,The length of the statement  "	string jsonResponseString = Connection.Put (Notes.ApiRef' null' CreateNoteChangesJsonString (noteUpdates' expectedNewRevision)); " is 128.
Long Statement,Tomboy.WebSync.Api,OAuth,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\OAuth.cs,GetAuthorizationUrl,The length of the statement  "			var link = string.Format ("{0}?oauth_token={1}&oauth_callback={2}"' AuthorizeLocation' qs ["oauth_token"]' HttpUtility.UrlEncode (CallbackUrl)); " is 144.
Long Statement,Tomboy.WebSync.Api,OAuth,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\OAuth.cs,WebRequest,The length of the statement  "	var sig = GenerateSignature (uri' ConsumerKey' ConsumerSecret' Token' TokenSecret' Verifier' method' timeStamp' nonce' callbackUrl' out outUrl' out parameters); " is 160.
Long Statement,Tomboy.WebSync.Api,OAuth,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Api\OAuth.cs,WebRequest,The length of the statement  "	parameters.Add (new QueryParameter<string> ("oauth_signature"' HttpUtility.UrlEncode (sig)' s => string.IsNullOrEmpty (s))); " is 124.
Long Statement,Hyena.Json,Deserializer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Deserializer.cs,UnexpectedToken,The length of the statement  "	throw new ApplicationException (String.Format ("Unexpected token {0} at [{1}:{2}]; expected {3}"' got.Type' got.SourceLine' got.SourceColumn' expected)); " is 153.
Long Statement,Hyena.Json,Serializer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Serializer.cs,SerializeString,The length of the statement  "	return "\"" + val.Replace ("\\"' "\\\\").Replace ("\""' "\\\"").Replace ("\b"' "\\b").Replace ("\f"' "\\f").Replace ("\n"' "\\n").Replace ("\r"' "\\r").Replace ("\t"' "\\t") + "\""; " is 181.
Long Statement,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,UnexpectedCharacter,The length of the statement  "	throw new ApplicationException (String.Format ("Unexpected character '{0}' at [{1}:{2}]"' ch' current_line' current_column - 1)); " is 129.
Long Statement,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,InvalidSyntax,The length of the statement  "	throw new ApplicationException (String.Format ("Invalid syntax: {0} at [{1}:{2}]"' message' current_line' current_column)); " is 123.
Long Statement,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The length of the statement  "		value = (hex ? 16 : 10) * value + (hex ? peek >= 'A' && peek <= 'F' ? 10 + peek - 'A' : (peek >= 'a' && peek <= 'f' ? 10 + peek - 'a' : peek - '0') : peek - '0'); " is 162.
Long Statement,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The length of the statement  "		InvalidSyntax ("Numbers starting with 0 must be followed by a . or not " + "followed by a digit (octal syntax not legal)"); " is 123.
Long Statement,Tomboy.WebSync,NoteConvert,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteInfo,The length of the statement  "	noteInfo.Title = note.Title.Replace ("&"' "&amp;").Replace ("<"' "&lt;").Replace (">"' "&gt;").Replace ("\""' "&quot;").Replace ("\'"' "&apos;"); " is 145.
Long Statement,Tomboy.WebSync,NoteConvert,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteInfo,The length of the statement  "	const string noteContentRegex = @"^<note-content([^>]+version=""(?<contentVersion>[^""]*)"")?[^>]*((/>)|(>(?<innerContent>.*)</note-content>))$"; " is 145.
Long Statement,Tomboy.WebSync,NoteConvert,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteData,The length of the statement  "	noteData.Title = noteInfo.Title.Replace ("&amp;"' "&").Replace ("&lt;"' "<").Replace ("&gt;"' ">").Replace ("&quot;"' "\"").Replace ("&apos;"' "\'"); " is 149.
Long Statement,Tomboy.WebSync,NoteConvert,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteData,The length of the statement  "	noteData.Text = string.Format ("<note-content version=\"{0}\">{1}\n\n{2}</note-content>"' noteInfo.NoteContentVersion' noteInfo.Title' noteInfo.NoteContent); " is 157.
Long Statement,Tomboy.WebSync,WebSyncServiceAddin,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncServiceAddin.cs,SaveConfigSettings,The length of the statement  "	Preferences.Set (accessTokenBaseUrlPrefPath' oauthConfig != null ? GetConfigString (oauthConfig.AccessTokenBaseUrl) : String.Empty); " is 132.
Long Statement,Tomboy.WebSync,WebSyncServiceAddin,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncServiceAddin.cs,SaveConfigSettings,The length of the statement  "	Preferences.Set (authorizeLocationPrefPath' oauthConfig != null ? GetConfigString (oauthConfig.AuthorizeLocation) : String.Empty); " is 130.
Long Statement,Tomboy.WebSync,WebSyncServiceAddin,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncServiceAddin.cs,SaveConfigSettings,The length of the statement  "	Preferences.Set (consumerSecretPrefPath' oauthConfig != null ? GetConfigString (oauthConfig.ConsumerSecret) : String.Empty); " is 124.
Long Statement,Tomboy.WebSync,WebSyncServiceAddin,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncServiceAddin.cs,SaveConfigSettings,The length of the statement  "	Preferences.Set (requestTokenBaseUrlPrefPath' oauthConfig != null ? GetConfigString (oauthConfig.RequestTokenBaseUrl) : String.Empty); " is 134.
Long Statement,Tomboy.WebSync,WebSyncPreferencesWidget,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The length of the statement  "				Logger.Error ("Error processing OAuth callback. Could be a sign that you pressed the button to reset the connection. Exception details:"); " is 138.
Long Statement,Tomboy.WebSync,WebSyncPreferencesWidget,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The length of the statement  "			string htmlResponse = String.Format (callbackHtmlTemplate' // Translators: Title of web page presented to user after they authorized Tomboy for sync " is 148.
Long Statement,Tomboy.WebSync,WebSyncPreferencesWidget,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The length of the statement  "			Catalog.GetString ("Tomboy Web Authorization Successful")' // Translators: Body of web page presented to user after they authorized Tomboy for sync " is 147.
Long Statement,Tomboy.WebSync,WebSyncPreferencesWidget,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,AddRow,The length of the statement  "	table.Attach (widget' 1' 2' row' row + 1' Gtk.AttachOptions.Expand | Gtk.AttachOptions.Fill' Gtk.AttachOptions.Expand | Gtk.AttachOptions.Fill' 0' 0); " is 150.
Long Statement,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The length of the statement  "		new QueryParameter<string> (OAuthTimestampKey' ((long)timeStamp.TotalSeconds).ToString ()' s => string.IsNullOrEmpty (s))' " is 122.
Long Statement,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignature,The length of the statement  "	return GenerateSignature (url' consumerKey' consumerSecret' token' tokenSecret' verifier' method' timeStamp' nonce' SignatureType.HMACSHA1' callbackUrl' out normalizedUrl' out parameters); " is 188.
Long Statement,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignature,The length of the statement  "		string signatureBase = GenerateSignatureBase (url' consumerKey' token' tokenSecret' verifier' method' timeStamp' nonce' SignatureType.HMACSHA1' callbackUrl' out normalizedUrl' out parameters); " is 192.
Long Statement,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignature,The length of the statement  "		hmacsha1.Key = Encoding.ASCII.GetBytes (string.Format ("{0}&{1}"' UrlEncode (consumerSecret)' string.IsNullOrEmpty (tokenSecret) ? "" : UrlEncode (tokenSecret))); " is 162.
Long Statement,OAuth,QueryParameter,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\QueryParameter.cs,Equals,The length of the statement  "	return string.Equals (other.Name' Name' StringComparison.OrdinalIgnoreCase) ? EqualityComparer<T>.Default.Equals (other.Value' _value) : false; " is 143.
Complex Conditional,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The conditional expression  "Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F')))"  is complex.
Complex Conditional,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The conditional expression  "!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))"  is complex.
Magic Number,Hyena.Json,JsonArray,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonArray.cs,Dump,The following statement contains a magic number: foreach (object item in this) {  	Console.Write (String.Empty.PadLeft (levels * 2' ' '));  	if (item is IJsonCollection) {  		((IJsonCollection)item).Dump (levels + 1);  	} else {  		Console.WriteLine (item);  	}  }  
Magic Number,Hyena.Json,JsonArray,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonArray.cs,Dump,The following statement contains a magic number: Console.Write (String.Empty.PadLeft (levels * 2' ' '));  
Magic Number,Hyena.Json,JsonArray,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonArray.cs,Dump,The following statement contains a magic number: Console.WriteLine ("{0}]"' String.Empty.PadLeft ((levels - 1) * 2' ' '));  
Magic Number,Hyena.Json,JsonObject,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonObject.cs,Dump,The following statement contains a magic number: foreach (KeyValuePair<string' object> item in this) {  	Console.Write ("{0}\"{1}\" : "' String.Empty.PadLeft (levels * 2' ' ')' item.Key);  	if (item.Value is IJsonCollection) {  		((IJsonCollection)item.Value).Dump (levels + 1);  	} else {  		Console.WriteLine (item.Value);  	}  }  
Magic Number,Hyena.Json,JsonObject,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonObject.cs,Dump,The following statement contains a magic number: Console.Write ("{0}\"{1}\" : "' String.Empty.PadLeft (levels * 2' ' ')' item.Key);  
Magic Number,Hyena.Json,JsonObject,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\JsonObject.cs,Dump,The following statement contains a magic number: Console.WriteLine ("{0}}}"' String.Empty.PadLeft ((levels - 1) * 2' ' '));  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,GetStringBuilder,The following statement contains a magic number: if (string_buffer == null) {  	string_buffer = new StringBuilder (64);  	return string_buffer;  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,GetStringBuilder,The following statement contains a magic number: string_buffer = new StringBuilder (64);  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexString,The following statement contains a magic number: while (!reader.EndOfStream) {  	if (read) {  		ReadChar ();  	}  	read = true;  	if (peek == '\\') {  		ReadChar ();  		switch (peek) {  		case 'u':  			ReadChar ();  			buffer.Append ((char)LexInt (true' 4));  			read = false;  			break;  		case '"':  		case '\\':  		case '/':  			buffer.Append (peek);  			break;  		case 'b':  			buffer.Append ('\b');  			break;  		case 'f':  			buffer.Append ('\f');  			break;  		case 'n':  			buffer.Append ('\n');  			break;  		case 'r':  			buffer.Append ('\r');  			break;  		case 't':  			buffer.Append ('\t');  			break;  		default:  			UnexpectedCharacter (peek);  			break;  		}  	} else if (peek == '"') {  		ReadChar ();  		return buffer.ToString ();  	} else {  		buffer.Append (peek);  	}  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexString,The following statement contains a magic number: if (peek == '\\') {  	ReadChar ();  	switch (peek) {  	case 'u':  		ReadChar ();  		buffer.Append ((char)LexInt (true' 4));  		read = false;  		break;  	case '"':  	case '\\':  	case '/':  		buffer.Append (peek);  		break;  	case 'b':  		buffer.Append ('\b');  		break;  	case 'f':  		buffer.Append ('\f');  		break;  	case 'n':  		buffer.Append ('\n');  		break;  	case 'r':  		buffer.Append ('\r');  		break;  	case 't':  		buffer.Append ('\t');  		break;  	default:  		UnexpectedCharacter (peek);  		break;  	}  } else if (peek == '"') {  	ReadChar ();  	return buffer.ToString ();  } else {  	buffer.Append (peek);  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexString,The following statement contains a magic number: switch (peek) {  case 'u':  	ReadChar ();  	buffer.Append ((char)LexInt (true' 4));  	read = false;  	break;  case '"':  case '\\':  case '/':  	buffer.Append (peek);  	break;  case 'b':  	buffer.Append ('\b');  	break;  case 'f':  	buffer.Append ('\f');  	break;  case 'n':  	buffer.Append ('\n');  	break;  case 'r':  	buffer.Append ('\r');  	break;  case 't':  	buffer.Append ('\t');  	break;  default:  	UnexpectedCharacter (peek);  	break;  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexString,The following statement contains a magic number: buffer.Append ((char)LexInt (true' 4));  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {  	value = (hex ? 16 : 10) * value + (hex ? peek >= 'A' && peek <= 'F' ? 10 + peek - 'A' : (peek >= 'a' && peek <= 'f' ? 10 + peek - 'a' : peek - '0') : peek - '0');  	if (maxDigits > 0 && ++count >= maxDigits) {  		ReadChar ();  		return value;  	}  	ReadChar ();  } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {  	value = (hex ? 16 : 10) * value + (hex ? peek >= 'A' && peek <= 'F' ? 10 + peek - 'A' : (peek >= 'a' && peek <= 'f' ? 10 + peek - 'a' : peek - '0') : peek - '0');  	if (maxDigits > 0 && ++count >= maxDigits) {  		ReadChar ();  		return value;  	}  	ReadChar ();  } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {  	value = (hex ? 16 : 10) * value + (hex ? peek >= 'A' && peek <= 'F' ? 10 + peek - 'A' : (peek >= 'a' && peek <= 'f' ? 10 + peek - 'a' : peek - '0') : peek - '0');  	if (maxDigits > 0 && ++count >= maxDigits) {  		ReadChar ();  		return value;  	}  	ReadChar ();  } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: do {  	value = (hex ? 16 : 10) * value + (hex ? peek >= 'A' && peek <= 'F' ? 10 + peek - 'A' : (peek >= 'a' && peek <= 'f' ? 10 + peek - 'a' : peek - '0') : peek - '0');  	if (maxDigits > 0 && ++count >= maxDigits) {  		ReadChar ();  		return value;  	}  	ReadChar ();  } while (Char.IsDigit (peek) || (hex && ((peek >= 'a' && peek <= 'f') || (peek >= 'A' && peek <= 'F'))));  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: value = (hex ? 16 : 10) * value + (hex ? peek >= 'A' && peek <= 'F' ? 10 + peek - 'A' : (peek >= 'a' && peek <= 'f' ? 10 + peek - 'a' : peek - '0') : peek - '0');  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: value = (hex ? 16 : 10) * value + (hex ? peek >= 'A' && peek <= 'F' ? 10 + peek - 'A' : (peek >= 'a' && peek <= 'f' ? 10 + peek - 'a' : peek - '0') : peek - '0');  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: value = (hex ? 16 : 10) * value + (hex ? peek >= 'A' && peek <= 'F' ? 10 + peek - 'A' : (peek >= 'a' && peek <= 'f' ? 10 + peek - 'a' : peek - '0') : peek - '0');  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexInt,The following statement contains a magic number: value = (hex ? 16 : 10) * value + (hex ? peek >= 'A' && peek <= 'F' ? 10 + peek - 'A' : (peek >= 'a' && peek <= 'f' ? 10 + peek - 'a' : peek - '0') : peek - '0');  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexFraction,The following statement contains a magic number: while (true) {  	ReadChar ();  	if (!Char.IsDigit (peek)) {  		break;  	}  	fraction += (peek - '0') / d;  	d *= 10;  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexFraction,The following statement contains a magic number: d *= 10;  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == 'e' || peek == 'E') {  	isDouble = true;  	ReadChar ();  	if (peek == '-') {  		ReadChar ();  		doubleVal /= Math.Pow (10' LexInt ());  	} else if (peek == '+') {  		ReadChar ();  		doubleVal *= Math.Pow (10' LexInt ());  	} else if (Char.IsDigit (peek)) {  		doubleVal *= Math.Pow (10' LexInt ());  	} else {  		InvalidSyntax ("Malformed exponent");  	}  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == 'e' || peek == 'E') {  	isDouble = true;  	ReadChar ();  	if (peek == '-') {  		ReadChar ();  		doubleVal /= Math.Pow (10' LexInt ());  	} else if (peek == '+') {  		ReadChar ();  		doubleVal *= Math.Pow (10' LexInt ());  	} else if (Char.IsDigit (peek)) {  		doubleVal *= Math.Pow (10' LexInt ());  	} else {  		InvalidSyntax ("Malformed exponent");  	}  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == 'e' || peek == 'E') {  	isDouble = true;  	ReadChar ();  	if (peek == '-') {  		ReadChar ();  		doubleVal /= Math.Pow (10' LexInt ());  	} else if (peek == '+') {  		ReadChar ();  		doubleVal *= Math.Pow (10' LexInt ());  	} else if (Char.IsDigit (peek)) {  		doubleVal *= Math.Pow (10' LexInt ());  	} else {  		InvalidSyntax ("Malformed exponent");  	}  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == '-') {  	ReadChar ();  	doubleVal /= Math.Pow (10' LexInt ());  } else if (peek == '+') {  	ReadChar ();  	doubleVal *= Math.Pow (10' LexInt ());  } else if (Char.IsDigit (peek)) {  	doubleVal *= Math.Pow (10' LexInt ());  } else {  	InvalidSyntax ("Malformed exponent");  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == '-') {  	ReadChar ();  	doubleVal /= Math.Pow (10' LexInt ());  } else if (peek == '+') {  	ReadChar ();  	doubleVal *= Math.Pow (10' LexInt ());  } else if (Char.IsDigit (peek)) {  	doubleVal *= Math.Pow (10' LexInt ());  } else {  	InvalidSyntax ("Malformed exponent");  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == '-') {  	ReadChar ();  	doubleVal /= Math.Pow (10' LexInt ());  } else if (peek == '+') {  	ReadChar ();  	doubleVal *= Math.Pow (10' LexInt ());  } else if (Char.IsDigit (peek)) {  	doubleVal *= Math.Pow (10' LexInt ());  } else {  	InvalidSyntax ("Malformed exponent");  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: doubleVal /= Math.Pow (10' LexInt ());  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == '+') {  	ReadChar ();  	doubleVal *= Math.Pow (10' LexInt ());  } else if (Char.IsDigit (peek)) {  	doubleVal *= Math.Pow (10' LexInt ());  } else {  	InvalidSyntax ("Malformed exponent");  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (peek == '+') {  	ReadChar ();  	doubleVal *= Math.Pow (10' LexInt ());  } else if (Char.IsDigit (peek)) {  	doubleVal *= Math.Pow (10' LexInt ());  } else {  	InvalidSyntax ("Malformed exponent");  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: doubleVal *= Math.Pow (10' LexInt ());  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: if (Char.IsDigit (peek)) {  	doubleVal *= Math.Pow (10' LexInt ());  } else {  	InvalidSyntax ("Malformed exponent");  }  
Magic Number,Hyena.Json,Tokenizer,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\Hyena.Json\Tokenizer.cs,LexNumber,The following statement contains a magic number: doubleVal *= Math.Pow (10' LexInt ());  
Magic Number,Tomboy.WebSync,NoteConvert,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteInfo,The following statement contains a magic number: if (versionGroup.Success && double.TryParse (versionGroup.Value' out contentVersion)) {  	noteInfo.NoteContentVersion = contentVersion;  } else  	noteInfo.NoteContentVersion = 0.1;  
Magic Number,Tomboy.WebSync,NoteConvert,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteInfo,The following statement contains a magic number: noteInfo.NoteContentVersion = 0.1;  
Magic Number,Tomboy.WebSync,NoteConvert,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\NoteConvert.cs,ToNoteInfo,The following statement contains a magic number: if (contentGroup.Success) {  	string[] splits = contentGroup.Value.Split (new char[] {  		'\n'  	}' 2);  	if (splits.Length > 1 && splits [1].Length > 0) {  		StringBuilder builder = new StringBuilder (contentGroup.Value.Length);  		bool inTag = false;  		// Strip everything out of first line' except for XML tags  		// TODO: Handle 'note-title' element differently?  		//       Ideally we would want to get rid of it completely.  		foreach (char c in splits [0]) {  			if (!inTag && c == '<')  				inTag = true;  			if (inTag) {  				builder.Append (c);  				if (c == '>')  					inTag = false;  			}  		}  		// Trim leading newline' if there is one  		if (splits [1] [0] == '\n')  			builder.Append (splits [1]' 1' splits [1].Length - 1);  		else  			builder.Append (splits [1]);  		noteInfo.NoteContent = builder.ToString ();  	}  }  
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,WebSyncPreferencesWidget,The following statement contains a magic number: prefsTable.RowSpacing = 5;  
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,WebSyncPreferencesWidget,The following statement contains a magic number: prefsTable.ColumnSpacing = 10;  
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The following statement contains a magic number: if (!Auth.IsAccessToken) {  	listener = new HL.HttpListener ();  	int portToTry = 8000;  	string callbackUrl = string.Empty;  	while (!listener.IsListening && portToTry < 9000) {  		callbackUrl = String.Format ("http://localhost:{0}/tomboy-web-sync/"' portToTry);  		try {  			listener.Prefixes.Add (callbackUrl);  		} catch (Exception e) {  			Logger.Error ("Exception while trying to add {0} as an HttpListener Prefix"' callbackUrl);  			Logger.Error (e.ToString ());  			break;  		}  		try {  			listener.Start ();  			Auth.CallbackUrl = callbackUrl;  		} catch {  			listener.Prefixes.Clear ();  			portToTry++;  		}  	}  	if (!listener.IsListening) {  		Logger.Error ("Unable to start HttpListener on any port between 8000-8999");  		authButton.Label = Catalog.GetString ("Server not responding. Try again later.");  		oauth = null;  		return;  	}  	Logger.Debug ("Listening on {0} for OAuth callback"' callbackUrl);  	string authUrl = string.Empty;  	try {  		authUrl = Auth.GetAuthorizationUrl ();  	} catch (Exception e) {  		listener.Stop ();  		listener.Close ();  		Logger.Error ("Failed to get auth URL from " + Server + ". Exception was: " + e.ToString ());  		// Translators: The web service supporting Tomboy WebSync is not responding as expected  		authButton.Label = Catalog.GetString ("Server not responding. Try again later.");  		oauth = null;  		return;  	}  	IAsyncResult result = listener.BeginGetContext (delegate (IAsyncResult localResult) {  		HL.HttpListenerContext context;  		try {  			context = listener.EndGetContext (localResult);  		} catch (Exception e) {  			// TODO: Figure out why this error occurs  			Logger.Error ("Error processing OAuth callback. Could be a sign that you pressed the button to reset the connection. Exception details:");  			Logger.Error (e.ToString ());  			return;  		}  		// Assuming if we got here user clicked Allow  		Logger.Debug ("Context request uri query section: " + context.Request.Url.Query);  		// oauth_verifier is required in OAuth 1.0a' not 1.0  		var qs = HttpUtility.ParseQueryString (context.Request.Url.Query);  		if (!String.IsNullOrEmpty (qs ["oauth_verifier"]))  			Auth.Verifier = qs ["oauth_verifier"];  		try {  			if (!Auth.GetAccessAfterAuthorization ())  				throw new ApplicationException ("Unknown error getting access token");  			Logger.Debug ("Successfully authorized web sync");  		} catch (Exception e) {  			listener.Stop ();  			listener.Close ();  			Logger.Error ("Failed to authorize web sync' with exception:");  			Logger.Error (e.ToString ());  			Gtk.Application.Invoke (delegate {  				authButton.Label = Catalog.GetString ("Authorization Failed' Try Again");  				authButton.Sensitive = true;  			});  			oauth = null;  			return;  		}  		string htmlResponse = String.Format (callbackHtmlTemplate' // Translators: Title of web page presented to user after they authorized Tomboy for sync  		Catalog.GetString ("Tomboy Web Authorization Successful")' // Translators: Body of web page presented to user after they authorized Tomboy for sync  		Catalog.GetString ("Please return to the Tomboy Preferences window and press Save to start synchronizing."));  		using (var writer = new System.IO.StreamWriter (context.Response.OutputStream))  			writer.Write (htmlResponse);  		listener.Stop ();  		listener.Close ();  		if (Auth.IsAccessToken) {  			Gtk.Application.Invoke (delegate {  				authButton.Sensitive = false;  				authButton.Label = Catalog.GetString ("Connected. Press Save to start synchronizing");  			});  		}  	}' null);  	Logger.Debug ("Launching browser to authorize web sync: " + authUrl);  	authButton.Label = Catalog.GetString ("Authorizing in browser (Press to reset connection)");  	try {  		Services.NativeApplication.OpenUrl (authUrl' Screen);  	} catch (Exception e) {  		listener.Stop ();  		listener.Close ();  		Logger.Error ("Exception opening URL: " + e.Message);  		// Translators: Sometimes a user's default browser is not set' so we recommend setting it and trying again  		authButton.Label = Catalog.GetString ("Set the default browser and try again");  		return;  	}  	// Translators: The user must take action in their web browser to continue the authorization process  	authButton.Label = Catalog.GetString ("Authorizing in browser (Press to reset connection)");  }  
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The following statement contains a magic number: if (!Auth.IsAccessToken) {  	listener = new HL.HttpListener ();  	int portToTry = 8000;  	string callbackUrl = string.Empty;  	while (!listener.IsListening && portToTry < 9000) {  		callbackUrl = String.Format ("http://localhost:{0}/tomboy-web-sync/"' portToTry);  		try {  			listener.Prefixes.Add (callbackUrl);  		} catch (Exception e) {  			Logger.Error ("Exception while trying to add {0} as an HttpListener Prefix"' callbackUrl);  			Logger.Error (e.ToString ());  			break;  		}  		try {  			listener.Start ();  			Auth.CallbackUrl = callbackUrl;  		} catch {  			listener.Prefixes.Clear ();  			portToTry++;  		}  	}  	if (!listener.IsListening) {  		Logger.Error ("Unable to start HttpListener on any port between 8000-8999");  		authButton.Label = Catalog.GetString ("Server not responding. Try again later.");  		oauth = null;  		return;  	}  	Logger.Debug ("Listening on {0} for OAuth callback"' callbackUrl);  	string authUrl = string.Empty;  	try {  		authUrl = Auth.GetAuthorizationUrl ();  	} catch (Exception e) {  		listener.Stop ();  		listener.Close ();  		Logger.Error ("Failed to get auth URL from " + Server + ". Exception was: " + e.ToString ());  		// Translators: The web service supporting Tomboy WebSync is not responding as expected  		authButton.Label = Catalog.GetString ("Server not responding. Try again later.");  		oauth = null;  		return;  	}  	IAsyncResult result = listener.BeginGetContext (delegate (IAsyncResult localResult) {  		HL.HttpListenerContext context;  		try {  			context = listener.EndGetContext (localResult);  		} catch (Exception e) {  			// TODO: Figure out why this error occurs  			Logger.Error ("Error processing OAuth callback. Could be a sign that you pressed the button to reset the connection. Exception details:");  			Logger.Error (e.ToString ());  			return;  		}  		// Assuming if we got here user clicked Allow  		Logger.Debug ("Context request uri query section: " + context.Request.Url.Query);  		// oauth_verifier is required in OAuth 1.0a' not 1.0  		var qs = HttpUtility.ParseQueryString (context.Request.Url.Query);  		if (!String.IsNullOrEmpty (qs ["oauth_verifier"]))  			Auth.Verifier = qs ["oauth_verifier"];  		try {  			if (!Auth.GetAccessAfterAuthorization ())  				throw new ApplicationException ("Unknown error getting access token");  			Logger.Debug ("Successfully authorized web sync");  		} catch (Exception e) {  			listener.Stop ();  			listener.Close ();  			Logger.Error ("Failed to authorize web sync' with exception:");  			Logger.Error (e.ToString ());  			Gtk.Application.Invoke (delegate {  				authButton.Label = Catalog.GetString ("Authorization Failed' Try Again");  				authButton.Sensitive = true;  			});  			oauth = null;  			return;  		}  		string htmlResponse = String.Format (callbackHtmlTemplate' // Translators: Title of web page presented to user after they authorized Tomboy for sync  		Catalog.GetString ("Tomboy Web Authorization Successful")' // Translators: Body of web page presented to user after they authorized Tomboy for sync  		Catalog.GetString ("Please return to the Tomboy Preferences window and press Save to start synchronizing."));  		using (var writer = new System.IO.StreamWriter (context.Response.OutputStream))  			writer.Write (htmlResponse);  		listener.Stop ();  		listener.Close ();  		if (Auth.IsAccessToken) {  			Gtk.Application.Invoke (delegate {  				authButton.Sensitive = false;  				authButton.Label = Catalog.GetString ("Connected. Press Save to start synchronizing");  			});  		}  	}' null);  	Logger.Debug ("Launching browser to authorize web sync: " + authUrl);  	authButton.Label = Catalog.GetString ("Authorizing in browser (Press to reset connection)");  	try {  		Services.NativeApplication.OpenUrl (authUrl' Screen);  	} catch (Exception e) {  		listener.Stop ();  		listener.Close ();  		Logger.Error ("Exception opening URL: " + e.Message);  		// Translators: Sometimes a user's default browser is not set' so we recommend setting it and trying again  		authButton.Label = Catalog.GetString ("Set the default browser and try again");  		return;  	}  	// Translators: The user must take action in their web browser to continue the authorization process  	authButton.Label = Catalog.GetString ("Authorizing in browser (Press to reset connection)");  }  
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,OnAuthButtonClicked,The following statement contains a magic number: while (!listener.IsListening && portToTry < 9000) {  	callbackUrl = String.Format ("http://localhost:{0}/tomboy-web-sync/"' portToTry);  	try {  		listener.Prefixes.Add (callbackUrl);  	} catch (Exception e) {  		Logger.Error ("Exception while trying to add {0} as an HttpListener Prefix"' callbackUrl);  		Logger.Error (e.ToString ());  		break;  	}  	try {  		listener.Start ();  		Auth.CallbackUrl = callbackUrl;  	} catch {  		listener.Prefixes.Clear ();  		portToTry++;  	}  }  
Magic Number,Tomboy.WebSync,WebSyncPreferencesWidget,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\WebSyncPreferencesWidget.cs,AddRow,The following statement contains a magic number: table.Attach (widget' 1' 2' row' row + 1' Gtk.AttachOptions.Expand | Gtk.AttachOptions.Fill' Gtk.AttachOptions.Expand | Gtk.AttachOptions.Fill' 0' 0);  
Magic Number,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443)))  	normalizedUrl += ":" + url.Port;  
Magic Number,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443)))  	normalizedUrl += ":" + url.Port;  
Magic Number,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateTimeStamp,The following statement contains a magic number: return DateTime.UtcNow - new DateTime (1970' 1' 1' 0' 0' 0' 0);  
Magic Number,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateNonce,The following statement contains a magic number: return random.Next (123400' 9999999).ToString ();  
Magic Number,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateNonce,The following statement contains a magic number: return random.Next (123400' 9999999).ToString ();  
Magic Number,Mono.Rocks,IEnumerableRocks,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Mono.Rocks\IEnumerable.cs,Implode,The following statement contains a magic number: foreach (var e in self) {  	if (values.Length == i)  		Array.Resize (ref values' i * 2);  	values [i++] = selector (e);  }  
Magic Number,Mono.Rocks,IEnumerableRocks,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Mono.Rocks\IEnumerable.cs,Implode,The following statement contains a magic number: if (values.Length == i)  	Array.Resize (ref values' i * 2);  
Magic Number,Mono.Rocks,IEnumerableRocks,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Mono.Rocks\IEnumerable.cs,Implode,The following statement contains a magic number: Array.Resize (ref values' i * 2);  
Missing Default,OAuth,Base,F:\newReposMay17\GNOME_tomboy\Tomboy\Addins\WebSyncService\OAuth\Base.cs,GenerateSignatureBase,The following switch statement is missing a default case: switch (signatureType) {  case SignatureType.HMACSHA1:  	signatureString = "HMAC-SHA1";  	break;  case SignatureType.RSASHA1:  	signatureString = "RSA-SHA1";  	break;  case SignatureType.PLAINTEXT:  	signatureString = SignatureType.PLAINTEXT.ToString ();  	break;  }  
