Implementation smell,Namespace,Class,File,Method,Description
Long Method,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The method has 211 lines of code.
Long Method,GG.UserControls,ChangesetHistoryContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistoryContextMenu.xaml.cs,OnOpened,The method has 102 lines of code.
Complex Method,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,Cyclomatic complexity of the method is 14
Complex Method,GG.UserControls,ChangesetHistoryContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistoryContextMenu.xaml.cs,OnOpened,Cyclomatic complexity of the method is 12
Complex Method,GG,RepositoryViewModel,C:\repos\kaisellgren_Git-GUI\ViewModels\RepositoryViewModel.cs,LoadBranchesAndCommits,Cyclomatic complexity of the method is 10
Complex Method,GG,MainWindowViewModel,C:\repos\kaisellgren_Git-GUI\ViewModels\MainWindowViewModel.cs,RepositoryViewModelsOnCollectionChanged,Cyclomatic complexity of the method is 8
Long Parameter List,GG.Libraries,IconUtil,C:\repos\kaisellgren_Git-GUI\Libraries\IconUtil.cs,SHGetFileInfo,The method has 5 parameters. Parameters: pszPath' dwFileAttributes' psfi' cbFileInfo' flags
Long Identifier,GG.Libraries,IconUtil,C:\repos\kaisellgren_Git-GUI\Libraries\IconUtil.cs,,The length of the parameter FILE_ATTRIBUTE_NOT_CONTENT_INDEXED is 34.
Long Identifier,GG.Libraries,EnhancedObservableCollection<T>,C:\repos\kaisellgren_Git-GUI\Libraries\EnhancedObservableCollection.cs,AddRange,The length of the parameter temporarilyDisableNotifications is 31.
Long Identifier,GG,MainWindowViewModel,C:\repos\kaisellgren_Git-GUI\ViewModels\MainWindowViewModel.cs,RepositoryViewModelsOnCollectionChanged,The length of the parameter notifyCollectionChangedEventArgs is 32.
Long Statement,GG.Converters,StatusGridGroupToColorConverter,C:\repos\kaisellgren_Git-GUI\Converters\StatusGridGroupToColorConverter.cs,Convert,The length of the statement  "            return ((string) value) == "Staged" ? new SolidColorBrush(Color.FromRgb(76' 120' 0)) : new SolidColorBrush(Color.FromRgb(120' 37' 0)); " is 134.
Long Statement,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The length of the statement  "                // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots). " is 128.
Long Statement,GG.Libraries,RepoUtil,C:\repos\kaisellgren_Git-GUI\Libraries\RepoUtil.cs,GetBranchesAroundCommit,The length of the statement  "                // Tip has to be found and in case multiple branches share the tree' get rid of the others -- messes up visual position counting. " is 129.
Long Statement,GG.Libraries,RepoUtil,C:\repos\kaisellgren_Git-GUI\Libraries\RepoUtil.cs,GetBranchesAroundCommit,The length of the statement  "                if (branch.Tip == null || list.Any(b => branch.Tip.Branches.Contains(b)) || list.Any(b => b.Tip.Branches.Contains(branch))) " is 123.
Long Statement,GG.Libraries,RepoUtil,C:\repos\kaisellgren_Git-GUI\Libraries\RepoUtil.cs,GetBranchesAroundCommit,The length of the statement  "                    // If there's a branch with a tip commit older than commit.Date' then it's around this commit if they don't share a single branch. " is 130.
Long Statement,GG.UserControls,CenterArea,C:\repos\kaisellgren_Git-GUI\UserControls\CenterArea.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Git-GUI;component/usercontrols/centerarea.xaml"' System.UriKind.Relative); " is 120.
Long Statement,GG.UserControls,CenterArea,C:\repos\kaisellgren_Git-GUI\UserControls\CenterArea.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.GridSplitter)(target)).DragCompleted += new System.Windows.Controls.Primitives.DragCompletedEventHandler(this.GridSplitterDragCompleted); " is 163.
Long Statement,GG.UserControls,ChangesetHistoryContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistoryContextMenu.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Git-GUI;component/usercontrols/changesethistorycontextmenu.xaml"' System.UriKind.Relative); " is 137.
Long Statement,GG.UserControls,ChangesetHistoryContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistoryContextMenu.xaml.cs,Connect,The length of the statement  "            ((GG.UserControls.ChangesetHistoryContextMenu)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.OnContextMenuOpening); " is 157.
Long Statement,GG.UserControls,CommitPanel,C:\repos\kaisellgren_Git-GUI\UserControls\CommitPanel.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Git-GUI;component/usercontrols/commitpanel.xaml"' System.UriKind.Relative); " is 121.
Long Statement,GG.UserControls,CommitPanel,C:\repos\kaisellgren_Git-GUI\UserControls\CommitPanel.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.OnRecentCommitMessagesSelectionChanged); " is 167.
Long Statement,GG.UserControls,CommitPanel,C:\repos\kaisellgren_Git-GUI\UserControls\CommitPanel.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.TextBox)(target)).LostFocus += new System.Windows.RoutedEventHandler(this.CommitMessageLostFocus); " is 124.
Long Statement,GG.UserControls,CommitPanel,C:\repos\kaisellgren_Git-GUI\UserControls\CommitPanel.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.TextBox)(target)).GotFocus += new System.Windows.RoutedEventHandler(this.CommitMessageGotFocus); " is 122.
Long Statement,GG.UserControls,StatusGrid,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGrid.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Git-GUI;component/usercontrols/statusgrid.xaml"' System.UriKind.Relative); " is 120.
Long Statement,GG.UserControls,StatusGrid,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGrid.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.DataGrid)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.StatusGridSelectionChanged); " is 155.
Long Statement,GG.UserControls,StatusGrid,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGrid.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.DataGrid)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.StatusGridSelectionChanged); " is 155.
Long Statement,GG.UserControls,StatusGridContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGridContextMenu.xaml.cs,HandleDeleteMenuItem,The length of the statement  "            bool hasPhysicallyExistingFiles = statusGrid.SelectedItems.OfType<StatusItem>().Any(i => File.Exists(repositoryFullPath + "/" + ((StatusItem) i).Filename)); " is 156.
Long Statement,GG.UserControls,StatusGridContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGridContextMenu.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Git-GUI;component/usercontrols/statusgridcontextmenu.xaml"' System.UriKind.Relative); " is 131.
Long Statement,GG.UserControls,ChangesetHistory,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistory.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Git-GUI;component/usercontrols/changesethistory.xaml"' System.UriKind.Relative); " is 126.
Long Statement,GG.UserControls,ChangesetHistory,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistory.xaml.cs,Connect,The length of the statement  "            this.ChangesetHistoryGrid.AddHandler(System.Windows.Controls.ScrollViewer.ScrollChangedEvent' new System.Windows.Controls.ScrollChangedEventHandler(this.ChangesetHistoryGrid_ScrollChanged)); " is 190.
Long Statement,GG.UserControls,LeftToolbar,C:\repos\kaisellgren_Git-GUI\UserControls\LeftToolbar.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Git-GUI;component/usercontrols/lefttoolbar.xaml"' System.UriKind.Relative); " is 121.
Long Statement,GG.UserControls,LeftToolbar,C:\repos\kaisellgren_Git-GUI\UserControls\LeftToolbar.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.TreeViewItem)(target)).PreviewMouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnPreviewMouseRightButtonDown); " is 165.
Long Statement,GG.UserControls,LeftToolbar,C:\repos\kaisellgren_Git-GUI\UserControls\LeftToolbar.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.TreeViewItem)(target)).PreviewMouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnPreviewMouseRightButtonDown); " is 165.
Long Statement,GG.UserControls,NewTabPage,C:\repos\kaisellgren_Git-GUI\UserControls\NewTabPage.xaml.cs,OnOpenLocalRepository,The length of the statement  "                    MessageBox.Show(String.Format("Could not open \"{0}\". Are you sure it is an existing Git repository?"' dialog.SelectedPath)); " is 126.
Long Statement,GG.UserControls,NewTabPage,C:\repos\kaisellgren_Git-GUI\UserControls\NewTabPage.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Git-GUI;component/usercontrols/newtabpage.xaml"' System.UriKind.Relative); " is 120.
Long Statement,GG.UserControls,NewTabPage,C:\repos\kaisellgren_Git-GUI\UserControls\NewTabPage.xaml.cs,Connect,The length of the statement  "            this.RecentRepositoriesList.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.OnMouseDoubleClick); " is 122.
Long Statement,GG.UserControls,NewTabPage,C:\repos\kaisellgren_Git-GUI\UserControls\NewTabPage.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCreateLocalRepository); " is 120.
Long Statement,GG.UserControls,TopToolbar,C:\repos\kaisellgren_Git-GUI\UserControls\TopToolbar.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Git-GUI;component/usercontrols/toptoolbar.xaml"' System.UriKind.Relative); " is 120.
Long Statement,GG.UserControls.LeftToolbarContextMenus,TagContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\LeftToolbarContextMenus\TagContextMenu.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Git-GUI;component/usercontrols/lefttoolbarcontextmenus/tagcontextmenu.xaml"' System.UriKind.Relative); " is 148.
Long Statement,GG.UserControls.LeftToolbarContextMenus,TagContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\LeftToolbarContextMenus\TagContextMenu.xaml.cs,Connect,The length of the statement  "            ((GG.UserControls.LeftToolbarContextMenus.TagContextMenu)(target)).Opened += new System.Windows.RoutedEventHandler(this.OnOpened); " is 130.
Long Statement,GG.UserControls.LeftToolbarContextMenus,TagContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\LeftToolbarContextMenus\TagContextMenu.xaml.cs,Connect,The length of the statement  "            ((GG.UserControls.LeftToolbarContextMenus.TagContextMenu)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.OnContextMenuOpening); " is 168.
Long Statement,GG,RepositoryViewModel,C:\repos\kaisellgren_Git-GUI\ViewModels\RepositoryViewModel.cs,LoadRepositoryStatus,The length of the statement  "                    // Only those enum statuses that were set will generate a row in the status grid (and those that are not ignored/unaltered). " is 124.
Long Statement,GG.Libraries.Animation,LinearGradientAnimation,C:\repos\kaisellgren_Git-GUI\Libraries\Animation\LinearGradientAnimation.cs,GetCurrentValueCore,The length of the statement  "            LinearGradientBrush returnBrush = AddLinearGradientBrush(value2' AddLinearGradientBrush(value' InterpolateGradientBrush(brush' brush2' num))); " is 142.
Long Statement,GG.Libraries.Animation,LinearGradientAnimation,C:\repos\kaisellgren_Git-GUI\Libraries\Animation\LinearGradientAnimation.cs,GetCurrentValue,The length of the statement  "            return this.GetCurrentValue((LinearGradientBrush) defaultOriginValue' (LinearGradientBrush) defaultDestinationValue' animationClock); " is 133.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\kaisellgren_Git-GUI\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,GG.UserControls,ChangesetHistoryContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistoryContextMenu.xaml.cs,OnOpened,The conditional expression  "branchThatTracks.BehindBy > 0 &&                              branchThatTracks.IsRemote == false &&                              branch.Tip != branchThatTracks.Tip &&                              repositoryViewModel.Head is DetachedHead == false &&                              branch.Tip != branchThatTracks.Tip"  is complex.
Complex Conditional,GG.UserControls,ChangesetHistoryContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistoryContextMenu.xaml.cs,OnOpened,The conditional expression  "branch.Tip == commit &&                      branch != (Branch) repositoryViewModel.Head &&                      repositoryViewModel.Head is DetachedHead == false &&                      commit != ((Branch) repositoryViewModel.Head).Tip"  is complex.
Magic Number,GG.Converters,GetDataGridContentHeightConverter,C:\repos\kaisellgren_Git-GUI\Converters\GetDataGridContentHeightConverter.cs,Convert,The following statement contains a magic number: var height = dataGrid.ActualHeight - 24;
Magic Number,GG.Converters,StatusGridGroupToColorConverter,C:\repos\kaisellgren_Git-GUI\Converters\StatusGridGroupToColorConverter.cs,Convert,The following statement contains a magic number: return ((string) value) == "Staged" ? new SolidColorBrush(Color.FromRgb(76' 120' 0)) : new SolidColorBrush(Color.FromRgb(120' 37' 0));
Magic Number,GG.Converters,StatusGridGroupToColorConverter,C:\repos\kaisellgren_Git-GUI\Converters\StatusGridGroupToColorConverter.cs,Convert,The following statement contains a magic number: return ((string) value) == "Staged" ? new SolidColorBrush(Color.FromRgb(76' 120' 0)) : new SolidColorBrush(Color.FromRgb(120' 37' 0));
Magic Number,GG.Converters,StatusGridGroupToColorConverter,C:\repos\kaisellgren_Git-GUI\Converters\StatusGridGroupToColorConverter.cs,Convert,The following statement contains a magic number: return ((string) value) == "Staged" ? new SolidColorBrush(Color.FromRgb(76' 120' 0)) : new SolidColorBrush(Color.FromRgb(120' 37' 0));
Magic Number,GG.Converters,StatusGridGroupToColorConverter,C:\repos\kaisellgren_Git-GUI\Converters\StatusGridGroupToColorConverter.cs,Convert,The following statement contains a magic number: return ((string) value) == "Staged" ? new SolidColorBrush(Color.FromRgb(76' 120' 0)) : new SolidColorBrush(Color.FromRgb(120' 37' 0));
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,ChangesetGraph,C:\repos\kaisellgren_Git-GUI\Libraries\ChangesetGraph.cs,Draw,The following statement contains a magic number: while (true)              {                  Commit commit = commitList.CurrentItem as Commit;                  int rowNumber = commitList.CurrentPosition;                    if (commit == null)                      break;                    // Get a list of branches around this commit.                  List<Branch> branchesAroundCommit = commit.BranchesAround;                    // Sort the lists alphabetically.                  branchesAroundCommit.OrderBy(o => o.Name.ToString());                    // Retrieve the index of this commit's branch on the list. This index determines the horizontal positions of dots (commit dots).                  int indexOfCurrentBranch;                  if (commit.Branches.Count > 0)                      indexOfCurrentBranch = branchesAroundCommit.IndexOf(commit.Branches.ElementAt(0));                  else                      indexOfCurrentBranch = 0;                    int horizontalIndex = indexOfCurrentBranch + commit.VisualPosition;                  for (var i = indexOfCurrentBranch - 1; i >= 0; i--)                      horizontalIndex += ((Branch) branchesAroundCommit.ElementAt(i)).RightMostVisualPosition;                    // Draw the dot/ellipse based on the index of the current branch.                  byte dotSize = 10;                  byte horizontalDotSpacing = 12;                    int dotX = horizontalDotSpacing + dotSize * horizontalIndex + horizontalDotSpacing * horizontalIndex;                  int dotY = cellHeight * rowNumber + cellHeight / 2 - dotSize / 2;                    if (TotalHeight == 0)                      TotalHeight = cellHeight * (rowNumber + 1);                    // Store the dot position on the dictionary.                  commitDotPositions.Add(commit.Hash' new int[2] { dotX' dotY });                    Ellipse dot = new Ellipse                  {                      Fill = Brushes.Black'                      StrokeThickness = 0'                      Width = dotSize + 2'                      Height = dotSize + 2                  };                    Canvas.SetLeft(dot' dotX - 1);                  Canvas.SetTop(dot' dotY - 1);                  Canvas.SetZIndex(dot' 1);                    graph.Children.Add(dot);                    // ToolTip for commits.                  var commitTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    // ToolTip for paths.                  var pathTooltip = new TextBlock                  {                      MaxWidth = 320'                      TextWrapping = TextWrapping.Wrap                  };                    if (commit.Branches.Count == 1)                  {                      pathTooltip.Text = commit.Branches.ElementAt(0).Name;                  }                  else                  {                      int i = 0' count = commit.Branches.Count;                        commit.Branches.ForEach(b =>                      {                          i++;                          pathTooltip.Inlines.AddRange(new Inline[]                          {                              new Run(b.Name + (i < count ? "' " : ""))'                          });                      });                  }                    // Regular commits have a white circle inside.                  if (commit.IsMergeCommit() == false && commit.ParentCount < 2)                  {                      Ellipse dotInner = new Ellipse                      {                          Fill = Brushes.White'                          StrokeThickness = 0'                          Width = dotSize'                          Height = dotSize                      };                        Canvas.SetLeft(dotInner' dotX);                      Canvas.SetTop(dotInner' dotY);                      Canvas.SetZIndex(dotInner' 2);                        graph.Children.Add(dotInner);                        // ToolTip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dotInner.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dotInner' 60000);                      ToolTipService.SetInitialShowDelay(dotInner' 1);                  }                  else                  {                      // Tooltip.                      commitTooltip.Inlines.AddRange(new Inline[]                      {                          new Run("Merge commit: ")  {FontWeight = FontWeights.Bold}'                          new Run(commit.HashShort) {Foreground = highlightColor' FontWeight = FontWeights.Bold}'                          new LineBreak()'                          new Run("Author: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.AuthorName) '                          new LineBreak()'                          new Run("Date: ") {FontWeight = FontWeights.Bold}'                          new Run(commit.FormattedDate)'                          new LineBreak()'                          new LineBreak()'                          new Run(commit.Description.TrimEnd())                      });                        dot.ToolTip = commitTooltip;                      ToolTipService.SetShowDuration(dot' 60000);                      ToolTipService.SetInitialShowDelay(dot' 1);                  }                    if (commit.Branches.Count > 0)                  {                      // Draw the line to the parent dot(s)/commit(s).                      foreach (string hash in commit.ParentHashes)                      {                          // Retrieve the parent commit dot position.                          var positions = commitDotPositions.Where(o => o.Key == hash);                            if (positions.Count() > 0)                          {                              int[] parentPosition = commitDotPositions.Where(o => o.Key == hash).First().Value;                                Brush lineColor = BranchColors[commit.Branches.ElementAt(0).Name];                                // Calculate line positions.                              float startLineX1 = dotX + dotSize / 2;                              float startLineY1 = dotY + dotSize / 2;                              float endLineX2 = parentPosition[0] + dotSize / 2;                              float endLineY2 = parentPosition[1] + dotSize / 2;                              float startLineX2;                              float startLineY2;                              float endLineX1;                              float endLineY1;                                if (commit.IsMergeCommit())                              {                                  startLineX2 = endLineX2;                                  startLineY2 = startLineY1;                                    endLineX1 = endLineX2;                                  endLineY1 = startLineY1;                              }                              else                              {                                  startLineX2 = startLineX1;                                  startLineY2 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 6;                                    endLineX1 = startLineX1;                                  endLineY1 = parentPosition[1] - cellHeight / 2 + dotSize / 2 + 12;                              }                                // Construct and draw the line path.                              Path path = new Path                              {                                  Stroke = lineColor'                                  StrokeThickness = 4'                                  Data = new PathGeometry                                  {                                      Figures = new PathFigureCollection                                      {                                          new PathFigure                                          {                                              StartPoint = new Point(startLineX1' startLineY1)'                                              Segments = new PathSegmentCollection                                              {                                                  new PolyBezierSegment                                                  {                                                      Points = new PointCollection                                                      {                                                          new Point(startLineX2' startLineY2)'                                                          new Point(endLineX1' endLineY1)'                                                          new Point(endLineX2' endLineY2)                                                      }                                                  }                                              }                                          }                                      }                                  }                              };                                graph.Children.Add(path);                                path.ToolTip = pathTooltip;                              ToolTipService.SetShowDuration(path' 60000);                              ToolTipService.SetInitialShowDelay(path' 1);                          }                      }                  }                    commitList.MoveCurrentToPrevious();                  if (commitList.IsCurrentBeforeFirst)                  {                      break;                  }              }
Magic Number,GG.Libraries,DateUtil,C:\repos\kaisellgren_Git-GUI\Libraries\DateUtil.cs,GetRelativeDate,The following statement contains a magic number: const int MINUTE = 60 * SECOND;
Magic Number,GG.Libraries,DateUtil,C:\repos\kaisellgren_Git-GUI\Libraries\DateUtil.cs,GetRelativeDate,The following statement contains a magic number: const int HOUR = 60 * MINUTE;
Magic Number,GG.Libraries,DateUtil,C:\repos\kaisellgren_Git-GUI\Libraries\DateUtil.cs,GetRelativeDate,The following statement contains a magic number: const int DAY = 24 * HOUR;
Magic Number,GG.Libraries,DateUtil,C:\repos\kaisellgren_Git-GUI\Libraries\DateUtil.cs,GetRelativeDate,The following statement contains a magic number: if (delta < 2 * MINUTE)              {                  return "One minute ago";              }
Magic Number,GG.Libraries,DateUtil,C:\repos\kaisellgren_Git-GUI\Libraries\DateUtil.cs,GetRelativeDate,The following statement contains a magic number: if (delta < 45 * MINUTE)              {                  return ts.Minutes + " minutes ago";              }
Magic Number,GG.Libraries,DateUtil,C:\repos\kaisellgren_Git-GUI\Libraries\DateUtil.cs,GetRelativeDate,The following statement contains a magic number: if (delta < 90 * MINUTE)              {                  return "An hour ago";              }
Magic Number,GG.Libraries,DateUtil,C:\repos\kaisellgren_Git-GUI\Libraries\DateUtil.cs,GetRelativeDate,The following statement contains a magic number: if (delta < 48 * HOUR)              {                  return ts.Hours + " hours ago";              }
Magic Number,GG.Libraries,DateUtil,C:\repos\kaisellgren_Git-GUI\Libraries\DateUtil.cs,GetRelativeDate,The following statement contains a magic number: if (delta < 7 * DAY)              {                  return ts.Days + " days ago";              }
Magic Number,GG.Libraries,FileUtil,C:\repos\kaisellgren_Git-GUI\Libraries\FileUtil.cs,GetFormattedFileSize,The following statement contains a magic number: while (bytes >= 1024 && order + 1 < suffixes.Length)              {                  order++;                  bytes = bytes / 1024;              }
Magic Number,GG.Libraries,FileUtil,C:\repos\kaisellgren_Git-GUI\Libraries\FileUtil.cs,GetFormattedFileSize,The following statement contains a magic number: while (bytes >= 1024 && order + 1 < suffixes.Length)              {                  order++;                  bytes = bytes / 1024;              }
Magic Number,GG.UserControls,CenterArea,C:\repos\kaisellgren_Git-GUI\UserControls\CenterArea.xaml.cs,MakeGridSplitterToSnapToGrid,The following statement contains a magic number: var excess = (int) ChangesetHistoryRowDefinition.Height.Value % 24;
Magic Number,GG.UserControls,CenterArea,C:\repos\kaisellgren_Git-GUI\UserControls\CenterArea.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.ChangesetHistoryRowDefinition = ((System.Windows.Controls.RowDefinition)(target));              return;              case 2:              this.ChangesetHistoryElement = ((GG.UserControls.ChangesetHistory)(target));              return;              case 3:                            #line 18 "..\..\..\..\UserControls\CenterArea.xaml"              ((System.Windows.Controls.GridSplitter)(target)).DragCompleted += new System.Windows.Controls.Primitives.DragCompletedEventHandler(this.GridSplitterDragCompleted);                            #line default              #line hidden              return;              }
Magic Number,GG.UserControls,CenterArea,C:\repos\kaisellgren_Git-GUI\UserControls\CenterArea.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.ChangesetHistoryRowDefinition = ((System.Windows.Controls.RowDefinition)(target));              return;              case 2:              this.ChangesetHistoryElement = ((GG.UserControls.ChangesetHistory)(target));              return;              case 3:                            #line 18 "..\..\..\..\UserControls\CenterArea.xaml"              ((System.Windows.Controls.GridSplitter)(target)).DragCompleted += new System.Windows.Controls.Primitives.DragCompletedEventHandler(this.GridSplitterDragCompleted);                            #line default              #line hidden              return;              }
Magic Number,GG.UserControls,ChangesetHistoryContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistoryContextMenu.xaml.cs,OnOpened,The following statement contains a magic number: var highlightColor = new SolidColorBrush()              {                  Color = Color.FromRgb(8' 94' 160)              };
Magic Number,GG.UserControls,ChangesetHistoryContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistoryContextMenu.xaml.cs,OnOpened,The following statement contains a magic number: var highlightColor = new SolidColorBrush()              {                  Color = Color.FromRgb(8' 94' 160)              };
Magic Number,GG.UserControls,ChangesetHistoryContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistoryContextMenu.xaml.cs,OnOpened,The following statement contains a magic number: var highlightColor = new SolidColorBrush()              {                  Color = Color.FromRgb(8' 94' 160)              };
Magic Number,GG.UserControls,ChangesetHistoryContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistoryContextMenu.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\..\UserControls\ChangesetHistoryContextMenu.xaml"              ((GG.UserControls.ChangesetHistoryContextMenu)(target)).Opened += new System.Windows.RoutedEventHandler(this.OnOpened);                            #line default              #line hidden                            #line 5 "..\..\..\..\UserControls\ChangesetHistoryContextMenu.xaml"              ((GG.UserControls.ChangesetHistoryContextMenu)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.OnContextMenuOpening);                            #line default              #line hidden              return;              case 2:              this.Reset = ((System.Windows.Controls.MenuItem)(target));              return;              }
Magic Number,GG.UserControls,CommitPanel,C:\repos\kaisellgren_Git-GUI\UserControls\CommitPanel.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\..\UserControls\CommitPanel.xaml"              ((GG.UserControls.CommitPanel)(target)).Loaded += new System.Windows.RoutedEventHandler(this.CommitPanelLoaded);                            #line default              #line hidden              return;              case 2:                            #line 28 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.ComboBox)(target)).Initialized += new System.EventHandler(this.ComboBoxInitialized);                            #line default              #line hidden                            #line 29 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.OnRecentCommitMessagesSelectionChanged);                            #line default              #line hidden              return;              case 3:                            #line 37 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.Button)(target)).Initialized += new System.EventHandler(this.ButtonInitialized);                            #line default              #line hidden              return;              case 4:                            #line 53 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.TextBox)(target)).Initialized += new System.EventHandler(this.TextBoxInitialized);                            #line default              #line hidden                            #line 54 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.TextBox)(target)).LostFocus += new System.Windows.RoutedEventHandler(this.CommitMessageLostFocus);                            #line default              #line hidden                            #line 55 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.TextBox)(target)).GotFocus += new System.Windows.RoutedEventHandler(this.CommitMessageGotFocus);                            #line default              #line hidden              return;              }
Magic Number,GG.UserControls,CommitPanel,C:\repos\kaisellgren_Git-GUI\UserControls\CommitPanel.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\..\UserControls\CommitPanel.xaml"              ((GG.UserControls.CommitPanel)(target)).Loaded += new System.Windows.RoutedEventHandler(this.CommitPanelLoaded);                            #line default              #line hidden              return;              case 2:                            #line 28 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.ComboBox)(target)).Initialized += new System.EventHandler(this.ComboBoxInitialized);                            #line default              #line hidden                            #line 29 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.OnRecentCommitMessagesSelectionChanged);                            #line default              #line hidden              return;              case 3:                            #line 37 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.Button)(target)).Initialized += new System.EventHandler(this.ButtonInitialized);                            #line default              #line hidden              return;              case 4:                            #line 53 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.TextBox)(target)).Initialized += new System.EventHandler(this.TextBoxInitialized);                            #line default              #line hidden                            #line 54 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.TextBox)(target)).LostFocus += new System.Windows.RoutedEventHandler(this.CommitMessageLostFocus);                            #line default              #line hidden                            #line 55 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.TextBox)(target)).GotFocus += new System.Windows.RoutedEventHandler(this.CommitMessageGotFocus);                            #line default              #line hidden              return;              }
Magic Number,GG.UserControls,CommitPanel,C:\repos\kaisellgren_Git-GUI\UserControls\CommitPanel.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\..\UserControls\CommitPanel.xaml"              ((GG.UserControls.CommitPanel)(target)).Loaded += new System.Windows.RoutedEventHandler(this.CommitPanelLoaded);                            #line default              #line hidden              return;              case 2:                            #line 28 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.ComboBox)(target)).Initialized += new System.EventHandler(this.ComboBoxInitialized);                            #line default              #line hidden                            #line 29 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.OnRecentCommitMessagesSelectionChanged);                            #line default              #line hidden              return;              case 3:                            #line 37 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.Button)(target)).Initialized += new System.EventHandler(this.ButtonInitialized);                            #line default              #line hidden              return;              case 4:                            #line 53 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.TextBox)(target)).Initialized += new System.EventHandler(this.TextBoxInitialized);                            #line default              #line hidden                            #line 54 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.TextBox)(target)).LostFocus += new System.Windows.RoutedEventHandler(this.CommitMessageLostFocus);                            #line default              #line hidden                            #line 55 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.TextBox)(target)).GotFocus += new System.Windows.RoutedEventHandler(this.CommitMessageGotFocus);                            #line default              #line hidden              return;              }
Magic Number,GG.UserControls,StatusGrid,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGrid.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 84 "..\..\..\..\UserControls\StatusGrid.xaml"              ((System.Windows.Controls.DataGrid)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.StatusGridSelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 131 "..\..\..\..\UserControls\StatusGrid.xaml"              ((System.Windows.Controls.DataGrid)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.StatusGridSelectionChanged);                            #line default              #line hidden              return;              }
Magic Number,GG.UserControls,StatusGridContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGridContextMenu.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\..\UserControls\StatusGridContextMenu.xaml"              ((GG.UserControls.StatusGridContextMenu)(target)).Opened += new System.Windows.RoutedEventHandler(this.OnOpened);                            #line default              #line hidden              return;              case 2:              this.Stage = ((System.Windows.Controls.MenuItem)(target));              return;              case 3:              this.Unstage = ((System.Windows.Controls.MenuItem)(target));              return;              case 4:              this.StageSeparator = ((System.Windows.Controls.Separator)(target));              return;              case 5:              this.IgnoreThisFile = ((System.Windows.Controls.MenuItem)(target));              return;              case 6:              this.IgnoreFilesUnderThisFolder = ((System.Windows.Controls.MenuItem)(target));              return;              case 7:              this.IgnoreThisFolderEntirely = ((System.Windows.Controls.MenuItem)(target));              return;              case 8:              this.Delete = ((System.Windows.Controls.MenuItem)(target));              return;              }
Magic Number,GG.UserControls,StatusGridContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGridContextMenu.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\..\UserControls\StatusGridContextMenu.xaml"              ((GG.UserControls.StatusGridContextMenu)(target)).Opened += new System.Windows.RoutedEventHandler(this.OnOpened);                            #line default              #line hidden              return;              case 2:              this.Stage = ((System.Windows.Controls.MenuItem)(target));              return;              case 3:              this.Unstage = ((System.Windows.Controls.MenuItem)(target));              return;              case 4:              this.StageSeparator = ((System.Windows.Controls.Separator)(target));              return;              case 5:              this.IgnoreThisFile = ((System.Windows.Controls.MenuItem)(target));              return;              case 6:              this.IgnoreFilesUnderThisFolder = ((System.Windows.Controls.MenuItem)(target));              return;              case 7:              this.IgnoreThisFolderEntirely = ((System.Windows.Controls.MenuItem)(target));              return;              case 8:              this.Delete = ((System.Windows.Controls.MenuItem)(target));              return;              }
Magic Number,GG.UserControls,StatusGridContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGridContextMenu.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\..\UserControls\StatusGridContextMenu.xaml"              ((GG.UserControls.StatusGridContextMenu)(target)).Opened += new System.Windows.RoutedEventHandler(this.OnOpened);                            #line default              #line hidden              return;              case 2:              this.Stage = ((System.Windows.Controls.MenuItem)(target));              return;              case 3:              this.Unstage = ((System.Windows.Controls.MenuItem)(target));              return;              case 4:              this.StageSeparator = ((System.Windows.Controls.Separator)(target));              return;              case 5:              this.IgnoreThisFile = ((System.Windows.Controls.MenuItem)(target));              return;              case 6:              this.IgnoreFilesUnderThisFolder = ((System.Windows.Controls.MenuItem)(target));              return;              case 7:              this.IgnoreThisFolderEntirely = ((System.Windows.Controls.MenuItem)(target));              return;              case 8:              this.Delete = ((System.Windows.Controls.MenuItem)(target));              return;              }
Magic Number,GG.UserControls,StatusGridContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGridContextMenu.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\..\UserControls\StatusGridContextMenu.xaml"              ((GG.UserControls.StatusGridContextMenu)(target)).Opened += new System.Windows.RoutedEventHandler(this.OnOpened);                            #line default              #line hidden              return;              case 2:              this.Stage = ((System.Windows.Controls.MenuItem)(target));              return;              case 3:              this.Unstage = ((System.Windows.Controls.MenuItem)(target));              return;              case 4:              this.StageSeparator = ((System.Windows.Controls.Separator)(target));              return;              case 5:              this.IgnoreThisFile = ((System.Windows.Controls.MenuItem)(target));              return;              case 6:              this.IgnoreFilesUnderThisFolder = ((System.Windows.Controls.MenuItem)(target));              return;              case 7:              this.IgnoreThisFolderEntirely = ((System.Windows.Controls.MenuItem)(target));              return;              case 8:              this.Delete = ((System.Windows.Controls.MenuItem)(target));              return;              }
Magic Number,GG.UserControls,StatusGridContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGridContextMenu.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\..\UserControls\StatusGridContextMenu.xaml"              ((GG.UserControls.StatusGridContextMenu)(target)).Opened += new System.Windows.RoutedEventHandler(this.OnOpened);                            #line default              #line hidden              return;              case 2:              this.Stage = ((System.Windows.Controls.MenuItem)(target));              return;              case 3:              this.Unstage = ((System.Windows.Controls.MenuItem)(target));              return;              case 4:              this.StageSeparator = ((System.Windows.Controls.Separator)(target));              return;              case 5:              this.IgnoreThisFile = ((System.Windows.Controls.MenuItem)(target));              return;              case 6:              this.IgnoreFilesUnderThisFolder = ((System.Windows.Controls.MenuItem)(target));              return;              case 7:              this.IgnoreThisFolderEntirely = ((System.Windows.Controls.MenuItem)(target));              return;              case 8:              this.Delete = ((System.Windows.Controls.MenuItem)(target));              return;              }
Magic Number,GG.UserControls,StatusGridContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGridContextMenu.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\..\UserControls\StatusGridContextMenu.xaml"              ((GG.UserControls.StatusGridContextMenu)(target)).Opened += new System.Windows.RoutedEventHandler(this.OnOpened);                            #line default              #line hidden              return;              case 2:              this.Stage = ((System.Windows.Controls.MenuItem)(target));              return;              case 3:              this.Unstage = ((System.Windows.Controls.MenuItem)(target));              return;              case 4:              this.StageSeparator = ((System.Windows.Controls.Separator)(target));              return;              case 5:              this.IgnoreThisFile = ((System.Windows.Controls.MenuItem)(target));              return;              case 6:              this.IgnoreFilesUnderThisFolder = ((System.Windows.Controls.MenuItem)(target));              return;              case 7:              this.IgnoreThisFolderEntirely = ((System.Windows.Controls.MenuItem)(target));              return;              case 8:              this.Delete = ((System.Windows.Controls.MenuItem)(target));              return;              }
Magic Number,GG.UserControls,StatusGridContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGridContextMenu.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\..\UserControls\StatusGridContextMenu.xaml"              ((GG.UserControls.StatusGridContextMenu)(target)).Opened += new System.Windows.RoutedEventHandler(this.OnOpened);                            #line default              #line hidden              return;              case 2:              this.Stage = ((System.Windows.Controls.MenuItem)(target));              return;              case 3:              this.Unstage = ((System.Windows.Controls.MenuItem)(target));              return;              case 4:              this.StageSeparator = ((System.Windows.Controls.Separator)(target));              return;              case 5:              this.IgnoreThisFile = ((System.Windows.Controls.MenuItem)(target));              return;              case 6:              this.IgnoreFilesUnderThisFolder = ((System.Windows.Controls.MenuItem)(target));              return;              case 7:              this.IgnoreThisFolderEntirely = ((System.Windows.Controls.MenuItem)(target));              return;              case 8:              this.Delete = ((System.Windows.Controls.MenuItem)(target));              return;              }
Magic Number,GG.UserControls,ChangesetHistory,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistory.xaml.cs,ChangesetHistoryGrid_ScrollChanged,The following statement contains a magic number: scrollViewer.ScrollToVerticalOffset(Math.Floor(e.VerticalOffset) * 24);
Magic Number,GG.UserControls,ChangesetHistory,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistory.xaml.cs,ChangesetHistoryGrid_ScrollChanged,The following statement contains a magic number: scrollViewer.Height = Math.Abs(dataGrid.ActualHeight - 24);
Magic Number,GG.UserControls,ChangesetHistory,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistory.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.ChangesetHistoryContainer = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ChangesetHistoryGrid = ((System.Windows.Controls.DataGrid)(target));                            #line 27 "..\..\..\..\UserControls\ChangesetHistory.xaml"              this.ChangesetHistoryGrid.AddHandler(System.Windows.Controls.ScrollViewer.ScrollChangedEvent' new System.Windows.Controls.ScrollChangedEventHandler(this.ChangesetHistoryGrid_ScrollChanged));                            #line default              #line hidden              return;              case 3:              this.GraphScrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 4:              this.Graph = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GG.UserControls,ChangesetHistory,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistory.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.ChangesetHistoryContainer = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ChangesetHistoryGrid = ((System.Windows.Controls.DataGrid)(target));                            #line 27 "..\..\..\..\UserControls\ChangesetHistory.xaml"              this.ChangesetHistoryGrid.AddHandler(System.Windows.Controls.ScrollViewer.ScrollChangedEvent' new System.Windows.Controls.ScrollChangedEventHandler(this.ChangesetHistoryGrid_ScrollChanged));                            #line default              #line hidden              return;              case 3:              this.GraphScrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 4:              this.Graph = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GG.UserControls,ChangesetHistory,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistory.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.ChangesetHistoryContainer = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ChangesetHistoryGrid = ((System.Windows.Controls.DataGrid)(target));                            #line 27 "..\..\..\..\UserControls\ChangesetHistory.xaml"              this.ChangesetHistoryGrid.AddHandler(System.Windows.Controls.ScrollViewer.ScrollChangedEvent' new System.Windows.Controls.ScrollChangedEventHandler(this.ChangesetHistoryGrid_ScrollChanged));                            #line default              #line hidden              return;              case 3:              this.GraphScrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 4:              this.Graph = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GG.UserControls,LeftToolbar,C:\repos\kaisellgren_Git-GUI\UserControls\LeftToolbar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LeftToolbarUserControl = ((GG.UserControls.LeftToolbar)(target));              return;              case 2:                            #line 20 "..\..\..\..\UserControls\LeftToolbar.xaml"              ((System.Windows.Controls.TreeViewItem)(target)).PreviewMouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnPreviewMouseRightButtonDown);                            #line default              #line hidden              return;              case 3:                            #line 37 "..\..\..\..\UserControls\LeftToolbar.xaml"              ((System.Windows.Controls.TreeViewItem)(target)).PreviewMouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnPreviewMouseRightButtonDown);                            #line default              #line hidden              return;              }
Magic Number,GG.UserControls,LeftToolbar,C:\repos\kaisellgren_Git-GUI\UserControls\LeftToolbar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.LeftToolbarUserControl = ((GG.UserControls.LeftToolbar)(target));              return;              case 2:                            #line 20 "..\..\..\..\UserControls\LeftToolbar.xaml"              ((System.Windows.Controls.TreeViewItem)(target)).PreviewMouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnPreviewMouseRightButtonDown);                            #line default              #line hidden              return;              case 3:                            #line 37 "..\..\..\..\UserControls\LeftToolbar.xaml"              ((System.Windows.Controls.TreeViewItem)(target)).PreviewMouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnPreviewMouseRightButtonDown);                            #line default              #line hidden              return;              }
Magic Number,GG.UserControls,NewTabPage,C:\repos\kaisellgren_Git-GUI\UserControls\NewTabPage.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\..\UserControls\NewTabPage.xaml"              ((GG.UserControls.NewTabPage)(target)).Loaded += new System.Windows.RoutedEventHandler(this.NewTabPageLoaded);                            #line default              #line hidden              return;              case 2:              this.RecentRepositoriesList = ((System.Windows.Controls.ListView)(target));                            #line 24 "..\..\..\..\UserControls\NewTabPage.xaml"              this.RecentRepositoriesList.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.OnMouseDoubleClick);                            #line default              #line hidden              return;              case 3:                            #line 48 "..\..\..\..\UserControls\NewTabPage.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOpenLocalRepository);                            #line default              #line hidden              return;              case 4:                            #line 54 "..\..\..\..\UserControls\NewTabPage.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCreateLocalRepository);                            #line default              #line hidden              return;              }
Magic Number,GG.UserControls,NewTabPage,C:\repos\kaisellgren_Git-GUI\UserControls\NewTabPage.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\..\UserControls\NewTabPage.xaml"              ((GG.UserControls.NewTabPage)(target)).Loaded += new System.Windows.RoutedEventHandler(this.NewTabPageLoaded);                            #line default              #line hidden              return;              case 2:              this.RecentRepositoriesList = ((System.Windows.Controls.ListView)(target));                            #line 24 "..\..\..\..\UserControls\NewTabPage.xaml"              this.RecentRepositoriesList.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.OnMouseDoubleClick);                            #line default              #line hidden              return;              case 3:                            #line 48 "..\..\..\..\UserControls\NewTabPage.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOpenLocalRepository);                            #line default              #line hidden              return;              case 4:                            #line 54 "..\..\..\..\UserControls\NewTabPage.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCreateLocalRepository);                            #line default              #line hidden              return;              }
Magic Number,GG.UserControls,NewTabPage,C:\repos\kaisellgren_Git-GUI\UserControls\NewTabPage.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\..\UserControls\NewTabPage.xaml"              ((GG.UserControls.NewTabPage)(target)).Loaded += new System.Windows.RoutedEventHandler(this.NewTabPageLoaded);                            #line default              #line hidden              return;              case 2:              this.RecentRepositoriesList = ((System.Windows.Controls.ListView)(target));                            #line 24 "..\..\..\..\UserControls\NewTabPage.xaml"              this.RecentRepositoriesList.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.OnMouseDoubleClick);                            #line default              #line hidden              return;              case 3:                            #line 48 "..\..\..\..\UserControls\NewTabPage.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOpenLocalRepository);                            #line default              #line hidden              return;              case 4:                            #line 54 "..\..\..\..\UserControls\NewTabPage.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCreateLocalRepository);                            #line default              #line hidden              return;              }
Magic Number,GG.UserControls.Dialogs,ConfirmDialog,C:\repos\kaisellgren_Git-GUI\UserControls\Dialogs\ConfirmDialog.xaml.cs,ConfirmDialog,The following statement contains a magic number: Application.Current.MainWindow.Effect = new BlurEffect              {                  Radius = 3              };
Magic Number,GG.UserControls.Dialogs,PromptDialog,C:\repos\kaisellgren_Git-GUI\UserControls\Dialogs\PromptDialog.xaml.cs,PromptDialog,The following statement contains a magic number: Application.Current.MainWindow.Effect = new BlurEffect              {                  Radius = 3              };
Magic Number,GG,RepositoryViewModel,C:\repos\kaisellgren_Git-GUI\ViewModels\RepositoryViewModel.cs,RepositoryViewModel,The following statement contains a magic number: CommitsPerPage = 150;
Magic Number,GG,RepositoryViewModel,C:\repos\kaisellgren_Git-GUI\ViewModels\RepositoryViewModel.cs,RepositoryViewModel,The following statement contains a magic number: RecentCommitMessageCount = 10;
Magic Number,GG,RepositoryViewModel,C:\repos\kaisellgren_Git-GUI\ViewModels\RepositoryViewModel.cs,ExportPatch,The following statement contains a magic number: var dialog = new SaveFileDialog              {                  FileName = commit.Description.Right(72)'                  DefaultExt = ".patch"'                  Filter = "Patch files|*.patch"              };
Magic Number,GG,RepositoryViewModel,C:\repos\kaisellgren_Git-GUI\ViewModels\RepositoryViewModel.cs,OpenAbout,The following statement contains a magic number: var blur = new BlurEffect              {                  Radius = 4              };
Magic Number,GG,MainWindowViewModel,C:\repos\kaisellgren_Git-GUI\ViewModels\MainWindowViewModel.cs,RepositoryViewModelsOnCollectionChanged,The following statement contains a magic number: if (notifyCollectionChangedEventArgs.NewItems != null)              {                  // Update the configuration "recent repositories".                  // Basically' remove existing and prepend again' to make sure they appear on "top".                  foreach (RepositoryViewModel item in notifyCollectionChangedEventArgs.NewItems)                  {                      if (String.IsNullOrEmpty(item.RepositoryFullPath))                          continue;                        var repo = new RepositoryConfiguration                      {                          Name = item.Name'                          RepositoryFullPath = item.RepositoryFullPath                      };                        // Add this repo to the opened list.                      Config.OpenedRepositories.Add(repo);                        // Add this repo to the recent list.                      Config.RecentRepositories.RemoveAll(r => r.RepositoryFullPath == item.RepositoryFullPath);                      Config.RecentRepositories.Insert(0' repo);                  }                    if (Config.RecentRepositories.Count > 20)                      Config.RecentRepositories.RemoveRange(20' Config.RecentRepositories.Count - 20);              }
Magic Number,GG,MainWindowViewModel,C:\repos\kaisellgren_Git-GUI\ViewModels\MainWindowViewModel.cs,RepositoryViewModelsOnCollectionChanged,The following statement contains a magic number: if (notifyCollectionChangedEventArgs.NewItems != null)              {                  // Update the configuration "recent repositories".                  // Basically' remove existing and prepend again' to make sure they appear on "top".                  foreach (RepositoryViewModel item in notifyCollectionChangedEventArgs.NewItems)                  {                      if (String.IsNullOrEmpty(item.RepositoryFullPath))                          continue;                        var repo = new RepositoryConfiguration                      {                          Name = item.Name'                          RepositoryFullPath = item.RepositoryFullPath                      };                        // Add this repo to the opened list.                      Config.OpenedRepositories.Add(repo);                        // Add this repo to the recent list.                      Config.RecentRepositories.RemoveAll(r => r.RepositoryFullPath == item.RepositoryFullPath);                      Config.RecentRepositories.Insert(0' repo);                  }                    if (Config.RecentRepositories.Count > 20)                      Config.RecentRepositories.RemoveRange(20' Config.RecentRepositories.Count - 20);              }
Magic Number,GG,MainWindowViewModel,C:\repos\kaisellgren_Git-GUI\ViewModels\MainWindowViewModel.cs,RepositoryViewModelsOnCollectionChanged,The following statement contains a magic number: if (notifyCollectionChangedEventArgs.NewItems != null)              {                  // Update the configuration "recent repositories".                  // Basically' remove existing and prepend again' to make sure they appear on "top".                  foreach (RepositoryViewModel item in notifyCollectionChangedEventArgs.NewItems)                  {                      if (String.IsNullOrEmpty(item.RepositoryFullPath))                          continue;                        var repo = new RepositoryConfiguration                      {                          Name = item.Name'                          RepositoryFullPath = item.RepositoryFullPath                      };                        // Add this repo to the opened list.                      Config.OpenedRepositories.Add(repo);                        // Add this repo to the recent list.                      Config.RecentRepositories.RemoveAll(r => r.RepositoryFullPath == item.RepositoryFullPath);                      Config.RecentRepositories.Insert(0' repo);                  }                    if (Config.RecentRepositories.Count > 20)                      Config.RecentRepositories.RemoveRange(20' Config.RecentRepositories.Count - 20);              }
Magic Number,GG,MainWindow,C:\repos\kaisellgren_Git-GUI\Views\MainWindow.xaml.cs,RepositoryTabs_SelectionChanged,The following statement contains a magic number: if (tabControl.SelectedIndex == tabControl.Items.Count - 1)              {                  if (lastRepositoryIndex == tabControl.SelectedIndex - 1)                      tabControl.SelectedIndex = 0;                  else                      tabControl.SelectedIndex = tabControl.Items.Count - 2;              }
Magic Number,GG.Libraries.Animation,LinearGradientAnimation,C:\repos\kaisellgren_Git-GUI\Libraries\Animation\LinearGradientAnimation.cs,ValidateAnimationFunction,The following statement contains a magic number: if (this.From != null)              {                  if (this.To != null)                  {                      this._animationType = AnimationType.FromTo;                      this._keyValues = new LinearGradientBrush[2];                      this._keyValues[0] = this.From;                      this._keyValues[1] = this.To;                  }                  else                  {                      if (this.By != null)                      {                          this._animationType = AnimationType.FromBy;                          this._keyValues = new LinearGradientBrush[2];                          this._keyValues[0] = this.From;                          this._keyValues[1] = this.By;                      }                      else                      {                          this._animationType = AnimationType.From;                          this._keyValues = new LinearGradientBrush[1];                          this._keyValues[0] = this.From;                      }                  }              }              else              {                  if (this.To != null)                  {                      this._animationType = AnimationType.To;                      this._keyValues = new LinearGradientBrush[1];                      this._keyValues[0] = this.To;                  }                  else                  {                      if (this.By != null)                      {                          this._animationType = AnimationType.By;                          this._keyValues = new LinearGradientBrush[1];                          this._keyValues[0] = this.By;                      }                  }              }
Magic Number,GG.Libraries.Animation,LinearGradientAnimation,C:\repos\kaisellgren_Git-GUI\Libraries\Animation\LinearGradientAnimation.cs,ValidateAnimationFunction,The following statement contains a magic number: if (this.From != null)              {                  if (this.To != null)                  {                      this._animationType = AnimationType.FromTo;                      this._keyValues = new LinearGradientBrush[2];                      this._keyValues[0] = this.From;                      this._keyValues[1] = this.To;                  }                  else                  {                      if (this.By != null)                      {                          this._animationType = AnimationType.FromBy;                          this._keyValues = new LinearGradientBrush[2];                          this._keyValues[0] = this.From;                          this._keyValues[1] = this.By;                      }                      else                      {                          this._animationType = AnimationType.From;                          this._keyValues = new LinearGradientBrush[1];                          this._keyValues[0] = this.From;                      }                  }              }              else              {                  if (this.To != null)                  {                      this._animationType = AnimationType.To;                      this._keyValues = new LinearGradientBrush[1];                      this._keyValues[0] = this.To;                  }                  else                  {                      if (this.By != null)                      {                          this._animationType = AnimationType.By;                          this._keyValues = new LinearGradientBrush[1];                          this._keyValues[0] = this.By;                      }                  }              }
Magic Number,GG.Models,RecentCommitMessage,C:\repos\kaisellgren_Git-GUI\Models\RecentCommitMessage.cs,RecentCommitMessage,The following statement contains a magic number: CroppedMessage = message.Right(72);
Magic Number,GG.Models,Commit,C:\repos\kaisellgren_Git-GUI\Models\Commit.cs,Create,The following statement contains a magic number: c.ShortDescription = commit.Message.Right(72).RemoveLineBreaks();
Missing Default,GG.UserControls,CenterArea,C:\repos\kaisellgren_Git-GUI\UserControls\CenterArea.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.ChangesetHistoryRowDefinition = ((System.Windows.Controls.RowDefinition)(target));              return;              case 2:              this.ChangesetHistoryElement = ((GG.UserControls.ChangesetHistory)(target));              return;              case 3:                            #line 18 "..\..\..\..\UserControls\CenterArea.xaml"              ((System.Windows.Controls.GridSplitter)(target)).DragCompleted += new System.Windows.Controls.Primitives.DragCompletedEventHandler(this.GridSplitterDragCompleted);                            #line default              #line hidden              return;              }
Missing Default,GG.UserControls,ChangesetHistoryContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistoryContextMenu.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\..\UserControls\ChangesetHistoryContextMenu.xaml"              ((GG.UserControls.ChangesetHistoryContextMenu)(target)).Opened += new System.Windows.RoutedEventHandler(this.OnOpened);                            #line default              #line hidden                            #line 5 "..\..\..\..\UserControls\ChangesetHistoryContextMenu.xaml"              ((GG.UserControls.ChangesetHistoryContextMenu)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.OnContextMenuOpening);                            #line default              #line hidden              return;              case 2:              this.Reset = ((System.Windows.Controls.MenuItem)(target));              return;              }
Missing Default,GG.UserControls,CommitPanel,C:\repos\kaisellgren_Git-GUI\UserControls\CommitPanel.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\..\UserControls\CommitPanel.xaml"              ((GG.UserControls.CommitPanel)(target)).Loaded += new System.Windows.RoutedEventHandler(this.CommitPanelLoaded);                            #line default              #line hidden              return;              case 2:                            #line 28 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.ComboBox)(target)).Initialized += new System.EventHandler(this.ComboBoxInitialized);                            #line default              #line hidden                            #line 29 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.OnRecentCommitMessagesSelectionChanged);                            #line default              #line hidden              return;              case 3:                            #line 37 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.Button)(target)).Initialized += new System.EventHandler(this.ButtonInitialized);                            #line default              #line hidden              return;              case 4:                            #line 53 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.TextBox)(target)).Initialized += new System.EventHandler(this.TextBoxInitialized);                            #line default              #line hidden                            #line 54 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.TextBox)(target)).LostFocus += new System.Windows.RoutedEventHandler(this.CommitMessageLostFocus);                            #line default              #line hidden                            #line 55 "..\..\..\..\UserControls\CommitPanel.xaml"              ((System.Windows.Controls.TextBox)(target)).GotFocus += new System.Windows.RoutedEventHandler(this.CommitMessageGotFocus);                            #line default              #line hidden              return;              }
Missing Default,GG.UserControls,StatusGrid,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGrid.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 84 "..\..\..\..\UserControls\StatusGrid.xaml"              ((System.Windows.Controls.DataGrid)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.StatusGridSelectionChanged);                            #line default              #line hidden              return;              case 2:                            #line 131 "..\..\..\..\UserControls\StatusGrid.xaml"              ((System.Windows.Controls.DataGrid)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.StatusGridSelectionChanged);                            #line default              #line hidden              return;              }
Missing Default,GG.UserControls,StatusGridContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\StatusGridContextMenu.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\..\UserControls\StatusGridContextMenu.xaml"              ((GG.UserControls.StatusGridContextMenu)(target)).Opened += new System.Windows.RoutedEventHandler(this.OnOpened);                            #line default              #line hidden              return;              case 2:              this.Stage = ((System.Windows.Controls.MenuItem)(target));              return;              case 3:              this.Unstage = ((System.Windows.Controls.MenuItem)(target));              return;              case 4:              this.StageSeparator = ((System.Windows.Controls.Separator)(target));              return;              case 5:              this.IgnoreThisFile = ((System.Windows.Controls.MenuItem)(target));              return;              case 6:              this.IgnoreFilesUnderThisFolder = ((System.Windows.Controls.MenuItem)(target));              return;              case 7:              this.IgnoreThisFolderEntirely = ((System.Windows.Controls.MenuItem)(target));              return;              case 8:              this.Delete = ((System.Windows.Controls.MenuItem)(target));              return;              }
Missing Default,GG.UserControls,ChangesetHistory,C:\repos\kaisellgren_Git-GUI\UserControls\ChangesetHistory.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.ChangesetHistoryContainer = ((System.Windows.Controls.Grid)(target));              return;              case 2:              this.ChangesetHistoryGrid = ((System.Windows.Controls.DataGrid)(target));                            #line 27 "..\..\..\..\UserControls\ChangesetHistory.xaml"              this.ChangesetHistoryGrid.AddHandler(System.Windows.Controls.ScrollViewer.ScrollChangedEvent' new System.Windows.Controls.ScrollChangedEventHandler(this.ChangesetHistoryGrid_ScrollChanged));                            #line default              #line hidden              return;              case 3:              this.GraphScrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 4:              this.Graph = ((System.Windows.Controls.Canvas)(target));              return;              }
Missing Default,GG.UserControls,LeftToolbar,C:\repos\kaisellgren_Git-GUI\UserControls\LeftToolbar.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.LeftToolbarUserControl = ((GG.UserControls.LeftToolbar)(target));              return;              case 2:                            #line 20 "..\..\..\..\UserControls\LeftToolbar.xaml"              ((System.Windows.Controls.TreeViewItem)(target)).PreviewMouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnPreviewMouseRightButtonDown);                            #line default              #line hidden              return;              case 3:                            #line 37 "..\..\..\..\UserControls\LeftToolbar.xaml"              ((System.Windows.Controls.TreeViewItem)(target)).PreviewMouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnPreviewMouseRightButtonDown);                            #line default              #line hidden              return;              }
Missing Default,GG.UserControls,NewTabPage,C:\repos\kaisellgren_Git-GUI\UserControls\NewTabPage.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\..\UserControls\NewTabPage.xaml"              ((GG.UserControls.NewTabPage)(target)).Loaded += new System.Windows.RoutedEventHandler(this.NewTabPageLoaded);                            #line default              #line hidden              return;              case 2:              this.RecentRepositoriesList = ((System.Windows.Controls.ListView)(target));                            #line 24 "..\..\..\..\UserControls\NewTabPage.xaml"              this.RecentRepositoriesList.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.OnMouseDoubleClick);                            #line default              #line hidden              return;              case 3:                            #line 48 "..\..\..\..\UserControls\NewTabPage.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnOpenLocalRepository);                            #line default              #line hidden              return;              case 4:                            #line 54 "..\..\..\..\UserControls\NewTabPage.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnCreateLocalRepository);                            #line default              #line hidden              return;              }
Missing Default,GG.UserControls.LeftToolbarContextMenus,TagContextMenu,C:\repos\kaisellgren_Git-GUI\UserControls\LeftToolbarContextMenus\TagContextMenu.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 5 "..\..\..\..\..\UserControls\LeftToolbarContextMenus\TagContextMenu.xaml"              ((GG.UserControls.LeftToolbarContextMenus.TagContextMenu)(target)).Opened += new System.Windows.RoutedEventHandler(this.OnOpened);                            #line default              #line hidden                            #line 6 "..\..\..\..\..\UserControls\LeftToolbarContextMenus\TagContextMenu.xaml"              ((GG.UserControls.LeftToolbarContextMenus.TagContextMenu)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.OnContextMenuOpening);                            #line default              #line hidden              return;              }
Missing Default,GG,About,C:\repos\kaisellgren_Git-GUI\Views\About.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 58 "..\..\..\..\Views\About.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CloseWindow);                            #line default              #line hidden              return;              }
Missing Default,GG.Libraries.Animation,LinearGradientAnimation,C:\repos\kaisellgren_Git-GUI\Libraries\Animation\LinearGradientAnimation.cs,GetCurrentValueCore,The following switch statement is missing a default case: switch (this._animationType)              {                  case AnimationType.Automatic:                      brush = defaultOriginValue;                      brush2 = defaultDestinationValue;                      value = GetDefaultLinearGradientBrush(brush);                      value2 = GetDefaultLinearGradientBrush(brush);                      break;                  case AnimationType.From:                      brush = this._keyValues[0];                      brush2 = defaultDestinationValue;                      value = GetDefaultLinearGradientBrush(brush);                      value2 = GetDefaultLinearGradientBrush(brush);                      break;                  case AnimationType.To:                      brush = defaultOriginValue;                      brush2 = this._keyValues[0];                      value = GetDefaultLinearGradientBrush(brush2);                      value2 = GetDefaultLinearGradientBrush(brush2);                      break;                  case AnimationType.By:                      brush2 = this._keyValues[0];                      value2 = defaultOriginValue;                      value = GetDefaultLinearGradientBrush(brush2);                      value2 = GetDefaultLinearGradientBrush(brush2);                      break;                  case AnimationType.FromTo:                      brush = this._keyValues[0];                      brush2 = this._keyValues[1];                      value = GetDefaultLinearGradientBrush(brush);                      value2 = GetDefaultLinearGradientBrush(brush);                      if (this.IsAdditive)                      {                          value2 = defaultOriginValue;                      }                      break;                  case AnimationType.FromBy:                      brush = this._keyValues[0];                      brush2 = AddLinearGradientBrush(this._keyValues[0]' this._keyValues[1]);                      value = GetDefaultLinearGradientBrush(brush);                      value2 = GetDefaultLinearGradientBrush(brush);                      if (this.IsAdditive)                      {                          value2 = defaultOriginValue;                      }                      break;              }
