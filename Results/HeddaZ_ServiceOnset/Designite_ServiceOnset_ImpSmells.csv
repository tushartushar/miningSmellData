Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ServiceOnset.Services,Interop,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\Interop.cs,CreateProcess,Cyclomatic complexity of the method is 8
Long Parameter List,ServiceOnset.Services,Interop,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\Interop.cs,CreateProcessAsUser,The method has 11 parameters. Parameters: hToken' lpApplicationName' lpCommandLine' lpProcessAttributes' lpThreadAttributes' bInheritHandle' dwCreationFlags' lpEnvrionment' lpCurrentDirectory' lpStartupInfo' lpProcessInformation
Long Parameter List,ServiceOnset.Services,Interop,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\Interop.cs,DuplicateTokenEx,The method has 6 parameters. Parameters: hExistingToken' dwDesiredAccess' lpThreadAttributes' ImpersonationLevel' dwTokenType' phNewToken
Long Statement,ServiceOnset,ProjectInstaller,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\ProjectInstaller.cs,InitializeComponent,The length of the statement  "            this.serviceInstaller1.Committed += new System.Configuration.Install.InstallEventHandler(this.serviceInstaller1_Committed); " is 123.
Long Statement,ServiceOnset.Services,ServiceBase,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\ServiceBase.cs,ResolveProcessBeforeStart,The length of the statement  "                process.StartInfo.FileName = Path.Combine(process.StartInfo.WorkingDirectory' Path.GetFileName(process.StartInfo.FileName)); " is 124.
Long Statement,ServiceOnset.Services,ServiceBase,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\ServiceBase.cs,TryMatchProcess,The length of the statement  "                        || Path.GetFileNameWithoutExtension(process.MainModule.FileName).Equals(Path.GetFileNameWithoutExtension(command)' StringComparison.OrdinalIgnoreCase)); " is 152.
Empty Catch Block,ServiceOnset.Services,DaemonService,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\DaemonService.cs,Dispose,The method has an empty catch block.
Empty Catch Block,ServiceOnset.Services,DaemonService,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\DaemonService.cs,ThreadProc,The method has an empty catch block.
Empty Catch Block,ServiceOnset.Services,DaemonService,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\DaemonService.cs,Stop,The method has an empty catch block.
Empty Catch Block,ServiceOnset.Services,IntervalService,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\IntervalService.cs,Dispose,The method has an empty catch block.
Empty Catch Block,ServiceOnset.Services,IntervalService,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\IntervalService.cs,ThreadProc,The method has an empty catch block.
Empty Catch Block,ServiceOnset.Services,IntervalService,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\IntervalService.cs,Stop,The method has an empty catch block.
Empty Catch Block,ServiceOnset.Services,LaunchService,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\LaunchService.cs,Dispose,The method has an empty catch block.
Empty Catch Block,ServiceOnset.Services,LaunchService,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\LaunchService.cs,ThreadProc,The method has an empty catch block.
Empty Catch Block,ServiceOnset.Services,LaunchService,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\LaunchService.cs,Stop,The method has an empty catch block.
Empty Catch Block,ServiceOnset.Services,ServiceBase,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\ServiceBase.cs,Dispose,The method has an empty catch block.
Empty Catch Block,ServiceOnset.Services,ServiceBase,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\ServiceBase.cs,ResolveProcessAfterStart,The method has an empty catch block.
Empty Catch Block,ServiceOnset.Services,ServiceBase,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\ServiceBase.cs,ResolveProcessAfterExit,The method has an empty catch block.
Magic Number,ServiceOnset.Services,DaemonService,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\DaemonService.cs,ThreadProc,The following statement contains a magic number: while (this.IsRunning)              {                  try                  {                      this.InnerProcess.Start();                      this.ResolveProcessAfterStart(this.InnerProcess);                        this.InnerProcess.WaitForExit();                  }                  catch (Exception exception)                  {                      this.Log.Error("ThreadProc error --->"' exception);                        try                      {                          this.InnerProcess.Kill();                      }                      catch { }                  }                  finally                  {                      this.ResolveProcessAfterExit(this.InnerProcess);                  }                    Thread.Sleep(this.StartInfo.IntervalInSeconds * 1000);              }
Magic Number,ServiceOnset.Services,IntervalService,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\IntervalService.cs,ThreadProc,The following statement contains a magic number: while (this.IsRunning)              {                  try                  {                      this.InnerProcess.Start();                      this.ResolveProcessAfterStart(this.InnerProcess);                        Thread.Sleep(this.StartInfo.IntervalInSeconds * 1000);                  }                  catch (Exception exception)                  {                      this.Log.Error("ThreadProc error --->"' exception);                        Thread.Sleep(this.StartInfo.IntervalInSeconds * 1000);                  }                  finally                  {                      this.ResolveProcessAfterExit(this.InnerProcess);                        try                      {                          this.InnerProcess.Kill();                      }                      catch { }                  }              }
Magic Number,ServiceOnset.Services,IntervalService,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\IntervalService.cs,ThreadProc,The following statement contains a magic number: while (this.IsRunning)              {                  try                  {                      this.InnerProcess.Start();                      this.ResolveProcessAfterStart(this.InnerProcess);                        Thread.Sleep(this.StartInfo.IntervalInSeconds * 1000);                  }                  catch (Exception exception)                  {                      this.Log.Error("ThreadProc error --->"' exception);                        Thread.Sleep(this.StartInfo.IntervalInSeconds * 1000);                  }                  finally                  {                      this.ResolveProcessAfterExit(this.InnerProcess);                        try                      {                          this.InnerProcess.Kill();                      }                      catch { }                  }              }
Magic Number,ServiceOnset.Services,ServiceBase,C:\repos\HeddaZ_ServiceOnset\ServiceOnset\Services\ServiceBase.cs,TryKillProcess,The following statement contains a magic number: try              {                  process.Kill();              }              catch              {                  const string taskkillCommand = "TASKKILL";                  const string taskkillArguments = "/PID {0}";                  const string ntsdCommand = "ntsd";                  const string ntsdArguments = "-c q -p {0}";                  try                  {                      using (Process killer = new Process())                      {                          if (System.Environment.OSVersion.Version.Major >= 6)                          {                              killer.StartInfo.FileName = taskkillCommand;                              killer.StartInfo.Arguments = string.Format(taskkillArguments' process.Id);                          }                          else                          {                              killer.StartInfo.FileName = ntsdCommand;                              killer.StartInfo.Arguments = string.Format(ntsdArguments' process.Id);                          }                          killer.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;                          killer.Start();                          killer.WaitForExit();                          killer.Close();                      }                  }                  catch (Exception exception)                  {                      this.Log.Error("TryKillProcess error but resumed --->"' exception);                  }              }
