Implementation smell,Namespace,Class,File,Method,Description
Long Method,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadObject,The method has 144 lines of code.
Complex Method,DotAmf.Data,Amf3TypeMarkerExtension,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Data\Amf3TypeMarker.cs,ToAmfxName,Cyclomatic complexity of the method is 12
Complex Method,DotAmf.Encoder,Amf0Encoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Encoder\Amf0Encoder.cs,WriteAmfValue,Cyclomatic complexity of the method is 14
Complex Method,DotAmf.Encoder,Amf0Encoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Encoder\Amf0Encoder.cs,WriteObject,Cyclomatic complexity of the method is 9
Complex Method,DotAmf.Encoder,Amf3Encoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Encoder\Amf3Encoder.cs,WriteAmfValue,Cyclomatic complexity of the method is 16
Complex Method,DotAmf.Encoder,Amf3Encoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Encoder\Amf3Encoder.cs,WriteObject,Cyclomatic complexity of the method is 8
Complex Method,DotAmf.Encoder,AmfPacketEncoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Encoder\AmfPacketEncoder.cs,Encode,Cyclomatic complexity of the method is 14
Complex Method,DotAmf.Decoder,Amf0Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf0Decoder.cs,ReadValue,Cyclomatic complexity of the method is 15
Complex Method,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadValue,Cyclomatic complexity of the method is 13
Complex Method,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadArray,Cyclomatic complexity of the method is 9
Complex Method,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadObject,Cyclomatic complexity of the method is 17
Complex Method,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,DeserializePacket,Cyclomatic complexity of the method is 11
Complex Method,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,Deserialize,Cyclomatic complexity of the method is 15
Complex Method,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,ReadObject,Cyclomatic complexity of the method is 8
Complex Method,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,Serialize,Cyclomatic complexity of the method is 15
Complex Method,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,WriteDataContract,Cyclomatic complexity of the method is 14
Complex Method,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,GetAmfxType,Cyclomatic complexity of the method is 11
Long Parameter List,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,WriteDataContract,The method has 5 parameters. Parameters: writer' graph' type' context' isDataContract
Long Statement,DotAmf.Encoder,Amf0Encoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Encoder\Amf0Encoder.cs,WriteAmfValue,The length of the statement  "                throw new InvalidOperationException(string.Format(Errors.Amf0Decoder_ReadAmfValue_AmfVersionNotSupported' context.AmfVersion)); " is 127.
Long Statement,DotAmf.Encoder,Amf0Encoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Encoder\Amf0Encoder.cs,WriteAmfValue,The length of the statement  "            if (input.NodeType != XmlNodeType.Element) throw new XmlException(string.Format("Element node expected' {0} found."' input.NodeType)); " is 134.
Long Statement,DotAmf.Encoder,Amf3Encoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Encoder\Amf3Encoder.cs,WriteAmfValue,The length of the statement  "            if (input.NodeType != XmlNodeType.Element) throw new XmlException(string.Format("Element node expected' {0} found."' input.NodeType)); " is 134.
Long Statement,DotAmf.Decoder,Amf0Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf0Decoder.cs,ReadAmfValue,The length of the statement  "                throw new InvalidOperationException(string.Format(Errors.Amf0Decoder_ReadAmfValue_AmfVersionNotSupported' context.AmfVersion)); " is 127.
Long Statement,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadAmfValue,The length of the statement  "                throw new FormatException(string.Format(Errors.Amf3Decoder_ReadValue_TypeMarkerNotFound' reader.BaseStream.Position)' e); " is 121.
Long Statement,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,WriteObject,The length of the statement  "            if (!stream.CanWrite) throw new ArgumentException(Errors.DataContractAmfSerializer_WriteObject_InvalidStream' "stream"); " is 120.
Long Statement,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,Deserialize,The length of the statement  "            if (reader.NodeType != XmlNodeType.Element) throw new XmlException(string.Format("Element node expected' {0} found."' reader.NodeType)); " is 136.
Long Statement,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,ReadObject,The length of the statement  "                result = DataContractHelper.InstantiateContract(typeDescriptor.Type' properties' typeDescriptor.PropertyMap' typeDescriptor.FieldMap); " is 134.
Long Statement,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,WriteString,The length of the statement  "            if (value == string.Empty || context.AmfVersion != AmfVersion.Amf3 || (index = context.StringReferences.IndexOf(value)) == -1) " is 126.
Long Statement,DotAmf.Serialization,DataContractHelper,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractHelper.cs,GetContractAlias,The length of the statement  "            throw new ArgumentException(string.Format(Errors.DataContractUtil_GetContractAlias_InvalidContract' type.FullName)' "type"); " is 124.
Magic Number,DotAmf.IO,AmfStreamReader,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\IO\AmfStreamReader.cs,ReadInt16,The following statement contains a magic number: return BitConverter.ToInt16(PrepareBytes(ReadBytes(2))' 0);
Magic Number,DotAmf.IO,AmfStreamReader,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\IO\AmfStreamReader.cs,ReadUInt16,The following statement contains a magic number: return BitConverter.ToUInt16(PrepareBytes(ReadBytes(2))' 0);
Magic Number,DotAmf.IO,AmfStreamReader,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\IO\AmfStreamReader.cs,ReadInt32,The following statement contains a magic number: return BitConverter.ToInt32(PrepareBytes(ReadBytes(4))' 0);
Magic Number,DotAmf.IO,AmfStreamReader,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\IO\AmfStreamReader.cs,ReadUInt32,The following statement contains a magic number: return BitConverter.ToUInt32(PrepareBytes(ReadBytes(4))' 0);
Magic Number,DotAmf.IO,AmfStreamReader,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\IO\AmfStreamReader.cs,ReadDouble,The following statement contains a magic number: return BitConverter.ToDouble(PrepareBytes(ReadBytes(8))' 0);
Magic Number,DotAmf.Encoder,Amf3Encoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Encoder\Amf3Encoder.cs,WriteObject,The following statement contains a magic number: flag |= count << 4;
Magic Number,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadTraitsReference,The following statement contains a magic number: index = reference >> 2;
Magic Number,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadUint29,The following statement contains a magic number: octet < 128
Magic Number,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadUint29,The following statement contains a magic number: var result = (octet & mask) << 7;
Magic Number,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadUint29,The following statement contains a magic number: octet < 128
Magic Number,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadUint29,The following statement contains a magic number: result = (result | (octet & mask)) << 7;
Magic Number,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadUint29,The following statement contains a magic number: octet < 128
Magic Number,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadUint29,The following statement contains a magic number: result = (result | (octet & mask)) << 8;
Magic Number,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadInteger,The following statement contains a magic number: const int mask = 1 << 28;
Magic Number,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadObject,The following statement contains a magic number: var isExternalizable = ((traitsreference & 0x4) == 4);
Magic Number,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadObject,The following statement contains a magic number: var isDynamic = ((traitsreference & 0x8) == 8);
Magic Number,DotAmf.Decoder,Amf3Decoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Decoder\Amf3Decoder.cs,ReadObject,The following statement contains a magic number: var count = (traitsreference >> 4);
Magic Number,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,ReadDate,The following statement contains a magic number: var origin = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,DotAmf.Serialization,DataContractHelper,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractHelper.cs,ConvertToTimestamp,The following statement contains a magic number: var origin = new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,DotAmf.Serialization,DataContractHelper,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractHelper.cs,ConvertToTimestamp,The following statement contains a magic number: return (value - origin).TotalSeconds * 1000;
Missing Default,DotAmf.Encoder,Amf0Encoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Encoder\Amf0Encoder.cs,WriteAmfValue,The following switch statement is missing a default case: switch (input.Name)              {                  case AmfxContent.Null:                      WriteNull(writer);                      return;                    case AmfxContent.True:                      WriteBoolean(writer' true);                      return;                    case AmfxContent.False:                      WriteBoolean(writer' false);                      return;              }
Missing Default,DotAmf.Encoder,Amf3Encoder,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Encoder\Amf3Encoder.cs,WriteAmfValue,The following switch statement is missing a default case: switch (input.Name)              {                  case AmfxContent.Null:                      WriteTypeMarker(writer' Amf3TypeMarker.Null);                      return;                    case AmfxContent.True:                      WriteTypeMarker(writer' Amf3TypeMarker.True);                      return;                    case AmfxContent.False:                      WriteTypeMarker(writer' Amf3TypeMarker.False);                      return;              }
Missing Default,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,Deserialize,The following switch statement is missing a default case: switch (reader.Name)              {                  case AmfxContent.Null:                      reader.Read();                      return null;                    case AmfxContent.True:                      reader.Read();                      return true;                    case AmfxContent.False:                      reader.Read();                      return false;              }
Missing Default,DotAmf.Serialization,DataContractAmfSerializer,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractAmfSerializer.cs,GetAmfxType,The following switch statement is missing a default case: switch(typecode)              {                  //A boolean value                  case TypeCode.Boolean:                      return AmfxContent.Boolean;                    //A string                  case TypeCode.String:                      return AmfxContent.String;                    //A date                  case TypeCode.DateTime:                      return AmfxContent.Date;                    case TypeCode.Empty:                      return AmfxContent.Date;              }
Missing Default,DotAmf.Serialization,DataContractHelper,D:\research\architectureSmells\repos\artema_DotAmf\Src\DotAmf\Serialization\DataContractHelper.cs,IsNumericType,The following switch statement is missing a default case: switch (typecode)              {                  case TypeCode.Byte:                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                  case TypeCode.SByte:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      isInteger = true;                      return true;                    case TypeCode.Decimal:                  case TypeCode.Double:                  case TypeCode.Single:                      return true;                    case TypeCode.Object:                      {                          if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>))                          {                              var subtype = Nullable.GetUnderlyingType(type);                              return IsNumericType(subtype' Type.GetTypeCode(subtype)' out isInteger);                          }                            return false;                      }              }
