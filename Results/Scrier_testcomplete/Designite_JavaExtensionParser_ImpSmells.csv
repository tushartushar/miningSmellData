Implementation smell,Namespace,Class,File,Method,Description
Complex Method,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,ParseScriptFile,Cyclomatic complexity of the method is 17
Complex Method,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,Cyclomatic complexity of the method is 10
Complex Method,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,Cyclomatic complexity of the method is 18
Complex Method,JavaExtensionParser,frm_main,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\Form1.cs,btn_parse_doxygen_Click,Cyclomatic complexity of the method is 9
Long Statement,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,ParseScriptFile,The length of the statement  "				MyLogger.Log ("Didn't find file " + description.Name + " in Directory " + description.Directory + "." + Environment.NewLine); " is 125.
Long Statement,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The length of the statement  "	input.Add (tab + "<ScriptExtension Name =\"" + name + "\" Author=\"" + author + "\" Version=\"" + version + "\" HomePage=\"None\">"); " is 133.
Long Statement,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The length of the statement  "					MyLogger.Alert ("No function name provided for function \"" + funcName + "\" temporary replace is: \"" + ToBuild + "\"." + Environment.NewLine); " is 144.
Long Statement,JavaExtensionParser,frm_main,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\Form1.cs,btn_parse_doxygen_Click,The length of the statement  "		if (DialogResult.OK == MessageBox.Show ("Do you want to clear output before generation of doxygen?"' "Clear Log"' MessageBoxButtons.OKCancel)) { " is 144.
Long Statement,JavaExtensionParser,MyLogger,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\MyLogger.cs,WriteLogToFile,The length of the statement  "	string filename = "log_" + DateTime.Now.ToShortDateString () + " " + DateTime.Now.ToShortTimeString ().Replace (":"' ".") + "." + DateTime.Now.Millisecond.ToString () + ".log"; " is 176.
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The following statement contains a magic number: foreach (string str in store) {  	if (Regex.IsMatch (str' authorPattern' RegexOptions.Multiline)) {  		if (author != "") {  			author += "' ";  		}  		author += Regex.Match (str' authorPattern).Groups [2].ToString ();  	}  	else if (Regex.IsMatch (str' versionPattern' RegexOptions.Multiline)) {  		version = Regex.Match (str' versionPattern).Groups [2].ToString ();  	}  	else if (Regex.IsMatch (str' briefPattern' RegexOptions.Multiline)) {  		brief = Regex.Match (str' briefPattern).Groups [2].ToString ();  	}  }  
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The following statement contains a magic number: foreach (string str in store) {  	if (Regex.IsMatch (str' authorPattern' RegexOptions.Multiline)) {  		if (author != "") {  			author += "' ";  		}  		author += Regex.Match (str' authorPattern).Groups [2].ToString ();  	}  	else if (Regex.IsMatch (str' versionPattern' RegexOptions.Multiline)) {  		version = Regex.Match (str' versionPattern).Groups [2].ToString ();  	}  	else if (Regex.IsMatch (str' briefPattern' RegexOptions.Multiline)) {  		brief = Regex.Match (str' briefPattern).Groups [2].ToString ();  	}  }  
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The following statement contains a magic number: foreach (string str in store) {  	if (Regex.IsMatch (str' authorPattern' RegexOptions.Multiline)) {  		if (author != "") {  			author += "' ";  		}  		author += Regex.Match (str' authorPattern).Groups [2].ToString ();  	}  	else if (Regex.IsMatch (str' versionPattern' RegexOptions.Multiline)) {  		version = Regex.Match (str' versionPattern).Groups [2].ToString ();  	}  	else if (Regex.IsMatch (str' briefPattern' RegexOptions.Multiline)) {  		brief = Regex.Match (str' briefPattern).Groups [2].ToString ();  	}  }  
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The following statement contains a magic number: if (Regex.IsMatch (str' authorPattern' RegexOptions.Multiline)) {  	if (author != "") {  		author += "' ";  	}  	author += Regex.Match (str' authorPattern).Groups [2].ToString ();  }  else if (Regex.IsMatch (str' versionPattern' RegexOptions.Multiline)) {  	version = Regex.Match (str' versionPattern).Groups [2].ToString ();  }  else if (Regex.IsMatch (str' briefPattern' RegexOptions.Multiline)) {  	brief = Regex.Match (str' briefPattern).Groups [2].ToString ();  }  
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The following statement contains a magic number: if (Regex.IsMatch (str' authorPattern' RegexOptions.Multiline)) {  	if (author != "") {  		author += "' ";  	}  	author += Regex.Match (str' authorPattern).Groups [2].ToString ();  }  else if (Regex.IsMatch (str' versionPattern' RegexOptions.Multiline)) {  	version = Regex.Match (str' versionPattern).Groups [2].ToString ();  }  else if (Regex.IsMatch (str' briefPattern' RegexOptions.Multiline)) {  	brief = Regex.Match (str' briefPattern).Groups [2].ToString ();  }  
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The following statement contains a magic number: if (Regex.IsMatch (str' authorPattern' RegexOptions.Multiline)) {  	if (author != "") {  		author += "' ";  	}  	author += Regex.Match (str' authorPattern).Groups [2].ToString ();  }  else if (Regex.IsMatch (str' versionPattern' RegexOptions.Multiline)) {  	version = Regex.Match (str' versionPattern).Groups [2].ToString ();  }  else if (Regex.IsMatch (str' briefPattern' RegexOptions.Multiline)) {  	brief = Regex.Match (str' briefPattern).Groups [2].ToString ();  }  
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The following statement contains a magic number: author += Regex.Match (str' authorPattern).Groups [2].ToString ();  
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The following statement contains a magic number: if (Regex.IsMatch (str' versionPattern' RegexOptions.Multiline)) {  	version = Regex.Match (str' versionPattern).Groups [2].ToString ();  }  else if (Regex.IsMatch (str' briefPattern' RegexOptions.Multiline)) {  	brief = Regex.Match (str' briefPattern).Groups [2].ToString ();  }  
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The following statement contains a magic number: if (Regex.IsMatch (str' versionPattern' RegexOptions.Multiline)) {  	version = Regex.Match (str' versionPattern).Groups [2].ToString ();  }  else if (Regex.IsMatch (str' briefPattern' RegexOptions.Multiline)) {  	brief = Regex.Match (str' briefPattern).Groups [2].ToString ();  }  
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The following statement contains a magic number: version = Regex.Match (str' versionPattern).Groups [2].ToString ();  
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The following statement contains a magic number: if (Regex.IsMatch (str' briefPattern' RegexOptions.Multiline)) {  	brief = Regex.Match (str' briefPattern).Groups [2].ToString ();  }  
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,PushScriptExtension,The following statement contains a magic number: brief = Regex.Match (str' briefPattern).Groups [2].ToString ();  
Magic Number,JavaExtensionParser,DescriptionBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DescriptionBuilder.cs,CreateMethod,The following statement contains a magic number: if (Regex.IsMatch (line' functionPattern' RegexOptions.Multiline)) {  	string functionName = Regex.Match (line' functionPattern).Groups [2].ToString ();  	MyLogger.Log ("Adding function \"" + functionName + "\" to description." + Environment.NewLine);  	input.Add (tab + tab + tab + tab + "<Method Name=\"" + functionName + "\" Routine=\"" + functionName + "\">");  	if (0 == store.Count) {  		MyLogger.Alert ("Found no viable comment for " + functionName + "." + Environment.NewLine);  	}  	else {  		foreach (string str in store) {  			string formatted = str;  			// Compensate for xml special characters.  			formatted = formatted.Replace ("&"' "&amp;");  			formatted = formatted.Replace ("<"' "&lt;");  			formatted = formatted.Replace (">"' "&gt;");  			formatted = formatted.Replace ("\""' "&quot;");  			formatted = formatted.Replace ("\'"' "&#39;");  			input.Add (formatted);  		}  	}  	input.Add (tab + tab + tab + tab + "</Method>");  }  
Magic Number,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The following statement contains a magic number: using (StreamReader reader = new StreamReader (file.FullName)) {  	bool funcFound = false;  	string funcName = "";  	int isClass = 0;  	string line = "";  	string function = @"^function ([A-Za-z0-9_]+)\(.*$";  	string classFunction = @"^([ \t]*)this\.([A-Za-z0-9]+)(.*)function(.*)$";  	string comment = @"^([ \t]*)\/\/\*.*$";  	string classParam = @"^([ \t]*)this\.([A-Za-z0-9]+) = (.*)$";  	string extension = @"^([ \t]*)(.*)(_[A-Z0-9]+)\.([A-Za-z0-9]+)\.(.*)$";  	Regex functionRegex = new Regex (function' RegexOptions.Multiline);  	Regex classFunctionRegex = new Regex (classFunction' RegexOptions.Multiline);  	Regex commentRegex = new Regex (comment' RegexOptions.Multiline);  	Regex classParamRegex = new Regex (classParam' RegexOptions.Multiline);  	Regex extensionRegex = new Regex (extension' RegexOptions.Multiline);  	int dirlength = Target.FullName.Length - 8;  	targetDir = Target.FullName;  	targetDir += Path.FullName.Substring (dirlength) + "\\";  	targetName += file.Name.Replace (".js"' ".cpp");  	while ((line = reader.ReadLine ()) != null) {  		Match functionMatch = functionRegex.Match (line);  		Match classFunctionMatch = classFunctionRegex.Match (line);  		Match classParamMatch = classParamRegex.Match (line);  		if (false == functionMatch.Success && false == classFunctionMatch.Success && false == classParamMatch.Success) {  			Match commentMatch = commentRegex.Match (line);  			Match extensionMatch = extensionRegex.Match (line);  			if (false == commentMatch.Success && true == funcFound) {  				string ToBuild = "";  				foreach (string str in funcName.Split (' ')) {  					if (str.Equals ("function")) {  						ToBuild = "void";  					}  					else {  						ToBuild += " " + str;  					}  				}  				MyLogger.Alert ("No function name provided for function \"" + funcName + "\" temporary replace is: \"" + ToBuild + "\"." + Environment.NewLine);  				input.Add (ToBuild);  			}  			if (commentMatch.Success) {  				if (isClass == 0 && line.Contains ("class")) {  					isClass = 1;  				}  				else if (isClass == 1 && line.Contains ("public:")) {  					isClass = 2;  				}  				if (line.Contains ("(")) {  					input.Add (line.Replace ("//*"' "").Replace (";"' ""));  				}  				else {  					input.Add (line.Replace ("//*"' ""));  				}  			}  			else if (extensionMatch.Success) {  				string ToBuild = "";  				foreach (string str in line.Split (' ')) {  					string add = "";  					if (1 < str.Count (f => f == '.')) {  						add = str.Replace ("."' "::");  					}  					else {  						add = str;  					}  					if (ToBuild.Length > 0) {  						ToBuild += " ";  					}  					ToBuild += add;  				}  				input.Add (ToBuild);  				// Remake to CPP method calling  			}  			else {  				input.Add (line);  			}  			if (0 != isClass && false == line.Contains ("class") && false == line.Contains ("public:")) {  				isClass = 0;  			}  			funcFound = false;  		}  		else if (true == functionMatch.Success && isClass != 2) {  			funcName = line;  			funcFound = true;  		}  	}  }  
Magic Number,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The following statement contains a magic number: using (StreamReader reader = new StreamReader (file.FullName)) {  	bool funcFound = false;  	string funcName = "";  	int isClass = 0;  	string line = "";  	string function = @"^function ([A-Za-z0-9_]+)\(.*$";  	string classFunction = @"^([ \t]*)this\.([A-Za-z0-9]+)(.*)function(.*)$";  	string comment = @"^([ \t]*)\/\/\*.*$";  	string classParam = @"^([ \t]*)this\.([A-Za-z0-9]+) = (.*)$";  	string extension = @"^([ \t]*)(.*)(_[A-Z0-9]+)\.([A-Za-z0-9]+)\.(.*)$";  	Regex functionRegex = new Regex (function' RegexOptions.Multiline);  	Regex classFunctionRegex = new Regex (classFunction' RegexOptions.Multiline);  	Regex commentRegex = new Regex (comment' RegexOptions.Multiline);  	Regex classParamRegex = new Regex (classParam' RegexOptions.Multiline);  	Regex extensionRegex = new Regex (extension' RegexOptions.Multiline);  	int dirlength = Target.FullName.Length - 8;  	targetDir = Target.FullName;  	targetDir += Path.FullName.Substring (dirlength) + "\\";  	targetName += file.Name.Replace (".js"' ".cpp");  	while ((line = reader.ReadLine ()) != null) {  		Match functionMatch = functionRegex.Match (line);  		Match classFunctionMatch = classFunctionRegex.Match (line);  		Match classParamMatch = classParamRegex.Match (line);  		if (false == functionMatch.Success && false == classFunctionMatch.Success && false == classParamMatch.Success) {  			Match commentMatch = commentRegex.Match (line);  			Match extensionMatch = extensionRegex.Match (line);  			if (false == commentMatch.Success && true == funcFound) {  				string ToBuild = "";  				foreach (string str in funcName.Split (' ')) {  					if (str.Equals ("function")) {  						ToBuild = "void";  					}  					else {  						ToBuild += " " + str;  					}  				}  				MyLogger.Alert ("No function name provided for function \"" + funcName + "\" temporary replace is: \"" + ToBuild + "\"." + Environment.NewLine);  				input.Add (ToBuild);  			}  			if (commentMatch.Success) {  				if (isClass == 0 && line.Contains ("class")) {  					isClass = 1;  				}  				else if (isClass == 1 && line.Contains ("public:")) {  					isClass = 2;  				}  				if (line.Contains ("(")) {  					input.Add (line.Replace ("//*"' "").Replace (";"' ""));  				}  				else {  					input.Add (line.Replace ("//*"' ""));  				}  			}  			else if (extensionMatch.Success) {  				string ToBuild = "";  				foreach (string str in line.Split (' ')) {  					string add = "";  					if (1 < str.Count (f => f == '.')) {  						add = str.Replace ("."' "::");  					}  					else {  						add = str;  					}  					if (ToBuild.Length > 0) {  						ToBuild += " ";  					}  					ToBuild += add;  				}  				input.Add (ToBuild);  				// Remake to CPP method calling  			}  			else {  				input.Add (line);  			}  			if (0 != isClass && false == line.Contains ("class") && false == line.Contains ("public:")) {  				isClass = 0;  			}  			funcFound = false;  		}  		else if (true == functionMatch.Success && isClass != 2) {  			funcName = line;  			funcFound = true;  		}  	}  }  
Magic Number,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The following statement contains a magic number: using (StreamReader reader = new StreamReader (file.FullName)) {  	bool funcFound = false;  	string funcName = "";  	int isClass = 0;  	string line = "";  	string function = @"^function ([A-Za-z0-9_]+)\(.*$";  	string classFunction = @"^([ \t]*)this\.([A-Za-z0-9]+)(.*)function(.*)$";  	string comment = @"^([ \t]*)\/\/\*.*$";  	string classParam = @"^([ \t]*)this\.([A-Za-z0-9]+) = (.*)$";  	string extension = @"^([ \t]*)(.*)(_[A-Z0-9]+)\.([A-Za-z0-9]+)\.(.*)$";  	Regex functionRegex = new Regex (function' RegexOptions.Multiline);  	Regex classFunctionRegex = new Regex (classFunction' RegexOptions.Multiline);  	Regex commentRegex = new Regex (comment' RegexOptions.Multiline);  	Regex classParamRegex = new Regex (classParam' RegexOptions.Multiline);  	Regex extensionRegex = new Regex (extension' RegexOptions.Multiline);  	int dirlength = Target.FullName.Length - 8;  	targetDir = Target.FullName;  	targetDir += Path.FullName.Substring (dirlength) + "\\";  	targetName += file.Name.Replace (".js"' ".cpp");  	while ((line = reader.ReadLine ()) != null) {  		Match functionMatch = functionRegex.Match (line);  		Match classFunctionMatch = classFunctionRegex.Match (line);  		Match classParamMatch = classParamRegex.Match (line);  		if (false == functionMatch.Success && false == classFunctionMatch.Success && false == classParamMatch.Success) {  			Match commentMatch = commentRegex.Match (line);  			Match extensionMatch = extensionRegex.Match (line);  			if (false == commentMatch.Success && true == funcFound) {  				string ToBuild = "";  				foreach (string str in funcName.Split (' ')) {  					if (str.Equals ("function")) {  						ToBuild = "void";  					}  					else {  						ToBuild += " " + str;  					}  				}  				MyLogger.Alert ("No function name provided for function \"" + funcName + "\" temporary replace is: \"" + ToBuild + "\"." + Environment.NewLine);  				input.Add (ToBuild);  			}  			if (commentMatch.Success) {  				if (isClass == 0 && line.Contains ("class")) {  					isClass = 1;  				}  				else if (isClass == 1 && line.Contains ("public:")) {  					isClass = 2;  				}  				if (line.Contains ("(")) {  					input.Add (line.Replace ("//*"' "").Replace (";"' ""));  				}  				else {  					input.Add (line.Replace ("//*"' ""));  				}  			}  			else if (extensionMatch.Success) {  				string ToBuild = "";  				foreach (string str in line.Split (' ')) {  					string add = "";  					if (1 < str.Count (f => f == '.')) {  						add = str.Replace ("."' "::");  					}  					else {  						add = str;  					}  					if (ToBuild.Length > 0) {  						ToBuild += " ";  					}  					ToBuild += add;  				}  				input.Add (ToBuild);  				// Remake to CPP method calling  			}  			else {  				input.Add (line);  			}  			if (0 != isClass && false == line.Contains ("class") && false == line.Contains ("public:")) {  				isClass = 0;  			}  			funcFound = false;  		}  		else if (true == functionMatch.Success && isClass != 2) {  			funcName = line;  			funcFound = true;  		}  	}  }  
Magic Number,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	Match functionMatch = functionRegex.Match (line);  	Match classFunctionMatch = classFunctionRegex.Match (line);  	Match classParamMatch = classParamRegex.Match (line);  	if (false == functionMatch.Success && false == classFunctionMatch.Success && false == classParamMatch.Success) {  		Match commentMatch = commentRegex.Match (line);  		Match extensionMatch = extensionRegex.Match (line);  		if (false == commentMatch.Success && true == funcFound) {  			string ToBuild = "";  			foreach (string str in funcName.Split (' ')) {  				if (str.Equals ("function")) {  					ToBuild = "void";  				}  				else {  					ToBuild += " " + str;  				}  			}  			MyLogger.Alert ("No function name provided for function \"" + funcName + "\" temporary replace is: \"" + ToBuild + "\"." + Environment.NewLine);  			input.Add (ToBuild);  		}  		if (commentMatch.Success) {  			if (isClass == 0 && line.Contains ("class")) {  				isClass = 1;  			}  			else if (isClass == 1 && line.Contains ("public:")) {  				isClass = 2;  			}  			if (line.Contains ("(")) {  				input.Add (line.Replace ("//*"' "").Replace (";"' ""));  			}  			else {  				input.Add (line.Replace ("//*"' ""));  			}  		}  		else if (extensionMatch.Success) {  			string ToBuild = "";  			foreach (string str in line.Split (' ')) {  				string add = "";  				if (1 < str.Count (f => f == '.')) {  					add = str.Replace ("."' "::");  				}  				else {  					add = str;  				}  				if (ToBuild.Length > 0) {  					ToBuild += " ";  				}  				ToBuild += add;  			}  			input.Add (ToBuild);  			// Remake to CPP method calling  		}  		else {  			input.Add (line);  		}  		if (0 != isClass && false == line.Contains ("class") && false == line.Contains ("public:")) {  			isClass = 0;  		}  		funcFound = false;  	}  	else if (true == functionMatch.Success && isClass != 2) {  		funcName = line;  		funcFound = true;  	}  }  
Magic Number,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The following statement contains a magic number: while ((line = reader.ReadLine ()) != null) {  	Match functionMatch = functionRegex.Match (line);  	Match classFunctionMatch = classFunctionRegex.Match (line);  	Match classParamMatch = classParamRegex.Match (line);  	if (false == functionMatch.Success && false == classFunctionMatch.Success && false == classParamMatch.Success) {  		Match commentMatch = commentRegex.Match (line);  		Match extensionMatch = extensionRegex.Match (line);  		if (false == commentMatch.Success && true == funcFound) {  			string ToBuild = "";  			foreach (string str in funcName.Split (' ')) {  				if (str.Equals ("function")) {  					ToBuild = "void";  				}  				else {  					ToBuild += " " + str;  				}  			}  			MyLogger.Alert ("No function name provided for function \"" + funcName + "\" temporary replace is: \"" + ToBuild + "\"." + Environment.NewLine);  			input.Add (ToBuild);  		}  		if (commentMatch.Success) {  			if (isClass == 0 && line.Contains ("class")) {  				isClass = 1;  			}  			else if (isClass == 1 && line.Contains ("public:")) {  				isClass = 2;  			}  			if (line.Contains ("(")) {  				input.Add (line.Replace ("//*"' "").Replace (";"' ""));  			}  			else {  				input.Add (line.Replace ("//*"' ""));  			}  		}  		else if (extensionMatch.Success) {  			string ToBuild = "";  			foreach (string str in line.Split (' ')) {  				string add = "";  				if (1 < str.Count (f => f == '.')) {  					add = str.Replace ("."' "::");  				}  				else {  					add = str;  				}  				if (ToBuild.Length > 0) {  					ToBuild += " ";  				}  				ToBuild += add;  			}  			input.Add (ToBuild);  			// Remake to CPP method calling  		}  		else {  			input.Add (line);  		}  		if (0 != isClass && false == line.Contains ("class") && false == line.Contains ("public:")) {  			isClass = 0;  		}  		funcFound = false;  	}  	else if (true == functionMatch.Success && isClass != 2) {  		funcName = line;  		funcFound = true;  	}  }  
Magic Number,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The following statement contains a magic number: if (false == functionMatch.Success && false == classFunctionMatch.Success && false == classParamMatch.Success) {  	Match commentMatch = commentRegex.Match (line);  	Match extensionMatch = extensionRegex.Match (line);  	if (false == commentMatch.Success && true == funcFound) {  		string ToBuild = "";  		foreach (string str in funcName.Split (' ')) {  			if (str.Equals ("function")) {  				ToBuild = "void";  			}  			else {  				ToBuild += " " + str;  			}  		}  		MyLogger.Alert ("No function name provided for function \"" + funcName + "\" temporary replace is: \"" + ToBuild + "\"." + Environment.NewLine);  		input.Add (ToBuild);  	}  	if (commentMatch.Success) {  		if (isClass == 0 && line.Contains ("class")) {  			isClass = 1;  		}  		else if (isClass == 1 && line.Contains ("public:")) {  			isClass = 2;  		}  		if (line.Contains ("(")) {  			input.Add (line.Replace ("//*"' "").Replace (";"' ""));  		}  		else {  			input.Add (line.Replace ("//*"' ""));  		}  	}  	else if (extensionMatch.Success) {  		string ToBuild = "";  		foreach (string str in line.Split (' ')) {  			string add = "";  			if (1 < str.Count (f => f == '.')) {  				add = str.Replace ("."' "::");  			}  			else {  				add = str;  			}  			if (ToBuild.Length > 0) {  				ToBuild += " ";  			}  			ToBuild += add;  		}  		input.Add (ToBuild);  		// Remake to CPP method calling  	}  	else {  		input.Add (line);  	}  	if (0 != isClass && false == line.Contains ("class") && false == line.Contains ("public:")) {  		isClass = 0;  	}  	funcFound = false;  }  else if (true == functionMatch.Success && isClass != 2) {  	funcName = line;  	funcFound = true;  }  
Magic Number,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The following statement contains a magic number: if (false == functionMatch.Success && false == classFunctionMatch.Success && false == classParamMatch.Success) {  	Match commentMatch = commentRegex.Match (line);  	Match extensionMatch = extensionRegex.Match (line);  	if (false == commentMatch.Success && true == funcFound) {  		string ToBuild = "";  		foreach (string str in funcName.Split (' ')) {  			if (str.Equals ("function")) {  				ToBuild = "void";  			}  			else {  				ToBuild += " " + str;  			}  		}  		MyLogger.Alert ("No function name provided for function \"" + funcName + "\" temporary replace is: \"" + ToBuild + "\"." + Environment.NewLine);  		input.Add (ToBuild);  	}  	if (commentMatch.Success) {  		if (isClass == 0 && line.Contains ("class")) {  			isClass = 1;  		}  		else if (isClass == 1 && line.Contains ("public:")) {  			isClass = 2;  		}  		if (line.Contains ("(")) {  			input.Add (line.Replace ("//*"' "").Replace (";"' ""));  		}  		else {  			input.Add (line.Replace ("//*"' ""));  		}  	}  	else if (extensionMatch.Success) {  		string ToBuild = "";  		foreach (string str in line.Split (' ')) {  			string add = "";  			if (1 < str.Count (f => f == '.')) {  				add = str.Replace ("."' "::");  			}  			else {  				add = str;  			}  			if (ToBuild.Length > 0) {  				ToBuild += " ";  			}  			ToBuild += add;  		}  		input.Add (ToBuild);  		// Remake to CPP method calling  	}  	else {  		input.Add (line);  	}  	if (0 != isClass && false == line.Contains ("class") && false == line.Contains ("public:")) {  		isClass = 0;  	}  	funcFound = false;  }  else if (true == functionMatch.Success && isClass != 2) {  	funcName = line;  	funcFound = true;  }  
Magic Number,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The following statement contains a magic number: if (commentMatch.Success) {  	if (isClass == 0 && line.Contains ("class")) {  		isClass = 1;  	}  	else if (isClass == 1 && line.Contains ("public:")) {  		isClass = 2;  	}  	if (line.Contains ("(")) {  		input.Add (line.Replace ("//*"' "").Replace (";"' ""));  	}  	else {  		input.Add (line.Replace ("//*"' ""));  	}  }  else if (extensionMatch.Success) {  	string ToBuild = "";  	foreach (string str in line.Split (' ')) {  		string add = "";  		if (1 < str.Count (f => f == '.')) {  			add = str.Replace ("."' "::");  		}  		else {  			add = str;  		}  		if (ToBuild.Length > 0) {  			ToBuild += " ";  		}  		ToBuild += add;  	}  	input.Add (ToBuild);  	// Remake to CPP method calling  }  else {  	input.Add (line);  }  
Magic Number,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The following statement contains a magic number: if (isClass == 0 && line.Contains ("class")) {  	isClass = 1;  }  else if (isClass == 1 && line.Contains ("public:")) {  	isClass = 2;  }  
Magic Number,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The following statement contains a magic number: if (isClass == 1 && line.Contains ("public:")) {  	isClass = 2;  }  
Magic Number,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The following statement contains a magic number: isClass = 2;  
Magic Number,JavaExtensionParser,DoxygenBuilder,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\DoxygenBuilder.cs,ParseScriptFile,The following statement contains a magic number: if (true == functionMatch.Success && isClass != 2) {  	funcName = line;  	funcFound = true;  }  
Magic Number,JavaExtensionParser,MyLogger,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\MyLogger.cs,DecreaseIndent,The following statement contains a magic number: if (indent.Length > 2) {  	indent = indent.Substring (0' indent.Length - 2);  }  else {  	indent = "";  }  
Magic Number,JavaExtensionParser,MyLogger,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\MyLogger.cs,DecreaseIndent,The following statement contains a magic number: if (indent.Length > 2) {  	indent = indent.Substring (0' indent.Length - 2);  }  else {  	indent = "";  }  
Magic Number,JavaExtensionParser,MyLogger,C:\repos\Scrier_testcomplete\C#\JavaExtensionParser\JavaExtensionParser\MyLogger.cs,DecreaseIndent,The following statement contains a magic number: indent = indent.Substring (0' indent.Length - 2);  
