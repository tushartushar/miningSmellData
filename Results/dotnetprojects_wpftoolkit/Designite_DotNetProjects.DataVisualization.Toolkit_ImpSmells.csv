Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,ComputeLargestTransformedSize,The method has 129 lines of code.
Long Method,System.Windows.Controls.DataVisualization,OrientedPanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\OrientedPanel.cs,MeasureOverride,The method has 102 lines of code.
Long Method,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,AlignIntervalStart,The method has 110 lines of code.
Long Method,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The method has 187 lines of code.
Long Method,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The method has 252 lines of code.
Complex Method,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization,OrientedPanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\OrientedPanel.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization,TreeMap,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Treemap\TreeMap.cs,BuildTreeMapTree,Cyclomatic complexity of the method is 12
Complex Method,System.Windows.Controls.DataVisualization,TreeMap,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Treemap\TreeMap.cs,CreateChildren,Cyclomatic complexity of the method is 9
Complex Method,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,Cyclomatic complexity of the method is 11
Complex Method,System.Windows.Controls.DataVisualization.Charting,RangeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\RangeAxis.cs,RenderOriented,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,GetPlotAreaCoordinates,Cyclomatic complexity of the method is 10
Complex Method,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,SeriesCollectionChanged,Cyclomatic complexity of the method is 10
Complex Method,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,OnSelectedItemPropertyChanged,Cyclomatic complexity of the method is 8
Complex Method,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,LoadDataPoints,Cyclomatic complexity of the method is 9
Complex Method,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,Cyclomatic complexity of the method is 15
Complex Method,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,EnsureAxes,Cyclomatic complexity of the method is 12
Complex Method,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,UpdateDataItemPlacement,Cyclomatic complexity of the method is 10
Complex Method,System.Windows.Controls.DataVisualization.Charting,StackedAreaSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaSeries.cs,UpdateShape,Cyclomatic complexity of the method is 9
Complex Method,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,UpdateDataItemPlacement,Cyclomatic complexity of the method is 10
Complex Method,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,Cyclomatic complexity of the method is 26
Complex Method,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,Cyclomatic complexity of the method is 11
Long Parameter List,System.Windows.Controls.DataVisualization,DependencyPropertyAnimationHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\DependencyPropertyAnimationHelper.cs,BeginAnimation,The method has 6 parameters. Parameters: target' animatingDependencyProperty' propertyPath' targetValue' timeSpan' easingFunction
Long Parameter List,System.Windows.Controls.DataVisualization,DependencyPropertyAnimationHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\DependencyPropertyAnimationHelper.cs,CreateStoryboard,The method has 6 parameters. Parameters: target' animatingDependencyProperty' propertyPath' toValue' durationTimeSpan' easingFunction
Long Parameter List,System.Windows.Controls.DataVisualization.Charting,PieChartHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartHelper.cs,CalculateArcInfo,The method has 5 parameters. Parameters: center' startPoint' arcSegment' arcMidpoint' isArcSmall
Long Parameter List,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The method has 5 parameters. Parameters: firstDataPoint' independentAxisPredicate' independentAxisFactory' dependentAxisPredicate' dependentAxisFactory
Long Parameter List,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,SeriesDefinitionsCollectionChanged,The method has 5 parameters. Parameters: action' oldItems' oldStartingIndex' newItems' newStartingIndex
Long Parameter List,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,SeriesDefinitionItemsSourceCollectionChanged,The method has 6 parameters. Parameters: definition' action' oldItems' oldStartingIndex' newItems' newStartingIndex
Long Parameter List,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,SeriesDefinitionsCollectionChanged,The method has 5 parameters. Parameters: action' oldItems' oldStartingIndex' newItems' newStartingIndex
Long Parameter List,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The method has 5 parameters. Parameters: color' a' h' s' l
Long Identifier,System.Windows.Controls.DataVisualization,ObjectPool<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ObjectPool.cs,,The length of the parameter DefaultMinimumObjectsInThePool is 30.
Long Identifier,System.Windows.Controls.DataVisualization,OrientedPanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\OrientedPanel.cs,,The length of the parameter ActualMinimumDistanceBetweenChildrenProperty is 44.
Long Identifier,System.Windows.Controls.DataVisualization,OrientedPanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\OrientedPanel.cs,,The length of the parameter MinimumDistanceBetweenChildrenProperty is 38.
Long Identifier,System.Windows.Controls.DataVisualization,TreeMap,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Treemap\TreeMap.cs,OnItemsSourcePropertyChanged,The length of the parameter oldValueINotifyCollectionChanged is 32.
Long Identifier,System.Windows.Controls.DataVisualization,TreeMap,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Treemap\TreeMap.cs,OnItemsSourcePropertyChanged,The length of the parameter newValueINotifyCollectionChanged is 32.
Long Identifier,System.Windows.Controls.DataVisualization,TreeMap,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Treemap\TreeMap.cs,BuildTreeMapTree,The length of the parameter objectChildrenINotifyCollectionChanged is 38.
Long Identifier,System.Windows.Controls.DataVisualization,TreeMap,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Treemap\TreeMap.cs,,The length of the parameter ItemDefinitionSelectorProperty is 30.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,,The length of the parameter YearsIntervalStringFormatProperty is 33.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,,The length of the parameter MonthsIntervalStringFormatProperty is 34.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,,The length of the parameter WeeksIntervalStringFormatProperty is 33.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,,The length of the parameter DaysIntervalStringFormatProperty is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,,The length of the parameter HoursIntervalStringFormatProperty is 33.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,,The length of the parameter MinutesIntervalStringFormatProperty is 35.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,,The length of the parameter SecondsIntervalStringFormatProperty is 35.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,,The length of the parameter MillisecondsIntervalStringFormatProperty is 40.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DisplayAxis.cs,,The length of the parameter MaximumAxisIntervalsPer200Pixels is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The length of the parameter adjustedMaximumIntervalsPer200Pixels is 36.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,,The length of the parameter _isCoercingActualDependentValue is 31.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,,The length of the parameter _oldActualDependentValueBeforeCoercion is 38.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,,The length of the parameter DependentValueStringFormatProperty is 34.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,,The length of the parameter FormattedDependentValueProperty is 31.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,,The length of the parameter FormattedIndependentValueProperty is 33.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,,The length of the parameter IndependentValueStringFormatProperty is 36.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,,The length of the parameter _isCoercingActualIndependentValue is 33.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,,The length of the parameter _oldActualIndependentValueBeforeCoercion is 40.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,,The length of the parameter ActualIndependentValueProperty is 30.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,ResourceDictionaryDispenser,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\ResourceDictionaryDispenser.cs,,The length of the parameter _resourceDictionariesDispensed is 30.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,ResourceDictionaryDispenser,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\ResourceDictionaryDispenser.cs,,The length of the parameter _resourceDictionaryEnumerators is 30.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,ResourceDictionaryDispenser,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\ResourceDictionaryDispenser.cs,,The length of the parameter _ignoreResourceDictionaryDispensedByEnumerator is 46.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BubbleSeries.cs,,The length of the parameter MaximumBubbleSizeAsRatioOfSmallestDimension is 43.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,ColumnBarBaseSeries<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnBarBaseSeries.cs,,The length of the parameter _categoriesWithMultipleDataPoints is 33.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,OnItemsSourceChanged,The length of the parameter oldValueINotifyCollectionChanged is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,OnItemsSourceChanged,The length of the parameter newValueINotifyCollectionChanged is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,,The length of the parameter TransitionEasingFunctionProperty is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,,The length of the parameter _processingOnSelectedItemPropertyChanged is 40.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the parameter actualIndependentAxisPredicate is 30.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,,The length of the parameter _seriesAreaChildrenListAdapter is 30.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,,The length of the parameter _queueUpdateDataItemPlacement_DataItems is 39.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,,The length of the parameter _queueUpdateDataItemPlacement_DependentAxisValuesChanged is 56.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,,The length of the parameter _queueUpdateDataItemPlacement_IndependentAxisValuesChanged is 58.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,LabeledPieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\LabeledPieSeries.cs,,The length of the parameter PieChartLabelItemTemplateProperty is 33.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,SeriesDefinition,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SeriesDefinition.cs,OnItemsSourceChanged,The length of the parameter oldValueINotifyCollectionChanged is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,SeriesDefinition,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SeriesDefinition.cs,OnItemsSourceChanged,The length of the parameter newValueINotifyCollectionChanged is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,SeriesDefinition,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SeriesDefinition.cs,,The length of the parameter TransitionEasingFunctionProperty is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,IRangeProviderGetRange,The length of the parameter dependentValueRangesByIndependentValue is 38.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,UpdateDataItemPlacement,The length of the parameter plotAreaMaximumDependentCoordinate is 34.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,StackedAreaSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaSeries.cs,UpdateShape,The length of the parameter plotAreaMaximumDependentCoordinate is 34.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,IRangeProviderGetRange,The length of the parameter dependentValuesByIndependentValue is 33.
Long Identifier,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,UpdateDataItemPlacement,The length of the parameter plotAreaMaximumDependentCoordinate is 34.
Long Identifier,System.Windows.Controls.DataVisualization.Charting.Compatible,AreaSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\Compatible\AreaSeries.cs,,The length of the parameter TransitionEasingFunctionProperty is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting.Compatible,BarSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\Compatible\BarSeries.cs,,The length of the parameter TransitionEasingFunctionProperty is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting.Compatible,ColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\Compatible\ColumnSeries.cs,,The length of the parameter TransitionEasingFunctionProperty is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting.Compatible,LineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\Compatible\LineSeries.cs,,The length of the parameter TransitionEasingFunctionProperty is 32.
Long Identifier,System.Windows.Controls.DataVisualization.Charting.Compatible,ScatterSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\Compatible\ScatterSeries.cs,,The length of the parameter TransitionEasingFunctionProperty is 32.
Long Statement,System.Windows.Controls.DataVisualization,AggregatedObservableCollection<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\AggregatedObservableCollection.cs,GetStartingIndexOfCollectionAtIndex,The length of the statement  "            return ChildCollections.OfType<IEnumerable>().Select(collection => collection.CastWrapper<T>()).Take(index).SelectMany(collection => collection).Count(); " is 153.
Long Statement,System.Windows.Controls.DataVisualization,AggregatedObservableCollection<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\AggregatedObservableCollection.cs,Rebuild,The length of the statement  "                    IList<T> items = ChildCollections.OfType<IEnumerable>().Select(collection => collection.CastWrapper<T>()).SelectMany(collection => collection).ToList(); " is 152.
Long Statement,System.Windows.Controls.DataVisualization,ObjectPool<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ObjectPool.cs,Done,The length of the statement  "            if (currentIndex != 0 && _objects.Count > 0 && currentIndex >= minimumObjectsInThePool && currentIndex < _objects.Count / 2) " is 124.
Long Statement,System.Windows.Controls.DataVisualization,DependencyPropertyAnimationHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\DependencyPropertyAnimationHelper.cs,BeginAnimation,The length of the statement  "            storyBoard = CreateStoryboard(target' animatingDependencyProperty' propertyPath' ref targetValue' timeSpan' easingFunction); " is 124.
Long Statement,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,MeasureOverride,The length of the statement  "            Rect transformedDesiredRect = RectTransform(new Rect(0' 0' _layoutRoot.DesiredSize.Width' _layoutRoot.DesiredSize.Height)' _transformation); " is 140.
Long Statement,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,ArrangeOverride,The length of the statement  "            Rect transformedRect = RectTransform(new Rect(0' 0' finalSizeTransformed.Width' finalSizeTransformed.Height)' _transformation); " is 127.
Long Statement,System.Windows.Controls.DataVisualization,OrientedPanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\OrientedPanel.cs,UpdateActualLength,The length of the statement  "            this.SetBinding(ActualLengthProperty' new Binding((Orientation == Orientation.Horizontal) ? "ActualWidth" : "ActualHeight") { Source = this }); " is 143.
Long Statement,System.Windows.Controls.DataVisualization,OrientedPanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\OrientedPanel.cs,MeasureOverride,The length of the statement  "                    IEnumerable<UIElement> currentPriorityChildren = Children.CastWrapper<UIElement>().Where(child => GetPriority(child) == priorityPair.Item1).ToList(); " is 149.
Long Statement,System.Windows.Controls.DataVisualization,OrientedPanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\OrientedPanel.cs,MeasureOverride,The length of the statement  "                    IEnumerable<UIElement> nextPriorityChildren = Children.CastWrapper<UIElement>().Where(child => GetPriority(child) == priorityPair.Item2).ToList(); " is 146.
Long Statement,System.Windows.Controls.DataVisualization,UniqueObservableCollection<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\UniqueObservableCollection.cs,InsertItem,The length of the statement  "                throw new InvalidOperationException(Properties.Resources.UniqueObservableCollection_InvalidAttemptToInsertADuplicateItem); " is 122.
Long Statement,System.Windows.Controls.DataVisualization,UniqueObservableCollection<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\UniqueObservableCollection.cs,SetItem,The length of the statement  "                throw new InvalidOperationException(Properties.Resources.UniqueObservableCollection_InvalidAttemptToInsertADuplicateItem); " is 122.
Long Statement,System.Windows.Controls.DataVisualization,UnitValue,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\UnitValue.cs,Equals,The length of the statement  "            if ((Object.ReferenceEquals(unitValue.Value' this.Value) || Object.Equals(unitValue.Value' this.Value)) && unitValue.Unit == this.Unit) " is 135.
Long Statement,System.Windows.Controls.DataVisualization,ValueHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ValueHelper.cs,CanGraph,The length of the statement  "            return !double.IsNaN(value) && !double.IsNegativeInfinity(value) && !double.IsPositiveInfinity(value) && !double.IsInfinity(value); " is 131.
Long Statement,System.Windows.Controls.DataVisualization,Range,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Range.cs,IntersectsWith,The length of the statement  "                    (ValueHelper.Compare(rightRange.Minimum' leftRange.Maximum) <= 0 && ValueHelper.Compare(rightRange.Minimum' leftRange.Minimum) >= 0) " is 132.
Long Statement,System.Windows.Controls.DataVisualization,Range,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Range.cs,IntersectsWith,The length of the statement  "                    || (ValueHelper.Compare(leftRange.Minimum' rightRange.Maximum) <= 0 && ValueHelper.Compare(leftRange.Minimum' rightRange.Minimum) >= 0); " is 136.
Long Statement,System.Windows.Controls.DataVisualization,TreeMap,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Treemap\TreeMap.cs,OnItemsSourcePropertyChanged,The length of the statement  "                _weakEventListener.OnEventAction = (instance' source' eventArgs) => instance.ItemsSourceCollectionChanged(source' eventArgs); " is 125.
Long Statement,System.Windows.Controls.DataVisualization,TreeMap,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Treemap\TreeMap.cs,OnItemsSourcePropertyChanged,The length of the statement  "                _weakEventListener.OnDetachAction = (weakEventListener) => newValueINotifyCollectionChanged.CollectionChanged -= weakEventListener.OnEvent; " is 139.
Long Statement,System.Windows.Controls.DataVisualization,TreeMap,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Treemap\TreeMap.cs,BuildTreeMapTree,The length of the statement  "                        weakEventListener.OnEventAction = (instance' source' eventArgs) => instance.ItemsSourceCollectionChanged(source' eventArgs); " is 124.
Long Statement,System.Windows.Controls.DataVisualization,SquaringAlgorithm,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Treemap\Layout\SquaringAlgorithm.cs,BuildTreeMapStep,The length of the statement  "                _currentRectangle = new Rect(_currentRectangle.Left + wh' _currentRectangle.Top' Math.Max(0' _currentRectangle.Width - wh)' _currentRectangle.Height); " is 150.
Long Statement,System.Windows.Controls.DataVisualization,SquaringAlgorithm,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Treemap\Layout\SquaringAlgorithm.cs,BuildTreeMapStep,The length of the statement  "                _currentRectangle = new Rect(_currentRectangle.Left' _currentRectangle.Top + wh' _currentRectangle.Width' Math.Max(0' _currentRectangle.Height - wh)); " is 150.
Long Statement,System.Windows.Controls.DataVisualization.Charting,AxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\AxisLabel.cs,UpdateFormattedContent,The length of the statement  "            this.SetBinding(FormattedContentProperty' new Binding { Converter = new StringFormatConverter()' ConverterParameter = StringFormat ?? "{0}" }); " is 143.
Long Statement,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinateRange,The length of the statement  "                    return new Range<UnitValue>(new UnitValue(maximumLength - upper' Unit.Pixels)' new UnitValue(maximumLength - lower' Unit.Pixels)); " is 130.
Long Statement,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinateRange,The length of the statement  "                return new Range<UnitValue>(new UnitValue(angle - halfAngleOffset' Unit.Degrees)' new UnitValue(angle + halfAngleOffset' Unit.Degrees)); " is 136.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,GetPlotAreaCoordinate,The length of the statement  "                return new UnitValue((dateTimeValue.ToOADate() - currentRange.Minimum.ToOADate()) * (pixelLength / rangelength)' Unit.Pixels); " is 126.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateActualInterval,The length of the statement  "            double interval = CalculateDateTimeInterval(ActualDateTimeRange.Minimum' ActualDateTimeRange.Maximum' out intervalType' availableSize); " is 135.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,GetMajorAxisValues,The length of the statement  "            if (!ActualRange.HasData || ValueHelper.Compare(ActualRange.Minimum' ActualRange.Maximum) == 0 || GetLength(availableSize) == 0.0) " is 130.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The length of the statement  "            double maxIntervals = Orientation == AxisOrientation.X ? MaximumAxisIntervalsPer200Pixels * 0.8 : MaximumAxisIntervalsPer200Pixels; " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The length of the statement  "                        DateTime newMinimum = new DateTime(currentRange.Minimum.Ticks - (long)((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels)); " is 136.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The length of the statement  "                        DateTime newMaximum = new DateTime(currentRange.Maximum.Ticks + (long)((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels)); " is 138.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,UpdateFormattedContent,The length of the statement  "                        this.SetBinding(FormattedContentProperty' new Binding { Converter = new StringFormatConverter()' ConverterParameter = YearsIntervalStringFormat ?? StringFormat ?? "{0}" }); " is 172.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,UpdateFormattedContent,The length of the statement  "                        this.SetBinding(FormattedContentProperty' new Binding { Converter = new StringFormatConverter()' ConverterParameter = MonthsIntervalStringFormat ?? StringFormat ?? "{0}" }); " is 173.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,UpdateFormattedContent,The length of the statement  "                        this.SetBinding(FormattedContentProperty' new Binding { Converter = new StringFormatConverter()' ConverterParameter = WeeksIntervalStringFormat ?? StringFormat ?? "{0}" }); " is 172.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,UpdateFormattedContent,The length of the statement  "                        this.SetBinding(FormattedContentProperty' new Binding { Converter = new StringFormatConverter()' ConverterParameter = DaysIntervalStringFormat ?? StringFormat ?? "{0}" }); " is 171.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,UpdateFormattedContent,The length of the statement  "                        this.SetBinding(FormattedContentProperty' new Binding { Converter = new StringFormatConverter()' ConverterParameter = HoursIntervalStringFormat ?? StringFormat ?? "{0}" }); " is 172.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,UpdateFormattedContent,The length of the statement  "                        this.SetBinding(FormattedContentProperty' new Binding { Converter = new StringFormatConverter()' ConverterParameter = MinutesIntervalStringFormat ?? StringFormat ?? "{0}" }); " is 174.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,UpdateFormattedContent,The length of the statement  "                        this.SetBinding(FormattedContentProperty' new Binding { Converter = new StringFormatConverter()' ConverterParameter = SecondsIntervalStringFormat ?? StringFormat ?? "{0}" }); " is 174.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DateTimeAxisLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxisLabel.cs,UpdateFormattedContent,The length of the statement  "                        this.SetBinding(FormattedContentProperty' new Binding { Converter = new StringFormatConverter()' ConverterParameter = MillisecondsIntervalStringFormat ?? StringFormat ?? "{0}" }); " is 179.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DisplayAxis.cs,GetLength,The length of the statement  "                throw new InvalidOperationException(Properties.Resources.DisplayAxis_GetLength_CannotDetermineTheLengthOfAnAxisWithAnOrientationOfNone); " is 136.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The length of the statement  "            double adjustedMaximumIntervalsPer200Pixels = (Orientation == AxisOrientation.X ? 0.8 : 1.0) * MaximumAxisIntervalsPer200Pixels; " is 128.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,GetMajorValues,The length of the statement  "            if (!ActualRange.HasData || ValueHelper.Compare(ActualRange.Minimum' ActualRange.Maximum) == 0 || GetLength(availableSize) == 0.0) " is 130.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,AlignToInterval,The length of the statement  "            return ValueHelper.RemoveNoiseFromDoubleMath(ValueHelper.RemoveNoiseFromDoubleMath(Math.Floor(typedValue / typedInterval)) * typedInterval); " is 140.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,The length of the statement  "                Range<IComparable> outputRange = new Range<IComparable>((ValueHelper.ToDouble(range.Minimum)) - 1' (ValueHelper.ToDouble(range.Maximum)) + 1); " is 142.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LogarithmicAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LogarithmicAxis.cs,GetMajorValues,The length of the statement  "            if (!ActualRange.HasData || ValueHelper.Compare(ActualRange.Minimum' ActualRange.Maximum) == 0 || GetLength(availableSize) == 0.0) " is 130.
Long Statement,System.Windows.Controls.DataVisualization.Charting,RangeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\RangeAxis.cs,GetMajorGridLineCoordinates,The length of the statement  "            return GetMajorTickMarkValues(availableSize).Select(value => GetPlotAreaCoordinate(value)).Where(value => ValueHelper.CanGraph(value.Value)); " is 141.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ValueMargin,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\ValueMargin.cs,Equals,The length of the statement  "                return this.Value.Equals(valueMargin.Value) && this.LowMargin.Equals(valueMargin.LowMargin) && this.HighMargin.Equals(valueMargin.HighMargin); " is 142.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,GetAutoAxisLocation,The length of the statement  "                int numberOfTopAxes = InternalActualAxes.OfType<Axis>().Where(currentAxis => currentAxis.Location == AxisLocation.Top).Count(); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,GetAutoAxisLocation,The length of the statement  "                int numberOfBottomAxes = InternalActualAxes.OfType<Axis>().Where(currentAxis => currentAxis.Location == AxisLocation.Bottom).Count(); " is 133.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,GetAutoAxisLocation,The length of the statement  "                int numberOfLeftAxes = InternalActualAxes.OfType<Axis>().Where(currentAxis => currentAxis.Location == AxisLocation.Left).Count(); " is 129.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,GetAutoAxisLocation,The length of the statement  "                int numberOfRightAxes = InternalActualAxes.OfType<Axis>().Where(currentAxis => currentAxis.Location == AxisLocation.Right).Count(); " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,AxisLocationChanged,The length of the statement  "                throw new InvalidOperationException(Properties.Resources.Chart_AxisLocationChanged_CantBeChangedToAutoWhenHostedInsideOfASeriesHost); " is 133.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,GetPlotAreaCoordinates,The length of the statement  "                        yAxisHit = ((IRangeAxis)this.ActualAxes[0]).GetValueAtPosition(new UnitValue(PlotArea.ActualHeight - position.Y' Unit.Pixels)); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,GetPlotAreaCoordinates,The length of the statement  "                        yAxisHit = ((ICategoryAxis)this.ActualAxes[0]).GetCategoryAtPosition(new UnitValue(/*PlotArea.ActualHeight -*/ position.Y' Unit.Pixels)); " is 137.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,GetPlotAreaCoordinates,The length of the statement  "                        yAxisHit = ((IRangeAxis)this.ActualAxes[1]).GetValueAtPosition(new UnitValue(PlotArea.ActualHeight - position.Y' Unit.Pixels)); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,GetPlotAreaCoordinates,The length of the statement  "                        yAxisHit = ((ICategoryAxis)this.ActualAxes[1]).GetCategoryAtPosition(new UnitValue(/*PlotArea.ActualHeight -*/ position.Y' Unit.Pixels)); " is 137.
Long Statement,System.Windows.Controls.DataVisualization.Charting,SeriesHostAxesCollection,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\SeriesHostAxesCollection.cs,RemoveItem,The length of the statement  "                throw new InvalidOperationException(Properties.Resources.SeriesHostAxesCollection_RemoveItem_AxisCannotBeRemovedFromASeriesHostWhenOneOrMoreSeriesAreListeningToIt); " is 164.
Long Statement,System.Windows.Controls.DataVisualization.Charting,SeriesHostAxesCollection,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\SeriesHostAxesCollection.cs,RemoveItem,The length of the statement  "                throw new InvalidOperationException(Properties.Resources.SeriesHostAxesCollection_InvalidAttemptToRemovePermanentAxisFromSeriesHost); " is 133.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,OnApplyTemplate,The length of the statement  "            VisualStateGroup groupReveal = VisualStateManager.GetVisualStateGroups(ImplementationRoot).CastWrapper<VisualStateGroup>().Where(group => GroupRevealStates == group.Name).FirstOrDefault(); " is 188.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,OnApplyTemplate,The length of the statement  "            groupReveal = VisualStateManager.GetVisualStateGroups(ImplementationRoot).CastWrapper<VisualStateGroup>().Where(group => GroupRevealStates == group.Name).FirstOrDefault(); " is 171.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,OnApplyTemplate,The length of the statement  "                _haveStateRevealShown = groupReveal.States.CastWrapper<VisualState>().Where(state => StateRevealShown == state.Name).Any(); " is 123.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,OnApplyTemplate,The length of the statement  "                _haveStateRevealHidden = groupReveal.States.CastWrapper<VisualState>().Where(state => StateRevealHidden == state.Name).Any(); " is 125.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ResourceDictionaryDispenser,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\ResourceDictionaryDispenser.cs,ResourceDictionariesCollectionChanged,The length of the statement  "            if (!(e.Action == NotifyCollectionChangedAction.Add && (this.ResourceDictionaries.Count - e.NewItems.Count) == e.NewStartingIndex)) " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ResourceDictionaryEnumerator,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\ResourceDictionaryEnumerator.cs,GetIndexOfNextSuitableResourceDictionary,The length of the statement  "            if (ResourceDictionaryDispenser.ResourceDictionaries == null || ResourceDictionaryDispenser.ResourceDictionaries.Count == 0) " is 124.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ResourceDictionaryEnumerator,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\ResourceDictionaryEnumerator.cs,Reset,The length of the statement  "            throw new NotSupportedException(Properties.Resources.ResourceDictionaryEnumerator_CantResetEnumeratorResetDispenserInstead); " is 124.
Long Statement,System.Windows.Controls.DataVisualization.Charting,AreaSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\AreaSeries.cs,GetAxes,The length of the statement  "                        throw new InvalidOperationException(Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BarSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BarSeries.cs,GetAxes,The length of the statement  "                        throw new InvalidOperationException(Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BarSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The length of the statement  "            IEnumerable<BarSeries> barSeries = SeriesHost.Series.OfType<BarSeries>().Where(series => series.ActualIndependentAxis == ActualIndependentAxis); " is 144.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BarSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The length of the statement  "            double dataPointX = ActualDependentRangeAxis.GetPlotAreaCoordinate(ValueHelper.ToDouble(dataPoint.ActualDependentValue)).Value; " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BubbleSeries.cs,GetAxes,The length of the statement  "                        throw new InvalidOperationException(Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BubbleSeries.cs,PrepareDataPoint,The length of the statement  "            bubbleDataPoint.SetBinding(BubbleDataPoint.SizeProperty' SizeValueBinding ?? DependentValueBinding ?? IndependentValueBinding); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BubbleSeries.cs,BubbleDataPointActualSizePropertyChanged,The length of the statement  "            Range<double> newRangeOfActualSizeValues = ActiveDataPoints.OfType<BubbleDataPoint>().Select(d => Math.Abs(d.ActualSize)).GetRange(); " is 133.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BubbleSeries.cs,UpdateDataPoint,The length of the statement  "            double maximumDiameter = Math.Min(PlotAreaSize.Width' PlotAreaSize.Height) * MaximumBubbleSizeAsRatioOfSmallestDimension; " is 121.
Long Statement,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BubbleSeries.cs,UpdateDataPoint,The length of the statement  "                (_rangeOfActualSizeValues.HasData && _rangeOfActualSizeValues.Maximum != 0.0 && bubbleDataPoint.ActualSize >= 0.0) ? Math.Abs(bubbleDataPoint.ActualSize) / _rangeOfActualSizeValues.Maximum : 0.0; " is 195.
Long Statement,System.Windows.Controls.DataVisualization.Charting,CandlestickSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\CandlestickSeries.cs,GetAxes,The length of the statement  "                        throw new InvalidOperationException(Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,CandlestickSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\CandlestickSeries.cs,UpdateDataPoint,The length of the statement  "            double highPointY = ActualDependentRangeAxis.GetPlotAreaCoordinate(ValueHelper.ToDouble(candlestickDataPoint.High)).Value; " is 122.
Long Statement,System.Windows.Controls.DataVisualization.Charting,CandlestickSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\CandlestickSeries.cs,UpdateDataPoint,The length of the statement  "            double lowPointY = ActualDependentRangeAxis.GetPlotAreaCoordinate(ValueHelper.ToDouble(candlestickDataPoint.Low)).Value; " is 120.
Long Statement,System.Windows.Controls.DataVisualization.Charting,CandlestickSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\CandlestickSeries.cs,UpdateDataPoint,The length of the statement  "            double openPointY = ActualDependentRangeAxis.GetPlotAreaCoordinate(ValueHelper.ToDouble(candlestickDataPoint.Open)).Value; " is 122.
Long Statement,System.Windows.Controls.DataVisualization.Charting,CandlestickSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\CandlestickSeries.cs,UpdateDataPoint,The length of the statement  "            double closePointY = ActualDependentRangeAxis.GetPlotAreaCoordinate(ValueHelper.ToDouble(candlestickDataPoint.Close)).Value; " is 124.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ColumnBarBaseSeries<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnBarBaseSeries.cs,RedrawOtherSeries,The length of the statement  "            foreach (ColumnBarBaseSeries<T> series in seriesHost.Series.Where(series => thisType.IsAssignableFrom(series.GetType())).OfType<ColumnBarBaseSeries<T>>().Where(series => series != this)) " is 186.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnSeries.cs,GetAxes,The length of the statement  "                        throw new InvalidOperationException(Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The length of the statement  "            IEnumerable<ColumnSeries> columnSeries = SeriesHost.Series.OfType<ColumnSeries>().Where(series => series.ActualIndependentAxis == ActualIndependentAxis); " is 153.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The length of the statement  "            double dataPointY = ActualDependentRangeAxis.GetPlotAreaCoordinate(ValueHelper.ToDouble(dataPoint.ActualDependentValue)).Value; " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,OnItemsSourceChanged,The length of the statement  "                _weakEventListener.OnEventAction = (instance' source' eventArgs) => instance.ItemsSourceCollectionChanged(source' eventArgs); " is 125.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,OnItemsSourceChanged,The length of the statement  "                _weakEventListener.OnDetachAction = (weakEventListener) => newValueINotifyCollectionChanged.CollectionChanged -= weakEventListener.OnEvent; " is 139.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,OnSelectedItemPropertyChanged,The length of the statement  "                dataPoint = _dataPointsByObject[newValue].Where(dp => object.Equals(newValue' dp.DataContext) && dp.IsActive).FirstOrDefault(); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,OnSelectedItemPropertyChanged,The length of the statement  "            foreach (DataPoint dataPointUnselect in ActiveDataPoints.Where(activeDataPoint => (activeDataPoint != dataPoint) && activeDataPoint.IsSelected)) " is 144.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,GetDataPoint,The length of the statement  "            DataPoint dataPoint = _dataPointsByObject[dataContext].Where(dp => object.Equals(dataContext' dp.DataContext)).FirstOrDefault(); " is 128.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,OnItemsSourceCollectionChanged,The length of the statement  "                    DataPoint dataPointToUpdate = _dataPointsByObject[e.OldItems[index]].Where(dp => object.Equals(e.OldItems[index]' dp.DataContext)).Except(updatedDataPoints).FirstOrDefault(); " is 174.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The length of the statement  "                        discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds(1000 * ((double)(dataPointCount - count - 1) / dataPointCount)); " is 123.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,OnDataPointDependentValueChanged,The length of the statement  "                dataPoint.BeginAnimation(DataPoint.ActualDependentValueProperty' "ActualDependentValue"' newValue' this.TransitionDuration' this.TransitionEasingFunction); " is 155.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,OnDataPointIndependentValueChanged,The length of the statement  "                dataPoint.BeginAnimation(DataPoint.ActualIndependentValueProperty' "ActualIndependentValue"' newValue' this.TransitionDuration' this.TransitionEasingFunction); " is 159.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the statement  "            Func<IAxis' bool> actualIndependentAxisPredicate = (axis) => independentAxisPredicate(axis) && axis.CanPlot(firstDataPoint.IndependentValue); " is 141.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the statement  "                        throw new InvalidOperationException(Properties.Resources.DataPointSeriesWithAxes_GetAxes_AssignedIndependentAxisCannotBeUsed); " is 126.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the statement  "            Func<IAxis' bool> actualDependentAxisPredicate = (axis) => dependentAxisPredicate(axis) && axis.CanPlot(firstDataPoint.DependentValue); " is 135.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the statement  "                        throw new InvalidOperationException(Properties.Resources.DataPointSeriesWithAxes_GetAxes_AssignedDependentAxisCannotBeUsed); " is 124.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the statement  "                    workingDependentAxis = InternalActualIndependentAxis.DependentAxes.Concat(this.SeriesHost.Axes).FirstOrDefault(actualDependentAxisPredicate); " is 141.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetAxes,The length of the statement  "                if (!this.SeriesHost.Axes.Contains(workingDependentAxis) && !InternalActualIndependentAxis.DependentAxes.Contains(workingDependentAxis)) " is 136.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,GetValueMargins,The length of the statement  "                    Tuple<DataPoint' DataPoint> largestAndSmallestValues = this.DataPointsByActualDependentValue.GetLargestAndSmallestValues(); " is 123.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DataPointSingleSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSingleSeriesWithAxes.cs,OnGlobalSeriesIndexPropertyChanged,The length of the statement  "                Title = newValue.HasValue ? string.Format(CultureInfo.CurrentCulture' Properties.Resources.Series_OnGlobalSeriesIndexPropertyChanged_UntitledSeriesFormatString' newValue.Value + 1) : null; " is 188.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,SelectedItemsCollectionChanged,The length of the statement  "                                foreach (DataItem dataItem in e.OldItems.CastWrapper<object>().SelectMany(v => DataItems.Where(di => object.Equals(di.Value' v)))) " is 130.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,SelectedItemsCollectionChanged,The length of the statement  "                                foreach (DataItem dataItem in e.NewItems.CastWrapper<object>().SelectMany(v => DataItems.Where(di => object.Equals(di.Value' v)))) " is 130.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,OnApplyTemplate,The length of the statement  "                _itemContainer.SetBinding(Selector.SelectedIndexProperty' new Binding("SelectedIndex") { Source = this' Mode = BindingMode.TwoWay }); " is 133.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,OnApplyTemplate,The length of the statement  "                _itemContainer.SetBinding(Selector.SelectedItemProperty' new Binding("SelectedItem") { Source = this' Mode = BindingMode.TwoWay' Converter = new SelectedItemToDataItemConverter(DataItems) }); " is 191.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,PrepareContainerForItem,The length of the statement  "            dataPoint.SetBinding(DataPoint.StyleProperty' new Binding("ActualDataPointStyle") { Source = dataItem.SeriesDefinition }); " is 122.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,PrepareContainerForItem,The length of the statement  "            dataPoint.ActualDependentValueChanged += new RoutedPropertyChangedEventHandler<IComparable>(DataPointActualDependentValueChanged); " is 130.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,PrepareContainerForItem,The length of the statement  "            dataPoint.ActualIndependentValueChanged += new RoutedPropertyChangedEventHandler<object>(DataPointActualIndependentValueChanged); " is 129.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,PrepareContainerForItem,The length of the statement  "            Binding selectionEnabledBinding = new Binding("SelectionMode") { Source = this' Converter = new SelectionModeToSelectionEnabledConverter() }; " is 141.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,PrepareContainerForItem,The length of the statement  "            dataPoint.SetBinding(DataPoint.IsSelectedProperty' new Binding("IsSelected") { Source = container' Mode = BindingMode.TwoWay }); " is 128.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,ClearContainerForItem,The length of the statement  "            dataPoint.ActualDependentValueChanged -= new RoutedPropertyChangedEventHandler<IComparable>(DataPointActualDependentValueChanged); " is 130.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,ClearContainerForItem,The length of the statement  "            dataPoint.ActualIndependentValueChanged -= new RoutedPropertyChangedEventHandler<object>(DataPointActualIndependentValueChanged); " is 129.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,DataPointDependentValueChanged,The length of the statement  "                dataPoint.BeginAnimation(DataPoint.ActualDependentValueProperty' "ActualDependentValue"' e.NewValue' definition.TransitionDuration' definition.TransitionEasingFunction); " is 169.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,DataPointIndependentValueChanged,The length of the statement  "                dataPoint.BeginAnimation(DataPoint.ActualIndependentValueProperty' "ActualIndependentValue"' e.NewValue' definition.TransitionDuration' definition.TransitionEasingFunction); " is 173.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,SeriesDefinitionItemsSourceCollectionChanged,The length of the statement  "                foreach (DataItem dataItem in DataItems.Where(di => (di.SeriesDefinition == definition) && (newStartingIndex <= di.Index) && (di.Index < newStartingIndex + newItems.Count))) " is 173.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,SeriesDefinitionItemsSourceCollectionChanged,The length of the statement  "                    foreach (DataItem oldDataItem in DataItems.Where(di => (di.SeriesDefinition == definition) && (oldStartingIndex <= di.Index) && (di.Index < oldStartingIndex + oldItems.Count))) " is 176.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,SeriesDefinitionItemsSourceCollectionChanged,The length of the statement  "                    foreach (DataItem dataItem in DataItems.Where(di => (di.SeriesDefinition == definition) && (oldStartingIndex + oldItems.Count <= di.Index))) " is 140.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,SeriesDefinitionItemsSourceCollectionChanged,The length of the statement  "                    foreach (DataItem dataItem in DataItems.Where(di => (di.SeriesDefinition == definition) && (newStartingIndex <= di.Index))) " is 123.
Long Statement,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,EnsureAxes,The length of the statement  "                    QueueUpdateDataItemPlacement(changedActualDependentAxis || unconditionallyNotifyAxes' changedActualIndependentAxis || unconditionallyNotifyAxes' DataItems); " is 156.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LabeledPieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\LabeledPieSeries.cs,AddLabelPieDataPoint,The length of the statement  "			Binding visibilityBinding = new Binding("Ratio") { Source = pieDataPoint' Converter = new DoubleToVisibilityConverter() }; " is 122.
Long Statement,System.Windows.Controls.DataVisualization.Charting,LineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\LineSeries.cs,GetAxes,The length of the statement  "                        throw new InvalidOperationException(Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,AddDataPoint,The length of the statement  "            pieDataPoint.SetBinding(PieDataPoint.StyleProperty' new Binding(PieDataPoint.ActualDataPointStyleName) { Source = pieDataPoint }); " is 130.
Long Statement,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,UpdateRatios,The length of the statement  "            double sum = ActivePieDataPoints.Select(pieDataPoint => Math.Abs(ValueHelper.ToDouble(pieDataPoint.DependentValue))).Sum(); " is 123.
Long Statement,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,UpdatePieDataPointGeometry,The length of the statement  "                foreach (DependencyProperty dependencyProperty in new DependencyProperty[] { PieDataPoint.GeometryProperty' PieDataPoint.GeometrySelectionProperty' PieDataPoint.GeometryHighlightProperty }) " is 189.
Long Statement,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,UpdatePieDataPointGeometry,The length of the statement  "                    foreach (DependencyProperty dependencyProperty in new DependencyProperty[] { PieDataPoint.GeometryProperty' PieDataPoint.GeometrySelectionProperty' PieDataPoint.GeometryHighlightProperty }) " is 189.
Long Statement,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,CreatePieLegendItem,The length of the statement  "            legendDataPoint.SetBinding(DataPoint.StyleProperty' new Binding(PieDataPoint.ActualDataPointStyleName) { Source = dataPoint }); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,OnPieDataPointRatioChanged,The length of the statement  "            dataPoint.BeginAnimation(PieDataPoint.ActualRatioProperty' "ActualRatio"' args.NewValue' TransitionDuration' this.TransitionEasingFunction); " is 140.
Long Statement,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,OnPieDataPointOffsetRatioChanged,The length of the statement  "            dataPoint.BeginAnimation(PieDataPoint.ActualOffsetRatioProperty' "ActualOffsetRatio"' args.NewValue' TransitionDuration' this.TransitionEasingFunction); " is 152.
Long Statement,System.Windows.Controls.DataVisualization.Charting,ScatterSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ScatterSeries.cs,GetAxes,The length of the statement  "                        throw new InvalidOperationException(Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,SeriesDefinition,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SeriesDefinition.cs,OnItemsSourceChanged,The length of the statement  "                _weakEventListener.OnEventAction = (instance' source' eventArgs) => instance.ItemsSourceCollectionChanged(source' eventArgs); " is 125.
Long Statement,System.Windows.Controls.DataVisualization.Charting,SeriesDefinition,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SeriesDefinition.cs,OnItemsSourceChanged,The length of the statement  "                _weakEventListener.OnDetachAction = (weakEventListener) => newValueINotifyCollectionChanged.CollectionChanged -= weakEventListener.OnEvent; " is 139.
Long Statement,System.Windows.Controls.DataVisualization.Charting,SeriesDefinition,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SeriesDefinition.cs,ItemsSourceCollectionChanged,The length of the statement  "                ParentDefinitionSeries.SeriesDefinitionItemsSourceCollectionChanged(this' e.Action' e.OldItems' e.OldStartingIndex' e.NewItems' e.NewStartingIndex); " is 148.
Long Statement,System.Windows.Controls.DataVisualization.Charting,SeriesDefinition,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SeriesDefinition.cs,GlobalSeriesIndexChanged,The length of the statement  "                AutomaticTitle = string.Format(CultureInfo.CurrentCulture' Properties.Resources.Series_OnGlobalSeriesIndexPropertyChanged_UntitledSeriesFormatString' globalIndex + 1); " is 167.
Long Statement,System.Windows.Controls.DataVisualization.Charting,SplineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SplineSeries.cs,GetAxes,The length of the statement  "                        throw new InvalidOperationException(Properties.Resources.DataPointSeriesWithAxes_NoSuitableAxisAvailableForPlottingDependentValue); " is 131.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,AcquireDependentAxis,The length of the statement  "                .Where(a => (a.Orientation == AxisOrientation.Y) && (a is IRangeAxis) && DataItems.Any() && (a.CanPlot(DataItems.First().ActualDependentValue))) " is 144.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,AcquireIndependentAxis,The length of the statement  "                .Where(a => (a.Orientation == AxisOrientation.X) && ((a is IRangeAxis) || (a is ICategoryAxis)) && DataItems.Any() && (a.CanPlot(DataItems.First().ActualIndependentValue))) " is 172.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,DataPointSizeChanged,The length of the statement  "            NotifyValueMarginsChanged(ActualDependentAxis' new ValueMargin[] { new ValueMargin(dataItem.ActualStackedDependentValue' heightMargin' heightMargin) }); " is 152.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,DataPointSizeChanged,The length of the statement  "            NotifyValueMarginsChanged(ActualIndependentAxis' new ValueMargin[] { new ValueMargin(dataPoint.ActualIndependentValue' widthMargin' widthMargin) }); " is 148.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,UpdateDataItemPlacement,The length of the statement  "                double plotAreaMaximumDependentCoordinate = ActualDependentAxis.GetPlotAreaCoordinate(ActualDependentRangeAxis.Range.Maximum).Value; " is 132.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,UpdateDataItemPlacement,The length of the statement  "                        Point lastPoint = new Point(x' Math.Max(plotAreaMaximumDependentCoordinate - ActualDependentRangeAxis.GetPlotAreaCoordinate(lastValue).Value' lineTopBuffer)); " is 158.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedAreaSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaSeries.cs,UpdateShape,The length of the statement  "                IEnumerable<Point> topPoints = (ActualIndependentAxis is ICategoryAxis) ? definitionPoints[i].OrderBy(p => p.X) : definitionPoints[i]; " is 134.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedAreaSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaSeries.cs,UpdateShape,The length of the statement  "                IEnumerable<Point> bottomPoints = (ActualIndependentAxis is ICategoryAxis) ? definitionPoints[i - 1].OrderByDescending(p => p.X) : definitionPoints[i - 1].Reverse(); " is 165.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedAreaSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaSeries.cs,UpdateShape,The length of the statement  "                double plotAreaMaximumDependentCoordinate = ActualDependentAxis.GetPlotAreaCoordinate(ActualDependentRangeAxis.Range.Maximum).Value; " is 132.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedAreaSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaSeries.cs,UpdateShape,The length of the statement  "                Point[] topPoints = ((ActualIndependentAxis is ICategoryAxis) ? definitionPoints[0].OrderBy(p => p.X) : definitionPoints[0]).ToArray(); " is 135.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,AcquireDependentAxis,The length of the statement  "                .Where(a => (a.Orientation == DependentAxisOrientation) && (a is IRangeAxis) && DataItems.Any() && (a.CanPlot(DataItems.First().ActualDependentValue))) " is 151.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,AcquireIndependentAxis,The length of the statement  "                .Where(a => (a.Orientation == IndependentAxisOrientation) && ((a is ICategoryAxis) || (a is IRangeAxis)) && DataItems.Any() && (a.CanPlot(DataItems.First().ActualIndependentValue))) " is 181.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,UpdateDataItemPlacement,The length of the statement  "                double plotAreaMaximumDependentCoordinate = ActualDependentAxis.GetPlotAreaCoordinate(ActualDependentRangeAxis.Range.Maximum).Value; " is 132.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,UpdateDataItemPlacement,The length of the statement  "                double nonCategoryAxisRangeMargin = (null != actualIndependentCategoryAxis) ? 0 : GetMarginForNonCategoryAxis(actualIndependentAxis); " is 133.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,UpdateDataItemPlacement,The length of the statement  "                            categoryRange = new Range<UnitValue>(new UnitValue(independentValueCoordinate.Value - nonCategoryAxisRangeMargin' independentValueCoordinate.Unit)' new UnitValue(independentValueCoordinate.Value + nonCategoryAxisRangeMargin' independentValueCoordinate.Unit)); " is 259.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,UpdateDataItemPlacement,The length of the statement  "                            double value = IsStacked100 ? (ValueHelper.ToDouble(dataPoint.ActualDependentValue) * (100 / sum)) : ValueHelper.ToDouble(dataPoint.ActualDependentValue); " is 154.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,UpdateDataItemPlacement,The length of the statement  "                                    topCoordinate = plotAreaMaximumDependentCoordinate - Math.Max(valueCoordinate + fillerCoordinate' zeroCoordinate + fillerCoordinate); " is 133.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,UpdateDataItemPlacement,The length of the statement  "                                    double bottomCoordinate = plotAreaMaximumDependentCoordinate - Math.Min(valueCoordinate + fillerCoordinate' zeroCoordinate + fillerCoordinate); " is 143.
Long Statement,System.Windows.Controls.DataVisualization.Charting,StackedLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedLineSeries.cs,UpdateShape,The length of the statement  "                foreach (Point p in ((ActualIndependentAxis is ICategoryAxis) ? definitionPoints[i].OrderBy(p => p.X) : definitionPoints[i])) " is 125.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "            IList<UIElement> leftElements = this.Children.OfType<UIElement>().Where(element => GetEdge(element) == Edge.Left).ToList(); " is 123.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "            IList<UIElement> rightElements = this.Children.OfType<UIElement>().Where(element => GetEdge(element) == Edge.Right).ToList(); " is 125.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "            IList<UIElement> bottomElements = this.Children.OfType<UIElement>().Where(element => GetEdge(element) == Edge.Bottom).ToList(); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "            IList<UIElement> topElements = this.Children.OfType<UIElement>().Where(element => GetEdge(element) == Edge.Top).ToList(); " is 121.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "                    _leftRect = SafeCreateRect(0' maxTopRequestedHeight' maxLeftRequestedWidth' (constraint.Height - maxTopRequestedHeight) - maxBottomRequestedHeight); " is 148.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "                    _rightRect = SafeCreateRect(constraint.Width - maxRightRequestedWidth' maxTopRequestedHeight' maxRightRequestedWidth' (constraint.Height - maxTopRequestedHeight) - maxBottomRequestedHeight); " is 190.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "                    _bottomRect = SafeCreateRect(maxLeftRequestedWidth' constraint.Height - maxBottomRequestedHeight' (constraint.Width - maxLeftRequestedWidth) - maxRightRequestedWidth' maxBottomRequestedHeight); " is 193.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The length of the statement  "                    _topRect = SafeCreateRect(maxLeftRequestedWidth' 0' (constraint.Width - maxLeftRequestedWidth) - maxRightRequestedWidth' maxTopRequestedHeight); " is 144.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "            if (arrangeSize.Width == 0 || arrangeSize.Height == 0 || !ValueHelper.CanGraph(arrangeSize.Width) || !ValueHelper.CanGraph(arrangeSize.Height)) " is 143.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "            IList<UIElement> leftElements = this.Children.OfType<UIElement>().Where(element => GetEdge(element) == Edge.Left).ToList(); " is 123.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "            IList<UIElement> rightElements = this.Children.OfType<UIElement>().Where(element => GetEdge(element) == Edge.Right).ToList(); " is 125.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "            IList<UIElement> bottomElements = this.Children.OfType<UIElement>().Where(element => GetEdge(element) == Edge.Bottom).ToList(); " is 127.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "            IList<UIElement> topElements = this.Children.OfType<UIElement>().Where(element => GetEdge(element) == Edge.Top).ToList(); " is 121.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "                    bottomUIElement.Arrange(SafeCreateRect(_leftRect.RightOrDefault(0)' workingHeight' (arrangeSize.Width - _leftRect.WidthOrDefault(0)) - _rightRect.WidthOrDefault(0)' bottomUIElement.DesiredSize.Height)); " is 202.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "                    topUIElement.Arrange(SafeCreateRect(_leftRect.RightOrDefault(0)' workingTop' (arrangeSize.Width - _leftRect.WidthOrDefault(0)) - _rightRect.WidthOrDefault(0)' topUIElement.DesiredSize.Height)); " is 193.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "                    rightUIElement.Arrange(SafeCreateRect(workingRight' _topRect.BottomOrDefault(0)' rightUIElement.DesiredSize.Width' (arrangeSize.Height - _bottomRect.HeightOrDefault(0)) - _topRect.HeightOrDefault(0))); " is 201.
Long Statement,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The length of the statement  "                    Rect leftRect = SafeCreateRect(workingLeft' _topRect.BottomOrDefault(0)' leftUIElement.DesiredSize.Width' (arrangeSize.Height - _bottomRect.HeightOrDefault(0)) - _topRect.HeightOrDefault(0)); " is 191.
Long Statement,System.Windows.Controls.DataVisualization.Collections,LeftLeaningRedBlackTree<TKey;TValue>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Collections\LeftLeaningRedBlackTree.cs,GetValueForKey,The length of the statement  "                throw new InvalidOperationException("GetValueForKey is only supported when acting as a normal (non-multi) dictionary."); " is 120.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,System.Windows.Controls.DataVisualization,ObjectPool<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ObjectPool.cs,Done,The conditional expression  "currentIndex != 0 && _objects.Count > 0 && currentIndex >= minimumObjectsInThePool && currentIndex < _objects.Count / 2"  is complex.
Complex Conditional,System.Windows.Controls.DataVisualization,ValueHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ValueHelper.cs,TryConvert,The conditional expression  "value != null &&                       (value is double                      || value is int                      || value is byte                      || value is short                      || value is decimal                      || value is float                      || value is long                      || value is uint                      || value is sbyte                      || value is ushort                      || value is ulong)"  is complex.
Complex Conditional,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,OnInternalDependentAxisPropertyChanged,The conditional expression  "newValue != null                   && InternalActualDependentAxis != null                   && InternalActualDependentAxis != newValue                   && InternalActualDependentAxis.RegisteredListeners.Contains(this)"  is complex.
Complex Conditional,System.Windows.Controls.DataVisualization.Charting,DataPointSeriesWithAxes,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeriesWithAxes.cs,OnInternalIndependentAxisPropertyChanged,The conditional expression  "newValue != null                  && InternalActualIndependentAxis != null                  && InternalActualIndependentAxis != newValue                  && InternalActualIndependentAxis.RegisteredListeners.Contains(this)"  is complex.
Complex Conditional,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,OnEdgePropertyChanged,The conditional expression  "(value != Edge.Left) &&                  (value != Edge.Top) &&                  (value != Edge.Right) &&                  (value != Edge.Center) &&                  (value != Edge.Bottom)"  is complex.
Complex Conditional,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,MeasureOverride,The conditional expression  "leftBottomCollisionRect.IsEmptyOrHasNoSize()                      && rightBottomCollisionRect.IsEmptyOrHasNoSize()                      && leftTopCollisionRect.IsEmptyOrHasNoSize()                      && rightTopCollisionRect.IsEmptyOrHasNoSize()                                          && previousBottomAxesHeight == bottomAxesHeight                      && previousLeftAxesWidth == leftAxesWidth                      && previousRightAxesWidth == rightAxesWidth                      && previousTopAxesHeight == topAxesHeight"  is complex.
Complex Conditional,System.Windows.Controls.DataVisualization.Charting.Primitives,EdgePanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Primitives\EdgePanel.cs,ArrangeOverride,The conditional expression  "arrangeSize.Width == 0 || arrangeSize.Height == 0 || !ValueHelper.CanGraph(arrangeSize.Width) || !ValueHelper.CanGraph(arrangeSize.Height)"  is complex.
Virtual Method Call from Constructor,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,CategoryAxis,The constructor "CategoryAxis" calls a virtual method "CreateAxisLabel".
Virtual Method Call from Constructor,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,CategoryAxis,The constructor "CategoryAxis" calls a virtual method "CreateMajorTickMark".
Virtual Method Call from Constructor,System.Windows.Controls.DataVisualization.Charting,RangeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\RangeAxis.cs,RangeAxis,The constructor "RangeAxis" calls a virtual method "CreateAxisLabel".
Virtual Method Call from Constructor,System.Windows.Controls.DataVisualization.Charting,RangeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\RangeAxis.cs,RangeAxis,The constructor "RangeAxis" calls a virtual method "CreateMajorTickMark".
Virtual Method Call from Constructor,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,PieSeries,The constructor "PieSeries" calls a virtual method "OnResourceDictionariesChanged".
Empty Catch Block,System.Windows.Controls.DataVisualization,ValueHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ValueHelper.cs,TryConvert,The method has an empty catch block.
Empty Catch Block,System.Windows.Controls.DataVisualization,ValueHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ValueHelper.cs,TryConvert,The method has an empty catch block.
Empty Catch Block,System.Windows.Controls.DataVisualization.Charting,PieChartLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartLabel.cs,PositionConnected,The method has an empty catch block.
Magic Number,System.Windows.Controls.DataVisualization,ObjectPool<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ObjectPool.cs,Done,The following statement contains a magic number: if (currentIndex != 0 && _objects.Count > 0 && currentIndex >= minimumObjectsInThePool && currentIndex < _objects.Count / 2)              {                  _objects.RemoveRange(currentIndex' _objects.Count - currentIndex);              }
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != transform)              {                  // WPF equivalent of this entire method:                  // return transform.Value;                    // Process the TransformGroup                  TransformGroup transformGroup = transform as TransformGroup;                  if (null != transformGroup)                  {                      Matrix groupMatrix = Matrix.Identity;                      foreach (Transform child in transformGroup.Children)                      {                          groupMatrix = MatrixMultiply(groupMatrix' GetTransformMatrix(child));                      }                      return groupMatrix;                  }                    // Process the RotateTransform                  RotateTransform rotateTransform = transform as RotateTransform;                  if (null != rotateTransform)                  {                      double angle = rotateTransform.Angle;                      double angleRadians = (2 * Math.PI * angle) / 360;                      double sine = Math.Sin(angleRadians);                      double cosine = Math.Cos(angleRadians);                      return new Matrix(cosine' sine' -sine' cosine' 0' 0);                  }                    // Process the ScaleTransform                  ScaleTransform scaleTransform = transform as ScaleTransform;                  if (null != scaleTransform)                  {                      double scaleX = scaleTransform.ScaleX;                      double scaleY = scaleTransform.ScaleY;                      return new Matrix(scaleX' 0' 0' scaleY' 0' 0);                  }                    // Process the SkewTransform                  SkewTransform skewTransform = transform as SkewTransform;                  if (null != skewTransform)                  {                      double angleX = skewTransform.AngleX;                      double angleY = skewTransform.AngleY;                      double angleXRadians = (2 * Math.PI * angleX) / 360;                      double angleYRadians = (2 * Math.PI * angleY) / 360;                      return new Matrix(1' angleYRadians' angleXRadians' 1' 0' 0);                  }                    // Process the MatrixTransform                  MatrixTransform matrixTransform = transform as MatrixTransform;                  if (null != matrixTransform)                  {                      return matrixTransform.Matrix;                  }                    // TranslateTransform has no effect in LayoutTransform              }
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != transform)              {                  // WPF equivalent of this entire method:                  // return transform.Value;                    // Process the TransformGroup                  TransformGroup transformGroup = transform as TransformGroup;                  if (null != transformGroup)                  {                      Matrix groupMatrix = Matrix.Identity;                      foreach (Transform child in transformGroup.Children)                      {                          groupMatrix = MatrixMultiply(groupMatrix' GetTransformMatrix(child));                      }                      return groupMatrix;                  }                    // Process the RotateTransform                  RotateTransform rotateTransform = transform as RotateTransform;                  if (null != rotateTransform)                  {                      double angle = rotateTransform.Angle;                      double angleRadians = (2 * Math.PI * angle) / 360;                      double sine = Math.Sin(angleRadians);                      double cosine = Math.Cos(angleRadians);                      return new Matrix(cosine' sine' -sine' cosine' 0' 0);                  }                    // Process the ScaleTransform                  ScaleTransform scaleTransform = transform as ScaleTransform;                  if (null != scaleTransform)                  {                      double scaleX = scaleTransform.ScaleX;                      double scaleY = scaleTransform.ScaleY;                      return new Matrix(scaleX' 0' 0' scaleY' 0' 0);                  }                    // Process the SkewTransform                  SkewTransform skewTransform = transform as SkewTransform;                  if (null != skewTransform)                  {                      double angleX = skewTransform.AngleX;                      double angleY = skewTransform.AngleY;                      double angleXRadians = (2 * Math.PI * angleX) / 360;                      double angleYRadians = (2 * Math.PI * angleY) / 360;                      return new Matrix(1' angleYRadians' angleXRadians' 1' 0' 0);                  }                    // Process the MatrixTransform                  MatrixTransform matrixTransform = transform as MatrixTransform;                  if (null != matrixTransform)                  {                      return matrixTransform.Matrix;                  }                    // TranslateTransform has no effect in LayoutTransform              }
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != transform)              {                  // WPF equivalent of this entire method:                  // return transform.Value;                    // Process the TransformGroup                  TransformGroup transformGroup = transform as TransformGroup;                  if (null != transformGroup)                  {                      Matrix groupMatrix = Matrix.Identity;                      foreach (Transform child in transformGroup.Children)                      {                          groupMatrix = MatrixMultiply(groupMatrix' GetTransformMatrix(child));                      }                      return groupMatrix;                  }                    // Process the RotateTransform                  RotateTransform rotateTransform = transform as RotateTransform;                  if (null != rotateTransform)                  {                      double angle = rotateTransform.Angle;                      double angleRadians = (2 * Math.PI * angle) / 360;                      double sine = Math.Sin(angleRadians);                      double cosine = Math.Cos(angleRadians);                      return new Matrix(cosine' sine' -sine' cosine' 0' 0);                  }                    // Process the ScaleTransform                  ScaleTransform scaleTransform = transform as ScaleTransform;                  if (null != scaleTransform)                  {                      double scaleX = scaleTransform.ScaleX;                      double scaleY = scaleTransform.ScaleY;                      return new Matrix(scaleX' 0' 0' scaleY' 0' 0);                  }                    // Process the SkewTransform                  SkewTransform skewTransform = transform as SkewTransform;                  if (null != skewTransform)                  {                      double angleX = skewTransform.AngleX;                      double angleY = skewTransform.AngleY;                      double angleXRadians = (2 * Math.PI * angleX) / 360;                      double angleYRadians = (2 * Math.PI * angleY) / 360;                      return new Matrix(1' angleYRadians' angleXRadians' 1' 0' 0);                  }                    // Process the MatrixTransform                  MatrixTransform matrixTransform = transform as MatrixTransform;                  if (null != matrixTransform)                  {                      return matrixTransform.Matrix;                  }                    // TranslateTransform has no effect in LayoutTransform              }
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != transform)              {                  // WPF equivalent of this entire method:                  // return transform.Value;                    // Process the TransformGroup                  TransformGroup transformGroup = transform as TransformGroup;                  if (null != transformGroup)                  {                      Matrix groupMatrix = Matrix.Identity;                      foreach (Transform child in transformGroup.Children)                      {                          groupMatrix = MatrixMultiply(groupMatrix' GetTransformMatrix(child));                      }                      return groupMatrix;                  }                    // Process the RotateTransform                  RotateTransform rotateTransform = transform as RotateTransform;                  if (null != rotateTransform)                  {                      double angle = rotateTransform.Angle;                      double angleRadians = (2 * Math.PI * angle) / 360;                      double sine = Math.Sin(angleRadians);                      double cosine = Math.Cos(angleRadians);                      return new Matrix(cosine' sine' -sine' cosine' 0' 0);                  }                    // Process the ScaleTransform                  ScaleTransform scaleTransform = transform as ScaleTransform;                  if (null != scaleTransform)                  {                      double scaleX = scaleTransform.ScaleX;                      double scaleY = scaleTransform.ScaleY;                      return new Matrix(scaleX' 0' 0' scaleY' 0' 0);                  }                    // Process the SkewTransform                  SkewTransform skewTransform = transform as SkewTransform;                  if (null != skewTransform)                  {                      double angleX = skewTransform.AngleX;                      double angleY = skewTransform.AngleY;                      double angleXRadians = (2 * Math.PI * angleX) / 360;                      double angleYRadians = (2 * Math.PI * angleY) / 360;                      return new Matrix(1' angleYRadians' angleXRadians' 1' 0' 0);                  }                    // Process the MatrixTransform                  MatrixTransform matrixTransform = transform as MatrixTransform;                  if (null != matrixTransform)                  {                      return matrixTransform.Matrix;                  }                    // TranslateTransform has no effect in LayoutTransform              }
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != transform)              {                  // WPF equivalent of this entire method:                  // return transform.Value;                    // Process the TransformGroup                  TransformGroup transformGroup = transform as TransformGroup;                  if (null != transformGroup)                  {                      Matrix groupMatrix = Matrix.Identity;                      foreach (Transform child in transformGroup.Children)                      {                          groupMatrix = MatrixMultiply(groupMatrix' GetTransformMatrix(child));                      }                      return groupMatrix;                  }                    // Process the RotateTransform                  RotateTransform rotateTransform = transform as RotateTransform;                  if (null != rotateTransform)                  {                      double angle = rotateTransform.Angle;                      double angleRadians = (2 * Math.PI * angle) / 360;                      double sine = Math.Sin(angleRadians);                      double cosine = Math.Cos(angleRadians);                      return new Matrix(cosine' sine' -sine' cosine' 0' 0);                  }                    // Process the ScaleTransform                  ScaleTransform scaleTransform = transform as ScaleTransform;                  if (null != scaleTransform)                  {                      double scaleX = scaleTransform.ScaleX;                      double scaleY = scaleTransform.ScaleY;                      return new Matrix(scaleX' 0' 0' scaleY' 0' 0);                  }                    // Process the SkewTransform                  SkewTransform skewTransform = transform as SkewTransform;                  if (null != skewTransform)                  {                      double angleX = skewTransform.AngleX;                      double angleY = skewTransform.AngleY;                      double angleXRadians = (2 * Math.PI * angleX) / 360;                      double angleYRadians = (2 * Math.PI * angleY) / 360;                      return new Matrix(1' angleYRadians' angleXRadians' 1' 0' 0);                  }                    // Process the MatrixTransform                  MatrixTransform matrixTransform = transform as MatrixTransform;                  if (null != matrixTransform)                  {                      return matrixTransform.Matrix;                  }                    // TranslateTransform has no effect in LayoutTransform              }
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,GetTransformMatrix,The following statement contains a magic number: if (null != transform)              {                  // WPF equivalent of this entire method:                  // return transform.Value;                    // Process the TransformGroup                  TransformGroup transformGroup = transform as TransformGroup;                  if (null != transformGroup)                  {                      Matrix groupMatrix = Matrix.Identity;                      foreach (Transform child in transformGroup.Children)                      {                          groupMatrix = MatrixMultiply(groupMatrix' GetTransformMatrix(child));                      }                      return groupMatrix;                  }                    // Process the RotateTransform                  RotateTransform rotateTransform = transform as RotateTransform;                  if (null != rotateTransform)                  {                      double angle = rotateTransform.Angle;                      double angleRadians = (2 * Math.PI * angle) / 360;                      double sine = Math.Sin(angleRadians);                      double cosine = Math.Cos(angleRadians);                      return new Matrix(cosine' sine' -sine' cosine' 0' 0);                  }                    // Process the ScaleTransform                  ScaleTransform scaleTransform = transform as ScaleTransform;                  if (null != scaleTransform)                  {                      double scaleX = scaleTransform.ScaleX;                      double scaleY = scaleTransform.ScaleY;                      return new Matrix(scaleX' 0' 0' scaleY' 0' 0);                  }                    // Process the SkewTransform                  SkewTransform skewTransform = transform as SkewTransform;                  if (null != skewTransform)                  {                      double angleX = skewTransform.AngleX;                      double angleY = skewTransform.AngleY;                      double angleXRadians = (2 * Math.PI * angleX) / 360;                      double angleYRadians = (2 * Math.PI * angleY) / 360;                      return new Matrix(1' angleYRadians' angleXRadians' 1' 0' 0);                  }                    // Process the MatrixTransform                  MatrixTransform matrixTransform = transform as MatrixTransform;                  if (null != matrixTransform)                  {                      return matrixTransform.Matrix;                  }                    // TranslateTransform has no effect in LayoutTransform              }
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,ArrangeOverride,The following statement contains a magic number: Rect finalRect = new Rect(                  -transformedRect.Left + ((finalSize.Width - transformedRect.Width) / 2)'                  -transformedRect.Top + ((finalSize.Height - transformedRect.Height) / 2)'                  finalSizeTransformed.Width'                  finalSizeTransformed.Height);
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,ArrangeOverride,The following statement contains a magic number: Rect finalRect = new Rect(                  -transformedRect.Left + ((finalSize.Width - transformedRect.Width) / 2)'                  -transformedRect.Top + ((finalSize.Height - transformedRect.Height) / 2)'                  finalSizeTransformed.Width'                  finalSizeTransformed.Height);
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,ComputeLargestTransformedSize,The following statement contains a magic number: double idealWidthFromWidth = maxWidthFromWidth / 2;
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,ComputeLargestTransformedSize,The following statement contains a magic number: double idealHeightFromWidth = maxHeightFromWidth / 2;
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,ComputeLargestTransformedSize,The following statement contains a magic number: double idealWidthFromHeight = maxWidthFromHeight / 2;
Magic Number,System.Windows.Controls.DataVisualization,LayoutTransformControl,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\LayoutTransformControl.cs,ComputeLargestTransformedSize,The following statement contains a magic number: double idealHeightFromHeight = maxHeightFromHeight / 2;
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\OrientedPanel.cs,GetRanges,The following statement contains a magic number: return                   children                      .Select(child =>                      {                          double centerCoordinate = GetCenterCoordinate(child);                          double halfLength = lengthSelector(child) / 2;                          return new Range<double>(centerCoordinate - halfLength' centerCoordinate + halfLength);                      });
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\OrientedPanel.cs,MeasureOverride,The following statement contains a magic number: if (Children.Count > 0)              {                  Size totalSize = new Size(double.PositiveInfinity' double.PositiveInfinity);                  foreach (UIElement child in this.Children)                  {                      child.Measure(totalSize);                  }                    Func<UIElement' double> lengthSelector = null;                  Func<UIElement' double> offsetSelector = null;                    if (Orientation == Orientation.Horizontal)                  {                      lengthSelector = child => GetCorrectedDesiredSize(child).Width;                      offsetSelector = child => GetCorrectedDesiredSize(child).Height;                  }                  else                  {                      lengthSelector = child => GetCorrectedDesiredSize(child).Height;                      offsetSelector = child => GetCorrectedDesiredSize(child).Width;                  }                    IEnumerable<IGrouping<int' UIElement>> priorityGroups =                      from child in Children.CastWrapper<UIElement>()                      group child by GetPriority(child) into priorityGroup                      select priorityGroup;                    ActualMinimumDistanceBetweenChildren =                      (from priorityGroup in priorityGroups                       let orderedElements =                           (from element in priorityGroup                            orderby GetCenterCoordinate(element) ascending                            select element).ToList()                       where orderedElements.Count >= 2                       select                           (EnumerableFunctions.Zip(                               orderedElements'                               orderedElements.Skip(1)'                               (leftElement' rightElement) =>                               {                                   double halfLeftLength = lengthSelector(leftElement) / 2;                                   double leftCenterCoordinate = GetCenterCoordinate(leftElement);                                     double halfRightLength = lengthSelector(rightElement) / 2;                                   double rightCenterCoordinate = GetCenterCoordinate(rightElement);                                     return (rightCenterCoordinate - halfRightLength) - (leftCenterCoordinate + halfLeftLength);                               }))                               .Min())                          .MinOrNullable() ?? MinimumDistanceBetweenChildren;                    IEnumerable<int> priorities =                      Children                          .CastWrapper<UIElement>()                          .Select(child => GetPriority(child)).Distinct().OrderBy(priority => priority).ToList();                    PriorityOffsets = new Dictionary<int' double>();                  foreach (int priority in priorities)                  {                      PriorityOffsets[priority] = 0.0;                  }                    IEnumerable<Tuple<int' int>> priorityPairs =                      EnumerableFunctions.Zip(priorities' priorities.Skip(1)' (previous' next) => new Tuple<int' int>(previous' next));                    foreach (Tuple<int' int> priorityPair in priorityPairs)                  {                      IEnumerable<UIElement> currentPriorityChildren = Children.CastWrapper<UIElement>().Where(child => GetPriority(child) == priorityPair.Item1).ToList();                        IEnumerable<Range<double>> currentPriorityRanges =                          GetRanges(currentPriorityChildren' lengthSelector);                        IEnumerable<UIElement> nextPriorityChildren = Children.CastWrapper<UIElement>().Where(child => GetPriority(child) == priorityPair.Item2).ToList();                        IEnumerable<Range<double>> nextPriorityRanges =                          GetRanges(nextPriorityChildren' lengthSelector);                        bool intersects =                          (from currentPriorityRange in currentPriorityRanges                           from nextPriorityRange in nextPriorityRanges                           select currentPriorityRange.IntersectsWith(nextPriorityRange))                              .Any(value => value);                        if (intersects)                      {                          double maxCurrentPriorityChildOffset =                              currentPriorityChildren                                  .Select(child => offsetSelector(child))                                  .MaxOrNullable() ?? 0.0;                            offset += maxCurrentPriorityChildOffset + OffsetPadding;                      }                      PriorityOffsets[priorityPair.Item2] = offset;                  }                    offset =                      (Children                          .CastWrapper<UIElement>()                          .GroupBy(child => GetPriority(child))                          .Select(                              group =>                                  group                                      .Select(child => PriorityOffsets[group.Key] + offsetSelector(child))                                      .MaxOrNullable()))                      .Where(num => num.HasValue)                      .Select(num => num.Value)                      .MaxOrNullable() ?? 0.0;              }
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\OrientedPanel.cs,MeasureOverride,The following statement contains a magic number: if (Children.Count > 0)              {                  Size totalSize = new Size(double.PositiveInfinity' double.PositiveInfinity);                  foreach (UIElement child in this.Children)                  {                      child.Measure(totalSize);                  }                    Func<UIElement' double> lengthSelector = null;                  Func<UIElement' double> offsetSelector = null;                    if (Orientation == Orientation.Horizontal)                  {                      lengthSelector = child => GetCorrectedDesiredSize(child).Width;                      offsetSelector = child => GetCorrectedDesiredSize(child).Height;                  }                  else                  {                      lengthSelector = child => GetCorrectedDesiredSize(child).Height;                      offsetSelector = child => GetCorrectedDesiredSize(child).Width;                  }                    IEnumerable<IGrouping<int' UIElement>> priorityGroups =                      from child in Children.CastWrapper<UIElement>()                      group child by GetPriority(child) into priorityGroup                      select priorityGroup;                    ActualMinimumDistanceBetweenChildren =                      (from priorityGroup in priorityGroups                       let orderedElements =                           (from element in priorityGroup                            orderby GetCenterCoordinate(element) ascending                            select element).ToList()                       where orderedElements.Count >= 2                       select                           (EnumerableFunctions.Zip(                               orderedElements'                               orderedElements.Skip(1)'                               (leftElement' rightElement) =>                               {                                   double halfLeftLength = lengthSelector(leftElement) / 2;                                   double leftCenterCoordinate = GetCenterCoordinate(leftElement);                                     double halfRightLength = lengthSelector(rightElement) / 2;                                   double rightCenterCoordinate = GetCenterCoordinate(rightElement);                                     return (rightCenterCoordinate - halfRightLength) - (leftCenterCoordinate + halfLeftLength);                               }))                               .Min())                          .MinOrNullable() ?? MinimumDistanceBetweenChildren;                    IEnumerable<int> priorities =                      Children                          .CastWrapper<UIElement>()                          .Select(child => GetPriority(child)).Distinct().OrderBy(priority => priority).ToList();                    PriorityOffsets = new Dictionary<int' double>();                  foreach (int priority in priorities)                  {                      PriorityOffsets[priority] = 0.0;                  }                    IEnumerable<Tuple<int' int>> priorityPairs =                      EnumerableFunctions.Zip(priorities' priorities.Skip(1)' (previous' next) => new Tuple<int' int>(previous' next));                    foreach (Tuple<int' int> priorityPair in priorityPairs)                  {                      IEnumerable<UIElement> currentPriorityChildren = Children.CastWrapper<UIElement>().Where(child => GetPriority(child) == priorityPair.Item1).ToList();                        IEnumerable<Range<double>> currentPriorityRanges =                          GetRanges(currentPriorityChildren' lengthSelector);                        IEnumerable<UIElement> nextPriorityChildren = Children.CastWrapper<UIElement>().Where(child => GetPriority(child) == priorityPair.Item2).ToList();                        IEnumerable<Range<double>> nextPriorityRanges =                          GetRanges(nextPriorityChildren' lengthSelector);                        bool intersects =                          (from currentPriorityRange in currentPriorityRanges                           from nextPriorityRange in nextPriorityRanges                           select currentPriorityRange.IntersectsWith(nextPriorityRange))                              .Any(value => value);                        if (intersects)                      {                          double maxCurrentPriorityChildOffset =                              currentPriorityChildren                                  .Select(child => offsetSelector(child))                                  .MaxOrNullable() ?? 0.0;                            offset += maxCurrentPriorityChildOffset + OffsetPadding;                      }                      PriorityOffsets[priorityPair.Item2] = offset;                  }                    offset =                      (Children                          .CastWrapper<UIElement>()                          .GroupBy(child => GetPriority(child))                          .Select(                              group =>                                  group                                      .Select(child => PriorityOffsets[group.Key] + offsetSelector(child))                                      .MaxOrNullable()))                      .Where(num => num.HasValue)                      .Select(num => num.Value)                      .MaxOrNullable() ?? 0.0;              }
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\OrientedPanel.cs,MeasureOverride,The following statement contains a magic number: if (Children.Count > 0)              {                  Size totalSize = new Size(double.PositiveInfinity' double.PositiveInfinity);                  foreach (UIElement child in this.Children)                  {                      child.Measure(totalSize);                  }                    Func<UIElement' double> lengthSelector = null;                  Func<UIElement' double> offsetSelector = null;                    if (Orientation == Orientation.Horizontal)                  {                      lengthSelector = child => GetCorrectedDesiredSize(child).Width;                      offsetSelector = child => GetCorrectedDesiredSize(child).Height;                  }                  else                  {                      lengthSelector = child => GetCorrectedDesiredSize(child).Height;                      offsetSelector = child => GetCorrectedDesiredSize(child).Width;                  }                    IEnumerable<IGrouping<int' UIElement>> priorityGroups =                      from child in Children.CastWrapper<UIElement>()                      group child by GetPriority(child) into priorityGroup                      select priorityGroup;                    ActualMinimumDistanceBetweenChildren =                      (from priorityGroup in priorityGroups                       let orderedElements =                           (from element in priorityGroup                            orderby GetCenterCoordinate(element) ascending                            select element).ToList()                       where orderedElements.Count >= 2                       select                           (EnumerableFunctions.Zip(                               orderedElements'                               orderedElements.Skip(1)'                               (leftElement' rightElement) =>                               {                                   double halfLeftLength = lengthSelector(leftElement) / 2;                                   double leftCenterCoordinate = GetCenterCoordinate(leftElement);                                     double halfRightLength = lengthSelector(rightElement) / 2;                                   double rightCenterCoordinate = GetCenterCoordinate(rightElement);                                     return (rightCenterCoordinate - halfRightLength) - (leftCenterCoordinate + halfLeftLength);                               }))                               .Min())                          .MinOrNullable() ?? MinimumDistanceBetweenChildren;                    IEnumerable<int> priorities =                      Children                          .CastWrapper<UIElement>()                          .Select(child => GetPriority(child)).Distinct().OrderBy(priority => priority).ToList();                    PriorityOffsets = new Dictionary<int' double>();                  foreach (int priority in priorities)                  {                      PriorityOffsets[priority] = 0.0;                  }                    IEnumerable<Tuple<int' int>> priorityPairs =                      EnumerableFunctions.Zip(priorities' priorities.Skip(1)' (previous' next) => new Tuple<int' int>(previous' next));                    foreach (Tuple<int' int> priorityPair in priorityPairs)                  {                      IEnumerable<UIElement> currentPriorityChildren = Children.CastWrapper<UIElement>().Where(child => GetPriority(child) == priorityPair.Item1).ToList();                        IEnumerable<Range<double>> currentPriorityRanges =                          GetRanges(currentPriorityChildren' lengthSelector);                        IEnumerable<UIElement> nextPriorityChildren = Children.CastWrapper<UIElement>().Where(child => GetPriority(child) == priorityPair.Item2).ToList();                        IEnumerable<Range<double>> nextPriorityRanges =                          GetRanges(nextPriorityChildren' lengthSelector);                        bool intersects =                          (from currentPriorityRange in currentPriorityRanges                           from nextPriorityRange in nextPriorityRanges                           select currentPriorityRange.IntersectsWith(nextPriorityRange))                              .Any(value => value);                        if (intersects)                      {                          double maxCurrentPriorityChildOffset =                              currentPriorityChildren                                  .Select(child => offsetSelector(child))                                  .MaxOrNullable() ?? 0.0;                            offset += maxCurrentPriorityChildOffset + OffsetPadding;                      }                      PriorityOffsets[priorityPair.Item2] = offset;                  }                    offset =                      (Children                          .CastWrapper<UIElement>()                          .GroupBy(child => GetPriority(child))                          .Select(                              group =>                                  group                                      .Select(child => PriorityOffsets[group.Key] + offsetSelector(child))                                      .MaxOrNullable()))                      .Where(num => num.HasValue)                      .Select(num => num.Value)                      .MaxOrNullable() ?? 0.0;              }
Magic Number,System.Windows.Controls.DataVisualization,OrientedPanel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\OrientedPanel.cs,ArrangeOverride,The following statement contains a magic number: foreach (UIElement child in Children)              {                  double x = 0.0;                  double y = 0.0;                    x = GetCenterCoordinate(child);                  y = PriorityOffsets[GetPriority(child)];                    double totalLength = 0.0;                  double totalOffsetLength = 0.0;                  double length = 0.0;                  double offsetLength = 0.0;                  Size childCorrectedDesiredSize = GetCorrectedDesiredSize(child);                  if (Orientation == Orientation.Horizontal)                  {                      totalLength = finalSize.Width;                      length = childCorrectedDesiredSize.Width;                      offsetLength = childCorrectedDesiredSize.Height;                      totalOffsetLength = finalSize.Height;                  }                  else if (Orientation == Orientation.Vertical)                  {                      totalLength = finalSize.Height;                      length = childCorrectedDesiredSize.Height;                      offsetLength = childCorrectedDesiredSize.Width;                      totalOffsetLength = finalSize.Width;                  }                    double halfLength = length / 2;                    double left = 0.0;                  double top = 0.0;                  if (!IsReversed)                  {                      left = x - halfLength;                  }                  else                  {                      left = totalLength - Math.Round(x + halfLength);                  }                  if (!IsInverted)                  {                      top = y;                  }                  else                  {                      top = totalOffsetLength - Math.Round(y + offsetLength);                  }                    left = Math.Min(Math.Round(left)' totalLength - 1);                  top = Math.Round(top);                  if (Orientation == Orientation.Horizontal)                  {                      child.Arrange(new Rect(left' top' length' offsetLength));                  }                  else if (Orientation == Orientation.Vertical)                  {                      child.Arrange(new Rect(top' left' offsetLength' length));                  }              }
Magic Number,System.Windows.Controls.DataVisualization,ValueHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ValueHelper.cs,RemoveNoiseFromDoubleMath,The following statement contains a magic number: if (value == 0.0 || Math.Abs((Math.Log10(Math.Abs(value)))) < 27)              {                  return (double)((decimal)value);              }
Magic Number,System.Windows.Controls.DataVisualization,Range,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Range.cs,GetHashCode,The following statement contains a magic number: num = (-1521134295 * num) + EqualityComparer<T>.Default.GetHashCode(Minimum);
Magic Number,System.Windows.Controls.DataVisualization,Range,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Range.cs,GetHashCode,The following statement contains a magic number: return ((-1521134295 * num) + EqualityComparer<T>.Default.GetHashCode(Maximum));
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinateRange,The following statement contains a magic number: if (Orientation == AxisOrientation.X || Orientation == AxisOrientation.Y)              {                  double maximumLength = Math.Max(ActualLength - 1' 0);                  double lower = (index * maximumLength) / Categories.Count;                  double upper = ((index + 1) * maximumLength) / Categories.Count;                    if (Orientation == AxisOrientation.X)                  {                      return new Range<UnitValue>(new UnitValue(lower' Unit.Pixels)' new UnitValue(upper' Unit.Pixels));                  }                  else if (Orientation == AxisOrientation.Y)                  {                      return new Range<UnitValue>(new UnitValue(maximumLength - upper' Unit.Pixels)' new UnitValue(maximumLength - lower' Unit.Pixels));                  }              }              else              {                  double startingAngle = 270.0;                  double angleOffset = 360 / this.Categories.Count;                  double halfAngleOffset = angleOffset / 2.0;                  int categoryIndex = this.Categories.IndexOf(category);                  double angle = startingAngle + (categoryIndex * angleOffset);                    return new Range<UnitValue>(new UnitValue(angle - halfAngleOffset' Unit.Degrees)' new UnitValue(angle + halfAngleOffset' Unit.Degrees));              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinateRange,The following statement contains a magic number: if (Orientation == AxisOrientation.X || Orientation == AxisOrientation.Y)              {                  double maximumLength = Math.Max(ActualLength - 1' 0);                  double lower = (index * maximumLength) / Categories.Count;                  double upper = ((index + 1) * maximumLength) / Categories.Count;                    if (Orientation == AxisOrientation.X)                  {                      return new Range<UnitValue>(new UnitValue(lower' Unit.Pixels)' new UnitValue(upper' Unit.Pixels));                  }                  else if (Orientation == AxisOrientation.Y)                  {                      return new Range<UnitValue>(new UnitValue(maximumLength - upper' Unit.Pixels)' new UnitValue(maximumLength - lower' Unit.Pixels));                  }              }              else              {                  double startingAngle = 270.0;                  double angleOffset = 360 / this.Categories.Count;                  double halfAngleOffset = angleOffset / 2.0;                  int categoryIndex = this.Categories.IndexOf(category);                  double angle = startingAngle + (categoryIndex * angleOffset);                    return new Range<UnitValue>(new UnitValue(angle - halfAngleOffset' Unit.Degrees)' new UnitValue(angle + halfAngleOffset' Unit.Degrees));              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinateRange,The following statement contains a magic number: if (Orientation == AxisOrientation.X || Orientation == AxisOrientation.Y)              {                  double maximumLength = Math.Max(ActualLength - 1' 0);                  double lower = (index * maximumLength) / Categories.Count;                  double upper = ((index + 1) * maximumLength) / Categories.Count;                    if (Orientation == AxisOrientation.X)                  {                      return new Range<UnitValue>(new UnitValue(lower' Unit.Pixels)' new UnitValue(upper' Unit.Pixels));                  }                  else if (Orientation == AxisOrientation.Y)                  {                      return new Range<UnitValue>(new UnitValue(maximumLength - upper' Unit.Pixels)' new UnitValue(maximumLength - lower' Unit.Pixels));                  }              }              else              {                  double startingAngle = 270.0;                  double angleOffset = 360 / this.Categories.Count;                  double halfAngleOffset = angleOffset / 2.0;                  int categoryIndex = this.Categories.IndexOf(category);                  double angle = startingAngle + (categoryIndex * angleOffset);                    return new Range<UnitValue>(new UnitValue(angle - halfAngleOffset' Unit.Degrees)' new UnitValue(angle + halfAngleOffset' Unit.Degrees));              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,GetPlotAreaCoordinate,The following statement contains a magic number: if (range.HasData)              {                  double minimum = range.Minimum.Value;                  double maximum = range.Maximum.Value;                  return new UnitValue(((maximum - minimum) / 2.0) + minimum' range.Minimum.Unit);              }              else              {                  return UnitValue.NaN();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: try              {                  OrientedPanel.Children.Clear();                  this.GridLineCoordinatesToDisplay.Clear();                    if (this.Categories.Count > 0)                  {                      double maximumLength = Math.Max(GetLength(availableSize) - 1' 0);                        Action<double> placeTickMarkAt =                          (pos) =>                          {                              Line tickMark = _majorTickMarkPool.Next();                              OrientedPanel.SetCenterCoordinate(tickMark' pos);                              OrientedPanel.SetPriority(tickMark' 0);                              this.GridLineCoordinatesToDisplay.Add(new UnitValue(pos' Unit.Pixels));                              OrientedPanel.Children.Add(tickMark);                          };                        int index = 0;                      int priority = 0;                        foreach (object category in Categories)                      {                          Control axisLabel = CreateAndPrepareAxisLabel(category);                          double lower = ((index * maximumLength) / Categories.Count) + 0.5;                          double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;                          placeTickMarkAt(lower);                          OrientedPanel.SetCenterCoordinate(axisLabel' (lower + upper) / 2);                          OrientedPanel.SetPriority(axisLabel' priority + 1);                          OrientedPanel.Children.Add(axisLabel);                          index++;                          priority = (priority + 1) % 2;                      }                      placeTickMarkAt(maximumLength + 0.5);                  }              }              finally              {                  _labelPool.Done();                  _majorTickMarkPool.Done();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: try              {                  OrientedPanel.Children.Clear();                  this.GridLineCoordinatesToDisplay.Clear();                    if (this.Categories.Count > 0)                  {                      double maximumLength = Math.Max(GetLength(availableSize) - 1' 0);                        Action<double> placeTickMarkAt =                          (pos) =>                          {                              Line tickMark = _majorTickMarkPool.Next();                              OrientedPanel.SetCenterCoordinate(tickMark' pos);                              OrientedPanel.SetPriority(tickMark' 0);                              this.GridLineCoordinatesToDisplay.Add(new UnitValue(pos' Unit.Pixels));                              OrientedPanel.Children.Add(tickMark);                          };                        int index = 0;                      int priority = 0;                        foreach (object category in Categories)                      {                          Control axisLabel = CreateAndPrepareAxisLabel(category);                          double lower = ((index * maximumLength) / Categories.Count) + 0.5;                          double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;                          placeTickMarkAt(lower);                          OrientedPanel.SetCenterCoordinate(axisLabel' (lower + upper) / 2);                          OrientedPanel.SetPriority(axisLabel' priority + 1);                          OrientedPanel.Children.Add(axisLabel);                          index++;                          priority = (priority + 1) % 2;                      }                      placeTickMarkAt(maximumLength + 0.5);                  }              }              finally              {                  _labelPool.Done();                  _majorTickMarkPool.Done();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: try              {                  OrientedPanel.Children.Clear();                  this.GridLineCoordinatesToDisplay.Clear();                    if (this.Categories.Count > 0)                  {                      double maximumLength = Math.Max(GetLength(availableSize) - 1' 0);                        Action<double> placeTickMarkAt =                          (pos) =>                          {                              Line tickMark = _majorTickMarkPool.Next();                              OrientedPanel.SetCenterCoordinate(tickMark' pos);                              OrientedPanel.SetPriority(tickMark' 0);                              this.GridLineCoordinatesToDisplay.Add(new UnitValue(pos' Unit.Pixels));                              OrientedPanel.Children.Add(tickMark);                          };                        int index = 0;                      int priority = 0;                        foreach (object category in Categories)                      {                          Control axisLabel = CreateAndPrepareAxisLabel(category);                          double lower = ((index * maximumLength) / Categories.Count) + 0.5;                          double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;                          placeTickMarkAt(lower);                          OrientedPanel.SetCenterCoordinate(axisLabel' (lower + upper) / 2);                          OrientedPanel.SetPriority(axisLabel' priority + 1);                          OrientedPanel.Children.Add(axisLabel);                          index++;                          priority = (priority + 1) % 2;                      }                      placeTickMarkAt(maximumLength + 0.5);                  }              }              finally              {                  _labelPool.Done();                  _majorTickMarkPool.Done();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: try              {                  OrientedPanel.Children.Clear();                  this.GridLineCoordinatesToDisplay.Clear();                    if (this.Categories.Count > 0)                  {                      double maximumLength = Math.Max(GetLength(availableSize) - 1' 0);                        Action<double> placeTickMarkAt =                          (pos) =>                          {                              Line tickMark = _majorTickMarkPool.Next();                              OrientedPanel.SetCenterCoordinate(tickMark' pos);                              OrientedPanel.SetPriority(tickMark' 0);                              this.GridLineCoordinatesToDisplay.Add(new UnitValue(pos' Unit.Pixels));                              OrientedPanel.Children.Add(tickMark);                          };                        int index = 0;                      int priority = 0;                        foreach (object category in Categories)                      {                          Control axisLabel = CreateAndPrepareAxisLabel(category);                          double lower = ((index * maximumLength) / Categories.Count) + 0.5;                          double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;                          placeTickMarkAt(lower);                          OrientedPanel.SetCenterCoordinate(axisLabel' (lower + upper) / 2);                          OrientedPanel.SetPriority(axisLabel' priority + 1);                          OrientedPanel.Children.Add(axisLabel);                          index++;                          priority = (priority + 1) % 2;                      }                      placeTickMarkAt(maximumLength + 0.5);                  }              }              finally              {                  _labelPool.Done();                  _majorTickMarkPool.Done();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,CategoryAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\CategoryAxis.cs,RenderOriented,The following statement contains a magic number: try              {                  OrientedPanel.Children.Clear();                  this.GridLineCoordinatesToDisplay.Clear();                    if (this.Categories.Count > 0)                  {                      double maximumLength = Math.Max(GetLength(availableSize) - 1' 0);                        Action<double> placeTickMarkAt =                          (pos) =>                          {                              Line tickMark = _majorTickMarkPool.Next();                              OrientedPanel.SetCenterCoordinate(tickMark' pos);                              OrientedPanel.SetPriority(tickMark' 0);                              this.GridLineCoordinatesToDisplay.Add(new UnitValue(pos' Unit.Pixels));                              OrientedPanel.Children.Add(tickMark);                          };                        int index = 0;                      int priority = 0;                        foreach (object category in Categories)                      {                          Control axisLabel = CreateAndPrepareAxisLabel(category);                          double lower = ((index * maximumLength) / Categories.Count) + 0.5;                          double upper = (((index + 1) * maximumLength) / Categories.Count) + 0.5;                          placeTickMarkAt(lower);                          OrientedPanel.SetCenterCoordinate(axisLabel' (lower + upper) / 2);                          OrientedPanel.SetPriority(axisLabel' priority + 1);                          OrientedPanel.Children.Add(axisLabel);                          index++;                          priority = (priority + 1) % 2;                      }                      placeTickMarkAt(maximumLength + 0.5);                  }              }              finally              {                  _labelPool.Done();                  _majorTickMarkPool.Done();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Days)              {                  span = TimeSpan.FromDays(interval);              }              else if (intervalType == DateTimeIntervalType.Hours)              {                  span = TimeSpan.FromHours(interval);              }              else if (intervalType == DateTimeIntervalType.Milliseconds)              {                  span = TimeSpan.FromMilliseconds(interval);              }              else if (intervalType == DateTimeIntervalType.Seconds)              {                  span = TimeSpan.FromSeconds(interval);              }              else if (intervalType == DateTimeIntervalType.Minutes)              {                  span = TimeSpan.FromMinutes(interval);              }              else if (intervalType == DateTimeIntervalType.Weeks)              {                  span = TimeSpan.FromDays(7.0 * interval);              }              else if (intervalType == DateTimeIntervalType.Months)              {                  // Special case handling when current date point                  // to the last day of the month                  bool lastMonthDay = false;                  if (date.Day == DateTime.DaysInMonth(date.Year' date.Month))                  {                      lastMonthDay = true;                  }                    // Add specified amount of months                  date = date.AddMonths((int)Math.Floor(interval));                  span = TimeSpan.FromDays(30.0 * (interval - Math.Floor(interval)));                    // Check if last month of the day was used                  if (lastMonthDay && span.Ticks == 0)                  {                      // Make sure the last day of the month is selected                      int daysInMobth = DateTime.DaysInMonth(date.Year' date.Month);                      date = date.AddDays(daysInMobth - date.Day);                  }              }              else if (intervalType == DateTimeIntervalType.Years)              {                  date = date.AddYears((int)Math.Floor(interval));                  span = TimeSpan.FromDays(365.0 * (interval - Math.Floor(interval)));              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Days)              {                  span = TimeSpan.FromDays(interval);              }              else if (intervalType == DateTimeIntervalType.Hours)              {                  span = TimeSpan.FromHours(interval);              }              else if (intervalType == DateTimeIntervalType.Milliseconds)              {                  span = TimeSpan.FromMilliseconds(interval);              }              else if (intervalType == DateTimeIntervalType.Seconds)              {                  span = TimeSpan.FromSeconds(interval);              }              else if (intervalType == DateTimeIntervalType.Minutes)              {                  span = TimeSpan.FromMinutes(interval);              }              else if (intervalType == DateTimeIntervalType.Weeks)              {                  span = TimeSpan.FromDays(7.0 * interval);              }              else if (intervalType == DateTimeIntervalType.Months)              {                  // Special case handling when current date point                  // to the last day of the month                  bool lastMonthDay = false;                  if (date.Day == DateTime.DaysInMonth(date.Year' date.Month))                  {                      lastMonthDay = true;                  }                    // Add specified amount of months                  date = date.AddMonths((int)Math.Floor(interval));                  span = TimeSpan.FromDays(30.0 * (interval - Math.Floor(interval)));                    // Check if last month of the day was used                  if (lastMonthDay && span.Ticks == 0)                  {                      // Make sure the last day of the month is selected                      int daysInMobth = DateTime.DaysInMonth(date.Year' date.Month);                      date = date.AddDays(daysInMobth - date.Day);                  }              }              else if (intervalType == DateTimeIntervalType.Years)              {                  date = date.AddYears((int)Math.Floor(interval));                  span = TimeSpan.FromDays(365.0 * (interval - Math.Floor(interval)));              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,IncrementDateTime,The following statement contains a magic number: if (intervalType == DateTimeIntervalType.Days)              {                  span = TimeSpan.FromDays(interval);              }              else if (intervalType == DateTimeIntervalType.Hours)              {                  span = TimeSpan.FromHours(interval);              }              else if (intervalType == DateTimeIntervalType.Milliseconds)              {                  span = TimeSpan.FromMilliseconds(interval);              }              else if (intervalType == DateTimeIntervalType.Seconds)              {                  span = TimeSpan.FromSeconds(interval);              }              else if (intervalType == DateTimeIntervalType.Minutes)              {                  span = TimeSpan.FromMinutes(interval);              }              else if (intervalType == DateTimeIntervalType.Weeks)              {                  span = TimeSpan.FromDays(7.0 * interval);              }              else if (intervalType == DateTimeIntervalType.Months)              {                  // Special case handling when current date point                  // to the last day of the month                  bool lastMonthDay = false;                  if (date.Day == DateTime.DaysInMonth(date.Year' date.Month))                  {                      lastMonthDay = true;                  }                    // Add specified amount of months                  date = date.AddMonths((int)Math.Floor(interval));                  span = TimeSpan.FromDays(30.0 * (interval - Math.Floor(interval)));                    // Check if last month of the day was used                  if (lastMonthDay && span.Ticks == 0)                  {                      // Make sure the last day of the month is selected                      int daysInMobth = DateTime.DaysInMonth(date.Year' date.Month);                      date = date.AddDays(daysInMobth - date.Day);                  }              }              else if (intervalType == DateTimeIntervalType.Years)              {                  date = date.AddYears((int)Math.Floor(interval));                  span = TimeSpan.FromDays(365.0 * (interval - Math.Floor(interval)));              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,AlignIntervalStart,The following statement contains a magic number: if (intervalSize > 0.0 && intervalSize != 1.0)              {                  if (type == DateTimeIntervalType.Months && intervalSize <= 12.0 && intervalSize > 1)                  {                      // Make sure that the beginning is aligned correctly for cases                      // like quarters and half years                      DateTime resultDate = newStartDate;                      DateTime sizeAdjustedDate = new DateTime(newStartDate.Year' 1' 1' 0' 0' 0);                      while (sizeAdjustedDate < newStartDate)                      {                          resultDate = sizeAdjustedDate;                          sizeAdjustedDate = sizeAdjustedDate.AddMonths((int)intervalSize);                      }                        newStartDate = resultDate;                      return newStartDate;                  }              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: double maxIntervals = Orientation == AxisOrientation.X ? MaximumAxisIntervalsPer200Pixels * 0.8 : MaximumAxisIntervalsPer200Pixels;
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: double rangeMultiplicator = GetLength(availableSize) / (200 * 10 / maxIntervals);
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: double rangeMultiplicator = GetLength(availableSize) / (200 * 10 / maxIntervals);
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (inter <= 1.0)              {                  // Milli Seconds                  double milliSeconds = timeSpan.TotalMilliseconds;                  if (milliSeconds <= 10)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 1;                  }                  if (milliSeconds <= 50)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 4;                  }                  if (milliSeconds <= 200)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 20;                  }                  if (milliSeconds <= 500)                  {                      type = DateTimeIntervalType.Milliseconds;                      return 50;                  }                    // Seconds                  double seconds = timeSpan.TotalSeconds;                    if (seconds <= 7)                  {                      type = DateTimeIntervalType.Seconds;                      return 1;                  }                  else if (seconds <= 15)                  {                      type = DateTimeIntervalType.Seconds;                      return 2;                  }                  else if (seconds <= 30)                  {                      type = DateTimeIntervalType.Seconds;                      return 5;                  }                  else if (seconds <= 60)                  {                      type = DateTimeIntervalType.Seconds;                      return 10;                  }              }              else if (inter <= 2.0)              {                  // For Range less than 120 seconds interval is 10 sec                  type = DateTimeIntervalType.Seconds;                  return 20;              }              else if (inter <= 3.0)              {                  // For Range less than 180 seconds interval is 30 sec                  type = DateTimeIntervalType.Seconds;                  return 30;              }              else if (inter <= 10)              {                  // For Range less than 10 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 1;              }              else if (inter <= 20)              {                  // For Range less than 20 minutes interval is 1 min                  type = DateTimeIntervalType.Minutes;                  return 2;              }              else if (inter <= 60)              {                  // For Range less than 60 minutes interval is 5 min                  type = DateTimeIntervalType.Minutes;                  return 5;              }              else if (inter <= 120)              {                  // For Range less than 120 minutes interval is 10 min                  type = DateTimeIntervalType.Minutes;                  return 10;              }              else if (inter <= 180)              {                  // For Range less than 180 minutes interval is 30 min                  type = DateTimeIntervalType.Minutes;                  return 30;              }              else if (inter <= 60 * 12)              {                  // For Range less than 12 hours interval is 1 hour                  type = DateTimeIntervalType.Hours;                  return 1;              }              else if (inter <= 60 * 24)              {                  // For Range less than 24 hours interval is 4 hour                  type = DateTimeIntervalType.Hours;                  return 4;              }              else if (inter <= 60 * 24 * 2)              {                  // For Range less than 2 days interval is 6 hour                  type = DateTimeIntervalType.Hours;                  return 6;              }              else if (inter <= 60 * 24 * 3)              {                  // For Range less than 3 days interval is 12 hour                  type = DateTimeIntervalType.Hours;                  return 12;              }              else if (inter <= 60 * 24 * 10)              {                  // For Range less than 10 days interval is 1 day                  type = DateTimeIntervalType.Days;                  return 1;              }              else if (inter <= 60 * 24 * 20)              {                  // For Range less than 20 days interval is 2 day                  type = DateTimeIntervalType.Days;                  return 2;              }              else if (inter <= 60 * 24 * 30)              {                  // For Range less than 30 days interval is 3 day                  type = DateTimeIntervalType.Days;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 2)              {                  // For Range less than 2 months interval is 1 week                  type = DateTimeIntervalType.Weeks;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 5)              {                  // For Range less than 5 months interval is 2weeks                  type = DateTimeIntervalType.Weeks;                  return 2;              }              else if (inter <= 60 * 24 * 30.5 * 12)              {                  // For Range less than 12 months interval is 1 month                  type = DateTimeIntervalType.Months;                  return 1;              }              else if (inter <= 60 * 24 * 30.5 * 24)              {                  // For Range less than 24 months interval is 3 month                  type = DateTimeIntervalType.Months;                  return 3;              }              else if (inter <= 60 * 24 * 30.5 * 48)              {                  // For Range less than 48 months interval is 6 months                   type = DateTimeIntervalType.Months;                  return 6;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: double years = inter / 60 / 24 / 365;
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: double years = inter / 60 / 24 / 365;
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: double years = inter / 60 / 24 / 365;
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (years < 5)              {                  return 1;              }              else if (years < 10)              {                  return 2;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (years < 5)              {                  return 1;              }              else if (years < 10)              {                  return 2;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: if (years < 5)              {                  return 1;              }              else if (years < 10)              {                  return 2;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,CalculateDateTimeInterval,The following statement contains a magic number: return Math.Floor(years / 5);
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The following statement contains a magic number: if (!overriddenActualRange.HasData)              {                  int year = DateTime.Now.Year;                  return new Range<IComparable>(new DateTime(year' 1' 1)' new DateTime(year + 1' 1' 1));              }              else if (ValueHelper.Compare(overriddenActualRange.Minimum' overriddenActualRange.Maximum) == 0)              {                  DateTime minimum = ValueHelper.ToDateTime(overriddenActualRange.Minimum);                  DateTime midpoint = ((DateTime.MinValue == minimum) ? DateTime.Now : minimum).Date;                  return new Range<IComparable>(midpoint.AddMonths(-6)' midpoint.AddMonths(6));              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The following statement contains a magic number: if (!overriddenActualRange.HasData)              {                  int year = DateTime.Now.Year;                  return new Range<IComparable>(new DateTime(year' 1' 1)' new DateTime(year + 1' 1' 1));              }              else if (ValueHelper.Compare(overriddenActualRange.Minimum' overriddenActualRange.Maximum) == 0)              {                  DateTime minimum = ValueHelper.ToDateTime(overriddenActualRange.Minimum);                  DateTime midpoint = ((DateTime.MinValue == minimum) ? DateTime.Now : minimum).Date;                  return new Range<IComparable>(midpoint.AddMonths(-6)' midpoint.AddMonths(6));              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The following statement contains a magic number: if (range.HasData && this.ActualLength > 1.0)              {                  IList<ValueMarginCoordinateAndOverlap> valueMargins = new List<ValueMarginCoordinateAndOverlap>();                  foreach (ValueMargin valueMargin in                      this.RegisteredListeners                          .OfType<IValueMarginProvider>()                          .SelectMany(provider => provider.GetValueMargins(this)))                  {                      valueMargins.Add(                          new ValueMarginCoordinateAndOverlap                          {                              ValueMargin = valueMargin'                          });                  }                    if (valueMargins.Count > 0)                  {                      double maximumPixelMarginLength =                          valueMargins                          .Select(valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin)                          .MaxOrNullable().Value;                        // Requested margin is larger than the axis so give up                      // trying to find a range that will fit it.                      if (maximumPixelMarginLength > this.ActualLength)                      {                          return range;                      }                        Range<DateTime> currentRange = range.ToDateTimeRange();                        // Ensure range is not empty.                      if (currentRange.Minimum == currentRange.Maximum)                      {                          int year = DateTime.Now.Year;                          currentRange = new Range<DateTime>(new DateTime(year' 1' 1)' new DateTime(year + 1' 1' 1));                      }                        // priming the loop                      double actualLength = this.ActualLength;                      ValueMarginCoordinateAndOverlap maxLeftOverlapValueMargin;                      ValueMarginCoordinateAndOverlap maxRightOverlapValueMargin;                      UpdateValueMargins(valueMargins' currentRange.ToComparableRange());                      GetMaxLeftAndRightOverlap(valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);                        while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0)                      {                          long unitOverPixels = currentRange.GetLength().Value.Ticks / ((long) actualLength);                          DateTime newMinimum = new DateTime(currentRange.Minimum.Ticks - (long)((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels));                          DateTime newMaximum = new DateTime(currentRange.Maximum.Ticks + (long)((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels));                            currentRange = new Range<DateTime>(newMinimum' newMaximum);                          UpdateValueMargins(valueMargins' currentRange.ToComparableRange());                          GetMaxLeftAndRightOverlap(valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);                      }                        return currentRange.ToComparableRange();                  }              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,OverrideDataRange,The following statement contains a magic number: if (range.HasData && this.ActualLength > 1.0)              {                  IList<ValueMarginCoordinateAndOverlap> valueMargins = new List<ValueMarginCoordinateAndOverlap>();                  foreach (ValueMargin valueMargin in                      this.RegisteredListeners                          .OfType<IValueMarginProvider>()                          .SelectMany(provider => provider.GetValueMargins(this)))                  {                      valueMargins.Add(                          new ValueMarginCoordinateAndOverlap                          {                              ValueMargin = valueMargin'                          });                  }                    if (valueMargins.Count > 0)                  {                      double maximumPixelMarginLength =                          valueMargins                          .Select(valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin)                          .MaxOrNullable().Value;                        // Requested margin is larger than the axis so give up                      // trying to find a range that will fit it.                      if (maximumPixelMarginLength > this.ActualLength)                      {                          return range;                      }                        Range<DateTime> currentRange = range.ToDateTimeRange();                        // Ensure range is not empty.                      if (currentRange.Minimum == currentRange.Maximum)                      {                          int year = DateTime.Now.Year;                          currentRange = new Range<DateTime>(new DateTime(year' 1' 1)' new DateTime(year + 1' 1' 1));                      }                        // priming the loop                      double actualLength = this.ActualLength;                      ValueMarginCoordinateAndOverlap maxLeftOverlapValueMargin;                      ValueMarginCoordinateAndOverlap maxRightOverlapValueMargin;                      UpdateValueMargins(valueMargins' currentRange.ToComparableRange());                      GetMaxLeftAndRightOverlap(valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);                        while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0)                      {                          long unitOverPixels = currentRange.GetLength().Value.Ticks / ((long) actualLength);                          DateTime newMinimum = new DateTime(currentRange.Minimum.Ticks - (long)((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels));                          DateTime newMaximum = new DateTime(currentRange.Maximum.Ticks + (long)((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels));                            currentRange = new Range<DateTime>(newMinimum' newMaximum);                          UpdateValueMargins(valueMargins' currentRange.ToComparableRange());                          GetMaxLeftAndRightOverlap(valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);                      }                        return currentRange.ToComparableRange();                  }              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: if (this.Orientation == AxisOrientation.Y)              {                  line.Y1 = 0.5;                  line.Y2 = 0.5;              }              else if (this.Orientation == AxisOrientation.X)              {                  line.X1 = 0.5;                  line.X2 = 0.5;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: if (this.Orientation == AxisOrientation.Y)              {                  line.Y1 = 0.5;                  line.Y2 = 0.5;              }              else if (this.Orientation == AxisOrientation.X)              {                  line.X1 = 0.5;                  line.X2 = 0.5;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: if (this.Orientation == AxisOrientation.Y)              {                  line.Y1 = 0.5;                  line.Y2 = 0.5;              }              else if (this.Orientation == AxisOrientation.X)              {                  line.X1 = 0.5;                  line.X2 = 0.5;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DisplayAxis.cs,CreateTickMark,The following statement contains a magic number: if (this.Orientation == AxisOrientation.Y)              {                  line.Y1 = 0.5;                  line.Y2 = 0.5;              }              else if (this.Orientation == AxisOrientation.X)              {                  line.X1 = 0.5;                  line.X2 = 0.5;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DisplayAxis.cs,ArrangeAxisGrid,The following statement contains a magic number: if (this.AxisGrid != null)              {                  this.AxisGrid.ColumnDefinitions.Clear();                  this.AxisGrid.RowDefinitions.Clear();                  this.AxisGrid.Children.Clear();                    if (this.Orientation == AxisOrientation.Y)                  {                      this.OrientedPanel.Orientation = System.Windows.Controls.Orientation.Vertical;                      this.OrientedPanel.IsReversed = true;                        if (this.Location == AxisLocation.Left || this.Location == AxisLocation.Right)                      {                          this.TitleLayoutTransformControl.Transform = new RotateTransform { Angle = -90.0 };                            this.OrientedPanel.IsInverted = !(Location == AxisLocation.Right);                          this.AxisGrid.ColumnDefinitions.Add(new ColumnDefinition());                          this.AxisGrid.RowDefinitions.Add(new RowDefinition());                            int column = 0;                          if (this.AxisTitle != null)                          {                              this.AxisGrid.ColumnDefinitions.Add(new ColumnDefinition());                              Grid.SetRow(this.TitleLayoutTransformControl' 0);                              Grid.SetColumn(this.TitleLayoutTransformControl' 0);                              column++;                          }                          Grid.SetRow(this.OrientedPanel' 0);                          Grid.SetColumn(this.OrientedPanel' column);                            this.AxisGrid.Children.Add(this.TitleLayoutTransformControl);                          this.AxisGrid.Children.Add(this.OrientedPanel);                            if (this.Location == AxisLocation.Right)                          {                              AxisGrid.Mirror(System.Windows.Controls.Orientation.Vertical);                              this.TitleLayoutTransformControl.Transform = new RotateTransform { Angle = 90 };                          }                      }                  }                  else if (this.Orientation == AxisOrientation.X)                  {                      this.OrientedPanel.Orientation = System.Windows.Controls.Orientation.Horizontal;                      this.OrientedPanel.IsReversed = false;                        if (this.Location == AxisLocation.Top || this.Location == AxisLocation.Bottom)                      {                          this.OrientedPanel.IsInverted = (Location == AxisLocation.Top);                          this.TitleLayoutTransformControl.Transform = new RotateTransform { Angle = 0 };                            this.AxisGrid.ColumnDefinitions.Add(new ColumnDefinition());                          this.AxisGrid.RowDefinitions.Add(new RowDefinition());                            if (this.AxisTitle != null)                          {                              this.AxisGrid.RowDefinitions.Add(new RowDefinition());                              Grid.SetColumn(this.TitleLayoutTransformControl' 0);                              Grid.SetRow(this.TitleLayoutTransformControl' 1);                          }                            Grid.SetColumn(this.OrientedPanel' 0);                          Grid.SetRow(this.OrientedPanel' 0);                            this.AxisGrid.Children.Add(this.TitleLayoutTransformControl);                          this.AxisGrid.Children.Add(this.OrientedPanel);                            if (this.Location == AxisLocation.Top)                          {                              AxisGrid.Mirror(System.Windows.Controls.Orientation.Horizontal);                          }                      }                  }                    Invalidate();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DisplayAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DisplayAxis.cs,ArrangeAxisGrid,The following statement contains a magic number: if (this.AxisGrid != null)              {                  this.AxisGrid.ColumnDefinitions.Clear();                  this.AxisGrid.RowDefinitions.Clear();                  this.AxisGrid.Children.Clear();                    if (this.Orientation == AxisOrientation.Y)                  {                      this.OrientedPanel.Orientation = System.Windows.Controls.Orientation.Vertical;                      this.OrientedPanel.IsReversed = true;                        if (this.Location == AxisLocation.Left || this.Location == AxisLocation.Right)                      {                          this.TitleLayoutTransformControl.Transform = new RotateTransform { Angle = -90.0 };                            this.OrientedPanel.IsInverted = !(Location == AxisLocation.Right);                          this.AxisGrid.ColumnDefinitions.Add(new ColumnDefinition());                          this.AxisGrid.RowDefinitions.Add(new RowDefinition());                            int column = 0;                          if (this.AxisTitle != null)                          {                              this.AxisGrid.ColumnDefinitions.Add(new ColumnDefinition());                              Grid.SetRow(this.TitleLayoutTransformControl' 0);                              Grid.SetColumn(this.TitleLayoutTransformControl' 0);                              column++;                          }                          Grid.SetRow(this.OrientedPanel' 0);                          Grid.SetColumn(this.OrientedPanel' column);                            this.AxisGrid.Children.Add(this.TitleLayoutTransformControl);                          this.AxisGrid.Children.Add(this.OrientedPanel);                            if (this.Location == AxisLocation.Right)                          {                              AxisGrid.Mirror(System.Windows.Controls.Orientation.Vertical);                              this.TitleLayoutTransformControl.Transform = new RotateTransform { Angle = 90 };                          }                      }                  }                  else if (this.Orientation == AxisOrientation.X)                  {                      this.OrientedPanel.Orientation = System.Windows.Controls.Orientation.Horizontal;                      this.OrientedPanel.IsReversed = false;                        if (this.Location == AxisLocation.Top || this.Location == AxisLocation.Bottom)                      {                          this.OrientedPanel.IsInverted = (Location == AxisLocation.Top);                          this.TitleLayoutTransformControl.Transform = new RotateTransform { Angle = 0 };                            this.AxisGrid.ColumnDefinitions.Add(new ColumnDefinition());                          this.AxisGrid.RowDefinitions.Add(new RowDefinition());                            if (this.AxisTitle != null)                          {                              this.AxisGrid.RowDefinitions.Add(new RowDefinition());                              Grid.SetColumn(this.TitleLayoutTransformControl' 0);                              Grid.SetRow(this.TitleLayoutTransformControl' 1);                          }                            Grid.SetColumn(this.OrientedPanel' 0);                          Grid.SetRow(this.OrientedPanel' 0);                            this.AxisGrid.Children.Add(this.TitleLayoutTransformControl);                          this.AxisGrid.Children.Add(this.OrientedPanel);                            if (this.Location == AxisLocation.Top)                          {                              AxisGrid.Mirror(System.Windows.Controls.Orientation.Horizontal);                          }                      }                  }                    Invalidate();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: double adjustedMaximumIntervalsPer200Pixels = (Orientation == AxisOrientation.X ? 0.8 : 1.0) * MaximumAxisIntervalsPer200Pixels;
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: double maximumIntervalCount = Math.Max(GetLength(availableSize) * adjustedMaximumIntervalsPer200Pixels / 200.0' 1.0);
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: double minimumIdealInterval = Math.Pow(10' Math.Floor(Math.Log10(bestInterval)));
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: foreach (int idealMultiplier in new int[] { 10' 5' 2' 1 })              {                  // Check the current ideal multiplier against the maximum count                  double currentIdealInterval = minimumIdealInterval * idealMultiplier;                  if (maximumIntervalCount < (range / currentIdealInterval))                  {                      // Went too far' break out                      break;                  }                  // Update the best interval                  bestInterval = currentIdealInterval;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: foreach (int idealMultiplier in new int[] { 10' 5' 2' 1 })              {                  // Check the current ideal multiplier against the maximum count                  double currentIdealInterval = minimumIdealInterval * idealMultiplier;                  if (maximumIntervalCount < (range / currentIdealInterval))                  {                      // Went too far' break out                      break;                  }                  // Update the best interval                  bestInterval = currentIdealInterval;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,CalculateActualInterval,The following statement contains a magic number: foreach (int idealMultiplier in new int[] { 10' 5' 2' 1 })              {                  // Check the current ideal multiplier against the maximum count                  double currentIdealInterval = minimumIdealInterval * idealMultiplier;                  if (maximumIntervalCount < (range / currentIdealInterval))                  {                      // Went too far' break out                      break;                  }                  // Update the best interval                  bestInterval = currentIdealInterval;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,LengthToRange,The following statement contains a magic number: double halfLength = length / 2.0;
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,The following statement contains a magic number: if (range.HasData && this.ActualLength > 1.0)              {                  bool isDataAnchoredToOrigin = false;                  IList<ValueMarginCoordinateAndOverlap> valueMargins = new List<ValueMarginCoordinateAndOverlap>();                  foreach (IValueMarginProvider valueMarginProvider in this.RegisteredListeners.OfType<IValueMarginProvider>())                  {                      foreach (ValueMargin valueMargin in valueMarginProvider.GetValueMargins(this))                      {                          IAnchoredToOrigin dataAnchoredToOrigin = valueMarginProvider as IAnchoredToOrigin;                          isDataAnchoredToOrigin = (dataAnchoredToOrigin != null && dataAnchoredToOrigin.AnchoredAxis == this);                                                    valueMargins.Add(                          new ValueMarginCoordinateAndOverlap                          {                              ValueMargin = valueMargin'                          });                      }                  }                    if (valueMargins.Count > 0)                  {                      double maximumPixelMarginLength =                          valueMargins                          .Select(valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin)                          .MaxOrNullable().Value;                        // Requested margin is larger than the axis so give up                      // trying to find a range that will fit it.                      if (maximumPixelMarginLength > this.ActualLength)                      {                          return range;                      }                        Range<double> originalRange = range.ToDoubleRange();                      Range<double> currentRange = range.ToDoubleRange();                        // Ensure range is not empty.                      if (currentRange.Minimum == currentRange.Maximum)                      {                          currentRange = new Range<double>(currentRange.Maximum - 1' currentRange.Maximum + 1);                      }                        // priming the loop                      double actualLength = this.ActualLength;                      ValueMarginCoordinateAndOverlap maxLeftOverlapValueMargin;                      ValueMarginCoordinateAndOverlap maxRightOverlapValueMargin;                      UpdateValueMargins(valueMargins' currentRange.ToComparableRange());                      GetMaxLeftAndRightOverlap(valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);                        while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0)                      {                          double unitOverPixels = currentRange.GetLength().Value / actualLength;                          double newMinimum = currentRange.Minimum - ((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels);                          double newMaximum = currentRange.Maximum + ((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels);                            currentRange = new Range<double>(newMinimum' newMaximum);                          UpdateValueMargins(valueMargins' currentRange.ToComparableRange());                          GetMaxLeftAndRightOverlap(valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);                      }                        if (isDataAnchoredToOrigin)                      {                          if (originalRange.Minimum >= 0 && currentRange.Minimum < 0)                          {                              currentRange = new Range<double>(0' currentRange.Maximum);                          }                          else if (originalRange.Maximum <= 0 && currentRange.Maximum > 0)                          {                              currentRange = new Range<double>(currentRange.Minimum' 0);                          }                      }                        return currentRange.ToComparableRange();                  }              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,LinearAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LinearAxis.cs,OverrideDataRange,The following statement contains a magic number: if (range.HasData && this.ActualLength > 1.0)              {                  bool isDataAnchoredToOrigin = false;                  IList<ValueMarginCoordinateAndOverlap> valueMargins = new List<ValueMarginCoordinateAndOverlap>();                  foreach (IValueMarginProvider valueMarginProvider in this.RegisteredListeners.OfType<IValueMarginProvider>())                  {                      foreach (ValueMargin valueMargin in valueMarginProvider.GetValueMargins(this))                      {                          IAnchoredToOrigin dataAnchoredToOrigin = valueMarginProvider as IAnchoredToOrigin;                          isDataAnchoredToOrigin = (dataAnchoredToOrigin != null && dataAnchoredToOrigin.AnchoredAxis == this);                                                    valueMargins.Add(                          new ValueMarginCoordinateAndOverlap                          {                              ValueMargin = valueMargin'                          });                      }                  }                    if (valueMargins.Count > 0)                  {                      double maximumPixelMarginLength =                          valueMargins                          .Select(valueMargin => valueMargin.ValueMargin.LowMargin + valueMargin.ValueMargin.HighMargin)                          .MaxOrNullable().Value;                        // Requested margin is larger than the axis so give up                      // trying to find a range that will fit it.                      if (maximumPixelMarginLength > this.ActualLength)                      {                          return range;                      }                        Range<double> originalRange = range.ToDoubleRange();                      Range<double> currentRange = range.ToDoubleRange();                        // Ensure range is not empty.                      if (currentRange.Minimum == currentRange.Maximum)                      {                          currentRange = new Range<double>(currentRange.Maximum - 1' currentRange.Maximum + 1);                      }                        // priming the loop                      double actualLength = this.ActualLength;                      ValueMarginCoordinateAndOverlap maxLeftOverlapValueMargin;                      ValueMarginCoordinateAndOverlap maxRightOverlapValueMargin;                      UpdateValueMargins(valueMargins' currentRange.ToComparableRange());                      GetMaxLeftAndRightOverlap(valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);                        while (maxLeftOverlapValueMargin.LeftOverlap > 0 || maxRightOverlapValueMargin.RightOverlap > 0)                      {                          double unitOverPixels = currentRange.GetLength().Value / actualLength;                          double newMinimum = currentRange.Minimum - ((maxLeftOverlapValueMargin.LeftOverlap + 0.5) * unitOverPixels);                          double newMaximum = currentRange.Maximum + ((maxRightOverlapValueMargin.RightOverlap + 0.5) * unitOverPixels);                            currentRange = new Range<double>(newMinimum' newMaximum);                          UpdateValueMargins(valueMargins' currentRange.ToComparableRange());                          GetMaxLeftAndRightOverlap(valueMargins' out maxLeftOverlapValueMargin' out maxRightOverlapValueMargin);                      }                        if (isDataAnchoredToOrigin)                      {                          if (originalRange.Minimum >= 0 && currentRange.Minimum < 0)                          {                              currentRange = new Range<double>(0' currentRange.Maximum);                          }                          else if (originalRange.Maximum <= 0 && currentRange.Maximum > 0)                          {                              currentRange = new Range<double>(currentRange.Minimum' 0);                          }                      }                        return currentRange.ToComparableRange();                  }              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,LogarithmicAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LogarithmicAxis.cs,LogarithmicAxis,The following statement contains a magic number: ActualRange = new Range<IComparable>(1.0' 2.0);
Magic Number,System.Windows.Controls.DataVisualization.Charting,LogarithmicAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\LogarithmicAxis.cs,GetValueAtPosition,The following statement contains a magic number: if (ActualRange.HasData && ActualLength != 0.0)              {                  if (value.Unit == Unit.Pixels)                  {                      double coordinate = value.Value;                      Range<double> actualDoubleRange = ActualRange.ToDoubleRange();                        double output =                          Math.Pow                          (                              10'                              coordinate *                              Math.Log10(actualDoubleRange.Maximum / actualDoubleRange.Minimum) /                              ActualLength                          )                          *                          actualDoubleRange.Minimum;                        return output;                  }                  else                  {                      throw new NotImplementedException();                  }              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: try              {                  IList<UnitValue> intervals = Axis.InternalGetMajorGridLinePositions().ToList();                    this.Children.Clear();                    double maximumHeight = Math.Max(Math.Round(ActualHeight - 1)' 0);                  double maximumWidth = Math.Max(Math.Round(ActualWidth - 1)' 0);                  for (int index = 0; index < intervals.Count; index++)                  {                      double currentValue = intervals[index].Value;                        double position = currentValue;                      if (!double.IsNaN(position))                      {                          Line line = _gridLinePool.Next();                          if (Axis.Orientation == AxisOrientation.Y)                          {                              line.Y1 = line.Y2 = maximumHeight - Math.Round(position - (line.StrokeThickness / 2));                              line.X1 = 0.0;                              line.X2 = maximumWidth;                          }                          else if (Axis.Orientation == AxisOrientation.X)                          {                              line.X1 = line.X2 = Math.Round(position - (line.StrokeThickness / 2));                              line.Y1 = 0.0;                              line.Y2 = maximumHeight;                          }                          // workaround for '1px line thickness issue'                          if (line.StrokeThickness % 2 > 0)                          {                              line.SetValue(Canvas.LeftProperty' 0.5);                              line.SetValue(Canvas.TopProperty' 0.5);                          }                          this.Children.Add(line);                      }                  }              }              finally              {                  _gridLinePool.Done();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: try              {                  IList<UnitValue> intervals = Axis.InternalGetMajorGridLinePositions().ToList();                    this.Children.Clear();                    double maximumHeight = Math.Max(Math.Round(ActualHeight - 1)' 0);                  double maximumWidth = Math.Max(Math.Round(ActualWidth - 1)' 0);                  for (int index = 0; index < intervals.Count; index++)                  {                      double currentValue = intervals[index].Value;                        double position = currentValue;                      if (!double.IsNaN(position))                      {                          Line line = _gridLinePool.Next();                          if (Axis.Orientation == AxisOrientation.Y)                          {                              line.Y1 = line.Y2 = maximumHeight - Math.Round(position - (line.StrokeThickness / 2));                              line.X1 = 0.0;                              line.X2 = maximumWidth;                          }                          else if (Axis.Orientation == AxisOrientation.X)                          {                              line.X1 = line.X2 = Math.Round(position - (line.StrokeThickness / 2));                              line.Y1 = 0.0;                              line.Y2 = maximumHeight;                          }                          // workaround for '1px line thickness issue'                          if (line.StrokeThickness % 2 > 0)                          {                              line.SetValue(Canvas.LeftProperty' 0.5);                              line.SetValue(Canvas.TopProperty' 0.5);                          }                          this.Children.Add(line);                      }                  }              }              finally              {                  _gridLinePool.Done();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: try              {                  IList<UnitValue> intervals = Axis.InternalGetMajorGridLinePositions().ToList();                    this.Children.Clear();                    double maximumHeight = Math.Max(Math.Round(ActualHeight - 1)' 0);                  double maximumWidth = Math.Max(Math.Round(ActualWidth - 1)' 0);                  for (int index = 0; index < intervals.Count; index++)                  {                      double currentValue = intervals[index].Value;                        double position = currentValue;                      if (!double.IsNaN(position))                      {                          Line line = _gridLinePool.Next();                          if (Axis.Orientation == AxisOrientation.Y)                          {                              line.Y1 = line.Y2 = maximumHeight - Math.Round(position - (line.StrokeThickness / 2));                              line.X1 = 0.0;                              line.X2 = maximumWidth;                          }                          else if (Axis.Orientation == AxisOrientation.X)                          {                              line.X1 = line.X2 = Math.Round(position - (line.StrokeThickness / 2));                              line.Y1 = 0.0;                              line.Y2 = maximumHeight;                          }                          // workaround for '1px line thickness issue'                          if (line.StrokeThickness % 2 > 0)                          {                              line.SetValue(Canvas.LeftProperty' 0.5);                              line.SetValue(Canvas.TopProperty' 0.5);                          }                          this.Children.Add(line);                      }                  }              }              finally              {                  _gridLinePool.Done();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: try              {                  IList<UnitValue> intervals = Axis.InternalGetMajorGridLinePositions().ToList();                    this.Children.Clear();                    double maximumHeight = Math.Max(Math.Round(ActualHeight - 1)' 0);                  double maximumWidth = Math.Max(Math.Round(ActualWidth - 1)' 0);                  for (int index = 0; index < intervals.Count; index++)                  {                      double currentValue = intervals[index].Value;                        double position = currentValue;                      if (!double.IsNaN(position))                      {                          Line line = _gridLinePool.Next();                          if (Axis.Orientation == AxisOrientation.Y)                          {                              line.Y1 = line.Y2 = maximumHeight - Math.Round(position - (line.StrokeThickness / 2));                              line.X1 = 0.0;                              line.X2 = maximumWidth;                          }                          else if (Axis.Orientation == AxisOrientation.X)                          {                              line.X1 = line.X2 = Math.Round(position - (line.StrokeThickness / 2));                              line.Y1 = 0.0;                              line.Y2 = maximumHeight;                          }                          // workaround for '1px line thickness issue'                          if (line.StrokeThickness % 2 > 0)                          {                              line.SetValue(Canvas.LeftProperty' 0.5);                              line.SetValue(Canvas.TopProperty' 0.5);                          }                          this.Children.Add(line);                      }                  }              }              finally              {                  _gridLinePool.Done();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,OrientedAxisGridLines,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\OrientedAxisGridLines.cs,Invalidate,The following statement contains a magic number: try              {                  IList<UnitValue> intervals = Axis.InternalGetMajorGridLinePositions().ToList();                    this.Children.Clear();                    double maximumHeight = Math.Max(Math.Round(ActualHeight - 1)' 0);                  double maximumWidth = Math.Max(Math.Round(ActualWidth - 1)' 0);                  for (int index = 0; index < intervals.Count; index++)                  {                      double currentValue = intervals[index].Value;                        double position = currentValue;                      if (!double.IsNaN(position))                      {                          Line line = _gridLinePool.Next();                          if (Axis.Orientation == AxisOrientation.Y)                          {                              line.Y1 = line.Y2 = maximumHeight - Math.Round(position - (line.StrokeThickness / 2));                              line.X1 = 0.0;                              line.X2 = maximumWidth;                          }                          else if (Axis.Orientation == AxisOrientation.X)                          {                              line.X1 = line.X2 = Math.Round(position - (line.StrokeThickness / 2));                              line.Y1 = 0.0;                              line.Y2 = maximumHeight;                          }                          // workaround for '1px line thickness issue'                          if (line.StrokeThickness % 2 > 0)                          {                              line.SetValue(Canvas.LeftProperty' 0.5);                              line.SetValue(Canvas.TopProperty' 0.5);                          }                          this.Children.Add(line);                      }                  }              }              finally              {                  _gridLinePool.Done();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,RangeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\RangeAxis.cs,RenderOriented,The following statement contains a magic number: try              {                  OrientedPanel.Children.Clear();                  if (ActualRange.HasData && !Object.Equals(ActualRange.Minimum' ActualRange.Maximum))                  {                      foreach (IComparable axisValue in GetMajorTickMarkValues(availableSize))                      {                          UnitValue coordinate = GetPlotAreaCoordinate(axisValue' length);                          if (ValueHelper.CanGraph(coordinate.Value))                          {                              Line line = _majorTickMarkPool.Next();                              OrientedPanel.SetCenterCoordinate(line' coordinate.Value);                              OrientedPanel.SetPriority(line' 0);                              OrientedPanel.Children.Add(line);                          }                      }                        foreach (IComparable axisValue in GetMinorTickMarkValues(availableSize))                      {                          UnitValue coordinate = GetPlotAreaCoordinate(axisValue' length);                          if (ValueHelper.CanGraph(coordinate.Value))                          {                              Line line = _minorTickMarkPool.Next();                              OrientedPanel.SetCenterCoordinate(line' coordinate.Value);                              OrientedPanel.SetPriority(line' 0);                              OrientedPanel.Children.Add(line);                          }                      }                        int count = 0;                      foreach (IComparable axisValue in GetLabelValues(availableSize))                      {                          UnitValue coordinate = GetPlotAreaCoordinate(axisValue' length);                          if (ValueHelper.CanGraph(coordinate.Value))                          {                              Control axisLabel = _labelPool.Next();                              PrepareAxisLabel(axisLabel' axisValue);                              OrientedPanel.SetCenterCoordinate(axisLabel' coordinate.Value);                              OrientedPanel.SetPriority(axisLabel' count + 1);                              OrientedPanel.Children.Add(axisLabel);                              count = (count + 1) % 2;                          }                      }                  }              }              finally              {                  _minorTickMarkPool.Done();                  _majorTickMarkPool.Done();                  _labelPool.Done();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,GetPlotAreaCoordinates,The following statement contains a magic number: if (this.ActualAxes.Count >= 2) // && Axes[0] is IRangeAxis && Axes[1] is IRangeAxis)              {                  object yAxisHit = null;                  object xAxisHit = null;                    if (this.ActualAxes[0].Orientation == AxisOrientation.Y)                  {                      if (ActualAxes[0] is IRangeAxis)                      {                          yAxisHit = ((IRangeAxis)this.ActualAxes[0]).GetValueAtPosition(new UnitValue(PlotArea.ActualHeight - position.Y' Unit.Pixels));                        }                      else if (ActualAxes[0] is ICategoryAxis)                      {                          yAxisHit = ((ICategoryAxis)this.ActualAxes[0]).GetCategoryAtPosition(new UnitValue(/*PlotArea.ActualHeight -*/ position.Y' Unit.Pixels));                      }                  }                  if (this.ActualAxes[0].Orientation == AxisOrientation.X)                  {                      if (ActualAxes[0] is IRangeAxis)                      {                          xAxisHit = ((IRangeAxis)this.ActualAxes[0]).GetValueAtPosition(new UnitValue(position.X' Unit.Pixels));                        }                      else if (ActualAxes[0] is ICategoryAxis)                      {                          xAxisHit = ((ICategoryAxis)this.ActualAxes[0]).GetCategoryAtPosition(new UnitValue(position.X' Unit.Pixels));                      }                  }                    if (this.ActualAxes[1].Orientation == AxisOrientation.Y)                  {                      if (ActualAxes[1] is IRangeAxis)                      {                          yAxisHit = ((IRangeAxis)this.ActualAxes[1]).GetValueAtPosition(new UnitValue(PlotArea.ActualHeight - position.Y' Unit.Pixels));                        }                      else if (ActualAxes[1] is ICategoryAxis)                      {                          yAxisHit = ((ICategoryAxis)this.ActualAxes[1]).GetCategoryAtPosition(new UnitValue(/*PlotArea.ActualHeight -*/ position.Y' Unit.Pixels));                      }                  }                  if (this.ActualAxes[1].Orientation == AxisOrientation.X)                  {                      if (ActualAxes[1] is IRangeAxis)                      {                          xAxisHit = ((IRangeAxis)this.ActualAxes[1]).GetValueAtPosition(new UnitValue(position.X' Unit.Pixels));                        }                      else if (ActualAxes[1] is ICategoryAxis)                      {                          xAxisHit = ((ICategoryAxis)this.ActualAxes[1]).GetCategoryAtPosition(new UnitValue(position.X' Unit.Pixels));                      }                  }                                    return new KeyValuePair<object' object>(xAxisHit' yAxisHit);              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,SelectionArea_MouseLeftButtonDown,The following statement contains a magic number: if (Keyboard.Modifiers == ModifierKeys.Control)              {                  //if (currentOrderList != null && currentOrderList.Count <= 7)                  //    return;                    SelectionStartPoint = e.GetPosition((sender as Canvas));                                    if (SelectionRect == null)                  {                      SelectionRect = new Rectangle();                      SelectionArea.Children.Add(SelectionRect);                      Canvas.SetLeft(SelectionRect' SelectionStartPoint.X);                      Canvas.SetTop(SelectionRect' 0);                      SelectionRect.Height = PlotArea.ActualHeight;                      SelectionRect.Opacity = .5;                      SelectionRect.Fill = new SolidColorBrush(Colors.LightGray);                      SelectionRect.Stroke = new SolidColorBrush(Colors.Gray);                      SelectionRect.StrokeThickness = 2.0;                  }                }              else              {                  //LineSeries ls = this.chart1.Series[0] as LineSeries;                    //if (OrdersStack.Count <= 1)                  //{                  //    ls.ItemsSource = orders;                  //    currentOrderList = null;                  //    while (OrdersStack.Count > 0)                  //        OrdersStack.Pop();                  //    return;                  //}                  //else                  //{                  //    OrdersStack.Pop();                  //    currentOrderList = OrdersStack.Pop();                  //    ls.ItemsSource = currentOrderList;                  //}              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,SelectionArea_MouseLeftButtonDown,The following statement contains a magic number: if (Keyboard.Modifiers == ModifierKeys.Control)              {                  //if (currentOrderList != null && currentOrderList.Count <= 7)                  //    return;                    SelectionStartPoint = e.GetPosition((sender as Canvas));                                    if (SelectionRect == null)                  {                      SelectionRect = new Rectangle();                      SelectionArea.Children.Add(SelectionRect);                      Canvas.SetLeft(SelectionRect' SelectionStartPoint.X);                      Canvas.SetTop(SelectionRect' 0);                      SelectionRect.Height = PlotArea.ActualHeight;                      SelectionRect.Opacity = .5;                      SelectionRect.Fill = new SolidColorBrush(Colors.LightGray);                      SelectionRect.Stroke = new SolidColorBrush(Colors.Gray);                      SelectionRect.StrokeThickness = 2.0;                  }                }              else              {                  //LineSeries ls = this.chart1.Series[0] as LineSeries;                    //if (OrdersStack.Count <= 1)                  //{                  //    ls.ItemsSource = orders;                  //    currentOrderList = null;                  //    while (OrdersStack.Count > 0)                  //        OrdersStack.Pop();                  //    return;                  //}                  //else                  //{                  //    OrdersStack.Pop();                  //    currentOrderList = OrdersStack.Pop();                  //    ls.ItemsSource = currentOrderList;                  //}              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartHelper.cs,GetPieChartInfo,The following statement contains a magic number: if (ellipseGeometry != null)  			{  				center = ellipseGeometry.Center;  				arcMidpoint = center + new Vector(ellipseGeometry.RadiusX / Math.Sqrt(2)' -ellipseGeometry.RadiusY / Math.Sqrt(2));  				return true;  			}
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartHelper.cs,GetPieChartInfo,The following statement contains a magic number: if (ellipseGeometry != null)  			{  				center = ellipseGeometry.Center;  				arcMidpoint = center + new Vector(ellipseGeometry.RadiusX / Math.Sqrt(2)' -ellipseGeometry.RadiusY / Math.Sqrt(2));  				return true;  			}
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartHelper.cs,CalculateArcInfo,The following statement contains a magic number: Point chordMidpoint = new Point(0.5 * (startPoint.X + endPoint.X)' 0.5 * (startPoint.Y + endPoint.Y));
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartHelper.cs,CalculateArcInfo,The following statement contains a magic number: Point chordMidpoint = new Point(0.5 * (startPoint.X + endPoint.X)' 0.5 * (startPoint.Y + endPoint.Y));
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartHelper,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartHelper.cs,CalculateArcInfo,The following statement contains a magic number: if (chordLength < DistanceTolerance)  			{  				arcMidpoint = arcSegment.IsLargeArc ? center - (chordMidpoint - center) : chordMidpoint;  			}  			else  			{  				chordDirection /= chordLength;  				Vector radialDirection = new Vector(-chordDirection.Y' chordDirection.X);  				double halfChordLength = 0.5 * chordLength;  				double radialOffset;  				if (radius >= halfChordLength)  				{  					double sectorRadius = Math.Sqrt(radius * radius - halfChordLength * halfChordLength);  					radialOffset = -radius + (arcSegment.IsLargeArc ? -sectorRadius : sectorRadius);  				}  				else  				{  					radialOffset = -halfChordLength;  				}  				if (arcSegment.SweepDirection == SweepDirection.Counterclockwise)  				{  					radialOffset = -radialOffset;  				}  				arcMidpoint = chordMidpoint + radialOffset * radialDirection;  			}
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartLabel.cs,PositionArcMidpoint,The following statement contains a magic number: if (this.contentPart != null)  			{  				Canvas.SetTop(this.contentPart' this.arcMidpoint.Y - 0.5 * this.contentPart.DesiredSize.Height);  				Canvas.SetLeft(this.contentPart' this.arcMidpoint.X - 0.5 * this.contentPart.DesiredSize.Width);  			}
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartLabel.cs,PositionArcMidpoint,The following statement contains a magic number: if (this.contentPart != null)  			{  				Canvas.SetTop(this.contentPart' this.arcMidpoint.Y - 0.5 * this.contentPart.DesiredSize.Height);  				Canvas.SetLeft(this.contentPart' this.arcMidpoint.X - 0.5 * this.contentPart.DesiredSize.Width);  			}
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartLabel.cs,PositionConnected,The following statement contains a magic number: try  		    {  		        this.RemovePolyline();    		        if (this.contentPart != null)  		        {  		            PointCollection newPoints = new PointCollection();    		            // First point  		            newPoints.Add(this.SnapPoint(this.arcMidpoint));    		            // Second point  		            Vector radialDirection = this.arcMidpoint - this.center;  		            radialDirection.Normalize();  		            Point secondPoint = this.arcMidpoint + (radialDirection*10);  		            newPoints.Add(this.SnapPoint(secondPoint));    		            // Third point  		            int sign = Math.Sign(radialDirection.X); // 1 if label is on the right side' -1 if it's on the left.  		            Point thirdPoint = secondPoint + new Vector(sign*20' 0);  		            newPoints.Add(this.SnapPoint(thirdPoint));    		            double contentX = (sign == 1) ? thirdPoint.X : thirdPoint.X - this.contentPart.DesiredSize.Width;  		            double contentY = thirdPoint.Y - 0.5*this.contentPart.DesiredSize.Height;  		            Canvas.SetTop(this.contentPart' contentY);  		            Canvas.SetLeft(this.contentPart' contentX);    		            Polyline polyline = new Polyline();  		            polyline.Points = newPoints;  		            polyline.SetBinding(Polyline.StrokeThicknessProperty' new Binding("LineStrokeThickness") {Source = this});  		            polyline.SetBinding(Polyline.StrokeProperty' new Binding("LineStroke") {Source = this});  		            polyline.StrokeLineJoin = PenLineJoin.Round;    		            this.canvasPart.Children.Add(polyline);  		        }  		    }              catch(Exception)              { }
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartLabel.cs,PositionConnected,The following statement contains a magic number: try  		    {  		        this.RemovePolyline();    		        if (this.contentPart != null)  		        {  		            PointCollection newPoints = new PointCollection();    		            // First point  		            newPoints.Add(this.SnapPoint(this.arcMidpoint));    		            // Second point  		            Vector radialDirection = this.arcMidpoint - this.center;  		            radialDirection.Normalize();  		            Point secondPoint = this.arcMidpoint + (radialDirection*10);  		            newPoints.Add(this.SnapPoint(secondPoint));    		            // Third point  		            int sign = Math.Sign(radialDirection.X); // 1 if label is on the right side' -1 if it's on the left.  		            Point thirdPoint = secondPoint + new Vector(sign*20' 0);  		            newPoints.Add(this.SnapPoint(thirdPoint));    		            double contentX = (sign == 1) ? thirdPoint.X : thirdPoint.X - this.contentPart.DesiredSize.Width;  		            double contentY = thirdPoint.Y - 0.5*this.contentPart.DesiredSize.Height;  		            Canvas.SetTop(this.contentPart' contentY);  		            Canvas.SetLeft(this.contentPart' contentX);    		            Polyline polyline = new Polyline();  		            polyline.Points = newPoints;  		            polyline.SetBinding(Polyline.StrokeThicknessProperty' new Binding("LineStrokeThickness") {Source = this});  		            polyline.SetBinding(Polyline.StrokeProperty' new Binding("LineStroke") {Source = this});  		            polyline.StrokeLineJoin = PenLineJoin.Round;    		            this.canvasPart.Children.Add(polyline);  		        }  		    }              catch(Exception)              { }
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartLabel.cs,PositionConnected,The following statement contains a magic number: try  		    {  		        this.RemovePolyline();    		        if (this.contentPart != null)  		        {  		            PointCollection newPoints = new PointCollection();    		            // First point  		            newPoints.Add(this.SnapPoint(this.arcMidpoint));    		            // Second point  		            Vector radialDirection = this.arcMidpoint - this.center;  		            radialDirection.Normalize();  		            Point secondPoint = this.arcMidpoint + (radialDirection*10);  		            newPoints.Add(this.SnapPoint(secondPoint));    		            // Third point  		            int sign = Math.Sign(radialDirection.X); // 1 if label is on the right side' -1 if it's on the left.  		            Point thirdPoint = secondPoint + new Vector(sign*20' 0);  		            newPoints.Add(this.SnapPoint(thirdPoint));    		            double contentX = (sign == 1) ? thirdPoint.X : thirdPoint.X - this.contentPart.DesiredSize.Width;  		            double contentY = thirdPoint.Y - 0.5*this.contentPart.DesiredSize.Height;  		            Canvas.SetTop(this.contentPart' contentY);  		            Canvas.SetLeft(this.contentPart' contentX);    		            Polyline polyline = new Polyline();  		            polyline.Points = newPoints;  		            polyline.SetBinding(Polyline.StrokeThicknessProperty' new Binding("LineStrokeThickness") {Source = this});  		            polyline.SetBinding(Polyline.StrokeProperty' new Binding("LineStroke") {Source = this});  		            polyline.StrokeLineJoin = PenLineJoin.Round;    		            this.canvasPart.Children.Add(polyline);  		        }  		    }              catch(Exception)              { }
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartLabel.cs,SnapPoint,The following statement contains a magic number: if (lineThickness == intLineThickness)  			{  				if ((intLineThickness % 2) == 1)  				{  					return new Point(Math.Floor(point.X) + 0.5' Math.Floor(point.Y) + 0.5);  				}  				else  				{  					return new Point(Math.Round(point.X)' Math.Round(point.Y));  				}  			}
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartLabel.cs,SnapPoint,The following statement contains a magic number: if (lineThickness == intLineThickness)  			{  				if ((intLineThickness % 2) == 1)  				{  					return new Point(Math.Floor(point.X) + 0.5' Math.Floor(point.Y) + 0.5);  				}  				else  				{  					return new Point(Math.Round(point.X)' Math.Round(point.Y));  				}  			}
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieChartLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartLabel.cs,SnapPoint,The following statement contains a magic number: if (lineThickness == intLineThickness)  			{  				if ((intLineThickness % 2) == 1)  				{  					return new Point(Math.Floor(point.X) + 0.5' Math.Floor(point.Y) + 0.5);  				}  				else  				{  					return new Point(Math.Round(point.X)' Math.Round(point.Y));  				}  			}
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieDataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\PieDataPoint.cs,PieDataPoint,The following statement contains a magic number: if (DesignerProperties.GetIsInDesignMode(this))              {                  // Create default design-mode-friendly settings                  ActualRatio = 0.2;                  SizeChanged += delegate(object sender' SizeChangedEventArgs e)                  {                      // Handle SizeChanged event to update Geometry dynamically                      PieSeries.UpdatePieDataPointGeometry(this' e.NewSize.Width' e.NewSize.Height);                  };              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,FrameworkElementExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\FrameworkElementExtensions.cs,GetActualMargin,The following statement contains a magic number: return length / 2.0;
Magic Number,System.Windows.Controls.DataVisualization.Charting,FrameworkElementExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\FrameworkElementExtensions.cs,GetMargin,The following statement contains a magic number: return length / 2.0;
Magic Number,System.Windows.Controls.DataVisualization.Charting,BarSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The following statement contains a magic number: double segmentHeight = coordinateRangeHeight * 0.8;
Magic Number,System.Windows.Controls.DataVisualization.Charting,BarSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The following statement contains a magic number: double offset = seriesIndex * Math.Round(barHeight) + coordinateRangeHeight * 0.1;
Magic Number,System.Windows.Controls.DataVisualization.Charting,BarSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (GetIsDataPointGrouped(category))              {                  // Multiple DataPoints share this category; offset and overlap them appropriately                  IGrouping<object' DataPoint> categoryGrouping = GetDataPointGroup(category);                  int index = categoryGrouping.IndexOf(dataPoint);                  dataPointY += (index * (barHeight * 0.2)) / (categoryGrouping.Count() - 1);                  barHeight *= 0.8;                  Canvas.SetZIndex(dataPoint' -index);              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,BarSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (GetIsDataPointGrouped(category))              {                  // Multiple DataPoints share this category; offset and overlap them appropriately                  IGrouping<object' DataPoint> categoryGrouping = GetDataPointGroup(category);                  int index = categoryGrouping.IndexOf(dataPoint);                  dataPointY += (index * (barHeight * 0.2)) / (categoryGrouping.Count() - 1);                  barHeight *= 0.8;                  Canvas.SetZIndex(dataPoint' -index);              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,BarSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph(dataPointX) && ValueHelper.CanGraph(dataPointY) && ValueHelper.CanGraph(zeroPointX))              {                  dataPoint.Visibility = Visibility.Visible;                    double top = Math.Round(dataPointY);                  double height = Math.Round(barHeight);                    double left = Math.Round(Math.Min(dataPointX' zeroPointX) - 0.5);                  double right = Math.Round(Math.Max(dataPointX' zeroPointX) - 0.5);                  double width = right - left + 1;                    Canvas.SetLeft(dataPoint' left);                  Canvas.SetTop(dataPoint' top);                  dataPoint.Width = width;                  dataPoint.Height = height;              }              else              {                  dataPoint.Visibility = Visibility.Collapsed;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,BarSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BarSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph(dataPointX) && ValueHelper.CanGraph(dataPointY) && ValueHelper.CanGraph(zeroPointX))              {                  dataPoint.Visibility = Visibility.Visible;                    double top = Math.Round(dataPointY);                  double height = Math.Round(barHeight);                    double left = Math.Round(Math.Min(dataPointX' zeroPointX) - 0.5);                  double right = Math.Round(Math.Max(dataPointX' zeroPointX) - 0.5);                  double width = right - left + 1;                    Canvas.SetLeft(dataPoint' left);                  Canvas.SetTop(dataPoint' top);                  dataPoint.Width = width;                  dataPoint.Height = height;              }              else              {                  dataPoint.Visibility = Visibility.Collapsed;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BubbleSeries.cs,UpdateDataPoint,The following statement contains a magic number: double left =                  (ActualIndependentAxis.GetPlotAreaCoordinate(bubbleDataPoint.ActualIndependentValue)).Value                      - (bubbleDataPoint.Width / 2.0);
Magic Number,System.Windows.Controls.DataVisualization.Charting,BubbleSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\BubbleSeries.cs,UpdateDataPoint,The following statement contains a magic number: double top =                  (PlotAreaSize.Height                      - (bubbleDataPoint.Height / 2.0))                      - ActualDependentRangeAxis.GetPlotAreaCoordinate(bubbleDataPoint.ActualDependentValue).Value;
Magic Number,System.Windows.Controls.DataVisualization.Charting,CandlestickSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\CandlestickSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph(dataPointX))              {                  dataPoint.Height = Math.Abs(highPointY - lowPointY);                  dataPoint.Width = 5.0;                    if (dataPoint.ActualWidth == 0.0 || dataPoint.ActualHeight == 0.0)                      dataPoint.UpdateLayout();                    Canvas.SetLeft(dataPoint'                      Math.Round(dataPointX - (dataPoint.ActualWidth / 2)));                  Canvas.SetTop(dataPoint'                      Math.Round(PlotAreaHeight - highPointY));              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,CandlestickSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\CandlestickSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph(dataPointX))              {                  dataPoint.Height = Math.Abs(highPointY - lowPointY);                  dataPoint.Width = 5.0;                    if (dataPoint.ActualWidth == 0.0 || dataPoint.ActualHeight == 0.0)                      dataPoint.UpdateLayout();                    Canvas.SetLeft(dataPoint'                      Math.Round(dataPointX - (dataPoint.ActualWidth / 2)));                  Canvas.SetTop(dataPoint'                      Math.Round(PlotAreaHeight - highPointY));              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnBarBaseSeries<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnBarBaseSeries.cs,GetValueMargins,The following statement contains a magic number: double dependentValueMargin = this.ActualHeight / 10;
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnBarBaseSeries<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnBarBaseSeries.cs,GetCategoryRange,The following statement contains a magic number: if (categoryAxis != null)              {                  return categoryAxis.GetPlotAreaCoordinateRange(category);              }              else              {                  UnitValue unitValue = ActualIndependentAxis.GetPlotAreaCoordinate(category);                  if (ValueHelper.CanGraph(unitValue.Value) && _dataPointlength.HasValue)                  {                      double halfLength = _dataPointlength.Value / 2.0;                        return new Range<UnitValue>(                          new UnitValue(unitValue.Value - halfLength' unitValue.Unit)'                          new UnitValue(unitValue.Value + halfLength' unitValue.Unit));                  }                    return new Range<UnitValue>();              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The following statement contains a magic number: double segmentWidth = coordinateRangeWidth * 0.8;
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The following statement contains a magic number: double offset = seriesIndex * Math.Round(columnWidth) + coordinateRangeWidth * 0.1;
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (GetIsDataPointGrouped(category))              {                  // Multiple DataPoints share this category; offset and overlap them appropriately                  IGrouping<object' DataPoint> categoryGrouping = GetDataPointGroup(category);                  int index = categoryGrouping.IndexOf(dataPoint);                  dataPointX += (index * (columnWidth * 0.2)) / (categoryGrouping.Count() - 1);                  columnWidth *= 0.8;                  Canvas.SetZIndex(dataPoint' -index);              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (GetIsDataPointGrouped(category))              {                  // Multiple DataPoints share this category; offset and overlap them appropriately                  IGrouping<object' DataPoint> categoryGrouping = GetDataPointGroup(category);                  int index = categoryGrouping.IndexOf(dataPoint);                  dataPointX += (index * (columnWidth * 0.2)) / (categoryGrouping.Count() - 1);                  columnWidth *= 0.8;                  Canvas.SetZIndex(dataPoint' -index);              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph(dataPointY) && ValueHelper.CanGraph(dataPointX) && ValueHelper.CanGraph(zeroPointY))              {                  dataPoint.Visibility = Visibility.Visible;                    double left = Math.Round(dataPointX);                  double width = Math.Round(columnWidth);                    double top = Math.Round(plotAreaHeight - Math.Max(dataPointY' zeroPointY) + 0.5);                  double bottom = Math.Round(plotAreaHeight - Math.Min(dataPointY' zeroPointY) + 0.5);                  double height = bottom - top + 1;                    Canvas.SetLeft(dataPoint' left);                  Canvas.SetTop(dataPoint' top);                  dataPoint.Width = width;                  dataPoint.Height = height;              }              else              {                  dataPoint.Visibility = Visibility.Collapsed;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,ColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ColumnSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph(dataPointY) && ValueHelper.CanGraph(dataPointX) && ValueHelper.CanGraph(zeroPointY))              {                  dataPoint.Visibility = Visibility.Visible;                    double left = Math.Round(dataPointX);                  double width = Math.Round(columnWidth);                    double top = Math.Round(plotAreaHeight - Math.Max(dataPointY' zeroPointY) + 0.5);                  double bottom = Math.Round(plotAreaHeight - Math.Min(dataPointY' zeroPointY) + 0.5);                  double height = bottom - top + 1;                    Canvas.SetLeft(dataPoint' left);                  Canvas.SetTop(dataPoint' top);                  dataPoint.Width = width;                  dataPoint.Height = height;              }              else              {                  dataPoint.Visibility = Visibility.Collapsed;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The following statement contains a magic number: dataPoints.ForEachWithIndex((dataPoint' count) =>              {                  // Create an Animation                  ObjectAnimationUsingKeyFrames objectAnimationUsingKeyFrames = new ObjectAnimationUsingKeyFrames();                  Storyboard.SetTarget(objectAnimationUsingKeyFrames' dataPoint);                  Storyboard.SetTargetProperty(objectAnimationUsingKeyFrames' new PropertyPath("State"));                    // Create a key frame                  DiscreteObjectKeyFrame discreteObjectKeyFrame = new DiscreteObjectKeyFrame();                  discreteObjectKeyFrame.Value = newState;                    // Create the specified animation type                  switch (AnimationSequence)                  {                      case AnimationSequence.Simultaneous:                          discreteObjectKeyFrame.KeyTime = TimeSpan.Zero;                          break;                      case AnimationSequence.FirstToLast:                          discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds(1000 * ((double)count / dataPointCount));                          break;                      case AnimationSequence.LastToFirst:                          discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds(1000 * ((double)(dataPointCount - count - 1) / dataPointCount));                          break;                  }                    // Add the Animation to the Storyboard                  objectAnimationUsingKeyFrames.KeyFrames.Add(discreteObjectKeyFrame);                  stateChangeStoryBoard.Children.Add(objectAnimationUsingKeyFrames);              });
Magic Number,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The following statement contains a magic number: dataPoints.ForEachWithIndex((dataPoint' count) =>              {                  // Create an Animation                  ObjectAnimationUsingKeyFrames objectAnimationUsingKeyFrames = new ObjectAnimationUsingKeyFrames();                  Storyboard.SetTarget(objectAnimationUsingKeyFrames' dataPoint);                  Storyboard.SetTargetProperty(objectAnimationUsingKeyFrames' new PropertyPath("State"));                    // Create a key frame                  DiscreteObjectKeyFrame discreteObjectKeyFrame = new DiscreteObjectKeyFrame();                  discreteObjectKeyFrame.Value = newState;                    // Create the specified animation type                  switch (AnimationSequence)                  {                      case AnimationSequence.Simultaneous:                          discreteObjectKeyFrame.KeyTime = TimeSpan.Zero;                          break;                      case AnimationSequence.FirstToLast:                          discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds(1000 * ((double)count / dataPointCount));                          break;                      case AnimationSequence.LastToFirst:                          discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds(1000 * ((double)(dataPointCount - count - 1) / dataPointCount));                          break;                  }                    // Add the Animation to the Storyboard                  objectAnimationUsingKeyFrames.KeyFrames.Add(discreteObjectKeyFrame);                  stateChangeStoryBoard.Children.Add(objectAnimationUsingKeyFrames);              });
Magic Number,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The following statement contains a magic number: stateChangeStoryBoard.Duration = new Duration(AnimationSequence.Simultaneous == AnimationSequence ?                  TimeSpan.FromTicks(1) :                  TimeSpan.FromMilliseconds(1001));
Magic Number,System.Windows.Controls.DataVisualization.Charting,LineAreaBaseSeries<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\LineAreaBaseSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph(maximum))              {                  double x = ActualIndependentAxis.GetPlotAreaCoordinate(dataPoint.ActualIndependentValue).Value;                  double y = ActualDependentRangeAxis.GetPlotAreaCoordinate(dataPoint.ActualDependentValue).Value;                    if (ValueHelper.CanGraph(x) && ValueHelper.CanGraph(y))                  {                      dataPoint.Visibility = Visibility.Visible;                        double coordinateY = Math.Round(maximum - (y + (dataPoint.ActualHeight / 2)));                      Canvas.SetTop(dataPoint' coordinateY);                      double coordinateX = Math.Round(x - (dataPoint.ActualWidth / 2));                      Canvas.SetLeft(dataPoint' coordinateX);                  }                  else                  {                      dataPoint.Visibility = Visibility.Collapsed;                  }              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,LineAreaBaseSeries<T>,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\LineAreaBaseSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph(maximum))              {                  double x = ActualIndependentAxis.GetPlotAreaCoordinate(dataPoint.ActualIndependentValue).Value;                  double y = ActualDependentRangeAxis.GetPlotAreaCoordinate(dataPoint.ActualDependentValue).Value;                    if (ValueHelper.CanGraph(x) && ValueHelper.CanGraph(y))                  {                      dataPoint.Visibility = Visibility.Visible;                        double coordinateY = Math.Round(maximum - (y + (dataPoint.ActualHeight / 2)));                      Canvas.SetTop(dataPoint' coordinateY);                      double coordinateX = Math.Round(x - (dataPoint.ActualWidth / 2));                      Canvas.SetLeft(dataPoint' coordinateX);                  }                  else                  {                      dataPoint.Visibility = Visibility.Collapsed;                  }              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,ConvertRatioOfRotationToPoint,The following statement contains a magic number: double radians = (((ratio * 360) - 90) * (Math.PI / 180));
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,ConvertRatioOfRotationToPoint,The following statement contains a magic number: double radians = (((ratio * 360) - 90) * (Math.PI / 180));
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,ConvertRatioOfRotationToPoint,The following statement contains a magic number: double radians = (((ratio * 360) - 90) * (Math.PI / 180));
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,UpdatePieDataPointGeometry,The following statement contains a magic number: diameter *= 0.95;
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,UpdatePieDataPointGeometry,The following statement contains a magic number: double plotAreaRadius = diameter / 2;
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,UpdatePieDataPointGeometry,The following statement contains a magic number: Point translatePoint = new Point(plotAreaWidth / 2' plotAreaHeight / 2);
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,UpdatePieDataPointGeometry,The following statement contains a magic number: Point translatePoint = new Point(plotAreaWidth / 2' plotAreaHeight / 2);
Magic Number,System.Windows.Controls.DataVisualization.Charting,PieSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\PieSeries.cs,UpdatePieDataPointGeometry,The following statement contains a magic number: if (pieDataPoint.ActualRatio == 1)              {                  foreach (DependencyProperty dependencyProperty in new DependencyProperty[] { PieDataPoint.GeometryProperty' PieDataPoint.GeometrySelectionProperty' PieDataPoint.GeometryHighlightProperty })                  {                      Geometry geometry =                          new EllipseGeometry                          {                              Center = translatePoint'                              RadiusX = sliceRadius'                              RadiusY = sliceRadius                          };                      pieDataPoint.SetValue(dependencyProperty' geometry);                  }              }              else              {                  if (pieDataPoint.ActualRatio == 0.0)                  {                      pieDataPoint.Geometry = null;                      pieDataPoint.GeometryHighlight = null;                      pieDataPoint.GeometrySelection = null;                  }                  else                  {                      double ratio = pieDataPoint.ActualRatio;                      double offsetRatio = pieDataPoint.ActualOffsetRatio;                      double currentRatio = offsetRatio + ratio;                        Point offsetRatioPoint = ConvertRatioOfRotationToPoint(offsetRatio' sliceRadius' sliceRadius);                        Point adjustedOffsetRatioPoint = offsetRatioPoint.Translate(translatePoint);                        // Calculate the last clockwise point in the pie slice                      Point currentRatioPoint =                          ConvertRatioOfRotationToPoint(currentRatio' sliceRadius' sliceRadius);                        // Adjust point using center of plot area as origin                      // instead of 0'0                      Point adjustedCurrentRatioPoint =                          currentRatioPoint.Translate(translatePoint);                        foreach (DependencyProperty dependencyProperty in new DependencyProperty[] { PieDataPoint.GeometryProperty' PieDataPoint.GeometrySelectionProperty' PieDataPoint.GeometryHighlightProperty })                      {                          // Creating the pie slice geometry object                          PathFigure pathFigure = new PathFigure { IsClosed = true };                          pathFigure.StartPoint = translatePoint;                          pathFigure.Segments.Add(new LineSegment { Point = adjustedOffsetRatioPoint });                          bool isLargeArc = (currentRatio - offsetRatio) > 0.5;                          pathFigure.Segments.Add(                              new ArcSegment                              {                                  Point = adjustedCurrentRatioPoint'                                  IsLargeArc = isLargeArc'                                  Size = new Size(sliceRadius' sliceRadius)'                                  SweepDirection = SweepDirection.Clockwise                              });                            PathGeometry pathGeometry = new PathGeometry();                          pathGeometry.Figures.Add(pathFigure);                          pieDataPoint.SetValue(dependencyProperty' pathGeometry);                      }                  }              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,ScatterSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ScatterSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph(dataPointX) && ValueHelper.CanGraph(dataPointY))              {                  dataPoint.Visibility = Visibility.Visible;                    // Set the Position                  Canvas.SetLeft(                      dataPoint'                      Math.Round(dataPointX - (dataPoint.ActualWidth / 2)));                  Canvas.SetTop(                      dataPoint'                      Math.Round(PlotAreaHeight - (dataPointY + (dataPoint.ActualHeight / 2))));              }              else              {                  dataPoint.Visibility = Visibility.Collapsed;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,ScatterSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\ScatterSeries.cs,UpdateDataPoint,The following statement contains a magic number: if (ValueHelper.CanGraph(dataPointX) && ValueHelper.CanGraph(dataPointY))              {                  dataPoint.Visibility = Visibility.Visible;                    // Set the Position                  Canvas.SetLeft(                      dataPoint'                      Math.Round(dataPointX - (dataPoint.ActualWidth / 2)));                  Canvas.SetTop(                      dataPoint'                      Math.Round(PlotAreaHeight - (dataPointY + (dataPoint.ActualHeight / 2))));              }              else              {                  dataPoint.Visibility = Visibility.Collapsed;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,SplineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SplineSeries.cs,UpdateShapeFromPoints,The following statement contains a magic number: if (points.Any())              {                  PointCollection pointCollection = new PointCollection();                  foreach (Point point in points)                  {                      pointCollection.Add(point);                  }                    //At least two points are necessary to generate a proper spline                  if (pointCollection.Count >= 2)                  {                      PathGeometry geometry = new PathGeometry();                      PathFigure figure = new PathFigure();                        PointCollection bezierPoints = GetBezierPoints(pointCollection);                        figure.StartPoint = bezierPoints[0];                      for (int i = 1; i < bezierPoints.Count; i += 3)                      {                          figure.Segments.Add(new BezierSegment()                          {                              Point1 = bezierPoints[i]'                              Point2 = bezierPoints[i + 1]'                              Point3 = bezierPoints[i + 2]                          });                      }                        geometry.Figures.Add(figure);                      SplinePoints = geometry;                  }                  else                  {                      SplinePoints = null;                  }                    Points = pointCollection;              }              else              {                  Points = null;                  SplinePoints = null;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,SplineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SplineSeries.cs,UpdateShapeFromPoints,The following statement contains a magic number: if (points.Any())              {                  PointCollection pointCollection = new PointCollection();                  foreach (Point point in points)                  {                      pointCollection.Add(point);                  }                    //At least two points are necessary to generate a proper spline                  if (pointCollection.Count >= 2)                  {                      PathGeometry geometry = new PathGeometry();                      PathFigure figure = new PathFigure();                        PointCollection bezierPoints = GetBezierPoints(pointCollection);                        figure.StartPoint = bezierPoints[0];                      for (int i = 1; i < bezierPoints.Count; i += 3)                      {                          figure.Segments.Add(new BezierSegment()                          {                              Point1 = bezierPoints[i]'                              Point2 = bezierPoints[i + 1]'                              Point3 = bezierPoints[i + 2]                          });                      }                        geometry.Figures.Add(figure);                      SplinePoints = geometry;                  }                  else                  {                      SplinePoints = null;                  }                    Points = pointCollection;              }              else              {                  Points = null;                  SplinePoints = null;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,SplineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SplineSeries.cs,UpdateShapeFromPoints,The following statement contains a magic number: if (points.Any())              {                  PointCollection pointCollection = new PointCollection();                  foreach (Point point in points)                  {                      pointCollection.Add(point);                  }                    //At least two points are necessary to generate a proper spline                  if (pointCollection.Count >= 2)                  {                      PathGeometry geometry = new PathGeometry();                      PathFigure figure = new PathFigure();                        PointCollection bezierPoints = GetBezierPoints(pointCollection);                        figure.StartPoint = bezierPoints[0];                      for (int i = 1; i < bezierPoints.Count; i += 3)                      {                          figure.Segments.Add(new BezierSegment()                          {                              Point1 = bezierPoints[i]'                              Point2 = bezierPoints[i + 1]'                              Point3 = bezierPoints[i + 2]                          });                      }                        geometry.Figures.Add(figure);                      SplinePoints = geometry;                  }                  else                  {                      SplinePoints = null;                  }                    Points = pointCollection;              }              else              {                  Points = null;                  SplinePoints = null;              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,SplineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SplineSeries.cs,GetB1,The following statement contains a magic number: return new Point(pts[i].X + derivedPoint.X / 3' pts[i].Y + derivedPoint.Y / 3);
Magic Number,System.Windows.Controls.DataVisualization.Charting,SplineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SplineSeries.cs,GetB1,The following statement contains a magic number: return new Point(pts[i].X + derivedPoint.X / 3' pts[i].Y + derivedPoint.Y / 3);
Magic Number,System.Windows.Controls.DataVisualization.Charting,SplineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SplineSeries.cs,GetB2,The following statement contains a magic number: return new Point(pts[i + 1].X - derivedPoint.X / 3' pts[i + 1].Y - derivedPoint.Y / 3);
Magic Number,System.Windows.Controls.DataVisualization.Charting,SplineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SplineSeries.cs,GetB2,The following statement contains a magic number: return new Point(pts[i + 1].X - derivedPoint.X / 3' pts[i + 1].Y - derivedPoint.Y / 3);
Magic Number,System.Windows.Controls.DataVisualization.Charting,SplineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\SplineSeries.cs,GetDerivative,The following statement contains a magic number: if (pts.Count < 2)                  throw new ArgumentOutOfRangeException("pts"' "Data must contain at least two points.");
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,DataPointSizeChanged,The following statement contains a magic number: Canvas.SetLeft(dataItem.Container' Math.Round(dataItem.CenterPoint.X - (newWidth / 2)));
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,DataPointSizeChanged,The following statement contains a magic number: Canvas.SetTop(dataItem.Container' Math.Round(dataItem.CenterPoint.Y - (newHeight / 2)));
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,DataPointSizeChanged,The following statement contains a magic number: double heightMargin = newHeight * (3.0 / 4.0);
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,DataPointSizeChanged,The following statement contains a magic number: double heightMargin = newHeight * (3.0 / 4.0);
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,DataPointSizeChanged,The following statement contains a magic number: double widthMargin = newWidth * (3.0 / 4.0);
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,DataPointSizeChanged,The following statement contains a magic number: double widthMargin = newWidth * (3.0 / 4.0);
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,IValueMarginProviderGetValueMargins,The following statement contains a magic number: if (IsStacked100 && (valueMarginConsumer == ActualDependentAxis))              {                  return Enumerable.Empty<ValueMargin>();              }              else if ((valueMarginConsumer == ActualDependentAxis) || (valueMarginConsumer == ActualIndependentAxis))              {                  Range<IComparable> range = IRangeProviderGetRange((IRangeConsumer)valueMarginConsumer);                  double margin = DataItems                      .Select(di =>                      {                          return (null != di.DataPoint) ?                              (valueMarginConsumer == ActualDependentAxis) ? di.DataPoint.ActualHeight : di.DataPoint.ActualWidth :                              0;                      })                      .Average() * (3.0 / 4.0);                  return new ValueMargin[]                  {                      new ValueMargin(range.Minimum' margin' margin)'                      new ValueMargin(range.Maximum' margin' margin)'                  };              }              else              {                  return base.IValueMarginProviderGetValueMargins(valueMarginConsumer);              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,IValueMarginProviderGetValueMargins,The following statement contains a magic number: if (IsStacked100 && (valueMarginConsumer == ActualDependentAxis))              {                  return Enumerable.Empty<ValueMargin>();              }              else if ((valueMarginConsumer == ActualDependentAxis) || (valueMarginConsumer == ActualIndependentAxis))              {                  Range<IComparable> range = IRangeProviderGetRange((IRangeConsumer)valueMarginConsumer);                  double margin = DataItems                      .Select(di =>                      {                          return (null != di.DataPoint) ?                              (valueMarginConsumer == ActualDependentAxis) ? di.DataPoint.ActualHeight : di.DataPoint.ActualWidth :                              0;                      })                      .Average() * (3.0 / 4.0);                  return new ValueMargin[]                  {                      new ValueMargin(range.Minimum' margin' margin)'                      new ValueMargin(range.Maximum' margin' margin)'                  };              }              else              {                  return base.IValueMarginProviderGetValueMargins(valueMarginConsumer);              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,UpdateDataItemPlacement,The following statement contains a magic number: if ((null != ActualDependentAxis) && (null != ActualIndependentAxis))              {                  double plotAreaMaximumDependentCoordinate = ActualDependentAxis.GetPlotAreaCoordinate(ActualDependentRangeAxis.Range.Maximum).Value;                  double lineTopBuffer = 1;                  List<Point>[] points = new List<Point>[SeriesDefinitions.Count];                  for (int i = 0; i < points.Length; i++)                  {                      points[i] = new List<Point>();                  }                  foreach (IndependentValueGroup group in IndependentValueGroupsOrderedByIndependentValue)                  {                      double sum = IsStacked100 ?                          group.DataItems.Sum(di => Math.Abs(ValueHelper.ToDouble(di.DataPoint.ActualDependentValue))) :                          1;                      if (0 == sum)                      {                          sum = 1;                      }                      double x = ActualIndependentAxis.GetPlotAreaCoordinate(group.IndependentValue).Value;                      if (ValueHelper.CanGraph(x))                      {                          double lastValue = 0;                          Point lastPoint = new Point(x' Math.Max(plotAreaMaximumDependentCoordinate - ActualDependentRangeAxis.GetPlotAreaCoordinate(lastValue).Value' lineTopBuffer));                          int i = -1;                          SeriesDefinition lastDefinition = null;                          foreach (DataItem dataItem in group.DataItems)                          {                              if (lastDefinition != dataItem.SeriesDefinition)                              {                                  i++;                              }                                while (dataItem.SeriesDefinition != SeriesDefinitions[i])                              {                                  points[i].Add(lastPoint);                                  i++;                              }                                DataPoint dataPoint = dataItem.DataPoint;                              double value = IsStacked100 ?                                  (ValueHelper.ToDouble(dataItem.DataPoint.ActualDependentValue) * (100 / sum)) :                                  ValueHelper.ToDouble(dataItem.DataPoint.ActualDependentValue);                              if (ValueHelper.CanGraph(value))                              {                                  value += lastValue;                                  dataItem.ActualStackedDependentValue = value;                                  double y = ActualDependentRangeAxis.GetPlotAreaCoordinate(value).Value;                                  lastValue = value;                                  lastPoint.Y = Math.Max(plotAreaMaximumDependentCoordinate - y' lineTopBuffer);                                  points[i].Add(lastPoint);                                    dataItem.CenterPoint = new Point(x' plotAreaMaximumDependentCoordinate - y);                                  double left = dataItem.CenterPoint.X - (dataPoint.ActualWidth / 2);                                  double top = dataItem.CenterPoint.Y - (dataPoint.ActualHeight / 2);                                    Canvas.SetLeft(dataItem.Container' Math.Round(left));                                  Canvas.SetTop(dataItem.Container' Math.Round(top));                                  dataPoint.Visibility = Visibility.Visible;                              }                              else                              {                                  points[i].Add(lastPoint);                                  dataPoint.Visibility = Visibility.Collapsed;                              }                                lastDefinition = dataItem.SeriesDefinition;                          }                      }                      else                      {                          foreach (DataPoint dataPoint in group.DataItems.Select(di => di.DataPoint))                          {                              dataPoint.Visibility = Visibility.Collapsed;                          }                      }                  }                  UpdateShape(points);              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,UpdateDataItemPlacement,The following statement contains a magic number: if ((null != ActualDependentAxis) && (null != ActualIndependentAxis))              {                  double plotAreaMaximumDependentCoordinate = ActualDependentAxis.GetPlotAreaCoordinate(ActualDependentRangeAxis.Range.Maximum).Value;                  double lineTopBuffer = 1;                  List<Point>[] points = new List<Point>[SeriesDefinitions.Count];                  for (int i = 0; i < points.Length; i++)                  {                      points[i] = new List<Point>();                  }                  foreach (IndependentValueGroup group in IndependentValueGroupsOrderedByIndependentValue)                  {                      double sum = IsStacked100 ?                          group.DataItems.Sum(di => Math.Abs(ValueHelper.ToDouble(di.DataPoint.ActualDependentValue))) :                          1;                      if (0 == sum)                      {                          sum = 1;                      }                      double x = ActualIndependentAxis.GetPlotAreaCoordinate(group.IndependentValue).Value;                      if (ValueHelper.CanGraph(x))                      {                          double lastValue = 0;                          Point lastPoint = new Point(x' Math.Max(plotAreaMaximumDependentCoordinate - ActualDependentRangeAxis.GetPlotAreaCoordinate(lastValue).Value' lineTopBuffer));                          int i = -1;                          SeriesDefinition lastDefinition = null;                          foreach (DataItem dataItem in group.DataItems)                          {                              if (lastDefinition != dataItem.SeriesDefinition)                              {                                  i++;                              }                                while (dataItem.SeriesDefinition != SeriesDefinitions[i])                              {                                  points[i].Add(lastPoint);                                  i++;                              }                                DataPoint dataPoint = dataItem.DataPoint;                              double value = IsStacked100 ?                                  (ValueHelper.ToDouble(dataItem.DataPoint.ActualDependentValue) * (100 / sum)) :                                  ValueHelper.ToDouble(dataItem.DataPoint.ActualDependentValue);                              if (ValueHelper.CanGraph(value))                              {                                  value += lastValue;                                  dataItem.ActualStackedDependentValue = value;                                  double y = ActualDependentRangeAxis.GetPlotAreaCoordinate(value).Value;                                  lastValue = value;                                  lastPoint.Y = Math.Max(plotAreaMaximumDependentCoordinate - y' lineTopBuffer);                                  points[i].Add(lastPoint);                                    dataItem.CenterPoint = new Point(x' plotAreaMaximumDependentCoordinate - y);                                  double left = dataItem.CenterPoint.X - (dataPoint.ActualWidth / 2);                                  double top = dataItem.CenterPoint.Y - (dataPoint.ActualHeight / 2);                                    Canvas.SetLeft(dataItem.Container' Math.Round(left));                                  Canvas.SetTop(dataItem.Container' Math.Round(top));                                  dataPoint.Visibility = Visibility.Visible;                              }                              else                              {                                  points[i].Add(lastPoint);                                  dataPoint.Visibility = Visibility.Collapsed;                              }                                lastDefinition = dataItem.SeriesDefinition;                          }                      }                      else                      {                          foreach (DataPoint dataPoint in group.DataItems.Select(di => di.DataPoint))                          {                              dataPoint.Visibility = Visibility.Collapsed;                          }                      }                  }                  UpdateShape(points);              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedAreaLineSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedAreaLineSeries.cs,UpdateDataItemPlacement,The following statement contains a magic number: if ((null != ActualDependentAxis) && (null != ActualIndependentAxis))              {                  double plotAreaMaximumDependentCoordinate = ActualDependentAxis.GetPlotAreaCoordinate(ActualDependentRangeAxis.Range.Maximum).Value;                  double lineTopBuffer = 1;                  List<Point>[] points = new List<Point>[SeriesDefinitions.Count];                  for (int i = 0; i < points.Length; i++)                  {                      points[i] = new List<Point>();                  }                  foreach (IndependentValueGroup group in IndependentValueGroupsOrderedByIndependentValue)                  {                      double sum = IsStacked100 ?                          group.DataItems.Sum(di => Math.Abs(ValueHelper.ToDouble(di.DataPoint.ActualDependentValue))) :                          1;                      if (0 == sum)                      {                          sum = 1;                      }                      double x = ActualIndependentAxis.GetPlotAreaCoordinate(group.IndependentValue).Value;                      if (ValueHelper.CanGraph(x))                      {                          double lastValue = 0;                          Point lastPoint = new Point(x' Math.Max(plotAreaMaximumDependentCoordinate - ActualDependentRangeAxis.GetPlotAreaCoordinate(lastValue).Value' lineTopBuffer));                          int i = -1;                          SeriesDefinition lastDefinition = null;                          foreach (DataItem dataItem in group.DataItems)                          {                              if (lastDefinition != dataItem.SeriesDefinition)                              {                                  i++;                              }                                while (dataItem.SeriesDefinition != SeriesDefinitions[i])                              {                                  points[i].Add(lastPoint);                                  i++;                              }                                DataPoint dataPoint = dataItem.DataPoint;                              double value = IsStacked100 ?                                  (ValueHelper.ToDouble(dataItem.DataPoint.ActualDependentValue) * (100 / sum)) :                                  ValueHelper.ToDouble(dataItem.DataPoint.ActualDependentValue);                              if (ValueHelper.CanGraph(value))                              {                                  value += lastValue;                                  dataItem.ActualStackedDependentValue = value;                                  double y = ActualDependentRangeAxis.GetPlotAreaCoordinate(value).Value;                                  lastValue = value;                                  lastPoint.Y = Math.Max(plotAreaMaximumDependentCoordinate - y' lineTopBuffer);                                  points[i].Add(lastPoint);                                    dataItem.CenterPoint = new Point(x' plotAreaMaximumDependentCoordinate - y);                                  double left = dataItem.CenterPoint.X - (dataPoint.ActualWidth / 2);                                  double top = dataItem.CenterPoint.Y - (dataPoint.ActualHeight / 2);                                    Canvas.SetLeft(dataItem.Container' Math.Round(left));                                  Canvas.SetTop(dataItem.Container' Math.Round(top));                                  dataPoint.Visibility = Visibility.Visible;                              }                              else                              {                                  points[i].Add(lastPoint);                                  dataPoint.Visibility = Visibility.Collapsed;                              }                                lastDefinition = dataItem.SeriesDefinition;                          }                      }                      else                      {                          foreach (DataPoint dataPoint in group.DataItems.Select(di => di.DataPoint))                          {                              dataPoint.Visibility = Visibility.Collapsed;                          }                      }                  }                  UpdateShape(points);              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,IValueMarginProviderGetValueMargins,The following statement contains a magic number: if (valueMarginConsumer == ActualDependentAxis)              {                  if (IsStacked100)                  {                      return Enumerable.Empty<ValueMargin>();                  }                  else                  {                      Range<IComparable> range = IRangeProviderGetRange((IRangeConsumer)ActualDependentAxis);                      double margin = ((AxisOrientation.Y == ActualDependentAxis.Orientation) ? ActualHeight : ActualWidth) / 10;                      return new ValueMargin[]                      {                          new ValueMargin(range.Minimum' margin' margin)'                          new ValueMargin(range.Maximum' margin' margin)'                      };                  }              }              else if (valueMarginConsumer == ActualIndependentAxis)              {                  // Using a non-ICategoryAxis for the independent axis                  // Relevant space already accounted for by IRangeProviderGetRange                  return Enumerable.Empty<ValueMargin>();              }              else              {                  return base.IValueMarginProviderGetValueMargins(valueMarginConsumer);              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,UpdateDataItemPlacement,The following statement contains a magic number: if ((null != ActualDependentAxis) && (null != actualIndependentAxis))              {                  double plotAreaMaximumDependentCoordinate = ActualDependentAxis.GetPlotAreaCoordinate(ActualDependentRangeAxis.Range.Maximum).Value;                  double zeroCoordinate = ActualDependentAxis.GetPlotAreaCoordinate(ActualDependentRangeAxis.Origin ?? 0.0).Value;                  ICategoryAxis actualIndependentCategoryAxis = actualIndependentAxis as ICategoryAxis;                  double nonCategoryAxisRangeMargin = (null != actualIndependentCategoryAxis) ? 0 : GetMarginForNonCategoryAxis(actualIndependentAxis);                  foreach (IndependentValueGroup group in IndependentValueGroups)                  {                      Range<UnitValue> categoryRange = new Range<UnitValue>();                      if (null != actualIndependentCategoryAxis)                      {                          categoryRange = actualIndependentCategoryAxis.GetPlotAreaCoordinateRange(group.IndependentValue);                      }                      else                      {                          UnitValue independentValueCoordinate = actualIndependentAxis.GetPlotAreaCoordinate(group.IndependentValue);                          if (ValueHelper.CanGraph(independentValueCoordinate.Value))                          {                              categoryRange = new Range<UnitValue>(new UnitValue(independentValueCoordinate.Value - nonCategoryAxisRangeMargin' independentValueCoordinate.Unit)' new UnitValue(independentValueCoordinate.Value + nonCategoryAxisRangeMargin' independentValueCoordinate.Unit));                          }                      }                      if (categoryRange.HasData)                      {                          double categoryMinimumCoordinate = categoryRange.Minimum.Value;                          double categoryMaximumCoordinate = categoryRange.Maximum.Value;                          double padding = 0.1 * (categoryMaximumCoordinate - categoryMinimumCoordinate);                          categoryMinimumCoordinate += padding;                          categoryMaximumCoordinate -= padding;                            double sum = IsStacked100 ?                              group.DataItems.Sum(di => Math.Abs(ValueHelper.ToDouble(di.DataPoint.ActualDependentValue))) :                              1;                          if (0 == sum)                          {                              sum = 1;                          }                          double ceiling = 0;                          double floor = 0;                          foreach (DataItem dataItem in group.DataItems)                          {                              DataPoint dataPoint = dataItem.DataPoint;                              double value = IsStacked100 ? (ValueHelper.ToDouble(dataPoint.ActualDependentValue) * (100 / sum)) : ValueHelper.ToDouble(dataPoint.ActualDependentValue);                              if (ValueHelper.CanGraph(value))                              {                                  double valueCoordinate = ActualDependentAxis.GetPlotAreaCoordinate(value).Value;                                  double fillerCoordinate = (0 <= value) ? ceiling : floor;                                    double topCoordinate = 0' leftCoordinate = 0' height = 0' width = 0' deltaCoordinate = 0;                                  if (AxisOrientation.Y == ActualDependentAxis.Orientation)                                  {                                      topCoordinate = plotAreaMaximumDependentCoordinate - Math.Max(valueCoordinate + fillerCoordinate' zeroCoordinate + fillerCoordinate);                                      double bottomCoordinate = plotAreaMaximumDependentCoordinate - Math.Min(valueCoordinate + fillerCoordinate' zeroCoordinate + fillerCoordinate);                                      deltaCoordinate = bottomCoordinate - topCoordinate;                                      height = (0 < deltaCoordinate) ? deltaCoordinate + 1 : 0;                                      leftCoordinate = categoryMinimumCoordinate;                                      width = categoryMaximumCoordinate - categoryMinimumCoordinate + 1;                                  }                                  else                                  {                                      leftCoordinate = Math.Min(valueCoordinate + fillerCoordinate' zeroCoordinate + fillerCoordinate);                                      double rightCoordinate = Math.Max(valueCoordinate + fillerCoordinate' zeroCoordinate + fillerCoordinate);                                      deltaCoordinate = rightCoordinate - leftCoordinate;                                      width = (0 < deltaCoordinate) ? deltaCoordinate + 1 : 0;                                      topCoordinate = categoryMinimumCoordinate;                                      height = categoryMaximumCoordinate - categoryMinimumCoordinate + 1;                                  }                                    double roundedTopCoordinate = Math.Round(topCoordinate);                                  Canvas.SetTop(dataItem.Container' roundedTopCoordinate);                                  dataPoint.Height = Math.Round(topCoordinate + height - roundedTopCoordinate);                                  double roundedLeftCoordinate = Math.Round(leftCoordinate);                                  Canvas.SetLeft(dataItem.Container' roundedLeftCoordinate);                                  dataPoint.Width = Math.Round(leftCoordinate + width - roundedLeftCoordinate);                                  dataPoint.Visibility = Visibility.Visible;                                    if (0 <= value)                                  {                                      ceiling += deltaCoordinate;                                  }                                  else                                  {                                      floor -= deltaCoordinate;                                  }                              }                              else                              {                                  dataPoint.Visibility = Visibility.Collapsed;                              }                          }                      }                      else                      {                          foreach (DataPoint dataPoint in group.DataItems.Select(di => di.DataPoint))                          {                              dataPoint.Visibility = Visibility.Collapsed;                          }                      }                  }              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,UpdateDataItemPlacement,The following statement contains a magic number: if ((null != ActualDependentAxis) && (null != actualIndependentAxis))              {                  double plotAreaMaximumDependentCoordinate = ActualDependentAxis.GetPlotAreaCoordinate(ActualDependentRangeAxis.Range.Maximum).Value;                  double zeroCoordinate = ActualDependentAxis.GetPlotAreaCoordinate(ActualDependentRangeAxis.Origin ?? 0.0).Value;                  ICategoryAxis actualIndependentCategoryAxis = actualIndependentAxis as ICategoryAxis;                  double nonCategoryAxisRangeMargin = (null != actualIndependentCategoryAxis) ? 0 : GetMarginForNonCategoryAxis(actualIndependentAxis);                  foreach (IndependentValueGroup group in IndependentValueGroups)                  {                      Range<UnitValue> categoryRange = new Range<UnitValue>();                      if (null != actualIndependentCategoryAxis)                      {                          categoryRange = actualIndependentCategoryAxis.GetPlotAreaCoordinateRange(group.IndependentValue);                      }                      else                      {                          UnitValue independentValueCoordinate = actualIndependentAxis.GetPlotAreaCoordinate(group.IndependentValue);                          if (ValueHelper.CanGraph(independentValueCoordinate.Value))                          {                              categoryRange = new Range<UnitValue>(new UnitValue(independentValueCoordinate.Value - nonCategoryAxisRangeMargin' independentValueCoordinate.Unit)' new UnitValue(independentValueCoordinate.Value + nonCategoryAxisRangeMargin' independentValueCoordinate.Unit));                          }                      }                      if (categoryRange.HasData)                      {                          double categoryMinimumCoordinate = categoryRange.Minimum.Value;                          double categoryMaximumCoordinate = categoryRange.Maximum.Value;                          double padding = 0.1 * (categoryMaximumCoordinate - categoryMinimumCoordinate);                          categoryMinimumCoordinate += padding;                          categoryMaximumCoordinate -= padding;                            double sum = IsStacked100 ?                              group.DataItems.Sum(di => Math.Abs(ValueHelper.ToDouble(di.DataPoint.ActualDependentValue))) :                              1;                          if (0 == sum)                          {                              sum = 1;                          }                          double ceiling = 0;                          double floor = 0;                          foreach (DataItem dataItem in group.DataItems)                          {                              DataPoint dataPoint = dataItem.DataPoint;                              double value = IsStacked100 ? (ValueHelper.ToDouble(dataPoint.ActualDependentValue) * (100 / sum)) : ValueHelper.ToDouble(dataPoint.ActualDependentValue);                              if (ValueHelper.CanGraph(value))                              {                                  double valueCoordinate = ActualDependentAxis.GetPlotAreaCoordinate(value).Value;                                  double fillerCoordinate = (0 <= value) ? ceiling : floor;                                    double topCoordinate = 0' leftCoordinate = 0' height = 0' width = 0' deltaCoordinate = 0;                                  if (AxisOrientation.Y == ActualDependentAxis.Orientation)                                  {                                      topCoordinate = plotAreaMaximumDependentCoordinate - Math.Max(valueCoordinate + fillerCoordinate' zeroCoordinate + fillerCoordinate);                                      double bottomCoordinate = plotAreaMaximumDependentCoordinate - Math.Min(valueCoordinate + fillerCoordinate' zeroCoordinate + fillerCoordinate);                                      deltaCoordinate = bottomCoordinate - topCoordinate;                                      height = (0 < deltaCoordinate) ? deltaCoordinate + 1 : 0;                                      leftCoordinate = categoryMinimumCoordinate;                                      width = categoryMaximumCoordinate - categoryMinimumCoordinate + 1;                                  }                                  else                                  {                                      leftCoordinate = Math.Min(valueCoordinate + fillerCoordinate' zeroCoordinate + fillerCoordinate);                                      double rightCoordinate = Math.Max(valueCoordinate + fillerCoordinate' zeroCoordinate + fillerCoordinate);                                      deltaCoordinate = rightCoordinate - leftCoordinate;                                      width = (0 < deltaCoordinate) ? deltaCoordinate + 1 : 0;                                      topCoordinate = categoryMinimumCoordinate;                                      height = categoryMaximumCoordinate - categoryMinimumCoordinate + 1;                                  }                                    double roundedTopCoordinate = Math.Round(topCoordinate);                                  Canvas.SetTop(dataItem.Container' roundedTopCoordinate);                                  dataPoint.Height = Math.Round(topCoordinate + height - roundedTopCoordinate);                                  double roundedLeftCoordinate = Math.Round(leftCoordinate);                                  Canvas.SetLeft(dataItem.Container' roundedLeftCoordinate);                                  dataPoint.Width = Math.Round(leftCoordinate + width - roundedLeftCoordinate);                                  dataPoint.Visibility = Visibility.Visible;                                    if (0 <= value)                                  {                                      ceiling += deltaCoordinate;                                  }                                  else                                  {                                      floor -= deltaCoordinate;                                  }                              }                              else                              {                                  dataPoint.Visibility = Visibility.Collapsed;                              }                          }                      }                      else                      {                          foreach (DataPoint dataPoint in group.DataItems.Select(di => di.DataPoint))                          {                              dataPoint.Visibility = Visibility.Collapsed;                          }                      }                  }              }
Magic Number,System.Windows.Controls.DataVisualization.Charting,StackedBarColumnSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\StackedBarColumnSeries.cs,GetMarginForNonCategoryAxis,The following statement contains a magic number: if (double.MaxValue == smallestDistance)              {                  // No smallest distance because <= 1 independent values to plot                  FrameworkElement element = axis as FrameworkElement;                  if (null != element)                  {                      // Use width of provided axis so single column scenario looks good                      return element.GetMargin(axis);                  }                  else                  {                      // No information to work with; no idea what margin to return                      throw new NotSupportedException();                  }              }              else              {                  // Found the smallest distance; margin is half of that                  return smallestDistance / 2;              }
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,GetSaturation,The following statement contains a magic number: if (median <= 0.5)              {                  return (float)(max - min) / (max + min);              }
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: double[] t = new double[3];
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: h = h / 360;
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: double q = l < 0.5 ? l * (1 + s) : l + s - (l * s);
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: double p = (2 * l) - q;
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: t[0] = h + (1.0 / 3.0);
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: t[2] = h - (1.0 / 3.0);
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: t[2] = h - (1.0 / 3.0);
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  // t(c)                  if (t[i] < 0)                  {                      t[i] += 1.0;                  }                  else if (t[i] > 1)                  {                      t[i] -= 1.0;                  }                    // Calculate Color(c)                  if (t[i] * 6.0 < 1.0)                  {                      t[i] = p + ((q - p) * 6 * t[i]);                  }                  else if (t[i] * 2.0 < 1.0)                  {                      t[i] = q;                  }                  else if (t[i] * 3.0 < 2.0)                  {                      t[i] = p + ((q - p) * 6 * ((2.0 / 3.0) - t[i]));                  }                  else                  {                      t[i] = p;                  }              }
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  // t(c)                  if (t[i] < 0)                  {                      t[i] += 1.0;                  }                  else if (t[i] > 1)                  {                      t[i] -= 1.0;                  }                    // Calculate Color(c)                  if (t[i] * 6.0 < 1.0)                  {                      t[i] = p + ((q - p) * 6 * t[i]);                  }                  else if (t[i] * 2.0 < 1.0)                  {                      t[i] = q;                  }                  else if (t[i] * 3.0 < 2.0)                  {                      t[i] = p + ((q - p) * 6 * ((2.0 / 3.0) - t[i]));                  }                  else                  {                      t[i] = p;                  }              }
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  // t(c)                  if (t[i] < 0)                  {                      t[i] += 1.0;                  }                  else if (t[i] > 1)                  {                      t[i] -= 1.0;                  }                    // Calculate Color(c)                  if (t[i] * 6.0 < 1.0)                  {                      t[i] = p + ((q - p) * 6 * t[i]);                  }                  else if (t[i] * 2.0 < 1.0)                  {                      t[i] = q;                  }                  else if (t[i] * 3.0 < 2.0)                  {                      t[i] = p + ((q - p) * 6 * ((2.0 / 3.0) - t[i]));                  }                  else                  {                      t[i] = p;                  }              }
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  // t(c)                  if (t[i] < 0)                  {                      t[i] += 1.0;                  }                  else if (t[i] > 1)                  {                      t[i] -= 1.0;                  }                    // Calculate Color(c)                  if (t[i] * 6.0 < 1.0)                  {                      t[i] = p + ((q - p) * 6 * t[i]);                  }                  else if (t[i] * 2.0 < 1.0)                  {                      t[i] = q;                  }                  else if (t[i] * 3.0 < 2.0)                  {                      t[i] = p + ((q - p) * 6 * ((2.0 / 3.0) - t[i]));                  }                  else                  {                      t[i] = p;                  }              }
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  // t(c)                  if (t[i] < 0)                  {                      t[i] += 1.0;                  }                  else if (t[i] > 1)                  {                      t[i] -= 1.0;                  }                    // Calculate Color(c)                  if (t[i] * 6.0 < 1.0)                  {                      t[i] = p + ((q - p) * 6 * t[i]);                  }                  else if (t[i] * 2.0 < 1.0)                  {                      t[i] = q;                  }                  else if (t[i] * 3.0 < 2.0)                  {                      t[i] = p + ((q - p) * 6 * ((2.0 / 3.0) - t[i]));                  }                  else                  {                      t[i] = p;                  }              }
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  // t(c)                  if (t[i] < 0)                  {                      t[i] += 1.0;                  }                  else if (t[i] > 1)                  {                      t[i] -= 1.0;                  }                    // Calculate Color(c)                  if (t[i] * 6.0 < 1.0)                  {                      t[i] = p + ((q - p) * 6 * t[i]);                  }                  else if (t[i] * 2.0 < 1.0)                  {                      t[i] = q;                  }                  else if (t[i] * 3.0 < 2.0)                  {                      t[i] = p + ((q - p) * 6 * ((2.0 / 3.0) - t[i]));                  }                  else                  {                      t[i] = p;                  }              }
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  // t(c)                  if (t[i] < 0)                  {                      t[i] += 1.0;                  }                  else if (t[i] > 1)                  {                      t[i] -= 1.0;                  }                    // Calculate Color(c)                  if (t[i] * 6.0 < 1.0)                  {                      t[i] = p + ((q - p) * 6 * t[i]);                  }                  else if (t[i] * 2.0 < 1.0)                  {                      t[i] = q;                  }                  else if (t[i] * 3.0 < 2.0)                  {                      t[i] = p + ((q - p) * 6 * ((2.0 / 3.0) - t[i]));                  }                  else                  {                      t[i] = p;                  }              }
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  // t(c)                  if (t[i] < 0)                  {                      t[i] += 1.0;                  }                  else if (t[i] > 1)                  {                      t[i] -= 1.0;                  }                    // Calculate Color(c)                  if (t[i] * 6.0 < 1.0)                  {                      t[i] = p + ((q - p) * 6 * t[i]);                  }                  else if (t[i] * 2.0 < 1.0)                  {                      t[i] = q;                  }                  else if (t[i] * 3.0 < 2.0)                  {                      t[i] = p + ((q - p) * 6 * ((2.0 / 3.0) - t[i]));                  }                  else                  {                      t[i] = p;                  }              }
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  // t(c)                  if (t[i] < 0)                  {                      t[i] += 1.0;                  }                  else if (t[i] > 1)                  {                      t[i] -= 1.0;                  }                    // Calculate Color(c)                  if (t[i] * 6.0 < 1.0)                  {                      t[i] = p + ((q - p) * 6 * t[i]);                  }                  else if (t[i] * 2.0 < 1.0)                  {                      t[i] = q;                  }                  else if (t[i] * 3.0 < 2.0)                  {                      t[i] = p + ((q - p) * 6 * ((2.0 / 3.0) - t[i]));                  }                  else                  {                      t[i] = p;                  }              }
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: color.R = (byte)Math.Round(t[0] * 255);
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: color.G = (byte)Math.Round(t[1] * 255);
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: color.B = (byte)Math.Round(t[2] * 255);
Magic Number,System.Windows.Controls,ColorExtensions,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\ColorExtensions.cs,FromAhsl,The following statement contains a magic number: color.B = (byte)Math.Round(t[2] * 255);
Missing Default,System.Windows.Controls.DataVisualization.Charting,DateTimeAxis,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Axis\DateTimeAxis.cs,AlignIntervalStart,The following switch statement is missing a default case: switch (type)              {                  case DateTimeIntervalType.Years:                      int year = (int)((int)(newStartDate.Year / intervalSize) * intervalSize);                      if (year <= 0)                      {                          year = 1;                      }                      newStartDate = new DateTime(year' 1' 1' 0' 0' 0);                      break;                    case DateTimeIntervalType.Months:                      int month = (int)((int)(newStartDate.Month / intervalSize) * intervalSize);                      if (month <= 0)                      {                          month = 1;                      }                      newStartDate = new DateTime(newStartDate.Year' month' 1' 0' 0' 0);                      break;                    case DateTimeIntervalType.Days:                      int day = (int)((int)(newStartDate.Day / intervalSize) * intervalSize);                      if (day <= 0)                      {                          day = 1;                      }                      newStartDate = new DateTime(newStartDate.Year' newStartDate.Month' day' 0' 0' 0);                      break;                    case DateTimeIntervalType.Hours:                      int hour = (int)((int)(newStartDate.Hour / intervalSize) * intervalSize);                      newStartDate = new DateTime(                          newStartDate.Year'                          newStartDate.Month'                          newStartDate.Day'                          hour'                          0'                          0);                      break;                    case DateTimeIntervalType.Minutes:                      int minute = (int)((int)(newStartDate.Minute / intervalSize) * intervalSize);                      newStartDate = new DateTime(                          newStartDate.Year'                          newStartDate.Month'                          newStartDate.Day'                          newStartDate.Hour'                          minute'                          0);                      break;                    case DateTimeIntervalType.Seconds:                      int second = (int)((int)(newStartDate.Second / intervalSize) * intervalSize);                      newStartDate = new DateTime(                          newStartDate.Year'                          newStartDate.Month'                          newStartDate.Day'                          newStartDate.Hour'                          newStartDate.Minute'                          second'                          0);                      break;                    case DateTimeIntervalType.Milliseconds:                      int milliseconds = (int)((int)(newStartDate.Millisecond / intervalSize) * intervalSize);                      newStartDate = new DateTime(                          newStartDate.Year'                          newStartDate.Month'                          newStartDate.Day'                          newStartDate.Hour'                          newStartDate.Minute'                          newStartDate.Second'                          milliseconds);                      break;                    case DateTimeIntervalType.Weeks:                        // Elements that have interval set to weeks should be aligned to the                       // nearest start of week no matter how many weeks is the interval.                      newStartDate = new DateTime(                          newStartDate.Year'                          newStartDate.Month'                          newStartDate.Day'                          0'                          0'                          0);                        newStartDate = newStartDate.AddDays(-((int)newStartDate.DayOfWeek));                      break;              }
Missing Default,System.Windows.Controls.DataVisualization.Charting,Chart,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Chart\Chart.cs,SetEdge,The following switch statement is missing a default case: switch (axis.Location)              {                  case AxisLocation.Bottom:                      EdgePanel.SetEdge(axis' Edge.Bottom);                      break;                  case AxisLocation.Top:                      EdgePanel.SetEdge(axis' Edge.Top);                      break;                  case AxisLocation.Left:                      EdgePanel.SetEdge(axis' Edge.Left);                      break;                  case AxisLocation.Right:                      EdgePanel.SetEdge(axis' Edge.Right);                      break;              }
Missing Default,System.Windows.Controls.DataVisualization.Charting,PieChartLabel,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Pie\PieChartLabel.cs,PositionLabel,The following switch statement is missing a default case: switch (this.DisplayMode)  			{  				case DisplayMode.ArcMidpoint:  					this.PositionArcMidpoint();  					break;  				case DisplayMode.Connected:  					this.PositionConnected();  					break;  				case DisplayMode.AutoMixed:  					this.PositionAutoMixed();  					break;  				case DisplayMode.Auto:  					this.PositionAuto();  					break;  			}
Missing Default,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,OnStatePropertyChanged,The following switch statement is missing a default case: switch (newValue)                      {                          case DataPointState.Showing:                          case DataPointState.Hiding:                              transitionStarted = GoToCurrentRevealState();                              break;                      }
Missing Default,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,OnStatePropertyChanged,The following switch statement is missing a default case: switch (newValue)                          {                              case DataPointState.Showing:                                  State = DataPointState.Normal;                                  break;                              case DataPointState.Hiding:                                  State = DataPointState.Hidden;                                  break;                          }
Missing Default,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,GoToCurrentRevealState,The following switch statement is missing a default case: switch (State)              {                  case DataPointState.Showing:                      if (_haveStateRevealShown)                      {                          stateName = StateRevealShown;                      }                      break;                  case DataPointState.Hiding:                      if (_haveStateRevealHidden)                      {                          stateName = StateRevealHidden;                      }                      break;              }
Missing Default,System.Windows.Controls.DataVisualization.Charting,DataPoint,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\DataPoint\DataPoint.cs,OnCurrentStateChanged,The following switch statement is missing a default case: switch (e.NewState.Name)              {                  case StateRevealShown:                      if (State == DataPointState.Showing)                      {                          State = DataPointState.Normal;                      }                      break;                  case StateRevealHidden:                      if (State == DataPointState.Hiding)                      {                          State = DataPointState.Hidden;                      }                      break;              }
Missing Default,System.Windows.Controls.DataVisualization.Charting,DataPointSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DataPointSeries.cs,StaggeredStateChange,The following switch statement is missing a default case: switch (AnimationSequence)                  {                      case AnimationSequence.Simultaneous:                          discreteObjectKeyFrame.KeyTime = TimeSpan.Zero;                          break;                      case AnimationSequence.FirstToLast:                          discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds(1000 * ((double)count / dataPointCount));                          break;                      case AnimationSequence.LastToFirst:                          discreteObjectKeyFrame.KeyTime = TimeSpan.FromMilliseconds(1000 * ((double)(dataPointCount - count - 1) / dataPointCount));                          break;                  }
Missing Default,System.Windows.Controls.DataVisualization.Charting,DefinitionSeries,C:\repos\dotnetprojects_wpftoolkit\WpfToolkit\DataVisualization\Charting\Series\DefinitionSeries.cs,OnSelectionModeChanged,The following switch statement is missing a default case: switch (newValue)                  {                      case SeriesSelectionMode.None:                          _itemContainer.SelectedItem = null;                          _itemContainer.SelectionMode = Controls.SelectionMode.Single;                          break;                      case SeriesSelectionMode.Single:                          _itemContainer.SelectionMode = Controls.SelectionMode.Single;                          break;                      case SeriesSelectionMode.Multiple:                          _itemContainer.SelectionMode = Controls.SelectionMode.Multiple;                          break;                  }
