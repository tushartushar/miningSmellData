Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DeltaEngine.Editor.UIEditor,ControlAdder,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAdder.cs,AddControlToScene,Cyclomatic complexity of the method is 8
Complex Method,DeltaEngine.Editor.UIEditor,ControlAllignmentAndMargins,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAllignmentAndMargins.cs,AllignControlsHorizontal,Cyclomatic complexity of the method is 10
Complex Method,DeltaEngine.Editor.UIEditor,ControlAllignmentAndMargins,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAllignmentAndMargins.cs,AllignControlVertical,Cyclomatic complexity of the method is 10
Complex Method,DeltaEngine.Editor.UIEditor,UIEditorScene,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorScene.cs,ActivateHiddenScene,Cyclomatic complexity of the method is 10
Long Identifier,DeltaEngine.Editor.UIEditor,SceneCodeGenerator,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\SceneCodeGenerator.cs,CreateMethodToControlActionAssignmentString,The length of the parameter methodsToActionAssignmentString is 31.
Long Identifier,DeltaEngine.Editor.UIEditor,SceneCodeGenerator,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\SceneCodeGenerator.cs,CreateMethodToButtonClickEventString,The length of the parameter methodsToButtonClickAssignmentString is 36.
Long Identifier,DeltaEngine.Editor.UIEditor,SceneCodeGenerator,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\SceneCodeGenerator.cs,CreateMethodToSliderValueChangedEventString,The length of the parameter methodsToSliderValueChangedAssignmentString is 43.
Long Statement,DeltaEngine.Editor.UIEditor,ControlAllignmentAndMargins,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAllignmentAndMargins.cs,ChangeBottomMargin,The length of the statement  "			selectedEntity2D.DrawArea = new Rectangle (selectedEntity2D.DrawArea.Left' value - selectedEntity2D.DrawArea.Height' selectedEntity2D.DrawArea.Width' selectedEntity2D.DrawArea.Height); " is 184.
Long Statement,DeltaEngine.Editor.UIEditor,ControlAllignmentAndMargins,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAllignmentAndMargins.cs,ChangeTopMargin,The length of the statement  "			selectedEntity2D.DrawArea = new Rectangle (selectedEntity2D.DrawArea.Left' value' selectedEntity2D.DrawArea.Width' selectedEntity2D.DrawArea.Height); " is 149.
Long Statement,DeltaEngine.Editor.UIEditor,ControlAllignmentAndMargins,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAllignmentAndMargins.cs,ChangeLeftMargin,The length of the statement  "			selectedEntity2D.DrawArea = new Rectangle (value' selectedEntity2D.DrawArea.Top' selectedEntity2D.DrawArea.Width' selectedEntity2D.DrawArea.Height); " is 148.
Long Statement,DeltaEngine.Editor.UIEditor,ControlAllignmentAndMargins,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAllignmentAndMargins.cs,ChangeRightMargin,The length of the statement  "			selectedEntity2D.DrawArea = new Rectangle (value - selectedEntity2D.DrawArea.Width' selectedEntity2D.DrawArea.Top' selectedEntity2D.DrawArea.Width' selectedEntity2D.DrawArea.Height); " is 182.
Long Statement,DeltaEngine.Editor.UIEditor,ControlChanger,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlChanger.cs,SetSelectedControlNameInList,The length of the statement  "	if (uiEditorScene.SelectedEntity2DList.GetType () == typeof(Button) || uiEditorScene.SelectedEntity2DList.GetType () == typeof(InteractiveButton)) " is 146.
Long Statement,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,CreateGeneralOutline,The length of the statement  "	GizmoList [0] = new Sprite (material' new Rectangle (new Vector2D (boudingBox.TopRight.X - 0.02f' boudingBox.TopRight.Y)' new Size (0.02f' 0.02f))); " is 148.
Long Statement,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,CreateGeneralOutline,The length of the statement  "	GizmoList [1] = new Sprite (material' new Rectangle (new Vector2D (boudingBox.BottomRight.X - 0.02f' boudingBox.BottomRight.Y - 0.02f)' new Size (0.02f' 0.02f))); " is 162.
Long Statement,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,MoveImage,The length of the statement  "	if (scene.UISceneGrid.GridWidth == 0 || scene.UISceneGrid.GridHeight == 0 || !scene.IsSnappingToGrid || !scene.IsDrawingGrid) " is 125.
Long Statement,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,MoveImageUsingTheGrid,The length of the statement  "		var sceneSize = ScreenSpace.Current.FromPixelSpace (new Size (scene.SceneResolution.Width' scene.SceneResolution.Height)); " is 122.
Long Statement,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,MoveImageUsingTheGrid,The length of the statement  "		var tileSize = ScreenSpace.Current.FromPixelSpace (new Size (scene.UISceneGrid.GridWidth' scene.UISceneGrid.GridHeight)); " is 121.
Long Statement,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,MoveImageUsingTheGrid,The length of the statement  "		selectedEntity2D.DrawArea = new Rectangle ((tilewidth * columnNumberInGrid) + topLeft.X' (tileheight * rowNumberInGrid) + topLeft.Y' selectedEntity2D.DrawArea.Width' selectedEntity2D.DrawArea.Height); " is 200.
Long Statement,DeltaEngine.Editor.UIEditor,ControlTransformer,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlTransformer.cs,ScaleControl,The length of the statement  "		control.DrawArea = new Rectangle (new Vector2D (control.DrawArea.Left - (distanceX)' control.DrawArea.Top - distanceY)' new Size (control.DrawArea.Width + (distanceX * 2)' control.DrawArea.Height + (distanceY * 2))); " is 216.
Long Statement,DeltaEngine.Editor.UIEditor,SceneCodeGenerator,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\SceneCodeGenerator.cs,CreateMethodToButtonClickEventString,The length of the statement  "	methodsToButtonClickAssignmentString += "			var " + controlName + " = scene.Controls.FirstOrDefault(control => ((Control)control).Name == " + '"' + controlName + '"' + ");\n"; " is 175.
Long Statement,DeltaEngine.Editor.UIEditor,SceneCodeGenerator,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\SceneCodeGenerator.cs,CreateMethodToSliderValueChangedEventString,The length of the statement  "	methodsToSliderValueChangedAssignmentString += "			var " + controlName + " = scene.Controls.FirstOrDefault(control => ((Control)control).Name == " + '"' + controlName + '"' + ");\n"; " is 182.
Long Statement,DeltaEngine.Editor.UIEditor,SceneCodeGenerator,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\SceneCodeGenerator.cs,CreateMethodToSliderValueChangedEventString,The length of the statement  "	methodsToSliderValueChangedAssignmentString += "			" + controlName + ".ValueChanged = () => " + controlName + "ValueChanged(value);\n"; " is 135.
Long Statement,DeltaEngine.Editor.UIEditor,UIEditorScene,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorScene.cs,ClearSceneWhenNotMulitSelecting,The length of the statement  "		if (SelectedEntity2DList [0].GetType () == typeof(Button) && SelectedEntity2DList [0].DrawArea.Contains (mousePosition)) " is 120.
Long Statement,DeltaEngine.Editor.UIEditor,UIControl,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIControl.cs,SetControlSize,The length of the statement  "		control.DrawArea = new Rectangle (control.DrawArea.TopLeft' new Size (((material.DiffuseMap.PixelSize.Width / scene.SceneResolution.Width))' ((material.DiffuseMap.PixelSize.Height / scene.SceneResolution.Width)))); " is 214.
Long Statement,DeltaEngine.Editor.UIEditor,UIControl,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIControl.cs,SetControlSize,The length of the statement  "		control.DrawArea = new Rectangle (control.DrawArea.TopLeft' new Size (((material.DiffuseMap.PixelSize.Width / scene.SceneResolution.Height))' ((material.DiffuseMap.PixelSize.Height / scene.SceneResolution.Height)))); " is 216.
Long Statement,DeltaEngine.Editor.UIEditor,UIControl,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIControl.cs,ChangeToInteractiveButton,The length of the statement  "		if (selectedEntity2D == null || (selectedEntity2D.GetType () != typeof(Button) && selectedEntity2D.GetType () != typeof(InteractiveButton))) " is 140.
Long Statement,DeltaEngine.Editor.UIEditor,UIControl,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIControl.cs,ChangeToInteractiveButton,The length of the statement  "			selectedEntity2D = new InteractiveButton (selectedEntity2D.Get<Theme> ()' selectedEntity2D.DrawArea' ((Button)selectedEntity2D).Text); " is 134.
Long Statement,DeltaEngine.Editor.UIEditor,UIControl,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIControl.cs,ChangeToInteractiveButton,The length of the statement  "			selectedEntity2D = new Button (selectedEntity2D.Get<Theme> ()' selectedEntity2D.DrawArea' ((Button)selectedEntity2D).Text); " is 123.
Long Statement,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,DrawGrid,The length of the statement  "	if (uiEditorScene.SceneResolution.Width <= 0 || uiEditorScene.SceneResolution.Height <= 0 || GridWidth == 0 || GridHeight == 0 || !uiEditorScene.IsDrawingGrid) " is 159.
Long Statement,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CreateLandScapeGrid,The length of the statement  "		LinesInGridList.Add (new Line2D (new Vector2D ((0.5f - xOffset + i * (1 / (sceneSize.Width / tileSize.Width)))' 0.5f - yOffset)' new Vector2D ((0.5f - xOffset + i * (1 / (sceneSize.Width / tileSize.Width)))' 1 - (0.5f - yOffset))' Color.Red)); " is 243.
Long Statement,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CreateLandScapeGrid,The length of the statement  "		LinesInGridList.Add (new Line2D (new Vector2D (0.5f - xOffset' (0.5f - yOffset + j * (1 / (sceneSize.Height / tileSize.Height)) / aspect))' new Vector2D (1 - (0.5f - xOffset)' (0.5f - yOffset + j * (1 / (sceneSize.Height / tileSize.Height)) / aspect))' Color.Red)); " is 265.
Long Statement,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CreatePortraitGrid,The length of the statement  "		LinesInGridList.Add (new Line2D (new Vector2D ((0.5f - xOffset + i * (1 / (sceneSize.Width / tileSize.Width)) * aspect)' 0.5f - yOffset)' new Vector2D ((0.5f - xOffset + i * (1 / (sceneSize.Width / tileSize.Width)) * aspect)' 1 - (0.5f - yOffset))' Color.Red)); " is 261.
Long Statement,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CreatePortraitGrid,The length of the statement  "		LinesInGridList.Add (new Line2D (new Vector2D (0.5f - xOffset' (0.5f - yOffset + j * (1 / (sceneSize.Height / tileSize.Height))))' new Vector2D (1 - (0.5f - xOffset)' (0.5f - yOffset + j * (1 / (sceneSize.Height / tileSize.Height))))' Color.Red)); " is 247.
Long Statement,DeltaEngine.Editor.UIEditor,UIEditorView,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorView.xaml.cs,Init,The length of the statement  "	service.ProjectChanged += () => Dispatcher.Invoke (new Action (uiEditorViewModel.UiEditorScene.RefreshOnContentChange)); " is 120.
Long Statement,DeltaEngine.Editor.UIEditor,UIEditorView,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorView.xaml.cs,Init,The length of the statement  "	service.ContentUpdated += (type' s) => Dispatcher.Invoke (new Action (uiEditorViewModel.UiEditorScene.RefreshOnContentChange)); " is 127.
Complex Conditional,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,MoveImage,The conditional expression  "scene.UISceneGrid.GridWidth == 0 || scene.UISceneGrid.GridHeight == 0 || !scene.IsSnappingToGrid || !scene.IsDrawingGrid"  is complex.
Complex Conditional,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,DrawGrid,The conditional expression  "uiEditorScene.SceneResolution.Width <= 0 || uiEditorScene.SceneResolution.Height <= 0 || GridWidth == 0 || GridHeight == 0 || !uiEditorScene.IsDrawingGrid"  is complex.
Magic Number,DeltaEngine.Editor.UIEditor,ControlAllignmentAndMargins,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAllignmentAndMargins.cs,AllignControlsHorizontal,The following statement contains a magic number: if (value.Contains ("Center"))  	foreach (var selectedEntity2D in uiEditorScene.SelectedEntity2DList)  		ChangeLeftMargin (0.5f - selectedEntity2D.DrawArea.Width / 2);  
Magic Number,DeltaEngine.Editor.UIEditor,ControlAllignmentAndMargins,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAllignmentAndMargins.cs,AllignControlsHorizontal,The following statement contains a magic number: foreach (var selectedEntity2D in uiEditorScene.SelectedEntity2DList)  	ChangeLeftMargin (0.5f - selectedEntity2D.DrawArea.Width / 2);  
Magic Number,DeltaEngine.Editor.UIEditor,ControlAllignmentAndMargins,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAllignmentAndMargins.cs,AllignControlsHorizontal,The following statement contains a magic number: ChangeLeftMargin (0.5f - selectedEntity2D.DrawArea.Width / 2);  
Magic Number,DeltaEngine.Editor.UIEditor,ControlAllignmentAndMargins,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAllignmentAndMargins.cs,AllignControlVertical,The following statement contains a magic number: if (value.Contains ("Center"))  	foreach (var selectedEntity2D in uiEditorScene.SelectedEntity2DList)  		ChangeTopMargin (0.5f - selectedEntity2D.DrawArea.Height / 2);  
Magic Number,DeltaEngine.Editor.UIEditor,ControlAllignmentAndMargins,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAllignmentAndMargins.cs,AllignControlVertical,The following statement contains a magic number: foreach (var selectedEntity2D in uiEditorScene.SelectedEntity2DList)  	ChangeTopMargin (0.5f - selectedEntity2D.DrawArea.Height / 2);  
Magic Number,DeltaEngine.Editor.UIEditor,ControlAllignmentAndMargins,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlAllignmentAndMargins.cs,AllignControlVertical,The following statement contains a magic number: ChangeTopMargin (0.5f - selectedEntity2D.DrawArea.Height / 2);  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,ControlProcessor,The following statement contains a magic number: GizmoList = new Sprite[2];  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,ControlProcessor,The following statement contains a magic number: GeneralOutline = new Line2D[4];  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: foreach (Entity2D selectedControl in selectedControlList) {  	var newOutlineColor = new Line2D[4];  	CreateOutlinesAndGizmos (newOutlineColor);  	if (selectedControl == null)  		return;  	//ncrunch: no coverage  	var rectangleCorners = GetRotatedRectangelCorners (selectedControl.DrawArea' selectedControl.Rotation);  	newOutlineColor [0].StartPoint = rectangleCorners [0];  	newOutlineColor [0].EndPoint = rectangleCorners [1];  	newOutlineColor [1].StartPoint = rectangleCorners [0];  	newOutlineColor [1].EndPoint = rectangleCorners [2];  	newOutlineColor [2].StartPoint = rectangleCorners [2];  	newOutlineColor [2].EndPoint = rectangleCorners [3];  	newOutlineColor [3].StartPoint = rectangleCorners [3];  	newOutlineColor [3].EndPoint = rectangleCorners [1];  	Outlines.Add (newOutlineColor);  }  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: foreach (Entity2D selectedControl in selectedControlList) {  	var newOutlineColor = new Line2D[4];  	CreateOutlinesAndGizmos (newOutlineColor);  	if (selectedControl == null)  		return;  	//ncrunch: no coverage  	var rectangleCorners = GetRotatedRectangelCorners (selectedControl.DrawArea' selectedControl.Rotation);  	newOutlineColor [0].StartPoint = rectangleCorners [0];  	newOutlineColor [0].EndPoint = rectangleCorners [1];  	newOutlineColor [1].StartPoint = rectangleCorners [0];  	newOutlineColor [1].EndPoint = rectangleCorners [2];  	newOutlineColor [2].StartPoint = rectangleCorners [2];  	newOutlineColor [2].EndPoint = rectangleCorners [3];  	newOutlineColor [3].StartPoint = rectangleCorners [3];  	newOutlineColor [3].EndPoint = rectangleCorners [1];  	Outlines.Add (newOutlineColor);  }  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: foreach (Entity2D selectedControl in selectedControlList) {  	var newOutlineColor = new Line2D[4];  	CreateOutlinesAndGizmos (newOutlineColor);  	if (selectedControl == null)  		return;  	//ncrunch: no coverage  	var rectangleCorners = GetRotatedRectangelCorners (selectedControl.DrawArea' selectedControl.Rotation);  	newOutlineColor [0].StartPoint = rectangleCorners [0];  	newOutlineColor [0].EndPoint = rectangleCorners [1];  	newOutlineColor [1].StartPoint = rectangleCorners [0];  	newOutlineColor [1].EndPoint = rectangleCorners [2];  	newOutlineColor [2].StartPoint = rectangleCorners [2];  	newOutlineColor [2].EndPoint = rectangleCorners [3];  	newOutlineColor [3].StartPoint = rectangleCorners [3];  	newOutlineColor [3].EndPoint = rectangleCorners [1];  	Outlines.Add (newOutlineColor);  }  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: foreach (Entity2D selectedControl in selectedControlList) {  	var newOutlineColor = new Line2D[4];  	CreateOutlinesAndGizmos (newOutlineColor);  	if (selectedControl == null)  		return;  	//ncrunch: no coverage  	var rectangleCorners = GetRotatedRectangelCorners (selectedControl.DrawArea' selectedControl.Rotation);  	newOutlineColor [0].StartPoint = rectangleCorners [0];  	newOutlineColor [0].EndPoint = rectangleCorners [1];  	newOutlineColor [1].StartPoint = rectangleCorners [0];  	newOutlineColor [1].EndPoint = rectangleCorners [2];  	newOutlineColor [2].StartPoint = rectangleCorners [2];  	newOutlineColor [2].EndPoint = rectangleCorners [3];  	newOutlineColor [3].StartPoint = rectangleCorners [3];  	newOutlineColor [3].EndPoint = rectangleCorners [1];  	Outlines.Add (newOutlineColor);  }  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: foreach (Entity2D selectedControl in selectedControlList) {  	var newOutlineColor = new Line2D[4];  	CreateOutlinesAndGizmos (newOutlineColor);  	if (selectedControl == null)  		return;  	//ncrunch: no coverage  	var rectangleCorners = GetRotatedRectangelCorners (selectedControl.DrawArea' selectedControl.Rotation);  	newOutlineColor [0].StartPoint = rectangleCorners [0];  	newOutlineColor [0].EndPoint = rectangleCorners [1];  	newOutlineColor [1].StartPoint = rectangleCorners [0];  	newOutlineColor [1].EndPoint = rectangleCorners [2];  	newOutlineColor [2].StartPoint = rectangleCorners [2];  	newOutlineColor [2].EndPoint = rectangleCorners [3];  	newOutlineColor [3].StartPoint = rectangleCorners [3];  	newOutlineColor [3].EndPoint = rectangleCorners [1];  	Outlines.Add (newOutlineColor);  }  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: foreach (Entity2D selectedControl in selectedControlList) {  	var newOutlineColor = new Line2D[4];  	CreateOutlinesAndGizmos (newOutlineColor);  	if (selectedControl == null)  		return;  	//ncrunch: no coverage  	var rectangleCorners = GetRotatedRectangelCorners (selectedControl.DrawArea' selectedControl.Rotation);  	newOutlineColor [0].StartPoint = rectangleCorners [0];  	newOutlineColor [0].EndPoint = rectangleCorners [1];  	newOutlineColor [1].StartPoint = rectangleCorners [0];  	newOutlineColor [1].EndPoint = rectangleCorners [2];  	newOutlineColor [2].StartPoint = rectangleCorners [2];  	newOutlineColor [2].EndPoint = rectangleCorners [3];  	newOutlineColor [3].StartPoint = rectangleCorners [3];  	newOutlineColor [3].EndPoint = rectangleCorners [1];  	Outlines.Add (newOutlineColor);  }  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: foreach (Entity2D selectedControl in selectedControlList) {  	var newOutlineColor = new Line2D[4];  	CreateOutlinesAndGizmos (newOutlineColor);  	if (selectedControl == null)  		return;  	//ncrunch: no coverage  	var rectangleCorners = GetRotatedRectangelCorners (selectedControl.DrawArea' selectedControl.Rotation);  	newOutlineColor [0].StartPoint = rectangleCorners [0];  	newOutlineColor [0].EndPoint = rectangleCorners [1];  	newOutlineColor [1].StartPoint = rectangleCorners [0];  	newOutlineColor [1].EndPoint = rectangleCorners [2];  	newOutlineColor [2].StartPoint = rectangleCorners [2];  	newOutlineColor [2].EndPoint = rectangleCorners [3];  	newOutlineColor [3].StartPoint = rectangleCorners [3];  	newOutlineColor [3].EndPoint = rectangleCorners [1];  	Outlines.Add (newOutlineColor);  }  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: foreach (Entity2D selectedControl in selectedControlList) {  	var newOutlineColor = new Line2D[4];  	CreateOutlinesAndGizmos (newOutlineColor);  	if (selectedControl == null)  		return;  	//ncrunch: no coverage  	var rectangleCorners = GetRotatedRectangelCorners (selectedControl.DrawArea' selectedControl.Rotation);  	newOutlineColor [0].StartPoint = rectangleCorners [0];  	newOutlineColor [0].EndPoint = rectangleCorners [1];  	newOutlineColor [1].StartPoint = rectangleCorners [0];  	newOutlineColor [1].EndPoint = rectangleCorners [2];  	newOutlineColor [2].StartPoint = rectangleCorners [2];  	newOutlineColor [2].EndPoint = rectangleCorners [3];  	newOutlineColor [3].StartPoint = rectangleCorners [3];  	newOutlineColor [3].EndPoint = rectangleCorners [1];  	Outlines.Add (newOutlineColor);  }  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: foreach (Entity2D selectedControl in selectedControlList) {  	var newOutlineColor = new Line2D[4];  	CreateOutlinesAndGizmos (newOutlineColor);  	if (selectedControl == null)  		return;  	//ncrunch: no coverage  	var rectangleCorners = GetRotatedRectangelCorners (selectedControl.DrawArea' selectedControl.Rotation);  	newOutlineColor [0].StartPoint = rectangleCorners [0];  	newOutlineColor [0].EndPoint = rectangleCorners [1];  	newOutlineColor [1].StartPoint = rectangleCorners [0];  	newOutlineColor [1].EndPoint = rectangleCorners [2];  	newOutlineColor [2].StartPoint = rectangleCorners [2];  	newOutlineColor [2].EndPoint = rectangleCorners [3];  	newOutlineColor [3].StartPoint = rectangleCorners [3];  	newOutlineColor [3].EndPoint = rectangleCorners [1];  	Outlines.Add (newOutlineColor);  }  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: newOutlineColor [1].EndPoint = rectangleCorners [2];  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: newOutlineColor [2].StartPoint = rectangleCorners [2];  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: newOutlineColor [2].StartPoint = rectangleCorners [2];  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: newOutlineColor [2].EndPoint = rectangleCorners [3];  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: newOutlineColor [2].EndPoint = rectangleCorners [3];  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: newOutlineColor [3].StartPoint = rectangleCorners [3];  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: newOutlineColor [3].StartPoint = rectangleCorners [3];  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,UpdateOutlines,The following statement contains a magic number: newOutlineColor [3].EndPoint = rectangleCorners [1];  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,CreateOutlinesAndGizmos,The following statement contains a magic number: newLines [0] = new Line2D (Vector2D.Unused' Vector2D.Unused' SelectionColor) {  	RenderLayer = 1000  };  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,CreateOutlinesAndGizmos,The following statement contains a magic number: newLines [1] = new Line2D (Vector2D.Unused' Vector2D.Unused' SelectionColor) {  	RenderLayer = 1000  };  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,CreateOutlinesAndGizmos,The following statement contains a magic number: newLines [2] = new Line2D (Vector2D.Unused' Vector2D.Unused' SelectionColor) {  	RenderLayer = 1000  };  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,CreateOutlinesAndGizmos,The following statement contains a magic number: newLines [2] = new Line2D (Vector2D.Unused' Vector2D.Unused' SelectionColor) {  	RenderLayer = 1000  };  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,CreateOutlinesAndGizmos,The following statement contains a magic number: newLines [3] = new Line2D (Vector2D.Unused' Vector2D.Unused' SelectionColor) {  	RenderLayer = 1000  };  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,CreateOutlinesAndGizmos,The following statement contains a magic number: newLines [3] = new Line2D (Vector2D.Unused' Vector2D.Unused' SelectionColor) {  	RenderLayer = 1000  };  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,GetRotatedRectangelCorners,The following statement contains a magic number: newCorners [2] = rectangle.BottomLeft.RotateAround (rectangle.Center' angle);  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,GetRotatedRectangelCorners,The following statement contains a magic number: newCorners [3] = rectangle.BottomRight.RotateAround (rectangle.Center' angle);  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,CreateGeneralOutline,The following statement contains a magic number: GeneralOutline [2] = new Line2D (boudingBox.BottomLeft' boudingBox.BottomRight' SelectionColor);  
Magic Number,DeltaEngine.Editor.UIEditor,ControlProcessor,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlProcessor.cs,CreateGeneralOutline,The following statement contains a magic number: GeneralOutline [3] = new Line2D (boudingBox.TopRight' boudingBox.BottomRight' SelectionColor);  
Magic Number,DeltaEngine.Editor.UIEditor,ControlTransformer,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlTransformer.cs,ScaleControl,The following statement contains a magic number: foreach (var control in selectedControlList)  	control.DrawArea = new Rectangle (new Vector2D (control.DrawArea.Left - (distanceX)' control.DrawArea.Top - distanceY)' new Size (control.DrawArea.Width + (distanceX * 2)' control.DrawArea.Height + (distanceY * 2)));  
Magic Number,DeltaEngine.Editor.UIEditor,ControlTransformer,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlTransformer.cs,ScaleControl,The following statement contains a magic number: foreach (var control in selectedControlList)  	control.DrawArea = new Rectangle (new Vector2D (control.DrawArea.Left - (distanceX)' control.DrawArea.Top - distanceY)' new Size (control.DrawArea.Width + (distanceX * 2)' control.DrawArea.Height + (distanceY * 2)));  
Magic Number,DeltaEngine.Editor.UIEditor,ControlTransformer,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlTransformer.cs,ScaleControl,The following statement contains a magic number: control.DrawArea = new Rectangle (new Vector2D (control.DrawArea.Left - (distanceX)' control.DrawArea.Top - distanceY)' new Size (control.DrawArea.Width + (distanceX * 2)' control.DrawArea.Height + (distanceY * 2)));  
Magic Number,DeltaEngine.Editor.UIEditor,ControlTransformer,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\ControlTransformer.cs,ScaleControl,The following statement contains a magic number: control.DrawArea = new Rectangle (new Vector2D (control.DrawArea.Left - (distanceX)' control.DrawArea.Top - distanceY)' new Size (control.DrawArea.Width + (distanceX * 2)' control.DrawArea.Height + (distanceY * 2)));  
Magic Number,DeltaEngine.Editor.UIEditor,UIEditorScene,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorScene.cs,InitializeDefaults,The following statement contains a magic number: uiSceneGrid.GridRenderLayer = 10;  
Magic Number,DeltaEngine.Editor.UIEditor,UIEditorScene,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorScene.cs,InitializeDefaults,The following statement contains a magic number: NewGridWidth = 30;  
Magic Number,DeltaEngine.Editor.UIEditor,UIEditorScene,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorScene.cs,InitializeDefaults,The following statement contains a magic number: NewGridHeight = 30;  
Magic Number,DeltaEngine.Editor.UIEditor,UIEditorScene,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorScene.cs,ClearSceneWhenNotMulitSelecting,The following statement contains a magic number: if (SelectedEntity2DList.Count != 0 && SelectedEntity2DList.Count < 2)  	if (SelectedEntity2DList [0].GetType () == typeof(Button) && SelectedEntity2DList [0].DrawArea.Contains (mousePosition))  		uiControl.isClicking = true;  
Magic Number,DeltaEngine.Editor.UIEditor,UIEditorScene,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorScene.cs,RemoveOldestResolutionIfMoreThenTen,The following statement contains a magic number: if (ResolutionList.Count > 9)  	for (int i = 0; i < 10; i++)  		if (i == 9)  			ResolutionList.RemoveAt (i);  		else  			ResolutionList [i] = ResolutionList [i + 1];  
Magic Number,DeltaEngine.Editor.UIEditor,UIEditorScene,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorScene.cs,RemoveOldestResolutionIfMoreThenTen,The following statement contains a magic number: if (ResolutionList.Count > 9)  	for (int i = 0; i < 10; i++)  		if (i == 9)  			ResolutionList.RemoveAt (i);  		else  			ResolutionList [i] = ResolutionList [i + 1];  
Magic Number,DeltaEngine.Editor.UIEditor,UIEditorScene,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorScene.cs,RemoveOldestResolutionIfMoreThenTen,The following statement contains a magic number: if (ResolutionList.Count > 9)  	for (int i = 0; i < 10; i++)  		if (i == 9)  			ResolutionList.RemoveAt (i);  		else  			ResolutionList [i] = ResolutionList [i + 1];  
Magic Number,DeltaEngine.Editor.UIEditor,UIEditorScene,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorScene.cs,RemoveOldestResolutionIfMoreThenTen,The following statement contains a magic number: for (int i = 0; i < 10; i++)  	if (i == 9)  		ResolutionList.RemoveAt (i);  	else  		ResolutionList [i] = ResolutionList [i + 1];  
Magic Number,DeltaEngine.Editor.UIEditor,UIEditorScene,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorScene.cs,RemoveOldestResolutionIfMoreThenTen,The following statement contains a magic number: for (int i = 0; i < 10; i++)  	if (i == 9)  		ResolutionList.RemoveAt (i);  	else  		ResolutionList [i] = ResolutionList [i + 1];  
Magic Number,DeltaEngine.Editor.UIEditor,UIEditorScene,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIEditorScene.cs,RemoveOldestResolutionIfMoreThenTen,The following statement contains a magic number: if (i == 9)  	ResolutionList.RemoveAt (i);  else  	ResolutionList [i] = ResolutionList [i + 1];  
Magic Number,DeltaEngine.Editor.UIEditor,UIControl,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIControl.cs,SetControlSize,The following statement contains a magic number: if (material.DiffuseMap.PixelSize.Width < 10 || material.DiffuseMap.PixelSize.Height < 10)  	return;  
Magic Number,DeltaEngine.Editor.UIEditor,UIControl,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UIControl.cs,SetControlSize,The following statement contains a magic number: if (material.DiffuseMap.PixelSize.Width < 10 || material.DiffuseMap.PixelSize.Height < 10)  	return;  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,UISceneGrid,The following statement contains a magic number: GridHeight = 30;  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,UISceneGrid,The following statement contains a magic number: GridHeight = 30;  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,MoveGridOutlinePoints,The following statement contains a magic number: GridOutline [2].Points [0] = new Vector2D (rect.TopLeft.X' rect.TopLeft.Y + rect.Height);  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,MoveGridOutlinePoints,The following statement contains a magic number: GridOutline [2].Points [1] = new Vector2D (rect.TopLeft.X + rect.Width' rect.TopLeft.Y + rect.Height);  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,MoveGridOutlinePoints,The following statement contains a magic number: GridOutline [3].Points [0] = new Vector2D (rect.TopLeft.X + rect.Width' rect.TopLeft.Y);  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,MoveGridOutlinePoints,The following statement contains a magic number: GridOutline [3].Points [1] = new Vector2D (rect.TopLeft.X + rect.Width' rect.TopLeft.Y + rect.Height);  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CreateGridWithRightResolution,The following statement contains a magic number: if (aspect > 1)  	yOffset = 1 / (2 * aspect);  else if (aspect < 1)  	xOffset = aspect / 2;  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CreateGridWithRightResolution,The following statement contains a magic number: if (aspect > 1)  	yOffset = 1 / (2 * aspect);  else if (aspect < 1)  	xOffset = aspect / 2;  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CreateGridWithRightResolution,The following statement contains a magic number: yOffset = 1 / (2 * aspect);  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CreateGridWithRightResolution,The following statement contains a magic number: if (aspect < 1)  	xOffset = aspect / 2;  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CreateGridWithRightResolution,The following statement contains a magic number: xOffset = aspect / 2;  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CalculateNewTopLeft,The following statement contains a magic number: if (aspect > 1) {  	yOffset = 1 / (2 * aspect);  	width = 1;  	height = width / aspect;  }  else if (aspect < 1) {  	xOffset = aspect / 2;  	height = 1;  	width = height * aspect;  }  else {  	height = 1;  	width = 1;  }  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CalculateNewTopLeft,The following statement contains a magic number: if (aspect > 1) {  	yOffset = 1 / (2 * aspect);  	width = 1;  	height = width / aspect;  }  else if (aspect < 1) {  	xOffset = aspect / 2;  	height = 1;  	width = height * aspect;  }  else {  	height = 1;  	width = 1;  }  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CalculateNewTopLeft,The following statement contains a magic number: yOffset = 1 / (2 * aspect);  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CalculateNewTopLeft,The following statement contains a magic number: if (aspect < 1) {  	xOffset = aspect / 2;  	height = 1;  	width = height * aspect;  }  else {  	height = 1;  	width = 1;  }  
Magic Number,DeltaEngine.Editor.UIEditor,UISceneGrid,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\UIEditor\UISceneGrid.cs,CalculateNewTopLeft,The following statement contains a magic number: xOffset = aspect / 2;  
