Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The length of the statement  "		if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]) || !IsInputParsable (partitions [i + 3])) " is 161.
Long Statement,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The length of the statement  "			color = (Color)TryGetColor (partitions [i] + "'" + partitions [i + 1] + "'" + partitions [i + 2] + "'" + partitions [i + 3]); " is 125.
Long Statement,DeltaEngine.Editor.Converters,SizeGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\SizeGraphStringConverter.cs,FillRangeFromStringPartitions,The length of the statement  "			sizeList.Add (new Size (float.Parse (partitions [i]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 1]' CultureInfo.InvariantCulture))); " is 149.
Long Statement,DeltaEngine.Editor.Converters,ValueRangeGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ValueRangeGraphStringConverter.cs,FillRangeFromStringPartitions,The length of the statement  "			valueRanges.Add (new ValueRange (float.Parse (partitions [i]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 1]' CultureInfo.InvariantCulture))); " is 158.
Long Statement,DeltaEngine.Editor.Converters,VectorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\VectorGraphStringConverter.cs,FillRangeFromStringPartitions,The length of the statement  "		if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2])) " is 120.
Long Statement,DeltaEngine.Editor.Converters,VectorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\VectorGraphStringConverter.cs,FillRangeFromStringPartitions,The length of the statement  "			vectorList.Add (new Vector3D (float.Parse (partitions [i]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 1]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 2]' CultureInfo.InvariantCulture))); " is 219.
Complex Conditional,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The conditional expression  "!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]) || !IsInputParsable (partitions [i + 3])"  is complex.
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,ConvertBack,The following statement contains a magic number: if (stringPartitions.Length % 4 != 0 || stringPartitions.Length < 8)  	return null;  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,ConvertBack,The following statement contains a magic number: if (stringPartitions.Length % 4 != 0 || stringPartitions.Length < 8)  	return null;  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: for (int i = 0; i < partitions.Length - 3; i += 4) {  	if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]) || !IsInputParsable (partitions [i + 3]))  		return null;  	//ncrunch: no coverage  	Color color;  	try {  		color = (Color)TryGetColor (partitions [i] + "'" + partitions [i + 1] + "'" + partitions [i + 2] + "'" + partitions [i + 3]);  	}  	catch (Color.InvalidNumberOfComponents)//ncrunch: no coverage start  	 {  		return null;  	}  	//ncrunch: no coverage end  	colorList.Add (color);  }  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: for (int i = 0; i < partitions.Length - 3; i += 4) {  	if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]) || !IsInputParsable (partitions [i + 3]))  		return null;  	//ncrunch: no coverage  	Color color;  	try {  		color = (Color)TryGetColor (partitions [i] + "'" + partitions [i + 1] + "'" + partitions [i + 2] + "'" + partitions [i + 3]);  	}  	catch (Color.InvalidNumberOfComponents)//ncrunch: no coverage start  	 {  		return null;  	}  	//ncrunch: no coverage end  	colorList.Add (color);  }  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: for (int i = 0; i < partitions.Length - 3; i += 4) {  	if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]) || !IsInputParsable (partitions [i + 3]))  		return null;  	//ncrunch: no coverage  	Color color;  	try {  		color = (Color)TryGetColor (partitions [i] + "'" + partitions [i + 1] + "'" + partitions [i + 2] + "'" + partitions [i + 3]);  	}  	catch (Color.InvalidNumberOfComponents)//ncrunch: no coverage start  	 {  		return null;  	}  	//ncrunch: no coverage end  	colorList.Add (color);  }  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: for (int i = 0; i < partitions.Length - 3; i += 4) {  	if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]) || !IsInputParsable (partitions [i + 3]))  		return null;  	//ncrunch: no coverage  	Color color;  	try {  		color = (Color)TryGetColor (partitions [i] + "'" + partitions [i + 1] + "'" + partitions [i + 2] + "'" + partitions [i + 3]);  	}  	catch (Color.InvalidNumberOfComponents)//ncrunch: no coverage start  	 {  		return null;  	}  	//ncrunch: no coverage end  	colorList.Add (color);  }  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: for (int i = 0; i < partitions.Length - 3; i += 4) {  	if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]) || !IsInputParsable (partitions [i + 3]))  		return null;  	//ncrunch: no coverage  	Color color;  	try {  		color = (Color)TryGetColor (partitions [i] + "'" + partitions [i + 1] + "'" + partitions [i + 2] + "'" + partitions [i + 3]);  	}  	catch (Color.InvalidNumberOfComponents)//ncrunch: no coverage start  	 {  		return null;  	}  	//ncrunch: no coverage end  	colorList.Add (color);  }  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: for (int i = 0; i < partitions.Length - 3; i += 4) {  	if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]) || !IsInputParsable (partitions [i + 3]))  		return null;  	//ncrunch: no coverage  	Color color;  	try {  		color = (Color)TryGetColor (partitions [i] + "'" + partitions [i + 1] + "'" + partitions [i + 2] + "'" + partitions [i + 3]);  	}  	catch (Color.InvalidNumberOfComponents)//ncrunch: no coverage start  	 {  		return null;  	}  	//ncrunch: no coverage end  	colorList.Add (color);  }  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: i += 4
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]) || !IsInputParsable (partitions [i + 3]))  	return null;  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]) || !IsInputParsable (partitions [i + 3]))  	return null;  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: try {  	color = (Color)TryGetColor (partitions [i] + "'" + partitions [i + 1] + "'" + partitions [i + 2] + "'" + partitions [i + 3]);  }  catch (Color.InvalidNumberOfComponents)//ncrunch: no coverage start   {  	return null;  }  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: try {  	color = (Color)TryGetColor (partitions [i] + "'" + partitions [i + 1] + "'" + partitions [i + 2] + "'" + partitions [i + 3]);  }  catch (Color.InvalidNumberOfComponents)//ncrunch: no coverage start   {  	return null;  }  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: color = (Color)TryGetColor (partitions [i] + "'" + partitions [i + 1] + "'" + partitions [i + 2] + "'" + partitions [i + 3]);  
Magic Number,DeltaEngine.Editor.Converters,ColorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ColorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: color = (Color)TryGetColor (partitions [i] + "'" + partitions [i + 1] + "'" + partitions [i + 2] + "'" + partitions [i + 3]);  
Magic Number,DeltaEngine.Editor.Converters,SizeGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\SizeGraphStringConverter.cs,ConvertBack,The following statement contains a magic number: if (stringPartitions.Length % 2 != 0 || stringPartitions.Length < 4)  	return null;  
Magic Number,DeltaEngine.Editor.Converters,SizeGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\SizeGraphStringConverter.cs,ConvertBack,The following statement contains a magic number: if (stringPartitions.Length % 2 != 0 || stringPartitions.Length < 4)  	return null;  
Magic Number,DeltaEngine.Editor.Converters,SizeGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\SizeGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: for (int i = 0; i < partitions.Length - 1; i += 2) {  	if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]))  		return null;  	try {  		sizeList.Add (new Size (float.Parse (partitions [i]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 1]' CultureInfo.InvariantCulture)));  	}  	catch {  		return null;  	}  }  
Magic Number,DeltaEngine.Editor.Converters,SizeGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\SizeGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: i += 2
Magic Number,DeltaEngine.Editor.Converters,SizeStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\SizeStringConverter.cs,ConvertBack,The following statement contains a magic number: if (stringPartitions.Length < 2)  	return null;  
Magic Number,DeltaEngine.Editor.Converters,ValueRangeGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ValueRangeGraphStringConverter.cs,ConvertBack,The following statement contains a magic number: if (stringPartitions.Length % 2 != 0 || stringPartitions.Length < 4)  	return null;  
Magic Number,DeltaEngine.Editor.Converters,ValueRangeGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ValueRangeGraphStringConverter.cs,ConvertBack,The following statement contains a magic number: if (stringPartitions.Length % 2 != 0 || stringPartitions.Length < 4)  	return null;  
Magic Number,DeltaEngine.Editor.Converters,ValueRangeGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ValueRangeGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: for (int i = 0; i < partitions.Length - 1; i += 2) {  	if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]))  		return null;  	try {  		valueRanges.Add (new ValueRange (float.Parse (partitions [i]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 1]' CultureInfo.InvariantCulture)));  	}  	catch {  		return null;  	}  }  
Magic Number,DeltaEngine.Editor.Converters,ValueRangeGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\ValueRangeGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: i += 2
Magic Number,DeltaEngine.Editor.Converters,VectorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\VectorGraphStringConverter.cs,ConvertBack,The following statement contains a magic number: if (stringPartitions.Length % 3 != 0 || stringPartitions.Length < 6)  	return null;  
Magic Number,DeltaEngine.Editor.Converters,VectorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\VectorGraphStringConverter.cs,ConvertBack,The following statement contains a magic number: if (stringPartitions.Length % 3 != 0 || stringPartitions.Length < 6)  	return null;  
Magic Number,DeltaEngine.Editor.Converters,VectorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\VectorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: for (int i = 0; i < partitions.Length - 2; i += 3) {  	if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]))  		return null;  	try {  		vectorList.Add (new Vector3D (float.Parse (partitions [i]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 1]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 2]' CultureInfo.InvariantCulture)));  	}  	catch {  		return null;  	}  }  
Magic Number,DeltaEngine.Editor.Converters,VectorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\VectorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: for (int i = 0; i < partitions.Length - 2; i += 3) {  	if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]))  		return null;  	try {  		vectorList.Add (new Vector3D (float.Parse (partitions [i]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 1]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 2]' CultureInfo.InvariantCulture)));  	}  	catch {  		return null;  	}  }  
Magic Number,DeltaEngine.Editor.Converters,VectorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\VectorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: for (int i = 0; i < partitions.Length - 2; i += 3) {  	if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]))  		return null;  	try {  		vectorList.Add (new Vector3D (float.Parse (partitions [i]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 1]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 2]' CultureInfo.InvariantCulture)));  	}  	catch {  		return null;  	}  }  
Magic Number,DeltaEngine.Editor.Converters,VectorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\VectorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: for (int i = 0; i < partitions.Length - 2; i += 3) {  	if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]))  		return null;  	try {  		vectorList.Add (new Vector3D (float.Parse (partitions [i]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 1]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 2]' CultureInfo.InvariantCulture)));  	}  	catch {  		return null;  	}  }  
Magic Number,DeltaEngine.Editor.Converters,VectorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\VectorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: i += 3
Magic Number,DeltaEngine.Editor.Converters,VectorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\VectorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: if (!IsInputParsable (partitions [i]) || !IsInputParsable (partitions [i + 1]) || !IsInputParsable (partitions [i + 2]))  	return null;  
Magic Number,DeltaEngine.Editor.Converters,VectorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\VectorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: try {  	vectorList.Add (new Vector3D (float.Parse (partitions [i]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 1]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 2]' CultureInfo.InvariantCulture)));  }  catch {  	return null;  }  
Magic Number,DeltaEngine.Editor.Converters,VectorGraphStringConverter,C:\repos\DeltaEngine_DeltaEngine.OpenTK\Editor\Converters\VectorGraphStringConverter.cs,FillRangeFromStringPartitions,The following statement contains a magic number: vectorList.Add (new Vector3D (float.Parse (partitions [i]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 1]' CultureInfo.InvariantCulture)' float.Parse (partitions [i + 2]' CultureInfo.InvariantCulture)));  
